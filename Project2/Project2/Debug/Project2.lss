
Project2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00000bde  00000c72  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000bde  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000326  0080010c  0080010c  00000c7e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c7e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000cb0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  00000cf0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008cc  00000000  00000000  00000dc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000003b3  00000000  00000000  00001694  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000441  00000000  00000000  00001a47  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000298  00000000  00000000  00001e88  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000032c  00000000  00000000  00002120  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000741  00000000  00000000  0000244c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00002b8d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 43 00 	jmp	0x86	; 0x86 <__ctors_end>
   4:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
   8:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
   c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  10:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  14:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  18:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  1c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  20:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  24:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  28:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  2c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  30:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  34:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  38:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__vector_14>
  3c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  40:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  44:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  48:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  4c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  50:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  54:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  58:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  5c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  60:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  64:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  68:	05 a8       	ldd	r0, Z+53	; 0x35
  6a:	4c cd       	rjmp	.-1384   	; 0xfffffb04 <__eeprom_end+0xff7efb04>
  6c:	b2 d4       	rcall	.+2404   	; 0x9d2 <__mulsf3_pse+0x5e>
  6e:	4e b9       	out	0x0e, r20	; 14
  70:	38 36       	cpi	r19, 0x68	; 104
  72:	a9 02       	muls	r26, r25
  74:	0c 50       	subi	r16, 0x0C	; 12
  76:	b9 91       	ld	r27, Y+
  78:	86 88       	ldd	r8, Z+22	; 0x16
  7a:	08 3c       	cpi	r16, 0xC8	; 200
  7c:	a6 aa       	std	Z+54, r10	; 0x36
  7e:	aa 2a       	or	r10, r26
  80:	be 00       	.word	0x00be	; ????
  82:	00 00       	nop
  84:	80 3f       	cpi	r24, 0xF0	; 240

00000086 <__ctors_end>:
  86:	11 24       	eor	r1, r1
  88:	1f be       	out	0x3f, r1	; 63
  8a:	cf ef       	ldi	r28, 0xFF	; 255
  8c:	d8 e0       	ldi	r29, 0x08	; 8
  8e:	de bf       	out	0x3e, r29	; 62
  90:	cd bf       	out	0x3d, r28	; 61

00000092 <__do_copy_data>:
  92:	11 e0       	ldi	r17, 0x01	; 1
  94:	a0 e0       	ldi	r26, 0x00	; 0
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	ee ed       	ldi	r30, 0xDE	; 222
  9a:	fb e0       	ldi	r31, 0x0B	; 11
  9c:	02 c0       	rjmp	.+4      	; 0xa2 <__do_copy_data+0x10>
  9e:	05 90       	lpm	r0, Z+
  a0:	0d 92       	st	X+, r0
  a2:	ac 30       	cpi	r26, 0x0C	; 12
  a4:	b1 07       	cpc	r27, r17
  a6:	d9 f7       	brne	.-10     	; 0x9e <__do_copy_data+0xc>

000000a8 <__do_clear_bss>:
  a8:	24 e0       	ldi	r18, 0x04	; 4
  aa:	ac e0       	ldi	r26, 0x0C	; 12
  ac:	b1 e0       	ldi	r27, 0x01	; 1
  ae:	01 c0       	rjmp	.+2      	; 0xb2 <.do_clear_bss_start>

000000b0 <.do_clear_bss_loop>:
  b0:	1d 92       	st	X+, r1

000000b2 <.do_clear_bss_start>:
  b2:	a2 33       	cpi	r26, 0x32	; 50
  b4:	b2 07       	cpc	r27, r18
  b6:	e1 f7       	brne	.-8      	; 0xb0 <.do_clear_bss_loop>
  b8:	0e 94 df 00 	call	0x1be	; 0x1be <main>
  bc:	0c 94 ed 05 	jmp	0xbda	; 0xbda <_exit>

000000c0 <__bad_interrupt>:
  c0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c4 <Initialize_SPI_Master>:
#define LED2 2						// Debug LED at PD2
#define DEBOUNCE 100

// sets up SPI system between ATmega328P and slave device(s)
void Initialize_SPI_Master(){
   SPCR = (0<<SPIE) |               // No interrupts
  c4:	80 e5       	ldi	r24, 0x50	; 80
  c6:	8c bd       	out	0x2c, r24	; 44
   (1<<SPE) |                       // SPI enabled
   (1<<MSTR) ;                      // master
   SPSR = 0x00;                     // clear flags
  c8:	1d bc       	out	0x2d, r1	; 45
   PORTB = 1 << SS;                 // make sure SS is high
  ca:	84 e0       	ldi	r24, 0x04	; 4
  cc:	85 b9       	out	0x05, r24	; 5
  ce:	08 95       	ret

000000d0 <initTimer0>:
}

// Initializing timer 0 (change OCR0A for freq change!!!!!)
void initTimer0(){
   TCCR0A = 0x02;                   // timer CTC mode
  d0:	82 e0       	ldi	r24, 0x02	; 2
  d2:	84 bd       	out	0x24, r24	; 36
   OCR0A = overflow;          // sets counter overflow to 250
  d4:	90 91 00 01 	lds	r25, 0x0100
  d8:	97 bd       	out	0x27, r25	; 39
   TCCR0B = 0x02;                   // timer clk = system clk / 8 (2MHz)
  da:	85 bd       	out	0x25, r24	; 37
   TIFR0 = 0x02;                    // Interrupt occurs at OCRF0A overflow
  dc:	85 bb       	out	0x15, r24	; 21
   TIMSK0 = 0x02;                   // OCRF0A overflow interrupt enabled
  de:	80 93 6e 00 	sts	0x006E, r24
  e2:	08 95       	ret

000000e4 <GPIO_Initialization>:
}


// initializes GPIO I/O, SPI interface, and interrupts
void GPIO_Initialization(){
   DDRB |= (1<<MOSI) | (1<<SCK) | (1<<SS);	// make MOSI, SCK and SS outputs
  e4:	84 b1       	in	r24, 0x04	; 4
  e6:	8c 62       	ori	r24, 0x2C	; 44
  e8:	84 b9       	out	0x04, r24	; 4
   DDRD &= ~(1<<BTN1) | ~(1<<BTN1);	// set buttons as inputs
  ea:	56 98       	cbi	0x0a, 6	; 10
   DDRD |= (1<<LED2);				// degub LED is output
  ec:	52 9a       	sbi	0x0a, 2	; 10
   PORTD |= (1<<BTN0) | (1<<BTN1);	// set internal pull-ups
  ee:	8b b1       	in	r24, 0x0b	; 11
  f0:	80 6c       	ori	r24, 0xC0	; 192
  f2:	8b b9       	out	0x0b, r24	; 11
   Initialize_SPI_Master();			// initialize SPI to DAC
  f4:	0e 94 62 00 	call	0xc4	; 0xc4 <Initialize_SPI_Master>
   initTimer0();							// initialize timer0
  f8:	0e 94 68 00 	call	0xd0	; 0xd0 <initTimer0>
   sei();									// enable interrupts
  fc:	78 94       	sei
  fe:	08 95       	ret

00000100 <check_buttons>:
}

// returns a true bool if a buttons is pressed
uint8_t check_buttons(){
   if (!(PIND & (1<<BTN0))){          // return 1 if button at pin0 is pressed
 100:	4f 99       	sbic	0x09, 7	; 9
 102:	0b c0       	rjmp	.+22     	; 0x11a <check_buttons+0x1a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 104:	2f ef       	ldi	r18, 0xFF	; 255
 106:	81 ee       	ldi	r24, 0xE1	; 225
 108:	94 e0       	ldi	r25, 0x04	; 4
 10a:	21 50       	subi	r18, 0x01	; 1
 10c:	80 40       	sbci	r24, 0x00	; 0
 10e:	90 40       	sbci	r25, 0x00	; 0
 110:	e1 f7       	brne	.-8      	; 0x10a <check_buttons+0xa>
 112:	00 c0       	rjmp	.+0      	; 0x114 <check_buttons+0x14>
 114:	00 00       	nop
		_delay_ms(DEBOUNCE);
      return 1;
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	08 95       	ret
   }
   else if(!(PIND & (1<<BTN1))){    // return 2 if button at pin1 is pressed
 11a:	4e 99       	sbic	0x09, 6	; 9
 11c:	0b c0       	rjmp	.+22     	; 0x134 <check_buttons+0x34>
 11e:	2f ef       	ldi	r18, 0xFF	; 255
 120:	81 ee       	ldi	r24, 0xE1	; 225
 122:	94 e0       	ldi	r25, 0x04	; 4
 124:	21 50       	subi	r18, 0x01	; 1
 126:	80 40       	sbci	r24, 0x00	; 0
 128:	90 40       	sbci	r25, 0x00	; 0
 12a:	e1 f7       	brne	.-8      	; 0x124 <check_buttons+0x24>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <check_buttons+0x2e>
 12e:	00 00       	nop
		_delay_ms(DEBOUNCE);
      return 2;
 130:	82 e0       	ldi	r24, 0x02	; 2
 132:	08 95       	ret
   }
   else
      return 0;                     // return 0 if no buttons are pressed
 134:	80 e0       	ldi	r24, 0x00	; 0
}
 136:	08 95       	ret

00000138 <Transmit_SPI_Master>:

// sends data to DAC over SPI data port
void Transmit_SPI_Master(int Data) {
   PORTB &= ~(1 << SS);					//Assert slave select (active low)
 138:	2a 98       	cbi	0x05, 2	; 5
   SPDR = ((Data >> 8) & 0xF) | 0x70;		//Attach configuration Bits onto MSB
 13a:	9f 70       	andi	r25, 0x0F	; 15
 13c:	90 67       	ori	r25, 0x70	; 112
 13e:	9e bd       	out	0x2e, r25	; 46
   while (!(SPSR & (1<<SPIF)))
 140:	0d b4       	in	r0, 0x2d	; 45
 142:	07 fe       	sbrs	r0, 7
 144:	fd cf       	rjmp	.-6      	; 0x140 <Transmit_SPI_Master+0x8>
      ;
   SPDR = 0xFF & Data;
 146:	8e bd       	out	0x2e, r24	; 46
   while (!(SPSR & (1<<SPIF)))
 148:	0d b4       	in	r0, 0x2d	; 45
 14a:	07 fe       	sbrs	r0, 7
 14c:	fd cf       	rjmp	.-6      	; 0x148 <Transmit_SPI_Master+0x10>
      ;
   PORTB |= 1 << SS;						//Turn off slave select
 14e:	2a 9a       	sbi	0x05, 2	; 5
 150:	08 95       	ret

00000152 <volts_to_bits>:
      _delay_ms(1);

}

// converts input voltage between 0-5V to 12bit number for DAC
uint16_t volts_to_bits(double voltage){
 152:	cf 92       	push	r12
 154:	df 92       	push	r13
 156:	ef 92       	push	r14
 158:	ff 92       	push	r15
   double bits = ((voltage/5.0)*4095);
 15a:	20 e0       	ldi	r18, 0x00	; 0
 15c:	30 e0       	ldi	r19, 0x00	; 0
 15e:	40 ea       	ldi	r20, 0xA0	; 160
 160:	50 e4       	ldi	r21, 0x40	; 64
 162:	0e 94 69 03 	call	0x6d2	; 0x6d2 <__divsf3>
 166:	20 e0       	ldi	r18, 0x00	; 0
 168:	30 ef       	ldi	r19, 0xF0	; 240
 16a:	4f e7       	ldi	r20, 0x7F	; 127
 16c:	55 e4       	ldi	r21, 0x45	; 69
 16e:	0e 94 a4 04 	call	0x948	; 0x948 <__mulsf3>
 172:	6b 01       	movw	r12, r22
 174:	7c 01       	movw	r14, r24
   if(bits>4095)
 176:	20 e0       	ldi	r18, 0x00	; 0
 178:	30 ef       	ldi	r19, 0xF0	; 240
 17a:	4f e7       	ldi	r20, 0x7F	; 127
 17c:	55 e4       	ldi	r21, 0x45	; 69
 17e:	0e 94 9f 04 	call	0x93e	; 0x93e <__gesf2>
 182:	18 16       	cp	r1, r24
 184:	34 f0       	brlt	.+12     	; 0x192 <volts_to_bits+0x40>
		return 4095;
	else
	 return bits;                  // return 12bit equivalent for DAC
 186:	c7 01       	movw	r24, r14
 188:	b6 01       	movw	r22, r12
 18a:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <__fixunssfsi>
 18e:	cb 01       	movw	r24, r22
 190:	02 c0       	rjmp	.+4      	; 0x196 <volts_to_bits+0x44>

// converts input voltage between 0-5V to 12bit number for DAC
uint16_t volts_to_bits(double voltage){
   double bits = ((voltage/5.0)*4095);
   if(bits>4095)
		return 4095;
 192:	8f ef       	ldi	r24, 0xFF	; 255
 194:	9f e0       	ldi	r25, 0x0F	; 15
	else
	 return bits;                  // return 12bit equivalent for DAC
}
 196:	ff 90       	pop	r15
 198:	ef 90       	pop	r14
 19a:	df 90       	pop	r13
 19c:	cf 90       	pop	r12
 19e:	08 95       	ret

000001a0 <change_freq>:

void change_freq(){
	overflow -= 50;
 1a0:	80 91 00 01 	lds	r24, 0x0100
 1a4:	82 53       	subi	r24, 0x32	; 50
	if(overflow<50)
 1a6:	82 33       	cpi	r24, 0x32	; 50
 1a8:	18 f0       	brcs	.+6      	; 0x1b0 <change_freq+0x10>
	else
	 return bits;                  // return 12bit equivalent for DAC
}

void change_freq(){
	overflow -= 50;
 1aa:	80 93 00 01 	sts	0x0100, r24
 1ae:	03 c0       	rjmp	.+6      	; 0x1b6 <change_freq+0x16>
	if(overflow<50)
		overflow = 200;
 1b0:	88 ec       	ldi	r24, 0xC8	; 200
 1b2:	80 93 00 01 	sts	0x0100, r24
		
	OCR0A = overflow;          // sets counter overflow to 250
 1b6:	80 91 00 01 	lds	r24, 0x0100
 1ba:	87 bd       	out	0x27, r24	; 39
 1bc:	08 95       	ret

000001be <main>:
int num_samples;	// sets global number of samples
uint8_t overflow = 200;	// set overflow value for 100Hz

int main(void)
{
	num_samples = NUM_SAMPS;
 1be:	84 e6       	ldi	r24, 0x64	; 100
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	90 93 0f 01 	sts	0x010F, r25
 1c6:	80 93 0e 01 	sts	0x010E, r24
	
   // initialize GPIO, interrupts, and timers
   GPIO_Initialization();
 1ca:	0e 94 72 00 	call	0xe4	; 0xe4 <GPIO_Initialization>
   
   // fill square, sawtooth, triangle, and sine wave LUTs
   initWaves();
 1ce:	0e 94 ed 02 	call	0x5da	; 0x5da <initWaves>
   
   while (1){
	   if(check_buttons()==1)
 1d2:	0e 94 80 00 	call	0x100	; 0x100 <check_buttons>
 1d6:	81 30       	cpi	r24, 0x01	; 1
 1d8:	19 f4       	brne	.+6      	; 0x1e0 <main+0x22>
			nextWave();
 1da:	0e 94 1d 01 	call	0x23a	; 0x23a <nextWave>
 1de:	f9 cf       	rjmp	.-14     	; 0x1d2 <main+0x14>
		else if(check_buttons())
 1e0:	0e 94 80 00 	call	0x100	; 0x100 <check_buttons>
 1e4:	88 23       	and	r24, r24
 1e6:	a9 f3       	breq	.-22     	; 0x1d2 <main+0x14>
			change_freq();
 1e8:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <change_freq>
 1ec:	f2 cf       	rjmp	.-28     	; 0x1d2 <main+0x14>

000001ee <__vector_14>:
}

///////////////////////////////////ISR/////////////////////////////////////////

// ISR to increment through wave function LUTs and set frequency
ISR(TIMER0_COMPA_vect){
 1ee:	1f 92       	push	r1
 1f0:	0f 92       	push	r0
 1f2:	0f b6       	in	r0, 0x3f	; 63
 1f4:	0f 92       	push	r0
 1f6:	11 24       	eor	r1, r1
 1f8:	2f 93       	push	r18
 1fa:	3f 93       	push	r19
 1fc:	4f 93       	push	r20
 1fe:	5f 93       	push	r21
 200:	6f 93       	push	r22
 202:	7f 93       	push	r23
 204:	8f 93       	push	r24
 206:	9f 93       	push	r25
 208:	af 93       	push	r26
 20a:	bf 93       	push	r27
 20c:	ef 93       	push	r30
 20e:	ff 93       	push	r31
   Transmit_SPI_Master(nextWavePoint());
 210:	0e 94 3a 01 	call	0x274	; 0x274 <nextWavePoint>
 214:	0e 94 9c 00 	call	0x138	; 0x138 <Transmit_SPI_Master>
}
 218:	ff 91       	pop	r31
 21a:	ef 91       	pop	r30
 21c:	bf 91       	pop	r27
 21e:	af 91       	pop	r26
 220:	9f 91       	pop	r25
 222:	8f 91       	pop	r24
 224:	7f 91       	pop	r23
 226:	6f 91       	pop	r22
 228:	5f 91       	pop	r21
 22a:	4f 91       	pop	r20
 22c:	3f 91       	pop	r19
 22e:	2f 91       	pop	r18
 230:	0f 90       	pop	r0
 232:	0f be       	out	0x3f, r0	; 63
 234:	0f 90       	pop	r0
 236:	1f 90       	pop	r1
 238:	18 95       	reti

0000023a <nextWave>:

void nextWave() {
   static int waveNdx = 0;
   static uint16_t* waves[NUM_WAVES] = {SquareWave, TriWave, SawWave, SinWave};
   
   waveNdx++;
 23a:	80 91 0c 01 	lds	r24, 0x010C
 23e:	90 91 0d 01 	lds	r25, 0x010D
 242:	01 96       	adiw	r24, 0x01	; 1
   waveNdx %= NUM_WAVES;
 244:	83 70       	andi	r24, 0x03	; 3
 246:	90 78       	andi	r25, 0x80	; 128
 248:	99 23       	and	r25, r25
 24a:	24 f4       	brge	.+8      	; 0x254 <nextWave+0x1a>
 24c:	01 97       	sbiw	r24, 0x01	; 1
 24e:	8c 6f       	ori	r24, 0xFC	; 252
 250:	9f 6f       	ori	r25, 0xFF	; 255
 252:	01 96       	adiw	r24, 0x01	; 1
 254:	90 93 0d 01 	sts	0x010D, r25
 258:	80 93 0c 01 	sts	0x010C, r24
   
   Wave = waves[waveNdx];
 25c:	88 0f       	add	r24, r24
 25e:	99 1f       	adc	r25, r25
 260:	fc 01       	movw	r30, r24
 262:	ed 5f       	subi	r30, 0xFD	; 253
 264:	fe 4f       	sbci	r31, 0xFE	; 254
 266:	80 81       	ld	r24, Z
 268:	91 81       	ldd	r25, Z+1	; 0x01
 26a:	90 93 31 04 	sts	0x0431, r25
 26e:	80 93 30 04 	sts	0x0430, r24
 272:	08 95       	ret

00000274 <nextWavePoint>:
}

uint16_t nextWavePoint() {
   static int ndx = -1;
   
   ndx++;
 274:	80 91 01 01 	lds	r24, 0x0101
 278:	90 91 02 01 	lds	r25, 0x0102
 27c:	01 96       	adiw	r24, 0x01	; 1
   ndx %= NUM_SAMPS;
 27e:	64 e6       	ldi	r22, 0x64	; 100
 280:	70 e0       	ldi	r23, 0x00	; 0
 282:	0e 94 c5 05 	call	0xb8a	; 0xb8a <__divmodhi4>
 286:	90 93 02 01 	sts	0x0102, r25
 28a:	80 93 01 01 	sts	0x0101, r24
   
   return Wave[ndx];
 28e:	88 0f       	add	r24, r24
 290:	99 1f       	adc	r25, r25
 292:	e0 91 30 04 	lds	r30, 0x0430
 296:	f0 91 31 04 	lds	r31, 0x0431
 29a:	e8 0f       	add	r30, r24
 29c:	f9 1f       	adc	r31, r25
}
 29e:	80 81       	ld	r24, Z
 2a0:	91 81       	ldd	r25, Z+1	; 0x01
 2a2:	08 95       	ret

000002a4 <make_square_LUT>:

void make_square_LUT(){
 2a4:	ef 92       	push	r14
 2a6:	ff 92       	push	r15
 2a8:	0f 93       	push	r16
 2aa:	1f 93       	push	r17
 2ac:	cf 93       	push	r28
 2ae:	df 93       	push	r29
   int i;
   int duty = num_samples * (double) SQUARE_DUTY/100;
 2b0:	60 91 0e 01 	lds	r22, 0x010E
 2b4:	70 91 0f 01 	lds	r23, 0x010F
 2b8:	07 2e       	mov	r0, r23
 2ba:	00 0c       	add	r0, r0
 2bc:	88 0b       	sbc	r24, r24
 2be:	99 0b       	sbc	r25, r25
 2c0:	0e 94 13 04 	call	0x826	; 0x826 <__floatsisf>
 2c4:	20 e0       	ldi	r18, 0x00	; 0
 2c6:	30 e0       	ldi	r19, 0x00	; 0
 2c8:	48 e4       	ldi	r20, 0x48	; 72
 2ca:	52 e4       	ldi	r21, 0x42	; 66
 2cc:	0e 94 a4 04 	call	0x948	; 0x948 <__mulsf3>
 2d0:	20 e0       	ldi	r18, 0x00	; 0
 2d2:	30 e0       	ldi	r19, 0x00	; 0
 2d4:	48 ec       	ldi	r20, 0xC8	; 200
 2d6:	52 e4       	ldi	r21, 0x42	; 66
 2d8:	0e 94 69 03 	call	0x6d2	; 0x6d2 <__divsf3>
 2dc:	0e 94 db 03 	call	0x7b6	; 0x7b6 <__fixsfsi>
 2e0:	eb 01       	movw	r28, r22
   
   for (i = 0; i < duty; i++)
 2e2:	1c 16       	cp	r1, r28
 2e4:	1d 06       	cpc	r1, r29
 2e6:	b4 f4       	brge	.+44     	; 0x314 <make_square_LUT+0x70>
 2e8:	08 e6       	ldi	r16, 0x68	; 104
 2ea:	13 e0       	ldi	r17, 0x03	; 3
 2ec:	66 0f       	add	r22, r22
 2ee:	77 1f       	adc	r23, r23
 2f0:	cb 01       	movw	r24, r22
 2f2:	88 59       	subi	r24, 0x98	; 152
 2f4:	9c 4f       	sbci	r25, 0xFC	; 252
 2f6:	7c 01       	movw	r14, r24
      SquareWave[i] = volts_to_bits(MAX_VOLTAGE);
 2f8:	60 e0       	ldi	r22, 0x00	; 0
 2fa:	70 e0       	ldi	r23, 0x00	; 0
 2fc:	80 ea       	ldi	r24, 0xA0	; 160
 2fe:	90 e4       	ldi	r25, 0x40	; 64
 300:	0e 94 a9 00 	call	0x152	; 0x152 <volts_to_bits>
 304:	f8 01       	movw	r30, r16
 306:	81 93       	st	Z+, r24
 308:	91 93       	st	Z+, r25
 30a:	8f 01       	movw	r16, r30

void make_square_LUT(){
   int i;
   int duty = num_samples * (double) SQUARE_DUTY/100;
   
   for (i = 0; i < duty; i++)
 30c:	ee 15       	cp	r30, r14
 30e:	ff 05       	cpc	r31, r15
 310:	99 f7       	brne	.-26     	; 0x2f8 <make_square_LUT+0x54>
 312:	02 c0       	rjmp	.+4      	; 0x318 <make_square_LUT+0x74>
 314:	c0 e0       	ldi	r28, 0x00	; 0
 316:	d0 e0       	ldi	r29, 0x00	; 0
      SquareWave[i] = volts_to_bits(MAX_VOLTAGE);
   
   for ( ; i < num_samples ; i++)
 318:	80 91 0e 01 	lds	r24, 0x010E
 31c:	90 91 0f 01 	lds	r25, 0x010F
 320:	c8 17       	cp	r28, r24
 322:	d9 07       	cpc	r29, r25
 324:	b4 f4       	brge	.+44     	; 0x352 <make_square_LUT+0xae>
 326:	8e 01       	movw	r16, r28
 328:	00 0f       	add	r16, r16
 32a:	11 1f       	adc	r17, r17
 32c:	08 59       	subi	r16, 0x98	; 152
 32e:	1c 4f       	sbci	r17, 0xFC	; 252
      SquareWave[i] = volts_to_bits(MIN_VOLTAGE);
 330:	60 e0       	ldi	r22, 0x00	; 0
 332:	70 e0       	ldi	r23, 0x00	; 0
 334:	cb 01       	movw	r24, r22
 336:	0e 94 a9 00 	call	0x152	; 0x152 <volts_to_bits>
 33a:	f8 01       	movw	r30, r16
 33c:	81 93       	st	Z+, r24
 33e:	91 93       	st	Z+, r25
 340:	8f 01       	movw	r16, r30
   int duty = num_samples * (double) SQUARE_DUTY/100;
   
   for (i = 0; i < duty; i++)
      SquareWave[i] = volts_to_bits(MAX_VOLTAGE);
   
   for ( ; i < num_samples ; i++)
 342:	21 96       	adiw	r28, 0x01	; 1
 344:	80 91 0e 01 	lds	r24, 0x010E
 348:	90 91 0f 01 	lds	r25, 0x010F
 34c:	c8 17       	cp	r28, r24
 34e:	d9 07       	cpc	r29, r25
 350:	7c f3       	brlt	.-34     	; 0x330 <make_square_LUT+0x8c>
      SquareWave[i] = volts_to_bits(MIN_VOLTAGE);
}
 352:	df 91       	pop	r29
 354:	cf 91       	pop	r28
 356:	1f 91       	pop	r17
 358:	0f 91       	pop	r16
 35a:	ff 90       	pop	r15
 35c:	ef 90       	pop	r14
 35e:	08 95       	ret

00000360 <make_triangle_LUT>:

void make_triangle_LUT(){
 360:	4f 92       	push	r4
 362:	5f 92       	push	r5
 364:	6f 92       	push	r6
 366:	7f 92       	push	r7
 368:	af 92       	push	r10
 36a:	bf 92       	push	r11
 36c:	cf 92       	push	r12
 36e:	df 92       	push	r13
 370:	ef 92       	push	r14
 372:	ff 92       	push	r15
 374:	0f 93       	push	r16
 376:	1f 93       	push	r17
 378:	cf 93       	push	r28
 37a:	df 93       	push	r29
   int i;
   int peak = num_samples / 2;
 37c:	a0 90 0e 01 	lds	r10, 0x010E
 380:	b0 90 0f 01 	lds	r11, 0x010F
 384:	bb 20       	and	r11, r11
 386:	1c f4       	brge	.+6      	; 0x38e <make_triangle_LUT+0x2e>
 388:	2f ef       	ldi	r18, 0xFF	; 255
 38a:	a2 1a       	sub	r10, r18
 38c:	b2 0a       	sbc	r11, r18
 38e:	b5 94       	asr	r11
 390:	a7 94       	ror	r10
   double increment = ((double) MAX_VOLTAGE - MIN_VOLTAGE) / peak;
 392:	b5 01       	movw	r22, r10
 394:	0b 2c       	mov	r0, r11
 396:	00 0c       	add	r0, r0
 398:	88 0b       	sbc	r24, r24
 39a:	99 0b       	sbc	r25, r25
 39c:	0e 94 13 04 	call	0x826	; 0x826 <__floatsisf>
 3a0:	9b 01       	movw	r18, r22
 3a2:	ac 01       	movw	r20, r24
 3a4:	60 e0       	ldi	r22, 0x00	; 0
 3a6:	70 e0       	ldi	r23, 0x00	; 0
 3a8:	80 ea       	ldi	r24, 0xA0	; 160
 3aa:	90 e4       	ldi	r25, 0x40	; 64
 3ac:	0e 94 69 03 	call	0x6d2	; 0x6d2 <__divsf3>
 3b0:	2b 01       	movw	r4, r22
 3b2:	3c 01       	movw	r6, r24
   double voltage = MIN_VOLTAGE - increment;
 3b4:	9b 01       	movw	r18, r22
 3b6:	ac 01       	movw	r20, r24
 3b8:	60 e0       	ldi	r22, 0x00	; 0
 3ba:	70 e0       	ldi	r23, 0x00	; 0
 3bc:	cb 01       	movw	r24, r22
 3be:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <__subsf3>
 3c2:	6b 01       	movw	r12, r22
 3c4:	7c 01       	movw	r14, r24
   
   for (i = 0; i < (peak + 1); i++)
 3c6:	e5 01       	movw	r28, r10
 3c8:	21 96       	adiw	r28, 0x01	; 1
 3ca:	1c 16       	cp	r1, r28
 3cc:	1d 06       	cpc	r1, r29
 3ce:	dc f4       	brge	.+54     	; 0x406 <make_triangle_LUT+0xa6>
 3d0:	00 ea       	ldi	r16, 0xA0	; 160
 3d2:	12 e0       	ldi	r17, 0x02	; 2
 3d4:	c5 01       	movw	r24, r10
 3d6:	88 0f       	add	r24, r24
 3d8:	99 1f       	adc	r25, r25
 3da:	fc 01       	movw	r30, r24
 3dc:	ee 55       	subi	r30, 0x5E	; 94
 3de:	fd 4f       	sbci	r31, 0xFD	; 253
 3e0:	5f 01       	movw	r10, r30
      TriWave[i] = volts_to_bits(voltage += increment);
 3e2:	a3 01       	movw	r20, r6
 3e4:	92 01       	movw	r18, r4
 3e6:	c7 01       	movw	r24, r14
 3e8:	b6 01       	movw	r22, r12
 3ea:	0e 94 fd 02 	call	0x5fa	; 0x5fa <__addsf3>
 3ee:	6b 01       	movw	r12, r22
 3f0:	7c 01       	movw	r14, r24
 3f2:	0e 94 a9 00 	call	0x152	; 0x152 <volts_to_bits>
 3f6:	f8 01       	movw	r30, r16
 3f8:	81 93       	st	Z+, r24
 3fa:	91 93       	st	Z+, r25
 3fc:	8f 01       	movw	r16, r30
   int i;
   int peak = num_samples / 2;
   double increment = ((double) MAX_VOLTAGE - MIN_VOLTAGE) / peak;
   double voltage = MIN_VOLTAGE - increment;
   
   for (i = 0; i < (peak + 1); i++)
 3fe:	ea 15       	cp	r30, r10
 400:	fb 05       	cpc	r31, r11
 402:	79 f7       	brne	.-34     	; 0x3e2 <make_triangle_LUT+0x82>
 404:	02 c0       	rjmp	.+4      	; 0x40a <make_triangle_LUT+0xaa>
 406:	c0 e0       	ldi	r28, 0x00	; 0
 408:	d0 e0       	ldi	r29, 0x00	; 0
      TriWave[i] = volts_to_bits(voltage += increment);
   
   for ( ; i < (num_samples - 1); i++)
 40a:	80 91 0e 01 	lds	r24, 0x010E
 40e:	90 91 0f 01 	lds	r25, 0x010F
 412:	01 97       	sbiw	r24, 0x01	; 1
 414:	c8 17       	cp	r28, r24
 416:	d9 07       	cpc	r29, r25
 418:	e4 f4       	brge	.+56     	; 0x452 <make_triangle_LUT+0xf2>
 41a:	8e 01       	movw	r16, r28
 41c:	00 0f       	add	r16, r16
 41e:	11 1f       	adc	r17, r17
 420:	00 56       	subi	r16, 0x60	; 96
 422:	1d 4f       	sbci	r17, 0xFD	; 253
      TriWave[i] = volts_to_bits(voltage -= increment);
 424:	a3 01       	movw	r20, r6
 426:	92 01       	movw	r18, r4
 428:	c7 01       	movw	r24, r14
 42a:	b6 01       	movw	r22, r12
 42c:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <__subsf3>
 430:	6b 01       	movw	r12, r22
 432:	7c 01       	movw	r14, r24
 434:	0e 94 a9 00 	call	0x152	; 0x152 <volts_to_bits>
 438:	f8 01       	movw	r30, r16
 43a:	81 93       	st	Z+, r24
 43c:	91 93       	st	Z+, r25
 43e:	8f 01       	movw	r16, r30
   double voltage = MIN_VOLTAGE - increment;
   
   for (i = 0; i < (peak + 1); i++)
      TriWave[i] = volts_to_bits(voltage += increment);
   
   for ( ; i < (num_samples - 1); i++)
 440:	21 96       	adiw	r28, 0x01	; 1
 442:	80 91 0e 01 	lds	r24, 0x010E
 446:	90 91 0f 01 	lds	r25, 0x010F
 44a:	01 97       	sbiw	r24, 0x01	; 1
 44c:	c8 17       	cp	r28, r24
 44e:	d9 07       	cpc	r29, r25
 450:	4c f3       	brlt	.-46     	; 0x424 <make_triangle_LUT+0xc4>
      TriWave[i] = volts_to_bits(voltage -= increment);
}
 452:	df 91       	pop	r29
 454:	cf 91       	pop	r28
 456:	1f 91       	pop	r17
 458:	0f 91       	pop	r16
 45a:	ff 90       	pop	r15
 45c:	ef 90       	pop	r14
 45e:	df 90       	pop	r13
 460:	cf 90       	pop	r12
 462:	bf 90       	pop	r11
 464:	af 90       	pop	r10
 466:	7f 90       	pop	r7
 468:	6f 90       	pop	r6
 46a:	5f 90       	pop	r5
 46c:	4f 90       	pop	r4
 46e:	08 95       	ret

00000470 <make_sawtooth_LUT>:

void make_sawtooth_LUT(){
 470:	8f 92       	push	r8
 472:	9f 92       	push	r9
 474:	af 92       	push	r10
 476:	bf 92       	push	r11
 478:	cf 92       	push	r12
 47a:	df 92       	push	r13
 47c:	ef 92       	push	r14
 47e:	ff 92       	push	r15
 480:	0f 93       	push	r16
 482:	1f 93       	push	r17
 484:	cf 93       	push	r28
 486:	df 93       	push	r29
   int ndx;
   double increment = ((double) MAX_VOLTAGE - MIN_VOLTAGE) / (num_samples - 1);
 488:	c0 91 0e 01 	lds	r28, 0x010E
 48c:	d0 91 0f 01 	lds	r29, 0x010F
 490:	be 01       	movw	r22, r28
 492:	61 50       	subi	r22, 0x01	; 1
 494:	71 09       	sbc	r23, r1
 496:	07 2e       	mov	r0, r23
 498:	00 0c       	add	r0, r0
 49a:	88 0b       	sbc	r24, r24
 49c:	99 0b       	sbc	r25, r25
 49e:	0e 94 13 04 	call	0x826	; 0x826 <__floatsisf>
 4a2:	9b 01       	movw	r18, r22
 4a4:	ac 01       	movw	r20, r24
 4a6:	60 e0       	ldi	r22, 0x00	; 0
 4a8:	70 e0       	ldi	r23, 0x00	; 0
 4aa:	80 ea       	ldi	r24, 0xA0	; 160
 4ac:	90 e4       	ldi	r25, 0x40	; 64
 4ae:	0e 94 69 03 	call	0x6d2	; 0x6d2 <__divsf3>
 4b2:	4b 01       	movw	r8, r22
 4b4:	5c 01       	movw	r10, r24
   double voltage = MIN_VOLTAGE -increment;
 4b6:	9b 01       	movw	r18, r22
 4b8:	ac 01       	movw	r20, r24
 4ba:	60 e0       	ldi	r22, 0x00	; 0
 4bc:	70 e0       	ldi	r23, 0x00	; 0
 4be:	cb 01       	movw	r24, r22
 4c0:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <__subsf3>
 4c4:	6b 01       	movw	r12, r22
 4c6:	7c 01       	movw	r14, r24
   
   for (ndx = 0; ndx < num_samples; ndx++)
 4c8:	1c 16       	cp	r1, r28
 4ca:	1d 06       	cpc	r1, r29
 4cc:	d4 f4       	brge	.+52     	; 0x502 <make_sawtooth_LUT+0x92>
 4ce:	08 ed       	ldi	r16, 0xD8	; 216
 4d0:	11 e0       	ldi	r17, 0x01	; 1
 4d2:	c0 e0       	ldi	r28, 0x00	; 0
 4d4:	d0 e0       	ldi	r29, 0x00	; 0
      SawWave[ndx] = volts_to_bits(voltage += increment);
 4d6:	a5 01       	movw	r20, r10
 4d8:	94 01       	movw	r18, r8
 4da:	c7 01       	movw	r24, r14
 4dc:	b6 01       	movw	r22, r12
 4de:	0e 94 fd 02 	call	0x5fa	; 0x5fa <__addsf3>
 4e2:	6b 01       	movw	r12, r22
 4e4:	7c 01       	movw	r14, r24
 4e6:	0e 94 a9 00 	call	0x152	; 0x152 <volts_to_bits>
 4ea:	f8 01       	movw	r30, r16
 4ec:	81 93       	st	Z+, r24
 4ee:	91 93       	st	Z+, r25
 4f0:	8f 01       	movw	r16, r30
void make_sawtooth_LUT(){
   int ndx;
   double increment = ((double) MAX_VOLTAGE - MIN_VOLTAGE) / (num_samples - 1);
   double voltage = MIN_VOLTAGE -increment;
   
   for (ndx = 0; ndx < num_samples; ndx++)
 4f2:	21 96       	adiw	r28, 0x01	; 1
 4f4:	80 91 0e 01 	lds	r24, 0x010E
 4f8:	90 91 0f 01 	lds	r25, 0x010F
 4fc:	c8 17       	cp	r28, r24
 4fe:	d9 07       	cpc	r29, r25
 500:	54 f3       	brlt	.-44     	; 0x4d6 <make_sawtooth_LUT+0x66>
      SawWave[ndx] = volts_to_bits(voltage += increment);
}
 502:	df 91       	pop	r29
 504:	cf 91       	pop	r28
 506:	1f 91       	pop	r17
 508:	0f 91       	pop	r16
 50a:	ff 90       	pop	r15
 50c:	ef 90       	pop	r14
 50e:	df 90       	pop	r13
 510:	cf 90       	pop	r12
 512:	bf 90       	pop	r11
 514:	af 90       	pop	r10
 516:	9f 90       	pop	r9
 518:	8f 90       	pop	r8
 51a:	08 95       	ret

0000051c <make_sin_LUT>:

void make_sin_LUT(){
 51c:	8f 92       	push	r8
 51e:	9f 92       	push	r9
 520:	af 92       	push	r10
 522:	bf 92       	push	r11
 524:	cf 92       	push	r12
 526:	df 92       	push	r13
 528:	ef 92       	push	r14
 52a:	ff 92       	push	r15
 52c:	0f 93       	push	r16
 52e:	1f 93       	push	r17
 530:	cf 93       	push	r28
 532:	df 93       	push	r29
   int ndx;
   double increment = 2 * M_PI / num_samples;
 534:	c0 91 0e 01 	lds	r28, 0x010E
 538:	d0 91 0f 01 	lds	r29, 0x010F
 53c:	be 01       	movw	r22, r28
 53e:	0d 2e       	mov	r0, r29
 540:	00 0c       	add	r0, r0
 542:	88 0b       	sbc	r24, r24
 544:	99 0b       	sbc	r25, r25
 546:	0e 94 13 04 	call	0x826	; 0x826 <__floatsisf>
 54a:	9b 01       	movw	r18, r22
 54c:	ac 01       	movw	r20, r24
 54e:	6b ed       	ldi	r22, 0xDB	; 219
 550:	7f e0       	ldi	r23, 0x0F	; 15
 552:	89 ec       	ldi	r24, 0xC9	; 201
 554:	90 e4       	ldi	r25, 0x40	; 64
 556:	0e 94 69 03 	call	0x6d2	; 0x6d2 <__divsf3>
 55a:	4b 01       	movw	r8, r22
 55c:	5c 01       	movw	r10, r24
   double rad = -increment;
 55e:	6b 01       	movw	r12, r22
 560:	7c 01       	movw	r14, r24
 562:	f7 fa       	bst	r15, 7
 564:	f0 94       	com	r15
 566:	f7 f8       	bld	r15, 7
 568:	f0 94       	com	r15
   double ampli = ((double) MAX_VOLTAGE - MIN_VOLTAGE) / 2;
   // The amplitude/2 is neccessary to compensate for sin()'s amplitude of 2
   double offset = MIN_VOLTAGE + ampli;
   
   for (ndx = 0; ndx < num_samples; ndx++)
 56a:	1c 16       	cp	r1, r28
 56c:	1d 06       	cpc	r1, r29
 56e:	44 f5       	brge	.+80     	; 0x5c0 <make_sin_LUT+0xa4>
 570:	00 e1       	ldi	r16, 0x10	; 16
 572:	11 e0       	ldi	r17, 0x01	; 1
 574:	c0 e0       	ldi	r28, 0x00	; 0
 576:	d0 e0       	ldi	r29, 0x00	; 0
      SinWave[ndx] = volts_to_bits(ampli * sin(rad += increment) + offset);
 578:	a5 01       	movw	r20, r10
 57a:	94 01       	movw	r18, r8
 57c:	c7 01       	movw	r24, r14
 57e:	b6 01       	movw	r22, r12
 580:	0e 94 fd 02 	call	0x5fa	; 0x5fa <__addsf3>
 584:	6b 01       	movw	r12, r22
 586:	7c 01       	movw	r14, r24
 588:	0e 94 11 05 	call	0xa22	; 0xa22 <sin>
 58c:	20 e0       	ldi	r18, 0x00	; 0
 58e:	30 e0       	ldi	r19, 0x00	; 0
 590:	40 e2       	ldi	r20, 0x20	; 32
 592:	50 e4       	ldi	r21, 0x40	; 64
 594:	0e 94 a4 04 	call	0x948	; 0x948 <__mulsf3>
 598:	20 e0       	ldi	r18, 0x00	; 0
 59a:	30 e0       	ldi	r19, 0x00	; 0
 59c:	40 e2       	ldi	r20, 0x20	; 32
 59e:	50 e4       	ldi	r21, 0x40	; 64
 5a0:	0e 94 fd 02 	call	0x5fa	; 0x5fa <__addsf3>
 5a4:	0e 94 a9 00 	call	0x152	; 0x152 <volts_to_bits>
 5a8:	f8 01       	movw	r30, r16
 5aa:	81 93       	st	Z+, r24
 5ac:	91 93       	st	Z+, r25
 5ae:	8f 01       	movw	r16, r30
   double rad = -increment;
   double ampli = ((double) MAX_VOLTAGE - MIN_VOLTAGE) / 2;
   // The amplitude/2 is neccessary to compensate for sin()'s amplitude of 2
   double offset = MIN_VOLTAGE + ampli;
   
   for (ndx = 0; ndx < num_samples; ndx++)
 5b0:	21 96       	adiw	r28, 0x01	; 1
 5b2:	80 91 0e 01 	lds	r24, 0x010E
 5b6:	90 91 0f 01 	lds	r25, 0x010F
 5ba:	c8 17       	cp	r28, r24
 5bc:	d9 07       	cpc	r29, r25
 5be:	e4 f2       	brlt	.-72     	; 0x578 <make_sin_LUT+0x5c>
      SinWave[ndx] = volts_to_bits(ampli * sin(rad += increment) + offset);
 5c0:	df 91       	pop	r29
 5c2:	cf 91       	pop	r28
 5c4:	1f 91       	pop	r17
 5c6:	0f 91       	pop	r16
 5c8:	ff 90       	pop	r15
 5ca:	ef 90       	pop	r14
 5cc:	df 90       	pop	r13
 5ce:	cf 90       	pop	r12
 5d0:	bf 90       	pop	r11
 5d2:	af 90       	pop	r10
 5d4:	9f 90       	pop	r9
 5d6:	8f 90       	pop	r8
 5d8:	08 95       	ret

000005da <initWaves>:
uint16_t SinWave[NUM_SAMPS];

uint16_t *Wave;

void initWaves() {
   make_square_LUT();
 5da:	0e 94 52 01 	call	0x2a4	; 0x2a4 <make_square_LUT>
   make_triangle_LUT();
 5de:	0e 94 b0 01 	call	0x360	; 0x360 <make_triangle_LUT>
   make_sawtooth_LUT();
 5e2:	0e 94 38 02 	call	0x470	; 0x470 <make_sawtooth_LUT>
   make_sin_LUT();
 5e6:	0e 94 8e 02 	call	0x51c	; 0x51c <make_sin_LUT>
   
   Wave = SquareWave;
 5ea:	88 e6       	ldi	r24, 0x68	; 104
 5ec:	93 e0       	ldi	r25, 0x03	; 3
 5ee:	90 93 31 04 	sts	0x0431, r25
 5f2:	80 93 30 04 	sts	0x0430, r24
 5f6:	08 95       	ret

000005f8 <__subsf3>:
 5f8:	50 58       	subi	r21, 0x80	; 128

000005fa <__addsf3>:
 5fa:	bb 27       	eor	r27, r27
 5fc:	aa 27       	eor	r26, r26
 5fe:	0e 94 14 03 	call	0x628	; 0x628 <__addsf3x>
 602:	0c 94 65 04 	jmp	0x8ca	; 0x8ca <__fp_round>
 606:	0e 94 57 04 	call	0x8ae	; 0x8ae <__fp_pscA>
 60a:	38 f0       	brcs	.+14     	; 0x61a <__addsf3+0x20>
 60c:	0e 94 5e 04 	call	0x8bc	; 0x8bc <__fp_pscB>
 610:	20 f0       	brcs	.+8      	; 0x61a <__addsf3+0x20>
 612:	39 f4       	brne	.+14     	; 0x622 <__addsf3+0x28>
 614:	9f 3f       	cpi	r25, 0xFF	; 255
 616:	19 f4       	brne	.+6      	; 0x61e <__addsf3+0x24>
 618:	26 f4       	brtc	.+8      	; 0x622 <__addsf3+0x28>
 61a:	0c 94 54 04 	jmp	0x8a8	; 0x8a8 <__fp_nan>
 61e:	0e f4       	brtc	.+2      	; 0x622 <__addsf3+0x28>
 620:	e0 95       	com	r30
 622:	e7 fb       	bst	r30, 7
 624:	0c 94 4e 04 	jmp	0x89c	; 0x89c <__fp_inf>

00000628 <__addsf3x>:
 628:	e9 2f       	mov	r30, r25
 62a:	0e 94 76 04 	call	0x8ec	; 0x8ec <__fp_split3>
 62e:	58 f3       	brcs	.-42     	; 0x606 <__addsf3+0xc>
 630:	ba 17       	cp	r27, r26
 632:	62 07       	cpc	r22, r18
 634:	73 07       	cpc	r23, r19
 636:	84 07       	cpc	r24, r20
 638:	95 07       	cpc	r25, r21
 63a:	20 f0       	brcs	.+8      	; 0x644 <__addsf3x+0x1c>
 63c:	79 f4       	brne	.+30     	; 0x65c <__addsf3x+0x34>
 63e:	a6 f5       	brtc	.+104    	; 0x6a8 <__addsf3x+0x80>
 640:	0c 94 98 04 	jmp	0x930	; 0x930 <__fp_zero>
 644:	0e f4       	brtc	.+2      	; 0x648 <__addsf3x+0x20>
 646:	e0 95       	com	r30
 648:	0b 2e       	mov	r0, r27
 64a:	ba 2f       	mov	r27, r26
 64c:	a0 2d       	mov	r26, r0
 64e:	0b 01       	movw	r0, r22
 650:	b9 01       	movw	r22, r18
 652:	90 01       	movw	r18, r0
 654:	0c 01       	movw	r0, r24
 656:	ca 01       	movw	r24, r20
 658:	a0 01       	movw	r20, r0
 65a:	11 24       	eor	r1, r1
 65c:	ff 27       	eor	r31, r31
 65e:	59 1b       	sub	r21, r25
 660:	99 f0       	breq	.+38     	; 0x688 <__addsf3x+0x60>
 662:	59 3f       	cpi	r21, 0xF9	; 249
 664:	50 f4       	brcc	.+20     	; 0x67a <__addsf3x+0x52>
 666:	50 3e       	cpi	r21, 0xE0	; 224
 668:	68 f1       	brcs	.+90     	; 0x6c4 <__addsf3x+0x9c>
 66a:	1a 16       	cp	r1, r26
 66c:	f0 40       	sbci	r31, 0x00	; 0
 66e:	a2 2f       	mov	r26, r18
 670:	23 2f       	mov	r18, r19
 672:	34 2f       	mov	r19, r20
 674:	44 27       	eor	r20, r20
 676:	58 5f       	subi	r21, 0xF8	; 248
 678:	f3 cf       	rjmp	.-26     	; 0x660 <__addsf3x+0x38>
 67a:	46 95       	lsr	r20
 67c:	37 95       	ror	r19
 67e:	27 95       	ror	r18
 680:	a7 95       	ror	r26
 682:	f0 40       	sbci	r31, 0x00	; 0
 684:	53 95       	inc	r21
 686:	c9 f7       	brne	.-14     	; 0x67a <__addsf3x+0x52>
 688:	7e f4       	brtc	.+30     	; 0x6a8 <__addsf3x+0x80>
 68a:	1f 16       	cp	r1, r31
 68c:	ba 0b       	sbc	r27, r26
 68e:	62 0b       	sbc	r22, r18
 690:	73 0b       	sbc	r23, r19
 692:	84 0b       	sbc	r24, r20
 694:	ba f0       	brmi	.+46     	; 0x6c4 <__addsf3x+0x9c>
 696:	91 50       	subi	r25, 0x01	; 1
 698:	a1 f0       	breq	.+40     	; 0x6c2 <__addsf3x+0x9a>
 69a:	ff 0f       	add	r31, r31
 69c:	bb 1f       	adc	r27, r27
 69e:	66 1f       	adc	r22, r22
 6a0:	77 1f       	adc	r23, r23
 6a2:	88 1f       	adc	r24, r24
 6a4:	c2 f7       	brpl	.-16     	; 0x696 <__addsf3x+0x6e>
 6a6:	0e c0       	rjmp	.+28     	; 0x6c4 <__addsf3x+0x9c>
 6a8:	ba 0f       	add	r27, r26
 6aa:	62 1f       	adc	r22, r18
 6ac:	73 1f       	adc	r23, r19
 6ae:	84 1f       	adc	r24, r20
 6b0:	48 f4       	brcc	.+18     	; 0x6c4 <__addsf3x+0x9c>
 6b2:	87 95       	ror	r24
 6b4:	77 95       	ror	r23
 6b6:	67 95       	ror	r22
 6b8:	b7 95       	ror	r27
 6ba:	f7 95       	ror	r31
 6bc:	9e 3f       	cpi	r25, 0xFE	; 254
 6be:	08 f0       	brcs	.+2      	; 0x6c2 <__addsf3x+0x9a>
 6c0:	b0 cf       	rjmp	.-160    	; 0x622 <__addsf3+0x28>
 6c2:	93 95       	inc	r25
 6c4:	88 0f       	add	r24, r24
 6c6:	08 f0       	brcs	.+2      	; 0x6ca <__addsf3x+0xa2>
 6c8:	99 27       	eor	r25, r25
 6ca:	ee 0f       	add	r30, r30
 6cc:	97 95       	ror	r25
 6ce:	87 95       	ror	r24
 6d0:	08 95       	ret

000006d2 <__divsf3>:
 6d2:	0e 94 7d 03 	call	0x6fa	; 0x6fa <__divsf3x>
 6d6:	0c 94 65 04 	jmp	0x8ca	; 0x8ca <__fp_round>
 6da:	0e 94 5e 04 	call	0x8bc	; 0x8bc <__fp_pscB>
 6de:	58 f0       	brcs	.+22     	; 0x6f6 <__divsf3+0x24>
 6e0:	0e 94 57 04 	call	0x8ae	; 0x8ae <__fp_pscA>
 6e4:	40 f0       	brcs	.+16     	; 0x6f6 <__divsf3+0x24>
 6e6:	29 f4       	brne	.+10     	; 0x6f2 <__divsf3+0x20>
 6e8:	5f 3f       	cpi	r21, 0xFF	; 255
 6ea:	29 f0       	breq	.+10     	; 0x6f6 <__divsf3+0x24>
 6ec:	0c 94 4e 04 	jmp	0x89c	; 0x89c <__fp_inf>
 6f0:	51 11       	cpse	r21, r1
 6f2:	0c 94 99 04 	jmp	0x932	; 0x932 <__fp_szero>
 6f6:	0c 94 54 04 	jmp	0x8a8	; 0x8a8 <__fp_nan>

000006fa <__divsf3x>:
 6fa:	0e 94 76 04 	call	0x8ec	; 0x8ec <__fp_split3>
 6fe:	68 f3       	brcs	.-38     	; 0x6da <__divsf3+0x8>

00000700 <__divsf3_pse>:
 700:	99 23       	and	r25, r25
 702:	b1 f3       	breq	.-20     	; 0x6f0 <__divsf3+0x1e>
 704:	55 23       	and	r21, r21
 706:	91 f3       	breq	.-28     	; 0x6ec <__divsf3+0x1a>
 708:	95 1b       	sub	r25, r21
 70a:	55 0b       	sbc	r21, r21
 70c:	bb 27       	eor	r27, r27
 70e:	aa 27       	eor	r26, r26
 710:	62 17       	cp	r22, r18
 712:	73 07       	cpc	r23, r19
 714:	84 07       	cpc	r24, r20
 716:	38 f0       	brcs	.+14     	; 0x726 <__divsf3_pse+0x26>
 718:	9f 5f       	subi	r25, 0xFF	; 255
 71a:	5f 4f       	sbci	r21, 0xFF	; 255
 71c:	22 0f       	add	r18, r18
 71e:	33 1f       	adc	r19, r19
 720:	44 1f       	adc	r20, r20
 722:	aa 1f       	adc	r26, r26
 724:	a9 f3       	breq	.-22     	; 0x710 <__divsf3_pse+0x10>
 726:	35 d0       	rcall	.+106    	; 0x792 <__divsf3_pse+0x92>
 728:	0e 2e       	mov	r0, r30
 72a:	3a f0       	brmi	.+14     	; 0x73a <__divsf3_pse+0x3a>
 72c:	e0 e8       	ldi	r30, 0x80	; 128
 72e:	32 d0       	rcall	.+100    	; 0x794 <__divsf3_pse+0x94>
 730:	91 50       	subi	r25, 0x01	; 1
 732:	50 40       	sbci	r21, 0x00	; 0
 734:	e6 95       	lsr	r30
 736:	00 1c       	adc	r0, r0
 738:	ca f7       	brpl	.-14     	; 0x72c <__divsf3_pse+0x2c>
 73a:	2b d0       	rcall	.+86     	; 0x792 <__divsf3_pse+0x92>
 73c:	fe 2f       	mov	r31, r30
 73e:	29 d0       	rcall	.+82     	; 0x792 <__divsf3_pse+0x92>
 740:	66 0f       	add	r22, r22
 742:	77 1f       	adc	r23, r23
 744:	88 1f       	adc	r24, r24
 746:	bb 1f       	adc	r27, r27
 748:	26 17       	cp	r18, r22
 74a:	37 07       	cpc	r19, r23
 74c:	48 07       	cpc	r20, r24
 74e:	ab 07       	cpc	r26, r27
 750:	b0 e8       	ldi	r27, 0x80	; 128
 752:	09 f0       	breq	.+2      	; 0x756 <__divsf3_pse+0x56>
 754:	bb 0b       	sbc	r27, r27
 756:	80 2d       	mov	r24, r0
 758:	bf 01       	movw	r22, r30
 75a:	ff 27       	eor	r31, r31
 75c:	93 58       	subi	r25, 0x83	; 131
 75e:	5f 4f       	sbci	r21, 0xFF	; 255
 760:	3a f0       	brmi	.+14     	; 0x770 <__divsf3_pse+0x70>
 762:	9e 3f       	cpi	r25, 0xFE	; 254
 764:	51 05       	cpc	r21, r1
 766:	78 f0       	brcs	.+30     	; 0x786 <__divsf3_pse+0x86>
 768:	0c 94 4e 04 	jmp	0x89c	; 0x89c <__fp_inf>
 76c:	0c 94 99 04 	jmp	0x932	; 0x932 <__fp_szero>
 770:	5f 3f       	cpi	r21, 0xFF	; 255
 772:	e4 f3       	brlt	.-8      	; 0x76c <__divsf3_pse+0x6c>
 774:	98 3e       	cpi	r25, 0xE8	; 232
 776:	d4 f3       	brlt	.-12     	; 0x76c <__divsf3_pse+0x6c>
 778:	86 95       	lsr	r24
 77a:	77 95       	ror	r23
 77c:	67 95       	ror	r22
 77e:	b7 95       	ror	r27
 780:	f7 95       	ror	r31
 782:	9f 5f       	subi	r25, 0xFF	; 255
 784:	c9 f7       	brne	.-14     	; 0x778 <__divsf3_pse+0x78>
 786:	88 0f       	add	r24, r24
 788:	91 1d       	adc	r25, r1
 78a:	96 95       	lsr	r25
 78c:	87 95       	ror	r24
 78e:	97 f9       	bld	r25, 7
 790:	08 95       	ret
 792:	e1 e0       	ldi	r30, 0x01	; 1
 794:	66 0f       	add	r22, r22
 796:	77 1f       	adc	r23, r23
 798:	88 1f       	adc	r24, r24
 79a:	bb 1f       	adc	r27, r27
 79c:	62 17       	cp	r22, r18
 79e:	73 07       	cpc	r23, r19
 7a0:	84 07       	cpc	r24, r20
 7a2:	ba 07       	cpc	r27, r26
 7a4:	20 f0       	brcs	.+8      	; 0x7ae <__divsf3_pse+0xae>
 7a6:	62 1b       	sub	r22, r18
 7a8:	73 0b       	sbc	r23, r19
 7aa:	84 0b       	sbc	r24, r20
 7ac:	ba 0b       	sbc	r27, r26
 7ae:	ee 1f       	adc	r30, r30
 7b0:	88 f7       	brcc	.-30     	; 0x794 <__divsf3_pse+0x94>
 7b2:	e0 95       	com	r30
 7b4:	08 95       	ret

000007b6 <__fixsfsi>:
 7b6:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <__fixunssfsi>
 7ba:	68 94       	set
 7bc:	b1 11       	cpse	r27, r1
 7be:	0c 94 99 04 	jmp	0x932	; 0x932 <__fp_szero>
 7c2:	08 95       	ret

000007c4 <__fixunssfsi>:
 7c4:	0e 94 7e 04 	call	0x8fc	; 0x8fc <__fp_splitA>
 7c8:	88 f0       	brcs	.+34     	; 0x7ec <__fixunssfsi+0x28>
 7ca:	9f 57       	subi	r25, 0x7F	; 127
 7cc:	98 f0       	brcs	.+38     	; 0x7f4 <__fixunssfsi+0x30>
 7ce:	b9 2f       	mov	r27, r25
 7d0:	99 27       	eor	r25, r25
 7d2:	b7 51       	subi	r27, 0x17	; 23
 7d4:	b0 f0       	brcs	.+44     	; 0x802 <__fixunssfsi+0x3e>
 7d6:	e1 f0       	breq	.+56     	; 0x810 <__fixunssfsi+0x4c>
 7d8:	66 0f       	add	r22, r22
 7da:	77 1f       	adc	r23, r23
 7dc:	88 1f       	adc	r24, r24
 7de:	99 1f       	adc	r25, r25
 7e0:	1a f0       	brmi	.+6      	; 0x7e8 <__fixunssfsi+0x24>
 7e2:	ba 95       	dec	r27
 7e4:	c9 f7       	brne	.-14     	; 0x7d8 <__fixunssfsi+0x14>
 7e6:	14 c0       	rjmp	.+40     	; 0x810 <__fixunssfsi+0x4c>
 7e8:	b1 30       	cpi	r27, 0x01	; 1
 7ea:	91 f0       	breq	.+36     	; 0x810 <__fixunssfsi+0x4c>
 7ec:	0e 94 98 04 	call	0x930	; 0x930 <__fp_zero>
 7f0:	b1 e0       	ldi	r27, 0x01	; 1
 7f2:	08 95       	ret
 7f4:	0c 94 98 04 	jmp	0x930	; 0x930 <__fp_zero>
 7f8:	67 2f       	mov	r22, r23
 7fa:	78 2f       	mov	r23, r24
 7fc:	88 27       	eor	r24, r24
 7fe:	b8 5f       	subi	r27, 0xF8	; 248
 800:	39 f0       	breq	.+14     	; 0x810 <__fixunssfsi+0x4c>
 802:	b9 3f       	cpi	r27, 0xF9	; 249
 804:	cc f3       	brlt	.-14     	; 0x7f8 <__fixunssfsi+0x34>
 806:	86 95       	lsr	r24
 808:	77 95       	ror	r23
 80a:	67 95       	ror	r22
 80c:	b3 95       	inc	r27
 80e:	d9 f7       	brne	.-10     	; 0x806 <__fixunssfsi+0x42>
 810:	3e f4       	brtc	.+14     	; 0x820 <__fixunssfsi+0x5c>
 812:	90 95       	com	r25
 814:	80 95       	com	r24
 816:	70 95       	com	r23
 818:	61 95       	neg	r22
 81a:	7f 4f       	sbci	r23, 0xFF	; 255
 81c:	8f 4f       	sbci	r24, 0xFF	; 255
 81e:	9f 4f       	sbci	r25, 0xFF	; 255
 820:	08 95       	ret

00000822 <__floatunsisf>:
 822:	e8 94       	clt
 824:	09 c0       	rjmp	.+18     	; 0x838 <__floatsisf+0x12>

00000826 <__floatsisf>:
 826:	97 fb       	bst	r25, 7
 828:	3e f4       	brtc	.+14     	; 0x838 <__floatsisf+0x12>
 82a:	90 95       	com	r25
 82c:	80 95       	com	r24
 82e:	70 95       	com	r23
 830:	61 95       	neg	r22
 832:	7f 4f       	sbci	r23, 0xFF	; 255
 834:	8f 4f       	sbci	r24, 0xFF	; 255
 836:	9f 4f       	sbci	r25, 0xFF	; 255
 838:	99 23       	and	r25, r25
 83a:	a9 f0       	breq	.+42     	; 0x866 <__floatsisf+0x40>
 83c:	f9 2f       	mov	r31, r25
 83e:	96 e9       	ldi	r25, 0x96	; 150
 840:	bb 27       	eor	r27, r27
 842:	93 95       	inc	r25
 844:	f6 95       	lsr	r31
 846:	87 95       	ror	r24
 848:	77 95       	ror	r23
 84a:	67 95       	ror	r22
 84c:	b7 95       	ror	r27
 84e:	f1 11       	cpse	r31, r1
 850:	f8 cf       	rjmp	.-16     	; 0x842 <__floatsisf+0x1c>
 852:	fa f4       	brpl	.+62     	; 0x892 <__floatsisf+0x6c>
 854:	bb 0f       	add	r27, r27
 856:	11 f4       	brne	.+4      	; 0x85c <__floatsisf+0x36>
 858:	60 ff       	sbrs	r22, 0
 85a:	1b c0       	rjmp	.+54     	; 0x892 <__floatsisf+0x6c>
 85c:	6f 5f       	subi	r22, 0xFF	; 255
 85e:	7f 4f       	sbci	r23, 0xFF	; 255
 860:	8f 4f       	sbci	r24, 0xFF	; 255
 862:	9f 4f       	sbci	r25, 0xFF	; 255
 864:	16 c0       	rjmp	.+44     	; 0x892 <__floatsisf+0x6c>
 866:	88 23       	and	r24, r24
 868:	11 f0       	breq	.+4      	; 0x86e <__floatsisf+0x48>
 86a:	96 e9       	ldi	r25, 0x96	; 150
 86c:	11 c0       	rjmp	.+34     	; 0x890 <__floatsisf+0x6a>
 86e:	77 23       	and	r23, r23
 870:	21 f0       	breq	.+8      	; 0x87a <__floatsisf+0x54>
 872:	9e e8       	ldi	r25, 0x8E	; 142
 874:	87 2f       	mov	r24, r23
 876:	76 2f       	mov	r23, r22
 878:	05 c0       	rjmp	.+10     	; 0x884 <__floatsisf+0x5e>
 87a:	66 23       	and	r22, r22
 87c:	71 f0       	breq	.+28     	; 0x89a <__floatsisf+0x74>
 87e:	96 e8       	ldi	r25, 0x86	; 134
 880:	86 2f       	mov	r24, r22
 882:	70 e0       	ldi	r23, 0x00	; 0
 884:	60 e0       	ldi	r22, 0x00	; 0
 886:	2a f0       	brmi	.+10     	; 0x892 <__floatsisf+0x6c>
 888:	9a 95       	dec	r25
 88a:	66 0f       	add	r22, r22
 88c:	77 1f       	adc	r23, r23
 88e:	88 1f       	adc	r24, r24
 890:	da f7       	brpl	.-10     	; 0x888 <__floatsisf+0x62>
 892:	88 0f       	add	r24, r24
 894:	96 95       	lsr	r25
 896:	87 95       	ror	r24
 898:	97 f9       	bld	r25, 7
 89a:	08 95       	ret

0000089c <__fp_inf>:
 89c:	97 f9       	bld	r25, 7
 89e:	9f 67       	ori	r25, 0x7F	; 127
 8a0:	80 e8       	ldi	r24, 0x80	; 128
 8a2:	70 e0       	ldi	r23, 0x00	; 0
 8a4:	60 e0       	ldi	r22, 0x00	; 0
 8a6:	08 95       	ret

000008a8 <__fp_nan>:
 8a8:	9f ef       	ldi	r25, 0xFF	; 255
 8aa:	80 ec       	ldi	r24, 0xC0	; 192
 8ac:	08 95       	ret

000008ae <__fp_pscA>:
 8ae:	00 24       	eor	r0, r0
 8b0:	0a 94       	dec	r0
 8b2:	16 16       	cp	r1, r22
 8b4:	17 06       	cpc	r1, r23
 8b6:	18 06       	cpc	r1, r24
 8b8:	09 06       	cpc	r0, r25
 8ba:	08 95       	ret

000008bc <__fp_pscB>:
 8bc:	00 24       	eor	r0, r0
 8be:	0a 94       	dec	r0
 8c0:	12 16       	cp	r1, r18
 8c2:	13 06       	cpc	r1, r19
 8c4:	14 06       	cpc	r1, r20
 8c6:	05 06       	cpc	r0, r21
 8c8:	08 95       	ret

000008ca <__fp_round>:
 8ca:	09 2e       	mov	r0, r25
 8cc:	03 94       	inc	r0
 8ce:	00 0c       	add	r0, r0
 8d0:	11 f4       	brne	.+4      	; 0x8d6 <__fp_round+0xc>
 8d2:	88 23       	and	r24, r24
 8d4:	52 f0       	brmi	.+20     	; 0x8ea <__fp_round+0x20>
 8d6:	bb 0f       	add	r27, r27
 8d8:	40 f4       	brcc	.+16     	; 0x8ea <__fp_round+0x20>
 8da:	bf 2b       	or	r27, r31
 8dc:	11 f4       	brne	.+4      	; 0x8e2 <__fp_round+0x18>
 8de:	60 ff       	sbrs	r22, 0
 8e0:	04 c0       	rjmp	.+8      	; 0x8ea <__fp_round+0x20>
 8e2:	6f 5f       	subi	r22, 0xFF	; 255
 8e4:	7f 4f       	sbci	r23, 0xFF	; 255
 8e6:	8f 4f       	sbci	r24, 0xFF	; 255
 8e8:	9f 4f       	sbci	r25, 0xFF	; 255
 8ea:	08 95       	ret

000008ec <__fp_split3>:
 8ec:	57 fd       	sbrc	r21, 7
 8ee:	90 58       	subi	r25, 0x80	; 128
 8f0:	44 0f       	add	r20, r20
 8f2:	55 1f       	adc	r21, r21
 8f4:	59 f0       	breq	.+22     	; 0x90c <__stack+0xd>
 8f6:	5f 3f       	cpi	r21, 0xFF	; 255
 8f8:	71 f0       	breq	.+28     	; 0x916 <__stack+0x17>
 8fa:	47 95       	ror	r20

000008fc <__fp_splitA>:
 8fc:	88 0f       	add	r24, r24
 8fe:	97 fb       	bst	r25, 7
 900:	99 1f       	adc	r25, r25
 902:	61 f0       	breq	.+24     	; 0x91c <__stack+0x1d>
 904:	9f 3f       	cpi	r25, 0xFF	; 255
 906:	79 f0       	breq	.+30     	; 0x926 <__stack+0x27>
 908:	87 95       	ror	r24
 90a:	08 95       	ret
 90c:	12 16       	cp	r1, r18
 90e:	13 06       	cpc	r1, r19
 910:	14 06       	cpc	r1, r20
 912:	55 1f       	adc	r21, r21
 914:	f2 cf       	rjmp	.-28     	; 0x8fa <__fp_split3+0xe>
 916:	46 95       	lsr	r20
 918:	f1 df       	rcall	.-30     	; 0x8fc <__fp_splitA>
 91a:	08 c0       	rjmp	.+16     	; 0x92c <__stack+0x2d>
 91c:	16 16       	cp	r1, r22
 91e:	17 06       	cpc	r1, r23
 920:	18 06       	cpc	r1, r24
 922:	99 1f       	adc	r25, r25
 924:	f1 cf       	rjmp	.-30     	; 0x908 <__stack+0x9>
 926:	86 95       	lsr	r24
 928:	71 05       	cpc	r23, r1
 92a:	61 05       	cpc	r22, r1
 92c:	08 94       	sec
 92e:	08 95       	ret

00000930 <__fp_zero>:
 930:	e8 94       	clt

00000932 <__fp_szero>:
 932:	bb 27       	eor	r27, r27
 934:	66 27       	eor	r22, r22
 936:	77 27       	eor	r23, r23
 938:	cb 01       	movw	r24, r22
 93a:	97 f9       	bld	r25, 7
 93c:	08 95       	ret

0000093e <__gesf2>:
 93e:	0e 94 19 05 	call	0xa32	; 0xa32 <__fp_cmp>
 942:	08 f4       	brcc	.+2      	; 0x946 <__gesf2+0x8>
 944:	8f ef       	ldi	r24, 0xFF	; 255
 946:	08 95       	ret

00000948 <__mulsf3>:
 948:	0e 94 b7 04 	call	0x96e	; 0x96e <__mulsf3x>
 94c:	0c 94 65 04 	jmp	0x8ca	; 0x8ca <__fp_round>
 950:	0e 94 57 04 	call	0x8ae	; 0x8ae <__fp_pscA>
 954:	38 f0       	brcs	.+14     	; 0x964 <__mulsf3+0x1c>
 956:	0e 94 5e 04 	call	0x8bc	; 0x8bc <__fp_pscB>
 95a:	20 f0       	brcs	.+8      	; 0x964 <__mulsf3+0x1c>
 95c:	95 23       	and	r25, r21
 95e:	11 f0       	breq	.+4      	; 0x964 <__mulsf3+0x1c>
 960:	0c 94 4e 04 	jmp	0x89c	; 0x89c <__fp_inf>
 964:	0c 94 54 04 	jmp	0x8a8	; 0x8a8 <__fp_nan>
 968:	11 24       	eor	r1, r1
 96a:	0c 94 99 04 	jmp	0x932	; 0x932 <__fp_szero>

0000096e <__mulsf3x>:
 96e:	0e 94 76 04 	call	0x8ec	; 0x8ec <__fp_split3>
 972:	70 f3       	brcs	.-36     	; 0x950 <__mulsf3+0x8>

00000974 <__mulsf3_pse>:
 974:	95 9f       	mul	r25, r21
 976:	c1 f3       	breq	.-16     	; 0x968 <__mulsf3+0x20>
 978:	95 0f       	add	r25, r21
 97a:	50 e0       	ldi	r21, 0x00	; 0
 97c:	55 1f       	adc	r21, r21
 97e:	62 9f       	mul	r22, r18
 980:	f0 01       	movw	r30, r0
 982:	72 9f       	mul	r23, r18
 984:	bb 27       	eor	r27, r27
 986:	f0 0d       	add	r31, r0
 988:	b1 1d       	adc	r27, r1
 98a:	63 9f       	mul	r22, r19
 98c:	aa 27       	eor	r26, r26
 98e:	f0 0d       	add	r31, r0
 990:	b1 1d       	adc	r27, r1
 992:	aa 1f       	adc	r26, r26
 994:	64 9f       	mul	r22, r20
 996:	66 27       	eor	r22, r22
 998:	b0 0d       	add	r27, r0
 99a:	a1 1d       	adc	r26, r1
 99c:	66 1f       	adc	r22, r22
 99e:	82 9f       	mul	r24, r18
 9a0:	22 27       	eor	r18, r18
 9a2:	b0 0d       	add	r27, r0
 9a4:	a1 1d       	adc	r26, r1
 9a6:	62 1f       	adc	r22, r18
 9a8:	73 9f       	mul	r23, r19
 9aa:	b0 0d       	add	r27, r0
 9ac:	a1 1d       	adc	r26, r1
 9ae:	62 1f       	adc	r22, r18
 9b0:	83 9f       	mul	r24, r19
 9b2:	a0 0d       	add	r26, r0
 9b4:	61 1d       	adc	r22, r1
 9b6:	22 1f       	adc	r18, r18
 9b8:	74 9f       	mul	r23, r20
 9ba:	33 27       	eor	r19, r19
 9bc:	a0 0d       	add	r26, r0
 9be:	61 1d       	adc	r22, r1
 9c0:	23 1f       	adc	r18, r19
 9c2:	84 9f       	mul	r24, r20
 9c4:	60 0d       	add	r22, r0
 9c6:	21 1d       	adc	r18, r1
 9c8:	82 2f       	mov	r24, r18
 9ca:	76 2f       	mov	r23, r22
 9cc:	6a 2f       	mov	r22, r26
 9ce:	11 24       	eor	r1, r1
 9d0:	9f 57       	subi	r25, 0x7F	; 127
 9d2:	50 40       	sbci	r21, 0x00	; 0
 9d4:	9a f0       	brmi	.+38     	; 0x9fc <__mulsf3_pse+0x88>
 9d6:	f1 f0       	breq	.+60     	; 0xa14 <__mulsf3_pse+0xa0>
 9d8:	88 23       	and	r24, r24
 9da:	4a f0       	brmi	.+18     	; 0x9ee <__mulsf3_pse+0x7a>
 9dc:	ee 0f       	add	r30, r30
 9de:	ff 1f       	adc	r31, r31
 9e0:	bb 1f       	adc	r27, r27
 9e2:	66 1f       	adc	r22, r22
 9e4:	77 1f       	adc	r23, r23
 9e6:	88 1f       	adc	r24, r24
 9e8:	91 50       	subi	r25, 0x01	; 1
 9ea:	50 40       	sbci	r21, 0x00	; 0
 9ec:	a9 f7       	brne	.-22     	; 0x9d8 <__mulsf3_pse+0x64>
 9ee:	9e 3f       	cpi	r25, 0xFE	; 254
 9f0:	51 05       	cpc	r21, r1
 9f2:	80 f0       	brcs	.+32     	; 0xa14 <__mulsf3_pse+0xa0>
 9f4:	0c 94 4e 04 	jmp	0x89c	; 0x89c <__fp_inf>
 9f8:	0c 94 99 04 	jmp	0x932	; 0x932 <__fp_szero>
 9fc:	5f 3f       	cpi	r21, 0xFF	; 255
 9fe:	e4 f3       	brlt	.-8      	; 0x9f8 <__mulsf3_pse+0x84>
 a00:	98 3e       	cpi	r25, 0xE8	; 232
 a02:	d4 f3       	brlt	.-12     	; 0x9f8 <__mulsf3_pse+0x84>
 a04:	86 95       	lsr	r24
 a06:	77 95       	ror	r23
 a08:	67 95       	ror	r22
 a0a:	b7 95       	ror	r27
 a0c:	f7 95       	ror	r31
 a0e:	e7 95       	ror	r30
 a10:	9f 5f       	subi	r25, 0xFF	; 255
 a12:	c1 f7       	brne	.-16     	; 0xa04 <__mulsf3_pse+0x90>
 a14:	fe 2b       	or	r31, r30
 a16:	88 0f       	add	r24, r24
 a18:	91 1d       	adc	r25, r1
 a1a:	96 95       	lsr	r25
 a1c:	87 95       	ror	r24
 a1e:	97 f9       	bld	r25, 7
 a20:	08 95       	ret

00000a22 <sin>:
 a22:	9f 93       	push	r25
 a24:	0e 94 3f 05 	call	0xa7e	; 0xa7e <__fp_rempio2>
 a28:	0f 90       	pop	r0
 a2a:	07 fc       	sbrc	r0, 7
 a2c:	ee 5f       	subi	r30, 0xFE	; 254
 a2e:	0c 94 68 05 	jmp	0xad0	; 0xad0 <__fp_sinus>

00000a32 <__fp_cmp>:
 a32:	99 0f       	add	r25, r25
 a34:	00 08       	sbc	r0, r0
 a36:	55 0f       	add	r21, r21
 a38:	aa 0b       	sbc	r26, r26
 a3a:	e0 e8       	ldi	r30, 0x80	; 128
 a3c:	fe ef       	ldi	r31, 0xFE	; 254
 a3e:	16 16       	cp	r1, r22
 a40:	17 06       	cpc	r1, r23
 a42:	e8 07       	cpc	r30, r24
 a44:	f9 07       	cpc	r31, r25
 a46:	c0 f0       	brcs	.+48     	; 0xa78 <__fp_cmp+0x46>
 a48:	12 16       	cp	r1, r18
 a4a:	13 06       	cpc	r1, r19
 a4c:	e4 07       	cpc	r30, r20
 a4e:	f5 07       	cpc	r31, r21
 a50:	98 f0       	brcs	.+38     	; 0xa78 <__fp_cmp+0x46>
 a52:	62 1b       	sub	r22, r18
 a54:	73 0b       	sbc	r23, r19
 a56:	84 0b       	sbc	r24, r20
 a58:	95 0b       	sbc	r25, r21
 a5a:	39 f4       	brne	.+14     	; 0xa6a <__fp_cmp+0x38>
 a5c:	0a 26       	eor	r0, r26
 a5e:	61 f0       	breq	.+24     	; 0xa78 <__fp_cmp+0x46>
 a60:	23 2b       	or	r18, r19
 a62:	24 2b       	or	r18, r20
 a64:	25 2b       	or	r18, r21
 a66:	21 f4       	brne	.+8      	; 0xa70 <__fp_cmp+0x3e>
 a68:	08 95       	ret
 a6a:	0a 26       	eor	r0, r26
 a6c:	09 f4       	brne	.+2      	; 0xa70 <__fp_cmp+0x3e>
 a6e:	a1 40       	sbci	r26, 0x01	; 1
 a70:	a6 95       	lsr	r26
 a72:	8f ef       	ldi	r24, 0xFF	; 255
 a74:	81 1d       	adc	r24, r1
 a76:	81 1d       	adc	r24, r1
 a78:	08 95       	ret
 a7a:	0c 94 54 04 	jmp	0x8a8	; 0x8a8 <__fp_nan>

00000a7e <__fp_rempio2>:
 a7e:	0e 94 7e 04 	call	0x8fc	; 0x8fc <__fp_splitA>
 a82:	d8 f3       	brcs	.-10     	; 0xa7a <__fp_cmp+0x48>
 a84:	e8 94       	clt
 a86:	e0 e0       	ldi	r30, 0x00	; 0
 a88:	bb 27       	eor	r27, r27
 a8a:	9f 57       	subi	r25, 0x7F	; 127
 a8c:	f0 f0       	brcs	.+60     	; 0xaca <__fp_rempio2+0x4c>
 a8e:	2a ed       	ldi	r18, 0xDA	; 218
 a90:	3f e0       	ldi	r19, 0x0F	; 15
 a92:	49 ec       	ldi	r20, 0xC9	; 201
 a94:	06 c0       	rjmp	.+12     	; 0xaa2 <__fp_rempio2+0x24>
 a96:	ee 0f       	add	r30, r30
 a98:	bb 0f       	add	r27, r27
 a9a:	66 1f       	adc	r22, r22
 a9c:	77 1f       	adc	r23, r23
 a9e:	88 1f       	adc	r24, r24
 aa0:	28 f0       	brcs	.+10     	; 0xaac <__fp_rempio2+0x2e>
 aa2:	b2 3a       	cpi	r27, 0xA2	; 162
 aa4:	62 07       	cpc	r22, r18
 aa6:	73 07       	cpc	r23, r19
 aa8:	84 07       	cpc	r24, r20
 aaa:	28 f0       	brcs	.+10     	; 0xab6 <__fp_rempio2+0x38>
 aac:	b2 5a       	subi	r27, 0xA2	; 162
 aae:	62 0b       	sbc	r22, r18
 ab0:	73 0b       	sbc	r23, r19
 ab2:	84 0b       	sbc	r24, r20
 ab4:	e3 95       	inc	r30
 ab6:	9a 95       	dec	r25
 ab8:	72 f7       	brpl	.-36     	; 0xa96 <__fp_rempio2+0x18>
 aba:	80 38       	cpi	r24, 0x80	; 128
 abc:	30 f4       	brcc	.+12     	; 0xaca <__fp_rempio2+0x4c>
 abe:	9a 95       	dec	r25
 ac0:	bb 0f       	add	r27, r27
 ac2:	66 1f       	adc	r22, r22
 ac4:	77 1f       	adc	r23, r23
 ac6:	88 1f       	adc	r24, r24
 ac8:	d2 f7       	brpl	.-12     	; 0xabe <__fp_rempio2+0x40>
 aca:	90 48       	sbci	r25, 0x80	; 128
 acc:	0c 94 7e 05 	jmp	0xafc	; 0xafc <__fp_mpack_finite>

00000ad0 <__fp_sinus>:
 ad0:	ef 93       	push	r30
 ad2:	e0 ff       	sbrs	r30, 0
 ad4:	07 c0       	rjmp	.+14     	; 0xae4 <__fp_sinus+0x14>
 ad6:	a2 ea       	ldi	r26, 0xA2	; 162
 ad8:	2a ed       	ldi	r18, 0xDA	; 218
 ada:	3f e0       	ldi	r19, 0x0F	; 15
 adc:	49 ec       	ldi	r20, 0xC9	; 201
 ade:	5f eb       	ldi	r21, 0xBF	; 191
 ae0:	0e 94 14 03 	call	0x628	; 0x628 <__addsf3x>
 ae4:	0e 94 65 04 	call	0x8ca	; 0x8ca <__fp_round>
 ae8:	0f 90       	pop	r0
 aea:	03 94       	inc	r0
 aec:	01 fc       	sbrc	r0, 1
 aee:	90 58       	subi	r25, 0x80	; 128
 af0:	e8 e6       	ldi	r30, 0x68	; 104
 af2:	f0 e0       	ldi	r31, 0x00	; 0
 af4:	0c 94 8a 05 	jmp	0xb14	; 0xb14 <__fp_powsodd>

00000af8 <__fp_mpack>:
 af8:	9f 3f       	cpi	r25, 0xFF	; 255
 afa:	31 f0       	breq	.+12     	; 0xb08 <__fp_mpack_finite+0xc>

00000afc <__fp_mpack_finite>:
 afc:	91 50       	subi	r25, 0x01	; 1
 afe:	20 f4       	brcc	.+8      	; 0xb08 <__fp_mpack_finite+0xc>
 b00:	87 95       	ror	r24
 b02:	77 95       	ror	r23
 b04:	67 95       	ror	r22
 b06:	b7 95       	ror	r27
 b08:	88 0f       	add	r24, r24
 b0a:	91 1d       	adc	r25, r1
 b0c:	96 95       	lsr	r25
 b0e:	87 95       	ror	r24
 b10:	97 f9       	bld	r25, 7
 b12:	08 95       	ret

00000b14 <__fp_powsodd>:
 b14:	9f 93       	push	r25
 b16:	8f 93       	push	r24
 b18:	7f 93       	push	r23
 b1a:	6f 93       	push	r22
 b1c:	ff 93       	push	r31
 b1e:	ef 93       	push	r30
 b20:	9b 01       	movw	r18, r22
 b22:	ac 01       	movw	r20, r24
 b24:	0e 94 a4 04 	call	0x948	; 0x948 <__mulsf3>
 b28:	ef 91       	pop	r30
 b2a:	ff 91       	pop	r31
 b2c:	0e 94 9e 05 	call	0xb3c	; 0xb3c <__fp_powser>
 b30:	2f 91       	pop	r18
 b32:	3f 91       	pop	r19
 b34:	4f 91       	pop	r20
 b36:	5f 91       	pop	r21
 b38:	0c 94 a4 04 	jmp	0x948	; 0x948 <__mulsf3>

00000b3c <__fp_powser>:
 b3c:	df 93       	push	r29
 b3e:	cf 93       	push	r28
 b40:	1f 93       	push	r17
 b42:	0f 93       	push	r16
 b44:	ff 92       	push	r15
 b46:	ef 92       	push	r14
 b48:	df 92       	push	r13
 b4a:	7b 01       	movw	r14, r22
 b4c:	8c 01       	movw	r16, r24
 b4e:	68 94       	set
 b50:	06 c0       	rjmp	.+12     	; 0xb5e <__fp_powser+0x22>
 b52:	da 2e       	mov	r13, r26
 b54:	ef 01       	movw	r28, r30
 b56:	0e 94 b7 04 	call	0x96e	; 0x96e <__mulsf3x>
 b5a:	fe 01       	movw	r30, r28
 b5c:	e8 94       	clt
 b5e:	a5 91       	lpm	r26, Z+
 b60:	25 91       	lpm	r18, Z+
 b62:	35 91       	lpm	r19, Z+
 b64:	45 91       	lpm	r20, Z+
 b66:	55 91       	lpm	r21, Z+
 b68:	a6 f3       	brts	.-24     	; 0xb52 <__fp_powser+0x16>
 b6a:	ef 01       	movw	r28, r30
 b6c:	0e 94 14 03 	call	0x628	; 0x628 <__addsf3x>
 b70:	fe 01       	movw	r30, r28
 b72:	97 01       	movw	r18, r14
 b74:	a8 01       	movw	r20, r16
 b76:	da 94       	dec	r13
 b78:	69 f7       	brne	.-38     	; 0xb54 <__fp_powser+0x18>
 b7a:	df 90       	pop	r13
 b7c:	ef 90       	pop	r14
 b7e:	ff 90       	pop	r15
 b80:	0f 91       	pop	r16
 b82:	1f 91       	pop	r17
 b84:	cf 91       	pop	r28
 b86:	df 91       	pop	r29
 b88:	08 95       	ret

00000b8a <__divmodhi4>:
 b8a:	97 fb       	bst	r25, 7
 b8c:	07 2e       	mov	r0, r23
 b8e:	16 f4       	brtc	.+4      	; 0xb94 <__divmodhi4+0xa>
 b90:	00 94       	com	r0
 b92:	07 d0       	rcall	.+14     	; 0xba2 <__divmodhi4_neg1>
 b94:	77 fd       	sbrc	r23, 7
 b96:	09 d0       	rcall	.+18     	; 0xbaa <__divmodhi4_neg2>
 b98:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <__udivmodhi4>
 b9c:	07 fc       	sbrc	r0, 7
 b9e:	05 d0       	rcall	.+10     	; 0xbaa <__divmodhi4_neg2>
 ba0:	3e f4       	brtc	.+14     	; 0xbb0 <__divmodhi4_exit>

00000ba2 <__divmodhi4_neg1>:
 ba2:	90 95       	com	r25
 ba4:	81 95       	neg	r24
 ba6:	9f 4f       	sbci	r25, 0xFF	; 255
 ba8:	08 95       	ret

00000baa <__divmodhi4_neg2>:
 baa:	70 95       	com	r23
 bac:	61 95       	neg	r22
 bae:	7f 4f       	sbci	r23, 0xFF	; 255

00000bb0 <__divmodhi4_exit>:
 bb0:	08 95       	ret

00000bb2 <__udivmodhi4>:
 bb2:	aa 1b       	sub	r26, r26
 bb4:	bb 1b       	sub	r27, r27
 bb6:	51 e1       	ldi	r21, 0x11	; 17
 bb8:	07 c0       	rjmp	.+14     	; 0xbc8 <__udivmodhi4_ep>

00000bba <__udivmodhi4_loop>:
 bba:	aa 1f       	adc	r26, r26
 bbc:	bb 1f       	adc	r27, r27
 bbe:	a6 17       	cp	r26, r22
 bc0:	b7 07       	cpc	r27, r23
 bc2:	10 f0       	brcs	.+4      	; 0xbc8 <__udivmodhi4_ep>
 bc4:	a6 1b       	sub	r26, r22
 bc6:	b7 0b       	sbc	r27, r23

00000bc8 <__udivmodhi4_ep>:
 bc8:	88 1f       	adc	r24, r24
 bca:	99 1f       	adc	r25, r25
 bcc:	5a 95       	dec	r21
 bce:	a9 f7       	brne	.-22     	; 0xbba <__udivmodhi4_loop>
 bd0:	80 95       	com	r24
 bd2:	90 95       	com	r25
 bd4:	bc 01       	movw	r22, r24
 bd6:	cd 01       	movw	r24, r26
 bd8:	08 95       	ret

00000bda <_exit>:
 bda:	f8 94       	cli

00000bdc <__stop_program>:
 bdc:	ff cf       	rjmp	.-2      	; 0xbdc <__stop_program>
