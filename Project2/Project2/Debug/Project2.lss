
Project2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
<<<<<<< HEAD
  0 .data         00000010  00800100  00000e3e  00000ed2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e3e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000004a4  00800110  00800110  00000ee2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ee2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000f14  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  00000f54  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ba8  00000000  00000000  00001074  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000487  00000000  00000000  00001c1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000521  00000000  00000000  000020a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000378  00000000  00000000  000025c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000041d  00000000  00000000  0000293c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008fd  00000000  00000000  00002d59  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  00003656  2**0
=======
  0 .data         00000010  00800100  00000e9e  00000f32  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e9e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000004a4  00800110  00800110  00000f42  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000f42  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000f74  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  00000fb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c61  00000000  00000000  000010d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000048f  00000000  00000000  00001d35  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000054b  00000000  00000000  000021c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000378  00000000  00000000  00002710  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000041d  00000000  00000000  00002a88  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008fd  00000000  00000000  00002ea5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  000037a2  2**0
>>>>>>> master
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 43 00 	jmp	0x86	; 0x86 <__ctors_end>
   4:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
   8:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
   c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  10:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  14:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  18:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
<<<<<<< HEAD
  1c:	0c 94 85 01 	jmp	0x30a	; 0x30a <__vector_7>
=======
  1c:	0c 94 b2 01 	jmp	0x364	; 0x364 <__vector_7>
>>>>>>> master
  20:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  24:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  28:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  2c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  30:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  34:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
<<<<<<< HEAD
  38:	0c 94 5f 01 	jmp	0x2be	; 0x2be <__vector_14>
=======
  38:	0c 94 8c 01 	jmp	0x318	; 0x318 <__vector_14>
>>>>>>> master
  3c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  40:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  44:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  48:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  4c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  50:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  54:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  58:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  5c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  60:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  64:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  68:	05 a8       	ldd	r0, Z+53	; 0x35
  6a:	4c cd       	rjmp	.-1384   	; 0xfffffb04 <__eeprom_end+0xff7efb04>
<<<<<<< HEAD
  6c:	b2 d4       	rcall	.+2404   	; 0x9d2 <__divsf3_pse+0x90>
=======
  6c:	b2 d4       	rcall	.+2404   	; 0x9d2 <__divsf3_pse+0x12>
>>>>>>> master
  6e:	4e b9       	out	0x0e, r20	; 14
  70:	38 36       	cpi	r19, 0x68	; 104
  72:	a9 02       	muls	r26, r25
  74:	0c 50       	subi	r16, 0x0C	; 12
  76:	b9 91       	ld	r27, Y+
  78:	86 88       	ldd	r8, Z+22	; 0x16
  7a:	08 3c       	cpi	r16, 0xC8	; 200
  7c:	a6 aa       	std	Z+54, r10	; 0x36
  7e:	aa 2a       	or	r10, r26
  80:	be 00       	.word	0x00be	; ????
  82:	00 00       	nop
  84:	80 3f       	cpi	r24, 0xF0	; 240

00000086 <__ctors_end>:
  86:	11 24       	eor	r1, r1
  88:	1f be       	out	0x3f, r1	; 63
  8a:	cf ef       	ldi	r28, 0xFF	; 255
  8c:	d8 e0       	ldi	r29, 0x08	; 8
  8e:	de bf       	out	0x3e, r29	; 62
  90:	cd bf       	out	0x3d, r28	; 61

00000092 <__do_copy_data>:
  92:	11 e0       	ldi	r17, 0x01	; 1
  94:	a0 e0       	ldi	r26, 0x00	; 0
  96:	b1 e0       	ldi	r27, 0x01	; 1
<<<<<<< HEAD
  98:	ee e3       	ldi	r30, 0x3E	; 62
=======
  98:	ee e9       	ldi	r30, 0x9E	; 158
>>>>>>> master
  9a:	fe e0       	ldi	r31, 0x0E	; 14
  9c:	02 c0       	rjmp	.+4      	; 0xa2 <__do_copy_data+0x10>
  9e:	05 90       	lpm	r0, Z+
  a0:	0d 92       	st	X+, r0
  a2:	a0 31       	cpi	r26, 0x10	; 16
  a4:	b1 07       	cpc	r27, r17
  a6:	d9 f7       	brne	.-10     	; 0x9e <__do_copy_data+0xc>

000000a8 <__do_clear_bss>:
  a8:	25 e0       	ldi	r18, 0x05	; 5
  aa:	a0 e1       	ldi	r26, 0x10	; 16
  ac:	b1 e0       	ldi	r27, 0x01	; 1
  ae:	01 c0       	rjmp	.+2      	; 0xb2 <.do_clear_bss_start>

000000b0 <.do_clear_bss_loop>:
  b0:	1d 92       	st	X+, r1

000000b2 <.do_clear_bss_start>:
  b2:	a4 3b       	cpi	r26, 0xB4	; 180
  b4:	b2 07       	cpc	r27, r18
  b6:	e1 f7       	brne	.-8      	; 0xb0 <.do_clear_bss_loop>
<<<<<<< HEAD
  b8:	0e 94 36 01 	call	0x26c	; 0x26c <main>
  bc:	0c 94 1d 07 	jmp	0xe3a	; 0xe3a <_exit>
=======
  b8:	0e 94 2e 01 	call	0x25c	; 0x25c <main>
  bc:	0c 94 4d 07 	jmp	0xe9a	; 0xe9a <_exit>
>>>>>>> master

000000c0 <__bad_interrupt>:
  c0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c4 <Initialize_ADC0>:
int sampleDivider = 1;

// sets up SPI system between ATmega328P and slave device(s)
void Initialize_ADC0(void)
{
   ADCSRA = 0x87;	//Turn On ADC and set prescaler (CLK/128)
  c4:	87 e8       	ldi	r24, 0x87	; 135
  c6:	80 93 7a 00 	sts	0x007A, r24
   ADCSRB = 0x00;	//turn off autotrigger
  ca:	10 92 7b 00 	sts	0x007B, r1
   ADMUX = 0x00;    	//Set ADC channel ADC0
  ce:	10 92 7c 00 	sts	0x007C, r1
  d2:	08 95       	ret

000000d4 <Initialize_SPI_Master>:
}

void Initialize_SPI_Master(){
   SPCR = (0<<SPIE) |               // No interrupts
  d4:	80 e5       	ldi	r24, 0x50	; 80
  d6:	8c bd       	out	0x2c, r24	; 44
   (1<<SPE) |                       // SPI enabled
   (1<<MSTR) ;                      // master
   SPSR = 0x00;                     // clear flags
  d8:	1d bc       	out	0x2d, r1	; 45
   PORTB = 1 << SS;                 // make sure SS is high
  da:	84 e0       	ldi	r24, 0x04	; 4
  dc:	85 b9       	out	0x05, r24	; 5
  de:	08 95       	ret

000000e0 <initTimer0>:
}

// Initializing timer 0 (change OCR0A for freq change!!!!!)
void initTimer0(){
   TCCR0A = 0x02;                   // timer CTC mode
  e0:	82 e0       	ldi	r24, 0x02	; 2
  e2:	84 bd       	out	0x24, r24	; 36
   OCR0A = overflow0;          // sets counter overflow
  e4:	90 91 03 01 	lds	r25, 0x0103
  e8:	97 bd       	out	0x27, r25	; 39
   TCCR0B = 0x02;                   // timer clk = system clk / 8 (2MHz)
  ea:	85 bd       	out	0x25, r24	; 37
   TIFR0 = 0x02;                    // Interrupt occurs at OCRF0A overflow
  ec:	85 bb       	out	0x15, r24	; 21
   TIMSK0 = 0x02;                   // OCRF0A overflow interrupt enabled
  ee:	80 93 6e 00 	sts	0x006E, r24
  f2:	08 95       	ret

000000f4 <initTimer2>:
}

void initTimer2(){
   TCCR2A = 0x02;                   // timer CTC mode
  f4:	82 e0       	ldi	r24, 0x02	; 2
  f6:	80 93 b0 00 	sts	0x00B0, r24
   OCR2A = overflow2;		        // sets counter overflow
  fa:	90 91 02 01 	lds	r25, 0x0102
  fe:	90 93 b3 00 	sts	0x00B3, r25
   TCCR2B = 0x04;                   // timer clk = system clk / 256 (2MHz)
 102:	94 e0       	ldi	r25, 0x04	; 4
 104:	90 93 b1 00 	sts	0x00B1, r25
   TIFR2 = 0x02;                    // Interrupt occurs at OCRF2A overflow
 108:	87 bb       	out	0x17, r24	; 23
   TIMSK2 = 0x02;                   // OCRF0A overflow interrupt enabled
 10a:	80 93 70 00 	sts	0x0070, r24
 10e:	08 95       	ret

00000110 <GPIO_Initialization>:
}


// initializes GPIO I/O, SPI interface, and interrupts
void GPIO_Initialization(){
   DDRB |= (1<<MOSI) | (1<<SCK) | (1<<SS);	// make MOSI, SCK and SS outputs
 110:	84 b1       	in	r24, 0x04	; 4
 112:	8c 62       	ori	r24, 0x2C	; 44
 114:	84 b9       	out	0x04, r24	; 4
   DDRD &= ~(1<<BTN1) | ~(1<<BTN1) | ~(1<<BTN2) | ~(1<<SW1);	// set buttons & switches as inputs
 116:	8a b1       	in	r24, 0x0a	; 10
 118:	8a b9       	out	0x0a, r24	; 10
   DDRD |= (1<<LED2) | (1<<LED3);				// debug LEDs are output
 11a:	8a b1       	in	r24, 0x0a	; 10
 11c:	8c 60       	ori	r24, 0x0C	; 12
 11e:	8a b9       	out	0x0a, r24	; 10
   PORTD |= (1<<BTN0) | (1<<BTN1) | (1<<BTN2);	// set internal pull-ups
 120:	8b b1       	in	r24, 0x0b	; 11
 122:	80 6e       	ori	r24, 0xE0	; 224
 124:	8b b9       	out	0x0b, r24	; 11
   Initialize_SPI_Master();			// initialize SPI to DAC
 126:	0e 94 6a 00 	call	0xd4	; 0xd4 <Initialize_SPI_Master>
   initTimer0();							// initialize timer0
 12a:	0e 94 70 00 	call	0xe0	; 0xe0 <initTimer0>
   initTimer2();
 12e:	0e 94 7a 00 	call	0xf4	; 0xf4 <initTimer2>
   Initialize_ADC0();
 132:	0e 94 62 00 	call	0xc4	; 0xc4 <Initialize_ADC0>
   sei();									// enable interrupts
 136:	78 94       	sei
 138:	08 95       	ret

0000013a <check_switch>:
   
   return btnPressed;
}

uint8_t check_switch(){
   if(PIND & 1<<SW1){
 13a:	99 b1       	in	r25, 0x09	; 9
 13c:	89 2f       	mov	r24, r25
 13e:	80 71       	andi	r24, 0x10	; 16
 140:	94 ff       	sbrs	r25, 4
 142:	03 c0       	rjmp	.+6      	; 0x14a <check_switch+0x10>
	   PORTD &= ~(1<<LED3);
 144:	5b 98       	cbi	0x0b, 3	; 11
	   return 1;
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	08 95       	ret
   }
	else{
		PORTD |= (1<<LED3);
 14a:	5b 9a       	sbi	0x0b, 3	; 11
		return 0;
	}
}
 14c:	08 95       	ret

0000014e <check_voltage>:

uint16_t check_voltage(){
   ADCSRA = 0xC7;        		// start conversion
 14e:	87 ec       	ldi	r24, 0xC7	; 199
 150:	80 93 7a 00 	sts	0x007A, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 154:	8f e0       	ldi	r24, 0x0F	; 15
 156:	94 e0       	ldi	r25, 0x04	; 4
 158:	01 97       	sbiw	r24, 0x01	; 1
 15a:	f1 f7       	brne	.-4      	; 0x158 <check_voltage+0xa>
 15c:	00 c0       	rjmp	.+0      	; 0x15e <check_voltage+0x10>
 15e:	00 00       	nop
   _delay_us(260);				// ensure max sampling rate not exceeded
   voltage = (ADC & 0x3FF)/4;  // read 10 bit voltage and convert to 8 bit (255)
 160:	80 91 78 00 	lds	r24, 0x0078
 164:	90 91 79 00 	lds	r25, 0x0079
 168:	93 70       	andi	r25, 0x03	; 3
 16a:	96 95       	lsr	r25
 16c:	87 95       	ror	r24
 16e:	96 95       	lsr	r25
 170:	87 95       	ror	r24
 172:	90 93 11 01 	sts	0x0111, r25
 176:	80 93 10 01 	sts	0x0110, r24
 17a:	00 97       	sbiw	r24, 0x00	; 0
 17c:	11 f4       	brne	.+4      	; 0x182 <check_voltage+0x34>
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	90 e0       	ldi	r25, 0x00	; 0
   if(voltage < 2)
      return 1;
   else
      return voltage;
}
 182:	08 95       	ret

00000184 <Transmit_SPI_Master>:

// sends data to DAC over SPI data port
void Transmit_SPI_Master(int Data) {
   PORTB &= ~(1 << SS);					//Assert slave select (active low)
 184:	2a 98       	cbi	0x05, 2	; 5
   SPDR = ((Data >> 8) & 0xF) | 0x70;		//Attach configuration Bits onto MSB
 186:	9f 70       	andi	r25, 0x0F	; 15
 188:	90 67       	ori	r25, 0x70	; 112
 18a:	9e bd       	out	0x2e, r25	; 46
   while (!(SPSR & (1<<SPIF)));
 18c:	0d b4       	in	r0, 0x2d	; 45
 18e:	07 fe       	sbrs	r0, 7
 190:	fd cf       	rjmp	.-6      	; 0x18c <Transmit_SPI_Master+0x8>
   SPDR = 0xFF & Data;
 192:	8e bd       	out	0x2e, r24	; 46
   while (!(SPSR & (1<<SPIF)));
 194:	0d b4       	in	r0, 0x2d	; 45
 196:	07 fe       	sbrs	r0, 7
 198:	fd cf       	rjmp	.-6      	; 0x194 <Transmit_SPI_Master+0x10>
   PORTB |= 1 << SS;						//Turn off slave select
 19a:	2a 9a       	sbi	0x05, 2	; 5
 19c:	08 95       	ret

0000019e <volts_to_bits>:
      _delay_ms(1);
   
}

// converts input voltage between 0-5V to 12bit number for DAC
uint16_t volts_to_bits(double voltage){
 19e:	cf 92       	push	r12
 1a0:	df 92       	push	r13
 1a2:	ef 92       	push	r14
 1a4:	ff 92       	push	r15
   double bits = ((voltage/5.0)*4095);
<<<<<<< HEAD
 1a6:	20 e0       	ldi	r18, 0x00	; 0
 1a8:	30 e0       	ldi	r19, 0x00	; 0
 1aa:	40 ea       	ldi	r20, 0xA0	; 160
 1ac:	50 e4       	ldi	r21, 0x40	; 64
 1ae:	0e 94 8a 04 	call	0x914	; 0x914 <__divsf3>
=======
 196:	20 e0       	ldi	r18, 0x00	; 0
 198:	30 e0       	ldi	r19, 0x00	; 0
 19a:	40 ea       	ldi	r20, 0xA0	; 160
 19c:	50 e4       	ldi	r21, 0x40	; 64
 19e:	0e 94 c9 04 	call	0x992	; 0x992 <__divsf3>
 1a2:	20 e0       	ldi	r18, 0x00	; 0
 1a4:	30 ef       	ldi	r19, 0xF0	; 240
 1a6:	4f e7       	ldi	r20, 0x7F	; 127
 1a8:	55 e4       	ldi	r21, 0x45	; 69
 1aa:	0e 94 04 06 	call	0xc08	; 0xc08 <__mulsf3>
 1ae:	6b 01       	movw	r12, r22
 1b0:	7c 01       	movw	r14, r24
   if(bits>4095)
>>>>>>> master
 1b2:	20 e0       	ldi	r18, 0x00	; 0
 1b4:	30 ef       	ldi	r19, 0xF0	; 240
 1b6:	4f e7       	ldi	r20, 0x7F	; 127
 1b8:	55 e4       	ldi	r21, 0x45	; 69
<<<<<<< HEAD
 1ba:	0e 94 c5 05 	call	0xb8a	; 0xb8a <__mulsf3>
 1be:	6b 01       	movw	r12, r22
 1c0:	7c 01       	movw	r14, r24
   if(bits>4095)
 1c2:	20 e0       	ldi	r18, 0x00	; 0
 1c4:	30 ef       	ldi	r19, 0xF0	; 240
 1c6:	4f e7       	ldi	r20, 0x7F	; 127
 1c8:	55 e4       	ldi	r21, 0x45	; 69
 1ca:	0e 94 c0 05 	call	0xb80	; 0xb80 <__gesf2>
 1ce:	18 16       	cp	r1, r24
 1d0:	34 f0       	brlt	.+12     	; 0x1de <volts_to_bits+0x40>
      return 4095;
   else
      return bits;                  // return 12bit equivalent for DAC
 1d2:	c7 01       	movw	r24, r14
 1d4:	b6 01       	movw	r22, r12
 1d6:	0e 94 03 05 	call	0xa06	; 0xa06 <__fixunssfsi>
 1da:	cb 01       	movw	r24, r22
 1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <volts_to_bits+0x44>
=======
 1ba:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__gesf2>
 1be:	18 16       	cp	r1, r24
 1c0:	34 f0       	brlt	.+12     	; 0x1ce <volts_to_bits+0x40>
		return 4095;
	else
	 return bits;                  // return 12bit equivalent for DAC
 1c2:	c7 01       	movw	r24, r14
 1c4:	b6 01       	movw	r22, r12
 1c6:	0e 94 42 05 	call	0xa84	; 0xa84 <__fixunssfsi>
 1ca:	cb 01       	movw	r24, r22
 1cc:	02 c0       	rjmp	.+4      	; 0x1d2 <volts_to_bits+0x44>
>>>>>>> master

// converts input voltage between 0-5V to 12bit number for DAC
uint16_t volts_to_bits(double voltage){
   double bits = ((voltage/5.0)*4095);
   if(bits>4095)
<<<<<<< HEAD
      return 4095;
 1de:	8f ef       	ldi	r24, 0xFF	; 255
 1e0:	9f e0       	ldi	r25, 0x0F	; 15
   else
      return bits;                  // return 12bit equivalent for DAC
=======
		return 4095;
 1ce:	8f ef       	ldi	r24, 0xFF	; 255
 1d0:	9f e0       	ldi	r25, 0x0F	; 15
	else
	 return bits;                  // return 12bit equivalent for DAC
}
 1d2:	ff 90       	pop	r15
 1d4:	ef 90       	pop	r14
 1d6:	df 90       	pop	r13
 1d8:	cf 90       	pop	r12
 1da:	08 95       	ret

000001dc <cycleFreq>:
//	OCR0A = overflow;          // sets counter overflow to 250
   sampleDivider++;
   sampleDivider %= 3;
>>>>>>> master
}
 1e2:	ff 90       	pop	r15
 1e4:	ef 90       	pop	r14
 1e6:	df 90       	pop	r13
 1e8:	cf 90       	pop	r12
 1ea:	08 95       	ret

000001ec <setFreq>:
void cycleFreq() {
<<<<<<< HEAD
=======
 1dc:	08 95       	ret

000001de <setFreq>:
>>>>>>> master
   
}

void setFreq(int level) {
   if (level == LEVEL_100){
<<<<<<< HEAD
 1ec:	84 30       	cpi	r24, 0x04	; 4
 1ee:	91 05       	cpc	r25, r1
 1f0:	51 f4       	brne	.+20     	; 0x206 <setFreq+0x1a>
      sampleDivider = 1;
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	90 93 01 01 	sts	0x0101, r25
 1fa:	80 93 00 01 	sts	0x0100, r24
      overflow0 = OVERFLOW_100HZ;
 1fe:	87 e8       	ldi	r24, 0x87	; 135
 200:	80 93 03 01 	sts	0x0103, r24
 204:	2f c0       	rjmp	.+94     	; 0x264 <setFreq+0x78>
   }
   else if (level == LEVEL_200) {
 206:	83 30       	cpi	r24, 0x03	; 3
 208:	91 05       	cpc	r25, r1
 20a:	51 f4       	brne	.+20     	; 0x220 <setFreq+0x34>
      sampleDivider = 1;
 20c:	81 e0       	ldi	r24, 0x01	; 1
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	90 93 01 01 	sts	0x0101, r25
 214:	80 93 00 01 	sts	0x0100, r24
      overflow0 = OVERFLOW_200HZ;
 218:	83 e4       	ldi	r24, 0x43	; 67
 21a:	80 93 03 01 	sts	0x0103, r24
 21e:	22 c0       	rjmp	.+68     	; 0x264 <setFreq+0x78>
   }
   else if (level == LEVEL_300) {
 220:	82 30       	cpi	r24, 0x02	; 2
 222:	91 05       	cpc	r25, r1
 224:	51 f4       	brne	.+20     	; 0x23a <setFreq+0x4e>
      sampleDivider = 2;
 226:	82 e0       	ldi	r24, 0x02	; 2
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	90 93 01 01 	sts	0x0101, r25
 22e:	80 93 00 01 	sts	0x0100, r24
      overflow0 = OVERFLOW_300HZ;
 232:	8a e5       	ldi	r24, 0x5A	; 90
 234:	80 93 03 01 	sts	0x0103, r24
 238:	15 c0       	rjmp	.+42     	; 0x264 <setFreq+0x78>
   }
   else if (level == LEVEL_400) {
 23a:	01 97       	sbiw	r24, 0x01	; 1
 23c:	51 f4       	brne	.+20     	; 0x252 <setFreq+0x66>
      sampleDivider = 2;
 23e:	82 e0       	ldi	r24, 0x02	; 2
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	90 93 01 01 	sts	0x0101, r25
 246:	80 93 00 01 	sts	0x0100, r24
      overflow0 = OVERFLOW_400HZ;
 24a:	83 e4       	ldi	r24, 0x43	; 67
 24c:	80 93 03 01 	sts	0x0103, r24
 250:	09 c0       	rjmp	.+18     	; 0x264 <setFreq+0x78>
   }
   else{
      sampleDivider = 2;
 252:	82 e0       	ldi	r24, 0x02	; 2
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	90 93 01 01 	sts	0x0101, r25
 25a:	80 93 00 01 	sts	0x0100, r24
      overflow0 = OVERFLOW_500HZ;
 25e:	86 e3       	ldi	r24, 0x36	; 54
 260:	80 93 03 01 	sts	0x0103, r24
   }
   OCR0A = overflow0;
 264:	80 91 03 01 	lds	r24, 0x0103
 268:	87 bd       	out	0x27, r24	; 39
 26a:	08 95       	ret

0000026c <main>:
=======
 1de:	00 97       	sbiw	r24, 0x00	; 0
 1e0:	51 f4       	brne	.+20     	; 0x1f6 <setFreq+0x18>
      sampleDivider = 1;
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	90 93 01 01 	sts	0x0101, r25
 1ea:	80 93 00 01 	sts	0x0100, r24
      overflow0 = OVERFLOW_100HZ;
 1ee:	87 e8       	ldi	r24, 0x87	; 135
 1f0:	80 93 03 01 	sts	0x0103, r24
 1f4:	2f c0       	rjmp	.+94     	; 0x254 <setFreq+0x76>
   }
   else if (level == LEVEL_200) {
 1f6:	81 30       	cpi	r24, 0x01	; 1
 1f8:	91 05       	cpc	r25, r1
 1fa:	51 f4       	brne	.+20     	; 0x210 <setFreq+0x32>
      sampleDivider = 1;
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	90 93 01 01 	sts	0x0101, r25
 204:	80 93 00 01 	sts	0x0100, r24
      overflow0 = OVERFLOW_200HZ;
 208:	83 e4       	ldi	r24, 0x43	; 67
 20a:	80 93 03 01 	sts	0x0103, r24
 20e:	22 c0       	rjmp	.+68     	; 0x254 <setFreq+0x76>
   }
   else if (level == LEVEL_300) {
 210:	82 30       	cpi	r24, 0x02	; 2
 212:	91 05       	cpc	r25, r1
 214:	51 f4       	brne	.+20     	; 0x22a <setFreq+0x4c>
      sampleDivider = 2;
 216:	82 e0       	ldi	r24, 0x02	; 2
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	90 93 01 01 	sts	0x0101, r25
 21e:	80 93 00 01 	sts	0x0100, r24
      overflow0 = OVERFLOW_300HZ;
 222:	8a e5       	ldi	r24, 0x5A	; 90
 224:	80 93 03 01 	sts	0x0103, r24
 228:	15 c0       	rjmp	.+42     	; 0x254 <setFreq+0x76>
   }
   else if (level == LEVEL_400) {
 22a:	03 97       	sbiw	r24, 0x03	; 3
 22c:	51 f4       	brne	.+20     	; 0x242 <setFreq+0x64>
      sampleDivider = 2;
 22e:	82 e0       	ldi	r24, 0x02	; 2
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	90 93 01 01 	sts	0x0101, r25
 236:	80 93 00 01 	sts	0x0100, r24
      overflow0 = OVERFLOW_400HZ;
 23a:	83 e4       	ldi	r24, 0x43	; 67
 23c:	80 93 03 01 	sts	0x0103, r24
 240:	09 c0       	rjmp	.+18     	; 0x254 <setFreq+0x76>
   }
   else{
      sampleDivider = 2;
 242:	82 e0       	ldi	r24, 0x02	; 2
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	90 93 01 01 	sts	0x0101, r25
 24a:	80 93 00 01 	sts	0x0100, r24
      overflow0 = OVERFLOW_500HZ;
 24e:	82 e3       	ldi	r24, 0x32	; 50
 250:	80 93 03 01 	sts	0x0103, r24
   }
   OCR0A = overflow0;
 254:	80 91 03 01 	lds	r24, 0x0103
 258:	87 bd       	out	0x27, r24	; 39
 25a:	08 95       	ret

0000025c <main>:
>>>>>>> master
uint8_t overflow2 = 63;	// set overflow value for button checking
uint16_t voltage = 0;

int main(void)
{
	num_samples = NUM_SAMPS;
<<<<<<< HEAD
 26c:	82 e9       	ldi	r24, 0x92	; 146
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	90 93 21 01 	sts	0x0121, r25
 274:	80 93 20 01 	sts	0x0120, r24
	
   // initialize GPIO, interrupts, and timers
   GPIO_Initialization();
 278:	0e 94 88 00 	call	0x110	; 0x110 <GPIO_Initialization>
   
   // fill square, sawtooth, triangle, and sine wave LUTs
   initWaves();
 27c:	0e 94 0e 04 	call	0x81c	; 0x81c <initWaves>
   
   // indicator LED that system is ready
   PORTD |= (1<<LED2);	
 280:	5a 9a       	sbi	0x0b, 2	; 11
   // Stuck here forever
   while (1){
		if (check_switch())
			setFreq(check_voltage()/52);
	else {
		sampleDivider = 2;
 282:	c2 e0       	ldi	r28, 0x02	; 2
 284:	d0 e0       	ldi	r29, 0x00	; 0
   // indicator LED that system is ready
   PORTD |= (1<<LED2);	
   
   // Stuck here forever
   while (1){
		if (check_switch())
 286:	0e 94 9d 00 	call	0x13a	; 0x13a <check_switch>
 28a:	88 23       	and	r24, r24
 28c:	81 f0       	breq	.+32     	; 0x2ae <main+0x42>
			setFreq(check_voltage()/52);
 28e:	0e 94 a7 00 	call	0x14e	; 0x14e <check_voltage>
 292:	9c 01       	movw	r18, r24
 294:	a5 ec       	ldi	r26, 0xC5	; 197
 296:	be e4       	ldi	r27, 0x4E	; 78
 298:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <__umulhisi3>
 29c:	92 95       	swap	r25
 29e:	82 95       	swap	r24
 2a0:	8f 70       	andi	r24, 0x0F	; 15
 2a2:	89 27       	eor	r24, r25
 2a4:	9f 70       	andi	r25, 0x0F	; 15
 2a6:	89 27       	eor	r24, r25
 2a8:	0e 94 f6 00 	call	0x1ec	; 0x1ec <setFreq>
 2ac:	ec cf       	rjmp	.-40     	; 0x286 <main+0x1a>
	else {
		sampleDivider = 2;
 2ae:	d0 93 01 01 	sts	0x0101, r29
 2b2:	c0 93 00 01 	sts	0x0100, r28
		OCR0A = check_voltage();
 2b6:	0e 94 a7 00 	call	0x14e	; 0x14e <check_voltage>
 2ba:	87 bd       	out	0x27, r24	; 39
 2bc:	e4 cf       	rjmp	.-56     	; 0x286 <main+0x1a>

000002be <__vector_14>:
=======
 25c:	82 e9       	ldi	r24, 0x92	; 146
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	90 93 21 01 	sts	0x0121, r25
 264:	80 93 20 01 	sts	0x0120, r24
	
   // initialize GPIO, interrupts, and timers
   GPIO_Initialization();
 268:	0e 94 88 00 	call	0x110	; 0x110 <GPIO_Initialization>
   
   // fill square, sawtooth, triangle, and sine wave LUTs
   initWaves();
 26c:	0e 94 4d 04 	call	0x89a	; 0x89a <initWaves>
   
   // enable interrupts
   sei();		
 270:	78 94       	sei
   
   // Stuck here forever
   while (1){
      if(check_voltage() <= 51) {
 272:	0e 94 9f 00 	call	0x13e	; 0x13e <check_voltage>
 276:	c4 97       	sbiw	r24, 0x34	; 52
 278:	30 f4       	brcc	.+12     	; 0x286 <main+0x2a>
			PORTD |= (1<<LED2);
 27a:	5a 9a       	sbi	0x0b, 2	; 11
         setFreq(LEVEL_500);
 27c:	84 e0       	ldi	r24, 0x04	; 4
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	0e 94 ef 00 	call	0x1de	; 0x1de <setFreq>
 284:	41 c0       	rjmp	.+130    	; 0x308 <main+0xac>
      }
      else if( check_voltage() > 51 && check_voltage() <= 102) {
 286:	0e 94 9f 00 	call	0x13e	; 0x13e <check_voltage>
 28a:	c4 97       	sbiw	r24, 0x34	; 52
 28c:	58 f0       	brcs	.+22     	; 0x2a4 <main+0x48>
 28e:	0e 94 9f 00 	call	0x13e	; 0x13e <check_voltage>
 292:	87 36       	cpi	r24, 0x67	; 103
 294:	91 05       	cpc	r25, r1
 296:	30 f4       	brcc	.+12     	; 0x2a4 <main+0x48>
			PORTD &= ~(1<<LED2);
 298:	5a 98       	cbi	0x0b, 2	; 11
         setFreq(LEVEL_400);
 29a:	83 e0       	ldi	r24, 0x03	; 3
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	0e 94 ef 00 	call	0x1de	; 0x1de <setFreq>
 2a2:	32 c0       	rjmp	.+100    	; 0x308 <main+0xac>
      }
      else if( check_voltage() > 102 && check_voltage() <= 153) {
 2a4:	0e 94 9f 00 	call	0x13e	; 0x13e <check_voltage>
 2a8:	87 36       	cpi	r24, 0x67	; 103
 2aa:	91 05       	cpc	r25, r1
 2ac:	58 f0       	brcs	.+22     	; 0x2c4 <main+0x68>
 2ae:	0e 94 9f 00 	call	0x13e	; 0x13e <check_voltage>
 2b2:	8a 39       	cpi	r24, 0x9A	; 154
 2b4:	91 05       	cpc	r25, r1
 2b6:	30 f4       	brcc	.+12     	; 0x2c4 <main+0x68>
			PORTD |= (1<<LED2);
 2b8:	5a 9a       	sbi	0x0b, 2	; 11
         setFreq(LEVEL_300);
 2ba:	82 e0       	ldi	r24, 0x02	; 2
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	0e 94 ef 00 	call	0x1de	; 0x1de <setFreq>
 2c2:	22 c0       	rjmp	.+68     	; 0x308 <main+0xac>
      }
      else if( check_voltage() > 153 && check_voltage() <= 204) {
 2c4:	0e 94 9f 00 	call	0x13e	; 0x13e <check_voltage>
 2c8:	8a 39       	cpi	r24, 0x9A	; 154
 2ca:	91 05       	cpc	r25, r1
 2cc:	58 f0       	brcs	.+22     	; 0x2e4 <main+0x88>
 2ce:	0e 94 9f 00 	call	0x13e	; 0x13e <check_voltage>
 2d2:	8d 3c       	cpi	r24, 0xCD	; 205
 2d4:	91 05       	cpc	r25, r1
 2d6:	30 f4       	brcc	.+12     	; 0x2e4 <main+0x88>
         PORTD &= ~(1<<LED2);
 2d8:	5a 98       	cbi	0x0b, 2	; 11
         setFreq(LEVEL_200);
 2da:	81 e0       	ldi	r24, 0x01	; 1
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	0e 94 ef 00 	call	0x1de	; 0x1de <setFreq>
 2e2:	12 c0       	rjmp	.+36     	; 0x308 <main+0xac>
      }
      else if( check_voltage() > 204 && check_voltage() <= 255) {
 2e4:	0e 94 9f 00 	call	0x13e	; 0x13e <check_voltage>
 2e8:	8d 3c       	cpi	r24, 0xCD	; 205
 2ea:	91 05       	cpc	r25, r1
 2ec:	60 f0       	brcs	.+24     	; 0x306 <main+0xaa>
 2ee:	0e 94 9f 00 	call	0x13e	; 0x13e <check_voltage>
 2f2:	8f 3f       	cpi	r24, 0xFF	; 255
 2f4:	91 05       	cpc	r25, r1
 2f6:	09 f0       	breq	.+2      	; 0x2fa <main+0x9e>
 2f8:	30 f4       	brcc	.+12     	; 0x306 <main+0xaa>
         PORTD |= (1<<LED2);
 2fa:	5a 9a       	sbi	0x0b, 2	; 11
         setFreq(LEVEL_100);
 2fc:	80 e0       	ldi	r24, 0x00	; 0
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	0e 94 ef 00 	call	0x1de	; 0x1de <setFreq>
 304:	01 c0       	rjmp	.+2      	; 0x308 <main+0xac>
      }
		else
			PORTD &= ~(1<<LED3);
 306:	5b 98       	cbi	0x0b, 3	; 11
			
		if(check_switch())
 308:	0e 94 9c 00 	call	0x138	; 0x138 <check_switch>
 30c:	88 23       	and	r24, r24
 30e:	11 f0       	breq	.+4      	; 0x314 <main+0xb8>
			PORTD |= (1<<LED3);
 310:	5b 9a       	sbi	0x0b, 3	; 11
 312:	af cf       	rjmp	.-162    	; 0x272 <main+0x16>
		else 
			PORTD &= ~(1<<LED3);	
 314:	5b 98       	cbi	0x0b, 3	; 11
 316:	ad cf       	rjmp	.-166    	; 0x272 <main+0x16>

00000318 <__vector_14>:
>>>>>>> master
}

///////////////////////////////////ISR/////////////////////////////////////////

// ISR to increment through wave function LUTs and set frequency
ISR(TIMER0_COMPA_vect){
<<<<<<< HEAD
 2be:	1f 92       	push	r1
 2c0:	0f 92       	push	r0
 2c2:	0f b6       	in	r0, 0x3f	; 63
 2c4:	0f 92       	push	r0
 2c6:	11 24       	eor	r1, r1
 2c8:	2f 93       	push	r18
 2ca:	3f 93       	push	r19
 2cc:	4f 93       	push	r20
 2ce:	5f 93       	push	r21
 2d0:	6f 93       	push	r22
 2d2:	7f 93       	push	r23
 2d4:	8f 93       	push	r24
 2d6:	9f 93       	push	r25
 2d8:	af 93       	push	r26
 2da:	bf 93       	push	r27
 2dc:	ef 93       	push	r30
 2de:	ff 93       	push	r31
   Transmit_SPI_Master(nextWavePoint());
 2e0:	0e 94 36 02 	call	0x46c	; 0x46c <nextWavePoint>
 2e4:	0e 94 c2 00 	call	0x184	; 0x184 <Transmit_SPI_Master>
   //PORTD |= (1<<LED2);
 
}
 2e8:	ff 91       	pop	r31
 2ea:	ef 91       	pop	r30
 2ec:	bf 91       	pop	r27
 2ee:	af 91       	pop	r26
 2f0:	9f 91       	pop	r25
 2f2:	8f 91       	pop	r24
 2f4:	7f 91       	pop	r23
 2f6:	6f 91       	pop	r22
 2f8:	5f 91       	pop	r21
 2fa:	4f 91       	pop	r20
 2fc:	3f 91       	pop	r19
 2fe:	2f 91       	pop	r18
 300:	0f 90       	pop	r0
 302:	0f be       	out	0x3f, r0	; 63
 304:	0f 90       	pop	r0
 306:	1f 90       	pop	r1
 308:	18 95       	reti

0000030a <__vector_7>:

ISR(TIMER2_COMPA_vect){
 30a:	1f 92       	push	r1
 30c:	0f 92       	push	r0
 30e:	0f b6       	in	r0, 0x3f	; 63
 310:	0f 92       	push	r0
 312:	11 24       	eor	r1, r1
 314:	2f 93       	push	r18
 316:	3f 93       	push	r19
 318:	4f 93       	push	r20
 31a:	5f 93       	push	r21
 31c:	6f 93       	push	r22
 31e:	7f 93       	push	r23
 320:	8f 93       	push	r24
 322:	9f 93       	push	r25
 324:	af 93       	push	r26
 326:	bf 93       	push	r27
 328:	ef 93       	push	r30
 32a:	ff 93       	push	r31
   if (!(PIND & 1 << BTN0))
 32c:	4f 99       	sbic	0x09, 7	; 9
 32e:	0a c0       	rjmp	.+20     	; 0x344 <__vector_7+0x3a>
      btn0++;
 330:	80 91 1c 01 	lds	r24, 0x011C
 334:	90 91 1d 01 	lds	r25, 0x011D
 338:	01 96       	adiw	r24, 0x01	; 1
 33a:	90 93 1d 01 	sts	0x011D, r25
 33e:	80 93 1c 01 	sts	0x011C, r24
 342:	08 c0       	rjmp	.+16     	; 0x354 <__vector_7+0x4a>
   else
      btn0 = was0Pressed = 0;
 344:	10 92 17 01 	sts	0x0117, r1
 348:	10 92 16 01 	sts	0x0116, r1
 34c:	10 92 1d 01 	sts	0x011D, r1
 350:	10 92 1c 01 	sts	0x011C, r1
   
   if (!(PIND & 1 << BTN1))
 354:	4e 99       	sbic	0x09, 6	; 9
 356:	0a c0       	rjmp	.+20     	; 0x36c <__vector_7+0x62>
      btn1++;
 358:	80 91 1a 01 	lds	r24, 0x011A
 35c:	90 91 1b 01 	lds	r25, 0x011B
 360:	01 96       	adiw	r24, 0x01	; 1
 362:	90 93 1b 01 	sts	0x011B, r25
 366:	80 93 1a 01 	sts	0x011A, r24
 36a:	08 c0       	rjmp	.+16     	; 0x37c <__vector_7+0x72>
   else
      btn1 = was1Pressed = 0;
 36c:	10 92 15 01 	sts	0x0115, r1
 370:	10 92 14 01 	sts	0x0114, r1
 374:	10 92 1b 01 	sts	0x011B, r1
 378:	10 92 1a 01 	sts	0x011A, r1
   
   if (!(PIND & 1 << BTN2))
 37c:	4d 99       	sbic	0x09, 5	; 9
 37e:	10 c0       	rjmp	.+32     	; 0x3a0 <__vector_7+0x96>
      btn2++;
 380:	80 91 18 01 	lds	r24, 0x0118
 384:	90 91 19 01 	lds	r25, 0x0119
 388:	01 96       	adiw	r24, 0x01	; 1
 38a:	90 93 19 01 	sts	0x0119, r25
 38e:	80 93 18 01 	sts	0x0118, r24
=======
 318:	1f 92       	push	r1
 31a:	0f 92       	push	r0
 31c:	0f b6       	in	r0, 0x3f	; 63
 31e:	0f 92       	push	r0
 320:	11 24       	eor	r1, r1
 322:	2f 93       	push	r18
 324:	3f 93       	push	r19
 326:	4f 93       	push	r20
 328:	5f 93       	push	r21
 32a:	6f 93       	push	r22
 32c:	7f 93       	push	r23
 32e:	8f 93       	push	r24
 330:	9f 93       	push	r25
 332:	af 93       	push	r26
 334:	bf 93       	push	r27
 336:	ef 93       	push	r30
 338:	ff 93       	push	r31
   Transmit_SPI_Master(nextWavePoint());
 33a:	0e 94 75 02 	call	0x4ea	; 0x4ea <nextWavePoint>
 33e:	0e 94 ba 00 	call	0x174	; 0x174 <Transmit_SPI_Master>
   //PORTD |= (1<<LED2);
 
}
 342:	ff 91       	pop	r31
 344:	ef 91       	pop	r30
 346:	bf 91       	pop	r27
 348:	af 91       	pop	r26
 34a:	9f 91       	pop	r25
 34c:	8f 91       	pop	r24
 34e:	7f 91       	pop	r23
 350:	6f 91       	pop	r22
 352:	5f 91       	pop	r21
 354:	4f 91       	pop	r20
 356:	3f 91       	pop	r19
 358:	2f 91       	pop	r18
 35a:	0f 90       	pop	r0
 35c:	0f be       	out	0x3f, r0	; 63
 35e:	0f 90       	pop	r0
 360:	1f 90       	pop	r1
 362:	18 95       	reti

00000364 <__vector_7>:

ISR(TIMER2_COMPA_vect){
 364:	1f 92       	push	r1
 366:	0f 92       	push	r0
 368:	0f b6       	in	r0, 0x3f	; 63
 36a:	0f 92       	push	r0
 36c:	11 24       	eor	r1, r1
 36e:	2f 93       	push	r18
 370:	3f 93       	push	r19
 372:	4f 93       	push	r20
 374:	5f 93       	push	r21
 376:	6f 93       	push	r22
 378:	7f 93       	push	r23
 37a:	8f 93       	push	r24
 37c:	9f 93       	push	r25
 37e:	af 93       	push	r26
 380:	bf 93       	push	r27
 382:	ef 93       	push	r30
 384:	ff 93       	push	r31
   if (!(PIND & 1 << BTN0))
 386:	4f 99       	sbic	0x09, 7	; 9
 388:	0a c0       	rjmp	.+20     	; 0x39e <__vector_7+0x3a>
      btn0++;
 38a:	80 91 1c 01 	lds	r24, 0x011C
 38e:	90 91 1d 01 	lds	r25, 0x011D
 392:	01 96       	adiw	r24, 0x01	; 1
 394:	90 93 1d 01 	sts	0x011D, r25
 398:	80 93 1c 01 	sts	0x011C, r24
 39c:	08 c0       	rjmp	.+16     	; 0x3ae <__vector_7+0x4a>
   else
      btn0 = was0Pressed = 0;
 39e:	10 92 17 01 	sts	0x0117, r1
 3a2:	10 92 16 01 	sts	0x0116, r1
 3a6:	10 92 1d 01 	sts	0x011D, r1
 3aa:	10 92 1c 01 	sts	0x011C, r1
   
   if (!(PIND & 1 << BTN1))
 3ae:	4e 99       	sbic	0x09, 6	; 9
 3b0:	0a c0       	rjmp	.+20     	; 0x3c6 <__vector_7+0x62>
      btn1++;
 3b2:	80 91 1a 01 	lds	r24, 0x011A
 3b6:	90 91 1b 01 	lds	r25, 0x011B
 3ba:	01 96       	adiw	r24, 0x01	; 1
 3bc:	90 93 1b 01 	sts	0x011B, r25
 3c0:	80 93 1a 01 	sts	0x011A, r24
 3c4:	08 c0       	rjmp	.+16     	; 0x3d6 <__vector_7+0x72>
>>>>>>> master
   else
      btn2 = was2Pressed = 0;
   
   if(btn0 >= DEBOUNCE) {
 392:	80 91 1c 01 	lds	r24, 0x011C
 396:	90 91 1d 01 	lds	r25, 0x011D
 39a:	0a 97       	sbiw	r24, 0x0a	; 10
 39c:	7c f4       	brge	.+30     	; 0x3bc <__vector_7+0xb2>
 39e:	20 c0       	rjmp	.+64     	; 0x3e0 <__vector_7+0xd6>
      btn1 = was1Pressed = 0;
<<<<<<< HEAD
   
   if (!(PIND & 1 << BTN2))
      btn2++;
   else
      btn2 = was2Pressed = 0;
 3a0:	10 92 13 01 	sts	0x0113, r1
 3a4:	10 92 12 01 	sts	0x0112, r1
 3a8:	10 92 19 01 	sts	0x0119, r1
 3ac:	10 92 18 01 	sts	0x0118, r1
   
   if(btn0 >= DEBOUNCE) {
 3b0:	80 91 1c 01 	lds	r24, 0x011C
 3b4:	90 91 1d 01 	lds	r25, 0x011D
 3b8:	0a 97       	sbiw	r24, 0x0a	; 10
 3ba:	54 f1       	brlt	.+84     	; 0x410 <__vector_7+0x106>
      if (!was0Pressed)
 3bc:	80 91 16 01 	lds	r24, 0x0116
 3c0:	90 91 17 01 	lds	r25, 0x0117
 3c4:	89 2b       	or	r24, r25
 3c6:	11 f4       	brne	.+4      	; 0x3cc <__vector_7+0xc2>
         nextWave();
 3c8:	0e 94 19 02 	call	0x432	; 0x432 <nextWave>
      btn0 = 0;
 3cc:	10 92 1d 01 	sts	0x011D, r1
 3d0:	10 92 1c 01 	sts	0x011C, r1
      was0Pressed = 1;
 3d4:	81 e0       	ldi	r24, 0x01	; 1
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	90 93 17 01 	sts	0x0117, r25
 3dc:	80 93 16 01 	sts	0x0116, r24
//      btn1 = 0;
//      was1Pressed = 1;
//   }
   
   
   if(btn2 >= DEBOUNCE) {
 3e0:	80 91 18 01 	lds	r24, 0x0118
 3e4:	90 91 19 01 	lds	r25, 0x0119
 3e8:	0a 97       	sbiw	r24, 0x0a	; 10
 3ea:	94 f0       	brlt	.+36     	; 0x410 <__vector_7+0x106>
      if (!was2Pressed) {
 3ec:	80 91 12 01 	lds	r24, 0x0112
 3f0:	90 91 13 01 	lds	r25, 0x0113
 3f4:	89 2b       	or	r24, r25
 3f6:	11 f4       	brne	.+4      	; 0x3fc <__vector_7+0xf2>
         cycleDuty();
 3f8:	0e 94 c1 02 	call	0x582	; 0x582 <cycleDuty>
      }
	  //PORTD |= (1<<LED3);
      btn2 = 0;
 3fc:	10 92 19 01 	sts	0x0119, r1
 400:	10 92 18 01 	sts	0x0118, r1
      was2Pressed = 1;
 404:	81 e0       	ldi	r24, 0x01	; 1
 406:	90 e0       	ldi	r25, 0x00	; 0
 408:	90 93 13 01 	sts	0x0113, r25
 40c:	80 93 12 01 	sts	0x0112, r24
   }
  
}
 410:	ff 91       	pop	r31
 412:	ef 91       	pop	r30
 414:	bf 91       	pop	r27
 416:	af 91       	pop	r26
 418:	9f 91       	pop	r25
 41a:	8f 91       	pop	r24
 41c:	7f 91       	pop	r23
 41e:	6f 91       	pop	r22
 420:	5f 91       	pop	r21
 422:	4f 91       	pop	r20
 424:	3f 91       	pop	r19
 426:	2f 91       	pop	r18
 428:	0f 90       	pop	r0
 42a:	0f be       	out	0x3f, r0	; 63
 42c:	0f 90       	pop	r0
 42e:	1f 90       	pop	r1
 430:	18 95       	reti

00000432 <nextWave>:
=======
 3c6:	10 92 15 01 	sts	0x0115, r1
 3ca:	10 92 14 01 	sts	0x0114, r1
 3ce:	10 92 1b 01 	sts	0x011B, r1
 3d2:	10 92 1a 01 	sts	0x011A, r1
   
   if (!(PIND & 1 << BTN2))
 3d6:	4d 99       	sbic	0x09, 5	; 9
 3d8:	0a c0       	rjmp	.+20     	; 0x3ee <__vector_7+0x8a>
      btn2++;
 3da:	80 91 18 01 	lds	r24, 0x0118
 3de:	90 91 19 01 	lds	r25, 0x0119
 3e2:	01 96       	adiw	r24, 0x01	; 1
 3e4:	90 93 19 01 	sts	0x0119, r25
 3e8:	80 93 18 01 	sts	0x0118, r24
 3ec:	08 c0       	rjmp	.+16     	; 0x3fe <__vector_7+0x9a>
   else
      btn2 = was2Pressed = 0;
 3ee:	10 92 13 01 	sts	0x0113, r1
 3f2:	10 92 12 01 	sts	0x0112, r1
 3f6:	10 92 19 01 	sts	0x0119, r1
 3fa:	10 92 18 01 	sts	0x0118, r1
   
   if(btn0 >= DEBOUNCE) {
 3fe:	80 91 1c 01 	lds	r24, 0x011C
 402:	90 91 1d 01 	lds	r25, 0x011D
 406:	0a 97       	sbiw	r24, 0x0a	; 10
 408:	94 f0       	brlt	.+36     	; 0x42e <__vector_7+0xca>
      if (!was0Pressed)
 40a:	80 91 16 01 	lds	r24, 0x0116
 40e:	90 91 17 01 	lds	r25, 0x0117
 412:	89 2b       	or	r24, r25
 414:	11 f4       	brne	.+4      	; 0x41a <__vector_7+0xb6>
         nextWave();
 416:	0e 94 58 02 	call	0x4b0	; 0x4b0 <nextWave>
      btn0 = 0;
 41a:	10 92 1d 01 	sts	0x011D, r1
 41e:	10 92 1c 01 	sts	0x011C, r1
      was0Pressed = 1;
 422:	81 e0       	ldi	r24, 0x01	; 1
 424:	90 e0       	ldi	r25, 0x00	; 0
 426:	90 93 17 01 	sts	0x0117, r25
 42a:	80 93 16 01 	sts	0x0116, r24
   }
   
   if(btn1 >= DEBOUNCE) {
 42e:	80 91 1a 01 	lds	r24, 0x011A
 432:	90 91 1b 01 	lds	r25, 0x011B
 436:	0a 97       	sbiw	r24, 0x0a	; 10
 438:	94 f0       	brlt	.+36     	; 0x45e <__vector_7+0xfa>
      if (!was1Pressed) {
 43a:	80 91 14 01 	lds	r24, 0x0114
 43e:	90 91 15 01 	lds	r25, 0x0115
 442:	89 2b       	or	r24, r25
 444:	11 f4       	brne	.+4      	; 0x44a <__vector_7+0xe6>
         //PORTD &= ~(1<<LED3);
         cycleFreq();
 446:	0e 94 ee 00 	call	0x1dc	; 0x1dc <cycleFreq>
      }
      btn1 = 0;
 44a:	10 92 1b 01 	sts	0x011B, r1
 44e:	10 92 1a 01 	sts	0x011A, r1
      was1Pressed = 1;
 452:	81 e0       	ldi	r24, 0x01	; 1
 454:	90 e0       	ldi	r25, 0x00	; 0
 456:	90 93 15 01 	sts	0x0115, r25
 45a:	80 93 14 01 	sts	0x0114, r24
   }
   
   if(btn2 >= DEBOUNCE) {
 45e:	80 91 18 01 	lds	r24, 0x0118
 462:	90 91 19 01 	lds	r25, 0x0119
 466:	0a 97       	sbiw	r24, 0x0a	; 10
 468:	94 f0       	brlt	.+36     	; 0x48e <__vector_7+0x12a>
      if (!was2Pressed) {
 46a:	80 91 12 01 	lds	r24, 0x0112
 46e:	90 91 13 01 	lds	r25, 0x0113
 472:	89 2b       	or	r24, r25
 474:	11 f4       	brne	.+4      	; 0x47a <__vector_7+0x116>
         cycleDuty();
 476:	0e 94 00 03 	call	0x600	; 0x600 <cycleDuty>
      }
	  //PORTD |= (1<<LED3);
      btn2 = 0;
 47a:	10 92 19 01 	sts	0x0119, r1
 47e:	10 92 18 01 	sts	0x0118, r1
      was2Pressed = 1;
 482:	81 e0       	ldi	r24, 0x01	; 1
 484:	90 e0       	ldi	r25, 0x00	; 0
 486:	90 93 13 01 	sts	0x0113, r25
 48a:	80 93 12 01 	sts	0x0112, r24
   }
  
}
 48e:	ff 91       	pop	r31
 490:	ef 91       	pop	r30
 492:	bf 91       	pop	r27
 494:	af 91       	pop	r26
 496:	9f 91       	pop	r25
 498:	8f 91       	pop	r24
 49a:	7f 91       	pop	r23
 49c:	6f 91       	pop	r22
 49e:	5f 91       	pop	r21
 4a0:	4f 91       	pop	r20
 4a2:	3f 91       	pop	r19
 4a4:	2f 91       	pop	r18
 4a6:	0f 90       	pop	r0
 4a8:	0f be       	out	0x3f, r0	; 63
 4aa:	0f 90       	pop	r0
 4ac:	1f 90       	pop	r1
 4ae:	18 95       	reti

000004b0 <nextWave>:
>>>>>>> master

void nextWave() {
   static int waveNdx = 0;
   static uint16_t* waves[NUM_WAVES] = {SquareWave, TriWave, SawWave, SinWave};
   
   waveNdx++;
<<<<<<< HEAD
 432:	80 91 1e 01 	lds	r24, 0x011E
 436:	90 91 1f 01 	lds	r25, 0x011F
 43a:	01 96       	adiw	r24, 0x01	; 1
   waveNdx %= NUM_WAVES;
 43c:	83 70       	andi	r24, 0x03	; 3
 43e:	90 78       	andi	r25, 0x80	; 128
 440:	99 23       	and	r25, r25
 442:	24 f4       	brge	.+8      	; 0x44c <nextWave+0x1a>
 444:	01 97       	sbiw	r24, 0x01	; 1
 446:	8c 6f       	ori	r24, 0xFC	; 252
 448:	9f 6f       	ori	r25, 0xFF	; 255
 44a:	01 96       	adiw	r24, 0x01	; 1
 44c:	90 93 1f 01 	sts	0x011F, r25
 450:	80 93 1e 01 	sts	0x011E, r24
   
   Wave = waves[waveNdx];
 454:	88 0f       	add	r24, r24
 456:	99 1f       	adc	r25, r25
 458:	fc 01       	movw	r30, r24
 45a:	e8 5f       	subi	r30, 0xF8	; 248
 45c:	fe 4f       	sbci	r31, 0xFE	; 254
 45e:	80 81       	ld	r24, Z
 460:	91 81       	ldd	r25, Z+1	; 0x01
 462:	90 93 b3 05 	sts	0x05B3, r25
 466:	80 93 b2 05 	sts	0x05B2, r24
 46a:	08 95       	ret

0000046c <nextWavePoint>:
=======
 4b0:	80 91 1e 01 	lds	r24, 0x011E
 4b4:	90 91 1f 01 	lds	r25, 0x011F
 4b8:	01 96       	adiw	r24, 0x01	; 1
   waveNdx %= NUM_WAVES;
 4ba:	83 70       	andi	r24, 0x03	; 3
 4bc:	90 78       	andi	r25, 0x80	; 128
 4be:	99 23       	and	r25, r25
 4c0:	24 f4       	brge	.+8      	; 0x4ca <nextWave+0x1a>
 4c2:	01 97       	sbiw	r24, 0x01	; 1
 4c4:	8c 6f       	ori	r24, 0xFC	; 252
 4c6:	9f 6f       	ori	r25, 0xFF	; 255
 4c8:	01 96       	adiw	r24, 0x01	; 1
 4ca:	90 93 1f 01 	sts	0x011F, r25
 4ce:	80 93 1e 01 	sts	0x011E, r24
   
   Wave = waves[waveNdx];
 4d2:	88 0f       	add	r24, r24
 4d4:	99 1f       	adc	r25, r25
 4d6:	fc 01       	movw	r30, r24
 4d8:	e8 5f       	subi	r30, 0xF8	; 248
 4da:	fe 4f       	sbci	r31, 0xFE	; 254
 4dc:	80 81       	ld	r24, Z
 4de:	91 81       	ldd	r25, Z+1	; 0x01
 4e0:	90 93 b3 05 	sts	0x05B3, r25
 4e4:	80 93 b2 05 	sts	0x05B2, r24
 4e8:	08 95       	ret

000004ea <nextWavePoint>:
>>>>>>> master
}

uint16_t nextWavePoint() {
   static int ndx = -1;
   
   ndx += sampleDivider;
<<<<<<< HEAD
 46c:	20 91 04 01 	lds	r18, 0x0104
 470:	30 91 05 01 	lds	r19, 0x0105
 474:	80 91 00 01 	lds	r24, 0x0100
 478:	90 91 01 01 	lds	r25, 0x0101
 47c:	82 0f       	add	r24, r18
 47e:	93 1f       	adc	r25, r19
   ndx %= NUM_SAMPS;
 480:	62 e9       	ldi	r22, 0x92	; 146
 482:	70 e0       	ldi	r23, 0x00	; 0
 484:	0e 94 e6 06 	call	0xdcc	; 0xdcc <__divmodhi4>
 488:	90 93 05 01 	sts	0x0105, r25
 48c:	80 93 04 01 	sts	0x0104, r24
   
   return Wave[ndx];
 490:	88 0f       	add	r24, r24
 492:	99 1f       	adc	r25, r25
 494:	e0 91 b2 05 	lds	r30, 0x05B2
 498:	f0 91 b3 05 	lds	r31, 0x05B3
 49c:	e8 0f       	add	r30, r24
 49e:	f9 1f       	adc	r31, r25
}
 4a0:	80 81       	ld	r24, Z
 4a2:	91 81       	ldd	r25, Z+1	; 0x01
 4a4:	08 95       	ret

000004a6 <make_square_LUT>:
=======
 4ea:	20 91 04 01 	lds	r18, 0x0104
 4ee:	30 91 05 01 	lds	r19, 0x0105
 4f2:	80 91 00 01 	lds	r24, 0x0100
 4f6:	90 91 01 01 	lds	r25, 0x0101
 4fa:	82 0f       	add	r24, r18
 4fc:	93 1f       	adc	r25, r19
   ndx %= NUM_SAMPS;
 4fe:	62 e9       	ldi	r22, 0x92	; 146
 500:	70 e0       	ldi	r23, 0x00	; 0
 502:	0e 94 25 07 	call	0xe4a	; 0xe4a <__divmodhi4>
 506:	90 93 05 01 	sts	0x0105, r25
 50a:	80 93 04 01 	sts	0x0104, r24
   
   return Wave[ndx];
 50e:	88 0f       	add	r24, r24
 510:	99 1f       	adc	r25, r25
 512:	e0 91 b2 05 	lds	r30, 0x05B2
 516:	f0 91 b3 05 	lds	r31, 0x05B3
 51a:	e8 0f       	add	r30, r24
 51c:	f9 1f       	adc	r31, r25
}
 51e:	80 81       	ld	r24, Z
 520:	91 81       	ldd	r25, Z+1	; 0x01
 522:	08 95       	ret

00000524 <make_square_LUT>:
>>>>>>> master
   dutyCycle += 10;
   dutyCycle %= 110;
   make_square_LUT();
}

void make_square_LUT(){
<<<<<<< HEAD
 4a6:	cf 92       	push	r12
 4a8:	df 92       	push	r13
 4aa:	ef 92       	push	r14
 4ac:	ff 92       	push	r15
 4ae:	0f 93       	push	r16
 4b0:	1f 93       	push	r17
 4b2:	cf 93       	push	r28
 4b4:	df 93       	push	r29
   int i;
   int duty = num_samples * (double) dutyCycle/100;
 4b6:	60 91 20 01 	lds	r22, 0x0120
 4ba:	70 91 21 01 	lds	r23, 0x0121
 4be:	07 2e       	mov	r0, r23
 4c0:	00 0c       	add	r0, r0
 4c2:	88 0b       	sbc	r24, r24
 4c4:	99 0b       	sbc	r25, r25
 4c6:	0e 94 34 05 	call	0xa68	; 0xa68 <__floatsisf>
 4ca:	6b 01       	movw	r12, r22
 4cc:	7c 01       	movw	r14, r24
 4ce:	80 91 06 01 	lds	r24, 0x0106
 4d2:	90 91 07 01 	lds	r25, 0x0107
 4d6:	bc 01       	movw	r22, r24
 4d8:	99 0f       	add	r25, r25
 4da:	88 0b       	sbc	r24, r24
 4dc:	99 0b       	sbc	r25, r25
 4de:	0e 94 34 05 	call	0xa68	; 0xa68 <__floatsisf>
 4e2:	9b 01       	movw	r18, r22
 4e4:	ac 01       	movw	r20, r24
 4e6:	c7 01       	movw	r24, r14
 4e8:	b6 01       	movw	r22, r12
 4ea:	0e 94 c5 05 	call	0xb8a	; 0xb8a <__mulsf3>
 4ee:	20 e0       	ldi	r18, 0x00	; 0
 4f0:	30 e0       	ldi	r19, 0x00	; 0
 4f2:	48 ec       	ldi	r20, 0xC8	; 200
 4f4:	52 e4       	ldi	r21, 0x42	; 66
 4f6:	0e 94 8a 04 	call	0x914	; 0x914 <__divsf3>
 4fa:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <__fixsfsi>
 4fe:	eb 01       	movw	r28, r22
   
   for (i = 0; i < duty; i++)
 500:	1c 16       	cp	r1, r28
 502:	1d 06       	cpc	r1, r29
 504:	b4 f4       	brge	.+44     	; 0x532 <make_square_LUT+0x8c>
 506:	0e e8       	ldi	r16, 0x8E	; 142
 508:	14 e0       	ldi	r17, 0x04	; 4
 50a:	66 0f       	add	r22, r22
 50c:	77 1f       	adc	r23, r23
 50e:	cb 01       	movw	r24, r22
 510:	82 57       	subi	r24, 0x72	; 114
 512:	9b 4f       	sbci	r25, 0xFB	; 251
 514:	7c 01       	movw	r14, r24
      SquareWave[i] = volts_to_bits(MAX_VOLTAGE);
 516:	60 e0       	ldi	r22, 0x00	; 0
 518:	70 e0       	ldi	r23, 0x00	; 0
 51a:	80 ea       	ldi	r24, 0xA0	; 160
 51c:	90 e4       	ldi	r25, 0x40	; 64
 51e:	0e 94 cf 00 	call	0x19e	; 0x19e <volts_to_bits>
 522:	f8 01       	movw	r30, r16
 524:	81 93       	st	Z+, r24
 526:	91 93       	st	Z+, r25
 528:	8f 01       	movw	r16, r30
=======
 524:	cf 92       	push	r12
 526:	df 92       	push	r13
 528:	ef 92       	push	r14
 52a:	ff 92       	push	r15
 52c:	0f 93       	push	r16
 52e:	1f 93       	push	r17
 530:	cf 93       	push	r28
 532:	df 93       	push	r29
   int i;
   int duty = num_samples * (double) dutyCycle/100;
 534:	60 91 20 01 	lds	r22, 0x0120
 538:	70 91 21 01 	lds	r23, 0x0121
 53c:	07 2e       	mov	r0, r23
 53e:	00 0c       	add	r0, r0
 540:	88 0b       	sbc	r24, r24
 542:	99 0b       	sbc	r25, r25
 544:	0e 94 73 05 	call	0xae6	; 0xae6 <__floatsisf>
 548:	6b 01       	movw	r12, r22
 54a:	7c 01       	movw	r14, r24
 54c:	80 91 06 01 	lds	r24, 0x0106
 550:	90 91 07 01 	lds	r25, 0x0107
 554:	bc 01       	movw	r22, r24
 556:	99 0f       	add	r25, r25
 558:	88 0b       	sbc	r24, r24
 55a:	99 0b       	sbc	r25, r25
 55c:	0e 94 73 05 	call	0xae6	; 0xae6 <__floatsisf>
 560:	9b 01       	movw	r18, r22
 562:	ac 01       	movw	r20, r24
 564:	c7 01       	movw	r24, r14
 566:	b6 01       	movw	r22, r12
 568:	0e 94 04 06 	call	0xc08	; 0xc08 <__mulsf3>
 56c:	20 e0       	ldi	r18, 0x00	; 0
 56e:	30 e0       	ldi	r19, 0x00	; 0
 570:	48 ec       	ldi	r20, 0xC8	; 200
 572:	52 e4       	ldi	r21, 0x42	; 66
 574:	0e 94 c9 04 	call	0x992	; 0x992 <__divsf3>
 578:	0e 94 3b 05 	call	0xa76	; 0xa76 <__fixsfsi>
 57c:	eb 01       	movw	r28, r22
   
   for (i = 0; i < duty; i++)
 57e:	1c 16       	cp	r1, r28
 580:	1d 06       	cpc	r1, r29
 582:	b4 f4       	brge	.+44     	; 0x5b0 <make_square_LUT+0x8c>
 584:	0e e8       	ldi	r16, 0x8E	; 142
 586:	14 e0       	ldi	r17, 0x04	; 4
 588:	66 0f       	add	r22, r22
 58a:	77 1f       	adc	r23, r23
 58c:	cb 01       	movw	r24, r22
 58e:	82 57       	subi	r24, 0x72	; 114
 590:	9b 4f       	sbci	r25, 0xFB	; 251
 592:	7c 01       	movw	r14, r24
      SquareWave[i] = volts_to_bits(MAX_VOLTAGE);
 594:	60 e0       	ldi	r22, 0x00	; 0
 596:	70 e0       	ldi	r23, 0x00	; 0
 598:	80 ea       	ldi	r24, 0xA0	; 160
 59a:	90 e4       	ldi	r25, 0x40	; 64
 59c:	0e 94 c7 00 	call	0x18e	; 0x18e <volts_to_bits>
 5a0:	f8 01       	movw	r30, r16
 5a2:	81 93       	st	Z+, r24
 5a4:	91 93       	st	Z+, r25
 5a6:	8f 01       	movw	r16, r30
>>>>>>> master

void make_square_LUT(){
   int i;
   int duty = num_samples * (double) dutyCycle/100;
   
   for (i = 0; i < duty; i++)
<<<<<<< HEAD
 52a:	ee 15       	cp	r30, r14
 52c:	ff 05       	cpc	r31, r15
 52e:	99 f7       	brne	.-26     	; 0x516 <make_square_LUT+0x70>
 530:	02 c0       	rjmp	.+4      	; 0x536 <make_square_LUT+0x90>
 532:	c0 e0       	ldi	r28, 0x00	; 0
 534:	d0 e0       	ldi	r29, 0x00	; 0
      SquareWave[i] = volts_to_bits(MAX_VOLTAGE);
   
   for ( ; i < num_samples ; i++)
 536:	80 91 20 01 	lds	r24, 0x0120
 53a:	90 91 21 01 	lds	r25, 0x0121
 53e:	c8 17       	cp	r28, r24
 540:	d9 07       	cpc	r29, r25
 542:	b4 f4       	brge	.+44     	; 0x570 <make_square_LUT+0xca>
 544:	8e 01       	movw	r16, r28
 546:	00 0f       	add	r16, r16
 548:	11 1f       	adc	r17, r17
 54a:	02 57       	subi	r16, 0x72	; 114
 54c:	1b 4f       	sbci	r17, 0xFB	; 251
      SquareWave[i] = volts_to_bits(MIN_VOLTAGE);
 54e:	60 e0       	ldi	r22, 0x00	; 0
 550:	70 e0       	ldi	r23, 0x00	; 0
 552:	cb 01       	movw	r24, r22
 554:	0e 94 cf 00 	call	0x19e	; 0x19e <volts_to_bits>
 558:	f8 01       	movw	r30, r16
 55a:	81 93       	st	Z+, r24
 55c:	91 93       	st	Z+, r25
 55e:	8f 01       	movw	r16, r30
=======
 5a8:	ee 15       	cp	r30, r14
 5aa:	ff 05       	cpc	r31, r15
 5ac:	99 f7       	brne	.-26     	; 0x594 <make_square_LUT+0x70>
 5ae:	02 c0       	rjmp	.+4      	; 0x5b4 <make_square_LUT+0x90>
 5b0:	c0 e0       	ldi	r28, 0x00	; 0
 5b2:	d0 e0       	ldi	r29, 0x00	; 0
      SquareWave[i] = volts_to_bits(MAX_VOLTAGE);
   
   for ( ; i < num_samples ; i++)
 5b4:	80 91 20 01 	lds	r24, 0x0120
 5b8:	90 91 21 01 	lds	r25, 0x0121
 5bc:	c8 17       	cp	r28, r24
 5be:	d9 07       	cpc	r29, r25
 5c0:	b4 f4       	brge	.+44     	; 0x5ee <make_square_LUT+0xca>
 5c2:	8e 01       	movw	r16, r28
 5c4:	00 0f       	add	r16, r16
 5c6:	11 1f       	adc	r17, r17
 5c8:	02 57       	subi	r16, 0x72	; 114
 5ca:	1b 4f       	sbci	r17, 0xFB	; 251
      SquareWave[i] = volts_to_bits(MIN_VOLTAGE);
 5cc:	60 e0       	ldi	r22, 0x00	; 0
 5ce:	70 e0       	ldi	r23, 0x00	; 0
 5d0:	cb 01       	movw	r24, r22
 5d2:	0e 94 c7 00 	call	0x18e	; 0x18e <volts_to_bits>
 5d6:	f8 01       	movw	r30, r16
 5d8:	81 93       	st	Z+, r24
 5da:	91 93       	st	Z+, r25
 5dc:	8f 01       	movw	r16, r30
>>>>>>> master
   int duty = num_samples * (double) dutyCycle/100;
   
   for (i = 0; i < duty; i++)
      SquareWave[i] = volts_to_bits(MAX_VOLTAGE);
   
   for ( ; i < num_samples ; i++)
<<<<<<< HEAD
 560:	21 96       	adiw	r28, 0x01	; 1
 562:	80 91 20 01 	lds	r24, 0x0120
 566:	90 91 21 01 	lds	r25, 0x0121
 56a:	c8 17       	cp	r28, r24
 56c:	d9 07       	cpc	r29, r25
 56e:	7c f3       	brlt	.-34     	; 0x54e <make_square_LUT+0xa8>
      SquareWave[i] = volts_to_bits(MIN_VOLTAGE);
}
 570:	df 91       	pop	r29
 572:	cf 91       	pop	r28
 574:	1f 91       	pop	r17
 576:	0f 91       	pop	r16
 578:	ff 90       	pop	r15
 57a:	ef 90       	pop	r14
 57c:	df 90       	pop	r13
 57e:	cf 90       	pop	r12
 580:	08 95       	ret

00000582 <cycleDuty>:
=======
 5de:	21 96       	adiw	r28, 0x01	; 1
 5e0:	80 91 20 01 	lds	r24, 0x0120
 5e4:	90 91 21 01 	lds	r25, 0x0121
 5e8:	c8 17       	cp	r28, r24
 5ea:	d9 07       	cpc	r29, r25
 5ec:	7c f3       	brlt	.-34     	; 0x5cc <make_square_LUT+0xa8>
      SquareWave[i] = volts_to_bits(MIN_VOLTAGE);
}
 5ee:	df 91       	pop	r29
 5f0:	cf 91       	pop	r28
 5f2:	1f 91       	pop	r17
 5f4:	0f 91       	pop	r16
 5f6:	ff 90       	pop	r15
 5f8:	ef 90       	pop	r14
 5fa:	df 90       	pop	r13
 5fc:	cf 90       	pop	r12
 5fe:	08 95       	ret

00000600 <cycleDuty>:
>>>>>>> master
   
   return Wave[ndx];
}

void cycleDuty() {
   dutyCycle += 10;
<<<<<<< HEAD
 582:	80 91 06 01 	lds	r24, 0x0106
 586:	90 91 07 01 	lds	r25, 0x0107
 58a:	0a 96       	adiw	r24, 0x0a	; 10
   dutyCycle %= 110;
 58c:	6e e6       	ldi	r22, 0x6E	; 110
 58e:	70 e0       	ldi	r23, 0x00	; 0
 590:	0e 94 e6 06 	call	0xdcc	; 0xdcc <__divmodhi4>
 594:	90 93 07 01 	sts	0x0107, r25
 598:	80 93 06 01 	sts	0x0106, r24
   make_square_LUT();
 59c:	0e 94 53 02 	call	0x4a6	; 0x4a6 <make_square_LUT>
 5a0:	08 95       	ret

000005a2 <make_triangle_LUT>:
=======
 600:	80 91 06 01 	lds	r24, 0x0106
 604:	90 91 07 01 	lds	r25, 0x0107
 608:	0a 96       	adiw	r24, 0x0a	; 10
   dutyCycle %= 110;
 60a:	6e e6       	ldi	r22, 0x6E	; 110
 60c:	70 e0       	ldi	r23, 0x00	; 0
 60e:	0e 94 25 07 	call	0xe4a	; 0xe4a <__divmodhi4>
 612:	90 93 07 01 	sts	0x0107, r25
 616:	80 93 06 01 	sts	0x0106, r24
   make_square_LUT();
 61a:	0e 94 92 02 	call	0x524	; 0x524 <make_square_LUT>
 61e:	08 95       	ret

00000620 <make_triangle_LUT>:
>>>>>>> master
   
   for ( ; i < num_samples ; i++)
      SquareWave[i] = volts_to_bits(MIN_VOLTAGE);
}

void make_triangle_LUT(){
<<<<<<< HEAD
 5a2:	4f 92       	push	r4
 5a4:	5f 92       	push	r5
 5a6:	6f 92       	push	r6
 5a8:	7f 92       	push	r7
 5aa:	af 92       	push	r10
 5ac:	bf 92       	push	r11
 5ae:	cf 92       	push	r12
 5b0:	df 92       	push	r13
 5b2:	ef 92       	push	r14
 5b4:	ff 92       	push	r15
 5b6:	0f 93       	push	r16
 5b8:	1f 93       	push	r17
 5ba:	cf 93       	push	r28
 5bc:	df 93       	push	r29
   int i;
   int peak = num_samples / 2;
 5be:	a0 90 20 01 	lds	r10, 0x0120
 5c2:	b0 90 21 01 	lds	r11, 0x0121
 5c6:	bb 20       	and	r11, r11
 5c8:	1c f4       	brge	.+6      	; 0x5d0 <make_triangle_LUT+0x2e>
 5ca:	2f ef       	ldi	r18, 0xFF	; 255
 5cc:	a2 1a       	sub	r10, r18
 5ce:	b2 0a       	sbc	r11, r18
 5d0:	b5 94       	asr	r11
 5d2:	a7 94       	ror	r10
   double increment = ((double) MAX_VOLTAGE - MIN_VOLTAGE) / peak;
 5d4:	b5 01       	movw	r22, r10
 5d6:	0b 2c       	mov	r0, r11
 5d8:	00 0c       	add	r0, r0
 5da:	88 0b       	sbc	r24, r24
 5dc:	99 0b       	sbc	r25, r25
 5de:	0e 94 34 05 	call	0xa68	; 0xa68 <__floatsisf>
 5e2:	9b 01       	movw	r18, r22
 5e4:	ac 01       	movw	r20, r24
 5e6:	60 e0       	ldi	r22, 0x00	; 0
 5e8:	70 e0       	ldi	r23, 0x00	; 0
 5ea:	80 ea       	ldi	r24, 0xA0	; 160
 5ec:	90 e4       	ldi	r25, 0x40	; 64
 5ee:	0e 94 8a 04 	call	0x914	; 0x914 <__divsf3>
 5f2:	2b 01       	movw	r4, r22
 5f4:	3c 01       	movw	r6, r24
   double voltage = MIN_VOLTAGE - increment;
 5f6:	9b 01       	movw	r18, r22
 5f8:	ac 01       	movw	r20, r24
 5fa:	60 e0       	ldi	r22, 0x00	; 0
 5fc:	70 e0       	ldi	r23, 0x00	; 0
 5fe:	cb 01       	movw	r24, r22
 600:	0e 94 1d 04 	call	0x83a	; 0x83a <__subsf3>
 604:	6b 01       	movw	r12, r22
 606:	7c 01       	movw	r14, r24
   
   for (i = 0; i < (peak + 1); i++)
 608:	e5 01       	movw	r28, r10
 60a:	21 96       	adiw	r28, 0x01	; 1
 60c:	1c 16       	cp	r1, r28
 60e:	1d 06       	cpc	r1, r29
 610:	dc f4       	brge	.+54     	; 0x648 <make_triangle_LUT+0xa6>
 612:	0a e6       	ldi	r16, 0x6A	; 106
 614:	13 e0       	ldi	r17, 0x03	; 3
 616:	c5 01       	movw	r24, r10
 618:	88 0f       	add	r24, r24
 61a:	99 1f       	adc	r25, r25
 61c:	fc 01       	movw	r30, r24
 61e:	e4 59       	subi	r30, 0x94	; 148
 620:	fc 4f       	sbci	r31, 0xFC	; 252
 622:	5f 01       	movw	r10, r30
      TriWave[i] = volts_to_bits(voltage += increment);
 624:	a3 01       	movw	r20, r6
 626:	92 01       	movw	r18, r4
 628:	c7 01       	movw	r24, r14
 62a:	b6 01       	movw	r22, r12
 62c:	0e 94 1e 04 	call	0x83c	; 0x83c <__addsf3>
 630:	6b 01       	movw	r12, r22
 632:	7c 01       	movw	r14, r24
 634:	0e 94 cf 00 	call	0x19e	; 0x19e <volts_to_bits>
 638:	f8 01       	movw	r30, r16
 63a:	81 93       	st	Z+, r24
 63c:	91 93       	st	Z+, r25
 63e:	8f 01       	movw	r16, r30
=======
 620:	4f 92       	push	r4
 622:	5f 92       	push	r5
 624:	6f 92       	push	r6
 626:	7f 92       	push	r7
 628:	af 92       	push	r10
 62a:	bf 92       	push	r11
 62c:	cf 92       	push	r12
 62e:	df 92       	push	r13
 630:	ef 92       	push	r14
 632:	ff 92       	push	r15
 634:	0f 93       	push	r16
 636:	1f 93       	push	r17
 638:	cf 93       	push	r28
 63a:	df 93       	push	r29
   int i;
   int peak = num_samples / 2;
 63c:	a0 90 20 01 	lds	r10, 0x0120
 640:	b0 90 21 01 	lds	r11, 0x0121
 644:	bb 20       	and	r11, r11
 646:	1c f4       	brge	.+6      	; 0x64e <make_triangle_LUT+0x2e>
 648:	2f ef       	ldi	r18, 0xFF	; 255
 64a:	a2 1a       	sub	r10, r18
 64c:	b2 0a       	sbc	r11, r18
 64e:	b5 94       	asr	r11
 650:	a7 94       	ror	r10
   double increment = ((double) MAX_VOLTAGE - MIN_VOLTAGE) / peak;
 652:	b5 01       	movw	r22, r10
 654:	0b 2c       	mov	r0, r11
 656:	00 0c       	add	r0, r0
 658:	88 0b       	sbc	r24, r24
 65a:	99 0b       	sbc	r25, r25
 65c:	0e 94 73 05 	call	0xae6	; 0xae6 <__floatsisf>
 660:	9b 01       	movw	r18, r22
 662:	ac 01       	movw	r20, r24
 664:	60 e0       	ldi	r22, 0x00	; 0
 666:	70 e0       	ldi	r23, 0x00	; 0
 668:	80 ea       	ldi	r24, 0xA0	; 160
 66a:	90 e4       	ldi	r25, 0x40	; 64
 66c:	0e 94 c9 04 	call	0x992	; 0x992 <__divsf3>
 670:	2b 01       	movw	r4, r22
 672:	3c 01       	movw	r6, r24
   double voltage = MIN_VOLTAGE - increment;
 674:	9b 01       	movw	r18, r22
 676:	ac 01       	movw	r20, r24
 678:	60 e0       	ldi	r22, 0x00	; 0
 67a:	70 e0       	ldi	r23, 0x00	; 0
 67c:	cb 01       	movw	r24, r22
 67e:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <__subsf3>
 682:	6b 01       	movw	r12, r22
 684:	7c 01       	movw	r14, r24
   
   for (i = 0; i < (peak + 1); i++)
 686:	e5 01       	movw	r28, r10
 688:	21 96       	adiw	r28, 0x01	; 1
 68a:	1c 16       	cp	r1, r28
 68c:	1d 06       	cpc	r1, r29
 68e:	dc f4       	brge	.+54     	; 0x6c6 <make_triangle_LUT+0xa6>
 690:	0a e6       	ldi	r16, 0x6A	; 106
 692:	13 e0       	ldi	r17, 0x03	; 3
 694:	c5 01       	movw	r24, r10
 696:	88 0f       	add	r24, r24
 698:	99 1f       	adc	r25, r25
 69a:	fc 01       	movw	r30, r24
 69c:	e4 59       	subi	r30, 0x94	; 148
 69e:	fc 4f       	sbci	r31, 0xFC	; 252
 6a0:	5f 01       	movw	r10, r30
      TriWave[i] = volts_to_bits(voltage += increment);
 6a2:	a3 01       	movw	r20, r6
 6a4:	92 01       	movw	r18, r4
 6a6:	c7 01       	movw	r24, r14
 6a8:	b6 01       	movw	r22, r12
 6aa:	0e 94 5d 04 	call	0x8ba	; 0x8ba <__addsf3>
 6ae:	6b 01       	movw	r12, r22
 6b0:	7c 01       	movw	r14, r24
 6b2:	0e 94 c7 00 	call	0x18e	; 0x18e <volts_to_bits>
 6b6:	f8 01       	movw	r30, r16
 6b8:	81 93       	st	Z+, r24
 6ba:	91 93       	st	Z+, r25
 6bc:	8f 01       	movw	r16, r30
>>>>>>> master
   int i;
   int peak = num_samples / 2;
   double increment = ((double) MAX_VOLTAGE - MIN_VOLTAGE) / peak;
   double voltage = MIN_VOLTAGE - increment;
   
   for (i = 0; i < (peak + 1); i++)
<<<<<<< HEAD
 640:	ea 15       	cp	r30, r10
 642:	fb 05       	cpc	r31, r11
 644:	79 f7       	brne	.-34     	; 0x624 <make_triangle_LUT+0x82>
 646:	02 c0       	rjmp	.+4      	; 0x64c <make_triangle_LUT+0xaa>
 648:	c0 e0       	ldi	r28, 0x00	; 0
 64a:	d0 e0       	ldi	r29, 0x00	; 0
      TriWave[i] = volts_to_bits(voltage += increment);
   
   for ( ; i < (num_samples - 1); i++)
 64c:	80 91 20 01 	lds	r24, 0x0120
 650:	90 91 21 01 	lds	r25, 0x0121
 654:	01 97       	sbiw	r24, 0x01	; 1
 656:	c8 17       	cp	r28, r24
 658:	d9 07       	cpc	r29, r25
 65a:	e4 f4       	brge	.+56     	; 0x694 <make_triangle_LUT+0xf2>
 65c:	8e 01       	movw	r16, r28
 65e:	00 0f       	add	r16, r16
 660:	11 1f       	adc	r17, r17
 662:	06 59       	subi	r16, 0x96	; 150
 664:	1c 4f       	sbci	r17, 0xFC	; 252
      TriWave[i] = volts_to_bits(voltage -= increment);
 666:	a3 01       	movw	r20, r6
 668:	92 01       	movw	r18, r4
 66a:	c7 01       	movw	r24, r14
 66c:	b6 01       	movw	r22, r12
 66e:	0e 94 1d 04 	call	0x83a	; 0x83a <__subsf3>
 672:	6b 01       	movw	r12, r22
 674:	7c 01       	movw	r14, r24
 676:	0e 94 cf 00 	call	0x19e	; 0x19e <volts_to_bits>
 67a:	f8 01       	movw	r30, r16
 67c:	81 93       	st	Z+, r24
 67e:	91 93       	st	Z+, r25
 680:	8f 01       	movw	r16, r30
=======
 6be:	ea 15       	cp	r30, r10
 6c0:	fb 05       	cpc	r31, r11
 6c2:	79 f7       	brne	.-34     	; 0x6a2 <make_triangle_LUT+0x82>
 6c4:	02 c0       	rjmp	.+4      	; 0x6ca <make_triangle_LUT+0xaa>
 6c6:	c0 e0       	ldi	r28, 0x00	; 0
 6c8:	d0 e0       	ldi	r29, 0x00	; 0
      TriWave[i] = volts_to_bits(voltage += increment);
   
   for ( ; i < (num_samples - 1); i++)
 6ca:	80 91 20 01 	lds	r24, 0x0120
 6ce:	90 91 21 01 	lds	r25, 0x0121
 6d2:	01 97       	sbiw	r24, 0x01	; 1
 6d4:	c8 17       	cp	r28, r24
 6d6:	d9 07       	cpc	r29, r25
 6d8:	e4 f4       	brge	.+56     	; 0x712 <make_triangle_LUT+0xf2>
 6da:	8e 01       	movw	r16, r28
 6dc:	00 0f       	add	r16, r16
 6de:	11 1f       	adc	r17, r17
 6e0:	06 59       	subi	r16, 0x96	; 150
 6e2:	1c 4f       	sbci	r17, 0xFC	; 252
      TriWave[i] = volts_to_bits(voltage -= increment);
 6e4:	a3 01       	movw	r20, r6
 6e6:	92 01       	movw	r18, r4
 6e8:	c7 01       	movw	r24, r14
 6ea:	b6 01       	movw	r22, r12
 6ec:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <__subsf3>
 6f0:	6b 01       	movw	r12, r22
 6f2:	7c 01       	movw	r14, r24
 6f4:	0e 94 c7 00 	call	0x18e	; 0x18e <volts_to_bits>
 6f8:	f8 01       	movw	r30, r16
 6fa:	81 93       	st	Z+, r24
 6fc:	91 93       	st	Z+, r25
 6fe:	8f 01       	movw	r16, r30
>>>>>>> master
   double voltage = MIN_VOLTAGE - increment;
   
   for (i = 0; i < (peak + 1); i++)
      TriWave[i] = volts_to_bits(voltage += increment);
   
   for ( ; i < (num_samples - 1); i++)
<<<<<<< HEAD
 682:	21 96       	adiw	r28, 0x01	; 1
 684:	80 91 20 01 	lds	r24, 0x0120
 688:	90 91 21 01 	lds	r25, 0x0121
 68c:	01 97       	sbiw	r24, 0x01	; 1
 68e:	c8 17       	cp	r28, r24
 690:	d9 07       	cpc	r29, r25
 692:	4c f3       	brlt	.-46     	; 0x666 <make_triangle_LUT+0xc4>
      TriWave[i] = volts_to_bits(voltage -= increment);
}
 694:	df 91       	pop	r29
 696:	cf 91       	pop	r28
 698:	1f 91       	pop	r17
 69a:	0f 91       	pop	r16
 69c:	ff 90       	pop	r15
 69e:	ef 90       	pop	r14
 6a0:	df 90       	pop	r13
 6a2:	cf 90       	pop	r12
 6a4:	bf 90       	pop	r11
 6a6:	af 90       	pop	r10
 6a8:	7f 90       	pop	r7
 6aa:	6f 90       	pop	r6
 6ac:	5f 90       	pop	r5
 6ae:	4f 90       	pop	r4
 6b0:	08 95       	ret

000006b2 <make_sawtooth_LUT>:

void make_sawtooth_LUT(){
 6b2:	8f 92       	push	r8
 6b4:	9f 92       	push	r9
 6b6:	af 92       	push	r10
 6b8:	bf 92       	push	r11
 6ba:	cf 92       	push	r12
 6bc:	df 92       	push	r13
 6be:	ef 92       	push	r14
 6c0:	ff 92       	push	r15
 6c2:	0f 93       	push	r16
 6c4:	1f 93       	push	r17
 6c6:	cf 93       	push	r28
 6c8:	df 93       	push	r29
   int ndx;
   double increment = ((double) MAX_VOLTAGE - MIN_VOLTAGE) / (num_samples - 1);
 6ca:	c0 91 20 01 	lds	r28, 0x0120
 6ce:	d0 91 21 01 	lds	r29, 0x0121
 6d2:	be 01       	movw	r22, r28
 6d4:	61 50       	subi	r22, 0x01	; 1
 6d6:	71 09       	sbc	r23, r1
 6d8:	07 2e       	mov	r0, r23
 6da:	00 0c       	add	r0, r0
 6dc:	88 0b       	sbc	r24, r24
 6de:	99 0b       	sbc	r25, r25
 6e0:	0e 94 34 05 	call	0xa68	; 0xa68 <__floatsisf>
 6e4:	9b 01       	movw	r18, r22
 6e6:	ac 01       	movw	r20, r24
 6e8:	60 e0       	ldi	r22, 0x00	; 0
 6ea:	70 e0       	ldi	r23, 0x00	; 0
 6ec:	80 ea       	ldi	r24, 0xA0	; 160
 6ee:	90 e4       	ldi	r25, 0x40	; 64
 6f0:	0e 94 8a 04 	call	0x914	; 0x914 <__divsf3>
 6f4:	4b 01       	movw	r8, r22
 6f6:	5c 01       	movw	r10, r24
   double voltage = MIN_VOLTAGE -increment;
 6f8:	9b 01       	movw	r18, r22
 6fa:	ac 01       	movw	r20, r24
 6fc:	60 e0       	ldi	r22, 0x00	; 0
 6fe:	70 e0       	ldi	r23, 0x00	; 0
 700:	cb 01       	movw	r24, r22
 702:	0e 94 1d 04 	call	0x83a	; 0x83a <__subsf3>
 706:	6b 01       	movw	r12, r22
 708:	7c 01       	movw	r14, r24
   
   for (ndx = 0; ndx < num_samples; ndx++)
 70a:	1c 16       	cp	r1, r28
 70c:	1d 06       	cpc	r1, r29
 70e:	d4 f4       	brge	.+52     	; 0x744 <make_sawtooth_LUT+0x92>
 710:	06 e4       	ldi	r16, 0x46	; 70
 712:	12 e0       	ldi	r17, 0x02	; 2
 714:	c0 e0       	ldi	r28, 0x00	; 0
 716:	d0 e0       	ldi	r29, 0x00	; 0
      SawWave[ndx] = volts_to_bits(voltage += increment);
 718:	a5 01       	movw	r20, r10
 71a:	94 01       	movw	r18, r8
 71c:	c7 01       	movw	r24, r14
 71e:	b6 01       	movw	r22, r12
 720:	0e 94 1e 04 	call	0x83c	; 0x83c <__addsf3>
 724:	6b 01       	movw	r12, r22
 726:	7c 01       	movw	r14, r24
 728:	0e 94 cf 00 	call	0x19e	; 0x19e <volts_to_bits>
 72c:	f8 01       	movw	r30, r16
 72e:	81 93       	st	Z+, r24
 730:	91 93       	st	Z+, r25
 732:	8f 01       	movw	r16, r30
=======
 700:	21 96       	adiw	r28, 0x01	; 1
 702:	80 91 20 01 	lds	r24, 0x0120
 706:	90 91 21 01 	lds	r25, 0x0121
 70a:	01 97       	sbiw	r24, 0x01	; 1
 70c:	c8 17       	cp	r28, r24
 70e:	d9 07       	cpc	r29, r25
 710:	4c f3       	brlt	.-46     	; 0x6e4 <make_triangle_LUT+0xc4>
      TriWave[i] = volts_to_bits(voltage -= increment);
}
 712:	df 91       	pop	r29
 714:	cf 91       	pop	r28
 716:	1f 91       	pop	r17
 718:	0f 91       	pop	r16
 71a:	ff 90       	pop	r15
 71c:	ef 90       	pop	r14
 71e:	df 90       	pop	r13
 720:	cf 90       	pop	r12
 722:	bf 90       	pop	r11
 724:	af 90       	pop	r10
 726:	7f 90       	pop	r7
 728:	6f 90       	pop	r6
 72a:	5f 90       	pop	r5
 72c:	4f 90       	pop	r4
 72e:	08 95       	ret

00000730 <make_sawtooth_LUT>:

void make_sawtooth_LUT(){
 730:	8f 92       	push	r8
 732:	9f 92       	push	r9
 734:	af 92       	push	r10
 736:	bf 92       	push	r11
 738:	cf 92       	push	r12
 73a:	df 92       	push	r13
 73c:	ef 92       	push	r14
 73e:	ff 92       	push	r15
 740:	0f 93       	push	r16
 742:	1f 93       	push	r17
 744:	cf 93       	push	r28
 746:	df 93       	push	r29
   int ndx;
   double increment = ((double) MAX_VOLTAGE - MIN_VOLTAGE) / (num_samples - 1);
 748:	c0 91 20 01 	lds	r28, 0x0120
 74c:	d0 91 21 01 	lds	r29, 0x0121
 750:	be 01       	movw	r22, r28
 752:	61 50       	subi	r22, 0x01	; 1
 754:	71 09       	sbc	r23, r1
 756:	07 2e       	mov	r0, r23
 758:	00 0c       	add	r0, r0
 75a:	88 0b       	sbc	r24, r24
 75c:	99 0b       	sbc	r25, r25
 75e:	0e 94 73 05 	call	0xae6	; 0xae6 <__floatsisf>
 762:	9b 01       	movw	r18, r22
 764:	ac 01       	movw	r20, r24
 766:	60 e0       	ldi	r22, 0x00	; 0
 768:	70 e0       	ldi	r23, 0x00	; 0
 76a:	80 ea       	ldi	r24, 0xA0	; 160
 76c:	90 e4       	ldi	r25, 0x40	; 64
 76e:	0e 94 c9 04 	call	0x992	; 0x992 <__divsf3>
 772:	4b 01       	movw	r8, r22
 774:	5c 01       	movw	r10, r24
   double voltage = MIN_VOLTAGE -increment;
 776:	9b 01       	movw	r18, r22
 778:	ac 01       	movw	r20, r24
 77a:	60 e0       	ldi	r22, 0x00	; 0
 77c:	70 e0       	ldi	r23, 0x00	; 0
 77e:	cb 01       	movw	r24, r22
 780:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <__subsf3>
 784:	6b 01       	movw	r12, r22
 786:	7c 01       	movw	r14, r24
   
   for (ndx = 0; ndx < num_samples; ndx++)
 788:	1c 16       	cp	r1, r28
 78a:	1d 06       	cpc	r1, r29
 78c:	d4 f4       	brge	.+52     	; 0x7c2 <make_sawtooth_LUT+0x92>
 78e:	06 e4       	ldi	r16, 0x46	; 70
 790:	12 e0       	ldi	r17, 0x02	; 2
 792:	c0 e0       	ldi	r28, 0x00	; 0
 794:	d0 e0       	ldi	r29, 0x00	; 0
      SawWave[ndx] = volts_to_bits(voltage += increment);
 796:	a5 01       	movw	r20, r10
 798:	94 01       	movw	r18, r8
 79a:	c7 01       	movw	r24, r14
 79c:	b6 01       	movw	r22, r12
 79e:	0e 94 5d 04 	call	0x8ba	; 0x8ba <__addsf3>
 7a2:	6b 01       	movw	r12, r22
 7a4:	7c 01       	movw	r14, r24
 7a6:	0e 94 c7 00 	call	0x18e	; 0x18e <volts_to_bits>
 7aa:	f8 01       	movw	r30, r16
 7ac:	81 93       	st	Z+, r24
 7ae:	91 93       	st	Z+, r25
 7b0:	8f 01       	movw	r16, r30
>>>>>>> master
void make_sawtooth_LUT(){
   int ndx;
   double increment = ((double) MAX_VOLTAGE - MIN_VOLTAGE) / (num_samples - 1);
   double voltage = MIN_VOLTAGE -increment;
   
   for (ndx = 0; ndx < num_samples; ndx++)
<<<<<<< HEAD
 734:	21 96       	adiw	r28, 0x01	; 1
 736:	80 91 20 01 	lds	r24, 0x0120
 73a:	90 91 21 01 	lds	r25, 0x0121
 73e:	c8 17       	cp	r28, r24
 740:	d9 07       	cpc	r29, r25
 742:	54 f3       	brlt	.-44     	; 0x718 <make_sawtooth_LUT+0x66>
      SawWave[ndx] = volts_to_bits(voltage += increment);
}
 744:	df 91       	pop	r29
 746:	cf 91       	pop	r28
 748:	1f 91       	pop	r17
 74a:	0f 91       	pop	r16
 74c:	ff 90       	pop	r15
 74e:	ef 90       	pop	r14
 750:	df 90       	pop	r13
 752:	cf 90       	pop	r12
 754:	bf 90       	pop	r11
 756:	af 90       	pop	r10
 758:	9f 90       	pop	r9
 75a:	8f 90       	pop	r8
 75c:	08 95       	ret

0000075e <make_sin_LUT>:

void make_sin_LUT(){
 75e:	8f 92       	push	r8
 760:	9f 92       	push	r9
 762:	af 92       	push	r10
 764:	bf 92       	push	r11
 766:	cf 92       	push	r12
 768:	df 92       	push	r13
 76a:	ef 92       	push	r14
 76c:	ff 92       	push	r15
 76e:	0f 93       	push	r16
 770:	1f 93       	push	r17
 772:	cf 93       	push	r28
 774:	df 93       	push	r29
   int ndx;
   double increment = 2 * M_PI / num_samples;
 776:	c0 91 20 01 	lds	r28, 0x0120
 77a:	d0 91 21 01 	lds	r29, 0x0121
 77e:	be 01       	movw	r22, r28
 780:	0d 2e       	mov	r0, r29
 782:	00 0c       	add	r0, r0
 784:	88 0b       	sbc	r24, r24
 786:	99 0b       	sbc	r25, r25
 788:	0e 94 34 05 	call	0xa68	; 0xa68 <__floatsisf>
 78c:	9b 01       	movw	r18, r22
 78e:	ac 01       	movw	r20, r24
 790:	6b ed       	ldi	r22, 0xDB	; 219
 792:	7f e0       	ldi	r23, 0x0F	; 15
 794:	89 ec       	ldi	r24, 0xC9	; 201
 796:	90 e4       	ldi	r25, 0x40	; 64
 798:	0e 94 8a 04 	call	0x914	; 0x914 <__divsf3>
 79c:	4b 01       	movw	r8, r22
 79e:	5c 01       	movw	r10, r24
   double rad = -increment;
 7a0:	6b 01       	movw	r12, r22
 7a2:	7c 01       	movw	r14, r24
 7a4:	f7 fa       	bst	r15, 7
 7a6:	f0 94       	com	r15
 7a8:	f7 f8       	bld	r15, 7
 7aa:	f0 94       	com	r15
=======
 7b2:	21 96       	adiw	r28, 0x01	; 1
 7b4:	80 91 20 01 	lds	r24, 0x0120
 7b8:	90 91 21 01 	lds	r25, 0x0121
 7bc:	c8 17       	cp	r28, r24
 7be:	d9 07       	cpc	r29, r25
 7c0:	54 f3       	brlt	.-44     	; 0x796 <make_sawtooth_LUT+0x66>
      SawWave[ndx] = volts_to_bits(voltage += increment);
}
 7c2:	df 91       	pop	r29
 7c4:	cf 91       	pop	r28
 7c6:	1f 91       	pop	r17
 7c8:	0f 91       	pop	r16
 7ca:	ff 90       	pop	r15
 7cc:	ef 90       	pop	r14
 7ce:	df 90       	pop	r13
 7d0:	cf 90       	pop	r12
 7d2:	bf 90       	pop	r11
 7d4:	af 90       	pop	r10
 7d6:	9f 90       	pop	r9
 7d8:	8f 90       	pop	r8
 7da:	08 95       	ret

000007dc <make_sin_LUT>:

void make_sin_LUT(){
 7dc:	8f 92       	push	r8
 7de:	9f 92       	push	r9
 7e0:	af 92       	push	r10
 7e2:	bf 92       	push	r11
 7e4:	cf 92       	push	r12
 7e6:	df 92       	push	r13
 7e8:	ef 92       	push	r14
 7ea:	ff 92       	push	r15
 7ec:	0f 93       	push	r16
 7ee:	1f 93       	push	r17
 7f0:	cf 93       	push	r28
 7f2:	df 93       	push	r29
   int ndx;
   double increment = 2 * M_PI / num_samples;
 7f4:	c0 91 20 01 	lds	r28, 0x0120
 7f8:	d0 91 21 01 	lds	r29, 0x0121
 7fc:	be 01       	movw	r22, r28
 7fe:	0d 2e       	mov	r0, r29
 800:	00 0c       	add	r0, r0
 802:	88 0b       	sbc	r24, r24
 804:	99 0b       	sbc	r25, r25
 806:	0e 94 73 05 	call	0xae6	; 0xae6 <__floatsisf>
 80a:	9b 01       	movw	r18, r22
 80c:	ac 01       	movw	r20, r24
 80e:	6b ed       	ldi	r22, 0xDB	; 219
 810:	7f e0       	ldi	r23, 0x0F	; 15
 812:	89 ec       	ldi	r24, 0xC9	; 201
 814:	90 e4       	ldi	r25, 0x40	; 64
 816:	0e 94 c9 04 	call	0x992	; 0x992 <__divsf3>
 81a:	4b 01       	movw	r8, r22
 81c:	5c 01       	movw	r10, r24
   double rad = -increment;
 81e:	6b 01       	movw	r12, r22
 820:	7c 01       	movw	r14, r24
 822:	f7 fa       	bst	r15, 7
 824:	f0 94       	com	r15
 826:	f7 f8       	bld	r15, 7
 828:	f0 94       	com	r15
>>>>>>> master
   double ampli = ((double) MAX_VOLTAGE - MIN_VOLTAGE) / 2;
   // The amplitude/2 is neccessary to compensate for sin()'s amplitude of 2
   double offset = MIN_VOLTAGE + ampli;
   
   for (ndx = 0; ndx < num_samples; ndx++)
<<<<<<< HEAD
 7ac:	1c 16       	cp	r1, r28
 7ae:	1d 06       	cpc	r1, r29
 7b0:	44 f5       	brge	.+80     	; 0x802 <make_sin_LUT+0xa4>
 7b2:	02 e2       	ldi	r16, 0x22	; 34
 7b4:	11 e0       	ldi	r17, 0x01	; 1
 7b6:	c0 e0       	ldi	r28, 0x00	; 0
 7b8:	d0 e0       	ldi	r29, 0x00	; 0
      SinWave[ndx] = volts_to_bits(ampli * sin(rad += increment) + offset);
 7ba:	a5 01       	movw	r20, r10
 7bc:	94 01       	movw	r18, r8
 7be:	c7 01       	movw	r24, r14
 7c0:	b6 01       	movw	r22, r12
 7c2:	0e 94 1e 04 	call	0x83c	; 0x83c <__addsf3>
 7c6:	6b 01       	movw	r12, r22
 7c8:	7c 01       	movw	r14, r24
 7ca:	0e 94 32 06 	call	0xc64	; 0xc64 <sin>
 7ce:	20 e0       	ldi	r18, 0x00	; 0
 7d0:	30 e0       	ldi	r19, 0x00	; 0
 7d2:	40 e2       	ldi	r20, 0x20	; 32
 7d4:	50 e4       	ldi	r21, 0x40	; 64
 7d6:	0e 94 c5 05 	call	0xb8a	; 0xb8a <__mulsf3>
 7da:	20 e0       	ldi	r18, 0x00	; 0
 7dc:	30 e0       	ldi	r19, 0x00	; 0
 7de:	40 e2       	ldi	r20, 0x20	; 32
 7e0:	50 e4       	ldi	r21, 0x40	; 64
 7e2:	0e 94 1e 04 	call	0x83c	; 0x83c <__addsf3>
 7e6:	0e 94 cf 00 	call	0x19e	; 0x19e <volts_to_bits>
 7ea:	f8 01       	movw	r30, r16
 7ec:	81 93       	st	Z+, r24
 7ee:	91 93       	st	Z+, r25
 7f0:	8f 01       	movw	r16, r30
=======
 82a:	1c 16       	cp	r1, r28
 82c:	1d 06       	cpc	r1, r29
 82e:	44 f5       	brge	.+80     	; 0x880 <make_sin_LUT+0xa4>
 830:	02 e2       	ldi	r16, 0x22	; 34
 832:	11 e0       	ldi	r17, 0x01	; 1
 834:	c0 e0       	ldi	r28, 0x00	; 0
 836:	d0 e0       	ldi	r29, 0x00	; 0
      SinWave[ndx] = volts_to_bits(ampli * sin(rad += increment) + offset);
 838:	a5 01       	movw	r20, r10
 83a:	94 01       	movw	r18, r8
 83c:	c7 01       	movw	r24, r14
 83e:	b6 01       	movw	r22, r12
 840:	0e 94 5d 04 	call	0x8ba	; 0x8ba <__addsf3>
 844:	6b 01       	movw	r12, r22
 846:	7c 01       	movw	r14, r24
 848:	0e 94 71 06 	call	0xce2	; 0xce2 <sin>
 84c:	20 e0       	ldi	r18, 0x00	; 0
 84e:	30 e0       	ldi	r19, 0x00	; 0
 850:	40 e2       	ldi	r20, 0x20	; 32
 852:	50 e4       	ldi	r21, 0x40	; 64
 854:	0e 94 04 06 	call	0xc08	; 0xc08 <__mulsf3>
 858:	20 e0       	ldi	r18, 0x00	; 0
 85a:	30 e0       	ldi	r19, 0x00	; 0
 85c:	40 e2       	ldi	r20, 0x20	; 32
 85e:	50 e4       	ldi	r21, 0x40	; 64
 860:	0e 94 5d 04 	call	0x8ba	; 0x8ba <__addsf3>
 864:	0e 94 c7 00 	call	0x18e	; 0x18e <volts_to_bits>
 868:	f8 01       	movw	r30, r16
 86a:	81 93       	st	Z+, r24
 86c:	91 93       	st	Z+, r25
 86e:	8f 01       	movw	r16, r30
>>>>>>> master
   double rad = -increment;
   double ampli = ((double) MAX_VOLTAGE - MIN_VOLTAGE) / 2;
   // The amplitude/2 is neccessary to compensate for sin()'s amplitude of 2
   double offset = MIN_VOLTAGE + ampli;
   
   for (ndx = 0; ndx < num_samples; ndx++)
<<<<<<< HEAD
 7f2:	21 96       	adiw	r28, 0x01	; 1
 7f4:	80 91 20 01 	lds	r24, 0x0120
 7f8:	90 91 21 01 	lds	r25, 0x0121
 7fc:	c8 17       	cp	r28, r24
 7fe:	d9 07       	cpc	r29, r25
 800:	e4 f2       	brlt	.-72     	; 0x7ba <make_sin_LUT+0x5c>
      SinWave[ndx] = volts_to_bits(ampli * sin(rad += increment) + offset);
 802:	df 91       	pop	r29
 804:	cf 91       	pop	r28
 806:	1f 91       	pop	r17
 808:	0f 91       	pop	r16
 80a:	ff 90       	pop	r15
 80c:	ef 90       	pop	r14
 80e:	df 90       	pop	r13
 810:	cf 90       	pop	r12
 812:	bf 90       	pop	r11
 814:	af 90       	pop	r10
 816:	9f 90       	pop	r9
 818:	8f 90       	pop	r8
 81a:	08 95       	ret

0000081c <initWaves>:
=======
 870:	21 96       	adiw	r28, 0x01	; 1
 872:	80 91 20 01 	lds	r24, 0x0120
 876:	90 91 21 01 	lds	r25, 0x0121
 87a:	c8 17       	cp	r28, r24
 87c:	d9 07       	cpc	r29, r25
 87e:	e4 f2       	brlt	.-72     	; 0x838 <make_sin_LUT+0x5c>
      SinWave[ndx] = volts_to_bits(ampli * sin(rad += increment) + offset);
 880:	df 91       	pop	r29
 882:	cf 91       	pop	r28
 884:	1f 91       	pop	r17
 886:	0f 91       	pop	r16
 888:	ff 90       	pop	r15
 88a:	ef 90       	pop	r14
 88c:	df 90       	pop	r13
 88e:	cf 90       	pop	r12
 890:	bf 90       	pop	r11
 892:	af 90       	pop	r10
 894:	9f 90       	pop	r9
 896:	8f 90       	pop	r8
 898:	08 95       	ret

0000089a <initWaves>:
>>>>>>> master
//   else
//      return bits;                  // return 12bit equivalent for DAC
//}

void initWaves() {
   make_square_LUT();
<<<<<<< HEAD
 81c:	0e 94 53 02 	call	0x4a6	; 0x4a6 <make_square_LUT>
   make_triangle_LUT();
 820:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <make_triangle_LUT>
   make_sawtooth_LUT();
 824:	0e 94 59 03 	call	0x6b2	; 0x6b2 <make_sawtooth_LUT>
   make_sin_LUT();
 828:	0e 94 af 03 	call	0x75e	; 0x75e <make_sin_LUT>
   
   Wave = SquareWave;
 82c:	8e e8       	ldi	r24, 0x8E	; 142
 82e:	94 e0       	ldi	r25, 0x04	; 4
 830:	90 93 b3 05 	sts	0x05B3, r25
 834:	80 93 b2 05 	sts	0x05B2, r24
 838:	08 95       	ret

0000083a <__subsf3>:
 83a:	50 58       	subi	r21, 0x80	; 128

0000083c <__addsf3>:
 83c:	bb 27       	eor	r27, r27
 83e:	aa 27       	eor	r26, r26
 840:	0e 94 35 04 	call	0x86a	; 0x86a <__addsf3x>
 844:	0c 94 86 05 	jmp	0xb0c	; 0xb0c <__fp_round>
 848:	0e 94 78 05 	call	0xaf0	; 0xaf0 <__fp_pscA>
 84c:	38 f0       	brcs	.+14     	; 0x85c <__addsf3+0x20>
 84e:	0e 94 7f 05 	call	0xafe	; 0xafe <__fp_pscB>
 852:	20 f0       	brcs	.+8      	; 0x85c <__addsf3+0x20>
 854:	39 f4       	brne	.+14     	; 0x864 <__addsf3+0x28>
 856:	9f 3f       	cpi	r25, 0xFF	; 255
 858:	19 f4       	brne	.+6      	; 0x860 <__addsf3+0x24>
 85a:	26 f4       	brtc	.+8      	; 0x864 <__addsf3+0x28>
 85c:	0c 94 75 05 	jmp	0xaea	; 0xaea <__fp_nan>
 860:	0e f4       	brtc	.+2      	; 0x864 <__addsf3+0x28>
 862:	e0 95       	com	r30
 864:	e7 fb       	bst	r30, 7
 866:	0c 94 6f 05 	jmp	0xade	; 0xade <__fp_inf>

0000086a <__addsf3x>:
 86a:	e9 2f       	mov	r30, r25
 86c:	0e 94 97 05 	call	0xb2e	; 0xb2e <__fp_split3>
 870:	58 f3       	brcs	.-42     	; 0x848 <__addsf3+0xc>
 872:	ba 17       	cp	r27, r26
 874:	62 07       	cpc	r22, r18
 876:	73 07       	cpc	r23, r19
 878:	84 07       	cpc	r24, r20
 87a:	95 07       	cpc	r25, r21
 87c:	20 f0       	brcs	.+8      	; 0x886 <__addsf3x+0x1c>
 87e:	79 f4       	brne	.+30     	; 0x89e <__addsf3x+0x34>
 880:	a6 f5       	brtc	.+104    	; 0x8ea <__addsf3x+0x80>
 882:	0c 94 b9 05 	jmp	0xb72	; 0xb72 <__fp_zero>
 886:	0e f4       	brtc	.+2      	; 0x88a <__addsf3x+0x20>
 888:	e0 95       	com	r30
 88a:	0b 2e       	mov	r0, r27
 88c:	ba 2f       	mov	r27, r26
 88e:	a0 2d       	mov	r26, r0
 890:	0b 01       	movw	r0, r22
 892:	b9 01       	movw	r22, r18
 894:	90 01       	movw	r18, r0
 896:	0c 01       	movw	r0, r24
 898:	ca 01       	movw	r24, r20
 89a:	a0 01       	movw	r20, r0
 89c:	11 24       	eor	r1, r1
 89e:	ff 27       	eor	r31, r31
 8a0:	59 1b       	sub	r21, r25
 8a2:	99 f0       	breq	.+38     	; 0x8ca <__addsf3x+0x60>
 8a4:	59 3f       	cpi	r21, 0xF9	; 249
 8a6:	50 f4       	brcc	.+20     	; 0x8bc <__addsf3x+0x52>
 8a8:	50 3e       	cpi	r21, 0xE0	; 224
 8aa:	68 f1       	brcs	.+90     	; 0x906 <__stack+0x7>
 8ac:	1a 16       	cp	r1, r26
 8ae:	f0 40       	sbci	r31, 0x00	; 0
 8b0:	a2 2f       	mov	r26, r18
 8b2:	23 2f       	mov	r18, r19
 8b4:	34 2f       	mov	r19, r20
 8b6:	44 27       	eor	r20, r20
 8b8:	58 5f       	subi	r21, 0xF8	; 248
 8ba:	f3 cf       	rjmp	.-26     	; 0x8a2 <__addsf3x+0x38>
 8bc:	46 95       	lsr	r20
 8be:	37 95       	ror	r19
 8c0:	27 95       	ror	r18
 8c2:	a7 95       	ror	r26
 8c4:	f0 40       	sbci	r31, 0x00	; 0
 8c6:	53 95       	inc	r21
 8c8:	c9 f7       	brne	.-14     	; 0x8bc <__addsf3x+0x52>
 8ca:	7e f4       	brtc	.+30     	; 0x8ea <__addsf3x+0x80>
 8cc:	1f 16       	cp	r1, r31
 8ce:	ba 0b       	sbc	r27, r26
 8d0:	62 0b       	sbc	r22, r18
 8d2:	73 0b       	sbc	r23, r19
 8d4:	84 0b       	sbc	r24, r20
 8d6:	ba f0       	brmi	.+46     	; 0x906 <__stack+0x7>
 8d8:	91 50       	subi	r25, 0x01	; 1
 8da:	a1 f0       	breq	.+40     	; 0x904 <__stack+0x5>
 8dc:	ff 0f       	add	r31, r31
 8de:	bb 1f       	adc	r27, r27
 8e0:	66 1f       	adc	r22, r22
 8e2:	77 1f       	adc	r23, r23
 8e4:	88 1f       	adc	r24, r24
 8e6:	c2 f7       	brpl	.-16     	; 0x8d8 <__addsf3x+0x6e>
 8e8:	0e c0       	rjmp	.+28     	; 0x906 <__stack+0x7>
 8ea:	ba 0f       	add	r27, r26
 8ec:	62 1f       	adc	r22, r18
 8ee:	73 1f       	adc	r23, r19
 8f0:	84 1f       	adc	r24, r20
 8f2:	48 f4       	brcc	.+18     	; 0x906 <__stack+0x7>
 8f4:	87 95       	ror	r24
 8f6:	77 95       	ror	r23
 8f8:	67 95       	ror	r22
 8fa:	b7 95       	ror	r27
 8fc:	f7 95       	ror	r31
 8fe:	9e 3f       	cpi	r25, 0xFE	; 254
 900:	08 f0       	brcs	.+2      	; 0x904 <__stack+0x5>
 902:	b0 cf       	rjmp	.-160    	; 0x864 <__addsf3+0x28>
 904:	93 95       	inc	r25
 906:	88 0f       	add	r24, r24
 908:	08 f0       	brcs	.+2      	; 0x90c <__stack+0xd>
 90a:	99 27       	eor	r25, r25
 90c:	ee 0f       	add	r30, r30
 90e:	97 95       	ror	r25
 910:	87 95       	ror	r24
 912:	08 95       	ret

00000914 <__divsf3>:
 914:	0e 94 9e 04 	call	0x93c	; 0x93c <__divsf3x>
 918:	0c 94 86 05 	jmp	0xb0c	; 0xb0c <__fp_round>
 91c:	0e 94 7f 05 	call	0xafe	; 0xafe <__fp_pscB>
 920:	58 f0       	brcs	.+22     	; 0x938 <__divsf3+0x24>
 922:	0e 94 78 05 	call	0xaf0	; 0xaf0 <__fp_pscA>
 926:	40 f0       	brcs	.+16     	; 0x938 <__divsf3+0x24>
 928:	29 f4       	brne	.+10     	; 0x934 <__divsf3+0x20>
 92a:	5f 3f       	cpi	r21, 0xFF	; 255
 92c:	29 f0       	breq	.+10     	; 0x938 <__divsf3+0x24>
 92e:	0c 94 6f 05 	jmp	0xade	; 0xade <__fp_inf>
 932:	51 11       	cpse	r21, r1
 934:	0c 94 ba 05 	jmp	0xb74	; 0xb74 <__fp_szero>
 938:	0c 94 75 05 	jmp	0xaea	; 0xaea <__fp_nan>

0000093c <__divsf3x>:
 93c:	0e 94 97 05 	call	0xb2e	; 0xb2e <__fp_split3>
 940:	68 f3       	brcs	.-38     	; 0x91c <__divsf3+0x8>

00000942 <__divsf3_pse>:
 942:	99 23       	and	r25, r25
 944:	b1 f3       	breq	.-20     	; 0x932 <__divsf3+0x1e>
 946:	55 23       	and	r21, r21
 948:	91 f3       	breq	.-28     	; 0x92e <__divsf3+0x1a>
 94a:	95 1b       	sub	r25, r21
 94c:	55 0b       	sbc	r21, r21
 94e:	bb 27       	eor	r27, r27
 950:	aa 27       	eor	r26, r26
 952:	62 17       	cp	r22, r18
 954:	73 07       	cpc	r23, r19
 956:	84 07       	cpc	r24, r20
 958:	38 f0       	brcs	.+14     	; 0x968 <__divsf3_pse+0x26>
 95a:	9f 5f       	subi	r25, 0xFF	; 255
 95c:	5f 4f       	sbci	r21, 0xFF	; 255
 95e:	22 0f       	add	r18, r18
 960:	33 1f       	adc	r19, r19
 962:	44 1f       	adc	r20, r20
 964:	aa 1f       	adc	r26, r26
 966:	a9 f3       	breq	.-22     	; 0x952 <__divsf3_pse+0x10>
 968:	35 d0       	rcall	.+106    	; 0x9d4 <__divsf3_pse+0x92>
 96a:	0e 2e       	mov	r0, r30
 96c:	3a f0       	brmi	.+14     	; 0x97c <__divsf3_pse+0x3a>
 96e:	e0 e8       	ldi	r30, 0x80	; 128
 970:	32 d0       	rcall	.+100    	; 0x9d6 <__divsf3_pse+0x94>
 972:	91 50       	subi	r25, 0x01	; 1
 974:	50 40       	sbci	r21, 0x00	; 0
 976:	e6 95       	lsr	r30
 978:	00 1c       	adc	r0, r0
 97a:	ca f7       	brpl	.-14     	; 0x96e <__divsf3_pse+0x2c>
 97c:	2b d0       	rcall	.+86     	; 0x9d4 <__divsf3_pse+0x92>
 97e:	fe 2f       	mov	r31, r30
 980:	29 d0       	rcall	.+82     	; 0x9d4 <__divsf3_pse+0x92>
 982:	66 0f       	add	r22, r22
 984:	77 1f       	adc	r23, r23
 986:	88 1f       	adc	r24, r24
 988:	bb 1f       	adc	r27, r27
 98a:	26 17       	cp	r18, r22
 98c:	37 07       	cpc	r19, r23
 98e:	48 07       	cpc	r20, r24
 990:	ab 07       	cpc	r26, r27
 992:	b0 e8       	ldi	r27, 0x80	; 128
 994:	09 f0       	breq	.+2      	; 0x998 <__divsf3_pse+0x56>
 996:	bb 0b       	sbc	r27, r27
 998:	80 2d       	mov	r24, r0
 99a:	bf 01       	movw	r22, r30
 99c:	ff 27       	eor	r31, r31
 99e:	93 58       	subi	r25, 0x83	; 131
 9a0:	5f 4f       	sbci	r21, 0xFF	; 255
 9a2:	3a f0       	brmi	.+14     	; 0x9b2 <__divsf3_pse+0x70>
 9a4:	9e 3f       	cpi	r25, 0xFE	; 254
 9a6:	51 05       	cpc	r21, r1
 9a8:	78 f0       	brcs	.+30     	; 0x9c8 <__divsf3_pse+0x86>
 9aa:	0c 94 6f 05 	jmp	0xade	; 0xade <__fp_inf>
 9ae:	0c 94 ba 05 	jmp	0xb74	; 0xb74 <__fp_szero>
 9b2:	5f 3f       	cpi	r21, 0xFF	; 255
 9b4:	e4 f3       	brlt	.-8      	; 0x9ae <__divsf3_pse+0x6c>
 9b6:	98 3e       	cpi	r25, 0xE8	; 232
 9b8:	d4 f3       	brlt	.-12     	; 0x9ae <__divsf3_pse+0x6c>
 9ba:	86 95       	lsr	r24
 9bc:	77 95       	ror	r23
 9be:	67 95       	ror	r22
 9c0:	b7 95       	ror	r27
 9c2:	f7 95       	ror	r31
 9c4:	9f 5f       	subi	r25, 0xFF	; 255
 9c6:	c9 f7       	brne	.-14     	; 0x9ba <__divsf3_pse+0x78>
 9c8:	88 0f       	add	r24, r24
 9ca:	91 1d       	adc	r25, r1
 9cc:	96 95       	lsr	r25
 9ce:	87 95       	ror	r24
 9d0:	97 f9       	bld	r25, 7
 9d2:	08 95       	ret
 9d4:	e1 e0       	ldi	r30, 0x01	; 1
 9d6:	66 0f       	add	r22, r22
 9d8:	77 1f       	adc	r23, r23
 9da:	88 1f       	adc	r24, r24
 9dc:	bb 1f       	adc	r27, r27
 9de:	62 17       	cp	r22, r18
 9e0:	73 07       	cpc	r23, r19
 9e2:	84 07       	cpc	r24, r20
 9e4:	ba 07       	cpc	r27, r26
 9e6:	20 f0       	brcs	.+8      	; 0x9f0 <__divsf3_pse+0xae>
 9e8:	62 1b       	sub	r22, r18
 9ea:	73 0b       	sbc	r23, r19
 9ec:	84 0b       	sbc	r24, r20
 9ee:	ba 0b       	sbc	r27, r26
 9f0:	ee 1f       	adc	r30, r30
 9f2:	88 f7       	brcc	.-30     	; 0x9d6 <__divsf3_pse+0x94>
 9f4:	e0 95       	com	r30
 9f6:	08 95       	ret

000009f8 <__fixsfsi>:
 9f8:	0e 94 03 05 	call	0xa06	; 0xa06 <__fixunssfsi>
 9fc:	68 94       	set
 9fe:	b1 11       	cpse	r27, r1
 a00:	0c 94 ba 05 	jmp	0xb74	; 0xb74 <__fp_szero>
 a04:	08 95       	ret

00000a06 <__fixunssfsi>:
 a06:	0e 94 9f 05 	call	0xb3e	; 0xb3e <__fp_splitA>
 a0a:	88 f0       	brcs	.+34     	; 0xa2e <__fixunssfsi+0x28>
 a0c:	9f 57       	subi	r25, 0x7F	; 127
 a0e:	98 f0       	brcs	.+38     	; 0xa36 <__fixunssfsi+0x30>
 a10:	b9 2f       	mov	r27, r25
 a12:	99 27       	eor	r25, r25
 a14:	b7 51       	subi	r27, 0x17	; 23
 a16:	b0 f0       	brcs	.+44     	; 0xa44 <__fixunssfsi+0x3e>
 a18:	e1 f0       	breq	.+56     	; 0xa52 <__fixunssfsi+0x4c>
 a1a:	66 0f       	add	r22, r22
 a1c:	77 1f       	adc	r23, r23
 a1e:	88 1f       	adc	r24, r24
 a20:	99 1f       	adc	r25, r25
 a22:	1a f0       	brmi	.+6      	; 0xa2a <__fixunssfsi+0x24>
 a24:	ba 95       	dec	r27
 a26:	c9 f7       	brne	.-14     	; 0xa1a <__fixunssfsi+0x14>
 a28:	14 c0       	rjmp	.+40     	; 0xa52 <__fixunssfsi+0x4c>
 a2a:	b1 30       	cpi	r27, 0x01	; 1
 a2c:	91 f0       	breq	.+36     	; 0xa52 <__fixunssfsi+0x4c>
 a2e:	0e 94 b9 05 	call	0xb72	; 0xb72 <__fp_zero>
 a32:	b1 e0       	ldi	r27, 0x01	; 1
 a34:	08 95       	ret
 a36:	0c 94 b9 05 	jmp	0xb72	; 0xb72 <__fp_zero>
 a3a:	67 2f       	mov	r22, r23
 a3c:	78 2f       	mov	r23, r24
 a3e:	88 27       	eor	r24, r24
 a40:	b8 5f       	subi	r27, 0xF8	; 248
 a42:	39 f0       	breq	.+14     	; 0xa52 <__fixunssfsi+0x4c>
 a44:	b9 3f       	cpi	r27, 0xF9	; 249
 a46:	cc f3       	brlt	.-14     	; 0xa3a <__fixunssfsi+0x34>
 a48:	86 95       	lsr	r24
 a4a:	77 95       	ror	r23
 a4c:	67 95       	ror	r22
 a4e:	b3 95       	inc	r27
 a50:	d9 f7       	brne	.-10     	; 0xa48 <__fixunssfsi+0x42>
 a52:	3e f4       	brtc	.+14     	; 0xa62 <__fixunssfsi+0x5c>
 a54:	90 95       	com	r25
 a56:	80 95       	com	r24
 a58:	70 95       	com	r23
 a5a:	61 95       	neg	r22
 a5c:	7f 4f       	sbci	r23, 0xFF	; 255
 a5e:	8f 4f       	sbci	r24, 0xFF	; 255
 a60:	9f 4f       	sbci	r25, 0xFF	; 255
 a62:	08 95       	ret

00000a64 <__floatunsisf>:
 a64:	e8 94       	clt
 a66:	09 c0       	rjmp	.+18     	; 0xa7a <__floatsisf+0x12>

00000a68 <__floatsisf>:
 a68:	97 fb       	bst	r25, 7
 a6a:	3e f4       	brtc	.+14     	; 0xa7a <__floatsisf+0x12>
 a6c:	90 95       	com	r25
 a6e:	80 95       	com	r24
 a70:	70 95       	com	r23
 a72:	61 95       	neg	r22
 a74:	7f 4f       	sbci	r23, 0xFF	; 255
 a76:	8f 4f       	sbci	r24, 0xFF	; 255
 a78:	9f 4f       	sbci	r25, 0xFF	; 255
 a7a:	99 23       	and	r25, r25
 a7c:	a9 f0       	breq	.+42     	; 0xaa8 <__floatsisf+0x40>
 a7e:	f9 2f       	mov	r31, r25
 a80:	96 e9       	ldi	r25, 0x96	; 150
 a82:	bb 27       	eor	r27, r27
 a84:	93 95       	inc	r25
 a86:	f6 95       	lsr	r31
 a88:	87 95       	ror	r24
 a8a:	77 95       	ror	r23
 a8c:	67 95       	ror	r22
 a8e:	b7 95       	ror	r27
 a90:	f1 11       	cpse	r31, r1
 a92:	f8 cf       	rjmp	.-16     	; 0xa84 <__floatsisf+0x1c>
 a94:	fa f4       	brpl	.+62     	; 0xad4 <__floatsisf+0x6c>
 a96:	bb 0f       	add	r27, r27
 a98:	11 f4       	brne	.+4      	; 0xa9e <__floatsisf+0x36>
 a9a:	60 ff       	sbrs	r22, 0
 a9c:	1b c0       	rjmp	.+54     	; 0xad4 <__floatsisf+0x6c>
 a9e:	6f 5f       	subi	r22, 0xFF	; 255
 aa0:	7f 4f       	sbci	r23, 0xFF	; 255
 aa2:	8f 4f       	sbci	r24, 0xFF	; 255
 aa4:	9f 4f       	sbci	r25, 0xFF	; 255
 aa6:	16 c0       	rjmp	.+44     	; 0xad4 <__floatsisf+0x6c>
 aa8:	88 23       	and	r24, r24
 aaa:	11 f0       	breq	.+4      	; 0xab0 <__floatsisf+0x48>
 aac:	96 e9       	ldi	r25, 0x96	; 150
 aae:	11 c0       	rjmp	.+34     	; 0xad2 <__floatsisf+0x6a>
 ab0:	77 23       	and	r23, r23
 ab2:	21 f0       	breq	.+8      	; 0xabc <__floatsisf+0x54>
 ab4:	9e e8       	ldi	r25, 0x8E	; 142
 ab6:	87 2f       	mov	r24, r23
 ab8:	76 2f       	mov	r23, r22
 aba:	05 c0       	rjmp	.+10     	; 0xac6 <__floatsisf+0x5e>
 abc:	66 23       	and	r22, r22
 abe:	71 f0       	breq	.+28     	; 0xadc <__floatsisf+0x74>
 ac0:	96 e8       	ldi	r25, 0x86	; 134
 ac2:	86 2f       	mov	r24, r22
 ac4:	70 e0       	ldi	r23, 0x00	; 0
 ac6:	60 e0       	ldi	r22, 0x00	; 0
 ac8:	2a f0       	brmi	.+10     	; 0xad4 <__floatsisf+0x6c>
 aca:	9a 95       	dec	r25
 acc:	66 0f       	add	r22, r22
 ace:	77 1f       	adc	r23, r23
 ad0:	88 1f       	adc	r24, r24
 ad2:	da f7       	brpl	.-10     	; 0xaca <__floatsisf+0x62>
 ad4:	88 0f       	add	r24, r24
 ad6:	96 95       	lsr	r25
 ad8:	87 95       	ror	r24
 ada:	97 f9       	bld	r25, 7
 adc:	08 95       	ret

00000ade <__fp_inf>:
 ade:	97 f9       	bld	r25, 7
 ae0:	9f 67       	ori	r25, 0x7F	; 127
 ae2:	80 e8       	ldi	r24, 0x80	; 128
 ae4:	70 e0       	ldi	r23, 0x00	; 0
 ae6:	60 e0       	ldi	r22, 0x00	; 0
 ae8:	08 95       	ret

00000aea <__fp_nan>:
 aea:	9f ef       	ldi	r25, 0xFF	; 255
 aec:	80 ec       	ldi	r24, 0xC0	; 192
 aee:	08 95       	ret

00000af0 <__fp_pscA>:
 af0:	00 24       	eor	r0, r0
 af2:	0a 94       	dec	r0
 af4:	16 16       	cp	r1, r22
 af6:	17 06       	cpc	r1, r23
 af8:	18 06       	cpc	r1, r24
 afa:	09 06       	cpc	r0, r25
 afc:	08 95       	ret

00000afe <__fp_pscB>:
 afe:	00 24       	eor	r0, r0
 b00:	0a 94       	dec	r0
 b02:	12 16       	cp	r1, r18
 b04:	13 06       	cpc	r1, r19
 b06:	14 06       	cpc	r1, r20
 b08:	05 06       	cpc	r0, r21
 b0a:	08 95       	ret

00000b0c <__fp_round>:
 b0c:	09 2e       	mov	r0, r25
 b0e:	03 94       	inc	r0
 b10:	00 0c       	add	r0, r0
 b12:	11 f4       	brne	.+4      	; 0xb18 <__fp_round+0xc>
 b14:	88 23       	and	r24, r24
 b16:	52 f0       	brmi	.+20     	; 0xb2c <__fp_round+0x20>
 b18:	bb 0f       	add	r27, r27
 b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fp_round+0x20>
 b1c:	bf 2b       	or	r27, r31
 b1e:	11 f4       	brne	.+4      	; 0xb24 <__fp_round+0x18>
 b20:	60 ff       	sbrs	r22, 0
 b22:	04 c0       	rjmp	.+8      	; 0xb2c <__fp_round+0x20>
 b24:	6f 5f       	subi	r22, 0xFF	; 255
 b26:	7f 4f       	sbci	r23, 0xFF	; 255
 b28:	8f 4f       	sbci	r24, 0xFF	; 255
 b2a:	9f 4f       	sbci	r25, 0xFF	; 255
 b2c:	08 95       	ret

00000b2e <__fp_split3>:
 b2e:	57 fd       	sbrc	r21, 7
 b30:	90 58       	subi	r25, 0x80	; 128
 b32:	44 0f       	add	r20, r20
 b34:	55 1f       	adc	r21, r21
 b36:	59 f0       	breq	.+22     	; 0xb4e <__fp_splitA+0x10>
 b38:	5f 3f       	cpi	r21, 0xFF	; 255
 b3a:	71 f0       	breq	.+28     	; 0xb58 <__fp_splitA+0x1a>
 b3c:	47 95       	ror	r20

00000b3e <__fp_splitA>:
 b3e:	88 0f       	add	r24, r24
 b40:	97 fb       	bst	r25, 7
 b42:	99 1f       	adc	r25, r25
 b44:	61 f0       	breq	.+24     	; 0xb5e <__fp_splitA+0x20>
 b46:	9f 3f       	cpi	r25, 0xFF	; 255
 b48:	79 f0       	breq	.+30     	; 0xb68 <__fp_splitA+0x2a>
 b4a:	87 95       	ror	r24
 b4c:	08 95       	ret
 b4e:	12 16       	cp	r1, r18
 b50:	13 06       	cpc	r1, r19
 b52:	14 06       	cpc	r1, r20
 b54:	55 1f       	adc	r21, r21
 b56:	f2 cf       	rjmp	.-28     	; 0xb3c <__fp_split3+0xe>
 b58:	46 95       	lsr	r20
 b5a:	f1 df       	rcall	.-30     	; 0xb3e <__fp_splitA>
 b5c:	08 c0       	rjmp	.+16     	; 0xb6e <__fp_splitA+0x30>
 b5e:	16 16       	cp	r1, r22
 b60:	17 06       	cpc	r1, r23
 b62:	18 06       	cpc	r1, r24
 b64:	99 1f       	adc	r25, r25
 b66:	f1 cf       	rjmp	.-30     	; 0xb4a <__fp_splitA+0xc>
 b68:	86 95       	lsr	r24
 b6a:	71 05       	cpc	r23, r1
 b6c:	61 05       	cpc	r22, r1
 b6e:	08 94       	sec
 b70:	08 95       	ret

00000b72 <__fp_zero>:
 b72:	e8 94       	clt

00000b74 <__fp_szero>:
 b74:	bb 27       	eor	r27, r27
 b76:	66 27       	eor	r22, r22
 b78:	77 27       	eor	r23, r23
 b7a:	cb 01       	movw	r24, r22
 b7c:	97 f9       	bld	r25, 7
 b7e:	08 95       	ret

00000b80 <__gesf2>:
 b80:	0e 94 3a 06 	call	0xc74	; 0xc74 <__fp_cmp>
 b84:	08 f4       	brcc	.+2      	; 0xb88 <__gesf2+0x8>
 b86:	8f ef       	ldi	r24, 0xFF	; 255
 b88:	08 95       	ret

00000b8a <__mulsf3>:
 b8a:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <__mulsf3x>
 b8e:	0c 94 86 05 	jmp	0xb0c	; 0xb0c <__fp_round>
 b92:	0e 94 78 05 	call	0xaf0	; 0xaf0 <__fp_pscA>
 b96:	38 f0       	brcs	.+14     	; 0xba6 <__mulsf3+0x1c>
 b98:	0e 94 7f 05 	call	0xafe	; 0xafe <__fp_pscB>
 b9c:	20 f0       	brcs	.+8      	; 0xba6 <__mulsf3+0x1c>
 b9e:	95 23       	and	r25, r21
 ba0:	11 f0       	breq	.+4      	; 0xba6 <__mulsf3+0x1c>
 ba2:	0c 94 6f 05 	jmp	0xade	; 0xade <__fp_inf>
 ba6:	0c 94 75 05 	jmp	0xaea	; 0xaea <__fp_nan>
 baa:	11 24       	eor	r1, r1
 bac:	0c 94 ba 05 	jmp	0xb74	; 0xb74 <__fp_szero>

00000bb0 <__mulsf3x>:
 bb0:	0e 94 97 05 	call	0xb2e	; 0xb2e <__fp_split3>
 bb4:	70 f3       	brcs	.-36     	; 0xb92 <__mulsf3+0x8>

00000bb6 <__mulsf3_pse>:
 bb6:	95 9f       	mul	r25, r21
 bb8:	c1 f3       	breq	.-16     	; 0xbaa <__mulsf3+0x20>
 bba:	95 0f       	add	r25, r21
 bbc:	50 e0       	ldi	r21, 0x00	; 0
 bbe:	55 1f       	adc	r21, r21
 bc0:	62 9f       	mul	r22, r18
 bc2:	f0 01       	movw	r30, r0
 bc4:	72 9f       	mul	r23, r18
 bc6:	bb 27       	eor	r27, r27
 bc8:	f0 0d       	add	r31, r0
 bca:	b1 1d       	adc	r27, r1
 bcc:	63 9f       	mul	r22, r19
 bce:	aa 27       	eor	r26, r26
 bd0:	f0 0d       	add	r31, r0
 bd2:	b1 1d       	adc	r27, r1
 bd4:	aa 1f       	adc	r26, r26
 bd6:	64 9f       	mul	r22, r20
 bd8:	66 27       	eor	r22, r22
 bda:	b0 0d       	add	r27, r0
 bdc:	a1 1d       	adc	r26, r1
 bde:	66 1f       	adc	r22, r22
 be0:	82 9f       	mul	r24, r18
 be2:	22 27       	eor	r18, r18
 be4:	b0 0d       	add	r27, r0
 be6:	a1 1d       	adc	r26, r1
 be8:	62 1f       	adc	r22, r18
 bea:	73 9f       	mul	r23, r19
 bec:	b0 0d       	add	r27, r0
 bee:	a1 1d       	adc	r26, r1
 bf0:	62 1f       	adc	r22, r18
 bf2:	83 9f       	mul	r24, r19
 bf4:	a0 0d       	add	r26, r0
 bf6:	61 1d       	adc	r22, r1
 bf8:	22 1f       	adc	r18, r18
 bfa:	74 9f       	mul	r23, r20
 bfc:	33 27       	eor	r19, r19
 bfe:	a0 0d       	add	r26, r0
 c00:	61 1d       	adc	r22, r1
 c02:	23 1f       	adc	r18, r19
 c04:	84 9f       	mul	r24, r20
 c06:	60 0d       	add	r22, r0
 c08:	21 1d       	adc	r18, r1
 c0a:	82 2f       	mov	r24, r18
 c0c:	76 2f       	mov	r23, r22
 c0e:	6a 2f       	mov	r22, r26
 c10:	11 24       	eor	r1, r1
 c12:	9f 57       	subi	r25, 0x7F	; 127
 c14:	50 40       	sbci	r21, 0x00	; 0
 c16:	9a f0       	brmi	.+38     	; 0xc3e <__mulsf3_pse+0x88>
 c18:	f1 f0       	breq	.+60     	; 0xc56 <__mulsf3_pse+0xa0>
 c1a:	88 23       	and	r24, r24
 c1c:	4a f0       	brmi	.+18     	; 0xc30 <__mulsf3_pse+0x7a>
 c1e:	ee 0f       	add	r30, r30
 c20:	ff 1f       	adc	r31, r31
 c22:	bb 1f       	adc	r27, r27
 c24:	66 1f       	adc	r22, r22
 c26:	77 1f       	adc	r23, r23
 c28:	88 1f       	adc	r24, r24
 c2a:	91 50       	subi	r25, 0x01	; 1
 c2c:	50 40       	sbci	r21, 0x00	; 0
 c2e:	a9 f7       	brne	.-22     	; 0xc1a <__mulsf3_pse+0x64>
 c30:	9e 3f       	cpi	r25, 0xFE	; 254
 c32:	51 05       	cpc	r21, r1
 c34:	80 f0       	brcs	.+32     	; 0xc56 <__mulsf3_pse+0xa0>
 c36:	0c 94 6f 05 	jmp	0xade	; 0xade <__fp_inf>
 c3a:	0c 94 ba 05 	jmp	0xb74	; 0xb74 <__fp_szero>
 c3e:	5f 3f       	cpi	r21, 0xFF	; 255
 c40:	e4 f3       	brlt	.-8      	; 0xc3a <__mulsf3_pse+0x84>
 c42:	98 3e       	cpi	r25, 0xE8	; 232
 c44:	d4 f3       	brlt	.-12     	; 0xc3a <__mulsf3_pse+0x84>
 c46:	86 95       	lsr	r24
 c48:	77 95       	ror	r23
 c4a:	67 95       	ror	r22
 c4c:	b7 95       	ror	r27
 c4e:	f7 95       	ror	r31
 c50:	e7 95       	ror	r30
 c52:	9f 5f       	subi	r25, 0xFF	; 255
 c54:	c1 f7       	brne	.-16     	; 0xc46 <__mulsf3_pse+0x90>
 c56:	fe 2b       	or	r31, r30
 c58:	88 0f       	add	r24, r24
 c5a:	91 1d       	adc	r25, r1
 c5c:	96 95       	lsr	r25
 c5e:	87 95       	ror	r24
 c60:	97 f9       	bld	r25, 7
 c62:	08 95       	ret

00000c64 <sin>:
 c64:	9f 93       	push	r25
 c66:	0e 94 60 06 	call	0xcc0	; 0xcc0 <__fp_rempio2>
 c6a:	0f 90       	pop	r0
 c6c:	07 fc       	sbrc	r0, 7
 c6e:	ee 5f       	subi	r30, 0xFE	; 254
 c70:	0c 94 89 06 	jmp	0xd12	; 0xd12 <__fp_sinus>

00000c74 <__fp_cmp>:
 c74:	99 0f       	add	r25, r25
 c76:	00 08       	sbc	r0, r0
 c78:	55 0f       	add	r21, r21
 c7a:	aa 0b       	sbc	r26, r26
 c7c:	e0 e8       	ldi	r30, 0x80	; 128
 c7e:	fe ef       	ldi	r31, 0xFE	; 254
 c80:	16 16       	cp	r1, r22
 c82:	17 06       	cpc	r1, r23
 c84:	e8 07       	cpc	r30, r24
 c86:	f9 07       	cpc	r31, r25
 c88:	c0 f0       	brcs	.+48     	; 0xcba <__fp_cmp+0x46>
 c8a:	12 16       	cp	r1, r18
 c8c:	13 06       	cpc	r1, r19
 c8e:	e4 07       	cpc	r30, r20
 c90:	f5 07       	cpc	r31, r21
 c92:	98 f0       	brcs	.+38     	; 0xcba <__fp_cmp+0x46>
 c94:	62 1b       	sub	r22, r18
 c96:	73 0b       	sbc	r23, r19
 c98:	84 0b       	sbc	r24, r20
 c9a:	95 0b       	sbc	r25, r21
 c9c:	39 f4       	brne	.+14     	; 0xcac <__fp_cmp+0x38>
 c9e:	0a 26       	eor	r0, r26
 ca0:	61 f0       	breq	.+24     	; 0xcba <__fp_cmp+0x46>
 ca2:	23 2b       	or	r18, r19
 ca4:	24 2b       	or	r18, r20
 ca6:	25 2b       	or	r18, r21
 ca8:	21 f4       	brne	.+8      	; 0xcb2 <__fp_cmp+0x3e>
 caa:	08 95       	ret
 cac:	0a 26       	eor	r0, r26
 cae:	09 f4       	brne	.+2      	; 0xcb2 <__fp_cmp+0x3e>
 cb0:	a1 40       	sbci	r26, 0x01	; 1
 cb2:	a6 95       	lsr	r26
 cb4:	8f ef       	ldi	r24, 0xFF	; 255
 cb6:	81 1d       	adc	r24, r1
 cb8:	81 1d       	adc	r24, r1
 cba:	08 95       	ret
 cbc:	0c 94 75 05 	jmp	0xaea	; 0xaea <__fp_nan>

00000cc0 <__fp_rempio2>:
 cc0:	0e 94 9f 05 	call	0xb3e	; 0xb3e <__fp_splitA>
 cc4:	d8 f3       	brcs	.-10     	; 0xcbc <__fp_cmp+0x48>
 cc6:	e8 94       	clt
 cc8:	e0 e0       	ldi	r30, 0x00	; 0
 cca:	bb 27       	eor	r27, r27
 ccc:	9f 57       	subi	r25, 0x7F	; 127
 cce:	f0 f0       	brcs	.+60     	; 0xd0c <__fp_rempio2+0x4c>
 cd0:	2a ed       	ldi	r18, 0xDA	; 218
 cd2:	3f e0       	ldi	r19, 0x0F	; 15
 cd4:	49 ec       	ldi	r20, 0xC9	; 201
 cd6:	06 c0       	rjmp	.+12     	; 0xce4 <__fp_rempio2+0x24>
 cd8:	ee 0f       	add	r30, r30
 cda:	bb 0f       	add	r27, r27
 cdc:	66 1f       	adc	r22, r22
 cde:	77 1f       	adc	r23, r23
 ce0:	88 1f       	adc	r24, r24
 ce2:	28 f0       	brcs	.+10     	; 0xcee <__fp_rempio2+0x2e>
 ce4:	b2 3a       	cpi	r27, 0xA2	; 162
 ce6:	62 07       	cpc	r22, r18
 ce8:	73 07       	cpc	r23, r19
 cea:	84 07       	cpc	r24, r20
 cec:	28 f0       	brcs	.+10     	; 0xcf8 <__fp_rempio2+0x38>
 cee:	b2 5a       	subi	r27, 0xA2	; 162
 cf0:	62 0b       	sbc	r22, r18
 cf2:	73 0b       	sbc	r23, r19
 cf4:	84 0b       	sbc	r24, r20
 cf6:	e3 95       	inc	r30
 cf8:	9a 95       	dec	r25
 cfa:	72 f7       	brpl	.-36     	; 0xcd8 <__fp_rempio2+0x18>
 cfc:	80 38       	cpi	r24, 0x80	; 128
 cfe:	30 f4       	brcc	.+12     	; 0xd0c <__fp_rempio2+0x4c>
 d00:	9a 95       	dec	r25
 d02:	bb 0f       	add	r27, r27
 d04:	66 1f       	adc	r22, r22
 d06:	77 1f       	adc	r23, r23
 d08:	88 1f       	adc	r24, r24
 d0a:	d2 f7       	brpl	.-12     	; 0xd00 <__fp_rempio2+0x40>
 d0c:	90 48       	sbci	r25, 0x80	; 128
 d0e:	0c 94 9f 06 	jmp	0xd3e	; 0xd3e <__fp_mpack_finite>

00000d12 <__fp_sinus>:
 d12:	ef 93       	push	r30
 d14:	e0 ff       	sbrs	r30, 0
 d16:	07 c0       	rjmp	.+14     	; 0xd26 <__fp_sinus+0x14>
 d18:	a2 ea       	ldi	r26, 0xA2	; 162
 d1a:	2a ed       	ldi	r18, 0xDA	; 218
 d1c:	3f e0       	ldi	r19, 0x0F	; 15
 d1e:	49 ec       	ldi	r20, 0xC9	; 201
 d20:	5f eb       	ldi	r21, 0xBF	; 191
 d22:	0e 94 35 04 	call	0x86a	; 0x86a <__addsf3x>
 d26:	0e 94 86 05 	call	0xb0c	; 0xb0c <__fp_round>
 d2a:	0f 90       	pop	r0
 d2c:	03 94       	inc	r0
 d2e:	01 fc       	sbrc	r0, 1
 d30:	90 58       	subi	r25, 0x80	; 128
 d32:	e8 e6       	ldi	r30, 0x68	; 104
 d34:	f0 e0       	ldi	r31, 0x00	; 0
 d36:	0c 94 ab 06 	jmp	0xd56	; 0xd56 <__fp_powsodd>

00000d3a <__fp_mpack>:
 d3a:	9f 3f       	cpi	r25, 0xFF	; 255
 d3c:	31 f0       	breq	.+12     	; 0xd4a <__fp_mpack_finite+0xc>

00000d3e <__fp_mpack_finite>:
 d3e:	91 50       	subi	r25, 0x01	; 1
 d40:	20 f4       	brcc	.+8      	; 0xd4a <__fp_mpack_finite+0xc>
 d42:	87 95       	ror	r24
 d44:	77 95       	ror	r23
 d46:	67 95       	ror	r22
 d48:	b7 95       	ror	r27
 d4a:	88 0f       	add	r24, r24
 d4c:	91 1d       	adc	r25, r1
 d4e:	96 95       	lsr	r25
 d50:	87 95       	ror	r24
 d52:	97 f9       	bld	r25, 7
 d54:	08 95       	ret

00000d56 <__fp_powsodd>:
 d56:	9f 93       	push	r25
 d58:	8f 93       	push	r24
 d5a:	7f 93       	push	r23
 d5c:	6f 93       	push	r22
 d5e:	ff 93       	push	r31
 d60:	ef 93       	push	r30
 d62:	9b 01       	movw	r18, r22
 d64:	ac 01       	movw	r20, r24
 d66:	0e 94 c5 05 	call	0xb8a	; 0xb8a <__mulsf3>
 d6a:	ef 91       	pop	r30
 d6c:	ff 91       	pop	r31
 d6e:	0e 94 bf 06 	call	0xd7e	; 0xd7e <__fp_powser>
 d72:	2f 91       	pop	r18
 d74:	3f 91       	pop	r19
 d76:	4f 91       	pop	r20
 d78:	5f 91       	pop	r21
 d7a:	0c 94 c5 05 	jmp	0xb8a	; 0xb8a <__mulsf3>

00000d7e <__fp_powser>:
 d7e:	df 93       	push	r29
 d80:	cf 93       	push	r28
 d82:	1f 93       	push	r17
 d84:	0f 93       	push	r16
 d86:	ff 92       	push	r15
 d88:	ef 92       	push	r14
 d8a:	df 92       	push	r13
 d8c:	7b 01       	movw	r14, r22
 d8e:	8c 01       	movw	r16, r24
 d90:	68 94       	set
 d92:	06 c0       	rjmp	.+12     	; 0xda0 <__fp_powser+0x22>
 d94:	da 2e       	mov	r13, r26
 d96:	ef 01       	movw	r28, r30
 d98:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <__mulsf3x>
 d9c:	fe 01       	movw	r30, r28
 d9e:	e8 94       	clt
 da0:	a5 91       	lpm	r26, Z+
 da2:	25 91       	lpm	r18, Z+
 da4:	35 91       	lpm	r19, Z+
 da6:	45 91       	lpm	r20, Z+
 da8:	55 91       	lpm	r21, Z+
 daa:	a6 f3       	brts	.-24     	; 0xd94 <__fp_powser+0x16>
 dac:	ef 01       	movw	r28, r30
 dae:	0e 94 35 04 	call	0x86a	; 0x86a <__addsf3x>
 db2:	fe 01       	movw	r30, r28
 db4:	97 01       	movw	r18, r14
 db6:	a8 01       	movw	r20, r16
 db8:	da 94       	dec	r13
 dba:	69 f7       	brne	.-38     	; 0xd96 <__fp_powser+0x18>
 dbc:	df 90       	pop	r13
 dbe:	ef 90       	pop	r14
 dc0:	ff 90       	pop	r15
 dc2:	0f 91       	pop	r16
 dc4:	1f 91       	pop	r17
 dc6:	cf 91       	pop	r28
 dc8:	df 91       	pop	r29
 dca:	08 95       	ret

00000dcc <__divmodhi4>:
 dcc:	97 fb       	bst	r25, 7
 dce:	07 2e       	mov	r0, r23
 dd0:	16 f4       	brtc	.+4      	; 0xdd6 <__divmodhi4+0xa>
 dd2:	00 94       	com	r0
 dd4:	07 d0       	rcall	.+14     	; 0xde4 <__divmodhi4_neg1>
 dd6:	77 fd       	sbrc	r23, 7
 dd8:	09 d0       	rcall	.+18     	; 0xdec <__divmodhi4_neg2>
 dda:	0e 94 09 07 	call	0xe12	; 0xe12 <__udivmodhi4>
 dde:	07 fc       	sbrc	r0, 7
 de0:	05 d0       	rcall	.+10     	; 0xdec <__divmodhi4_neg2>
 de2:	3e f4       	brtc	.+14     	; 0xdf2 <__divmodhi4_exit>

00000de4 <__divmodhi4_neg1>:
 de4:	90 95       	com	r25
 de6:	81 95       	neg	r24
 de8:	9f 4f       	sbci	r25, 0xFF	; 255
 dea:	08 95       	ret

00000dec <__divmodhi4_neg2>:
 dec:	70 95       	com	r23
 dee:	61 95       	neg	r22
 df0:	7f 4f       	sbci	r23, 0xFF	; 255

00000df2 <__divmodhi4_exit>:
 df2:	08 95       	ret

00000df4 <__umulhisi3>:
 df4:	a2 9f       	mul	r26, r18
 df6:	b0 01       	movw	r22, r0
 df8:	b3 9f       	mul	r27, r19
 dfa:	c0 01       	movw	r24, r0
 dfc:	a3 9f       	mul	r26, r19
 dfe:	70 0d       	add	r23, r0
 e00:	81 1d       	adc	r24, r1
 e02:	11 24       	eor	r1, r1
 e04:	91 1d       	adc	r25, r1
 e06:	b2 9f       	mul	r27, r18
 e08:	70 0d       	add	r23, r0
 e0a:	81 1d       	adc	r24, r1
 e0c:	11 24       	eor	r1, r1
 e0e:	91 1d       	adc	r25, r1
 e10:	08 95       	ret

00000e12 <__udivmodhi4>:
 e12:	aa 1b       	sub	r26, r26
 e14:	bb 1b       	sub	r27, r27
 e16:	51 e1       	ldi	r21, 0x11	; 17
 e18:	07 c0       	rjmp	.+14     	; 0xe28 <__udivmodhi4_ep>

00000e1a <__udivmodhi4_loop>:
 e1a:	aa 1f       	adc	r26, r26
 e1c:	bb 1f       	adc	r27, r27
 e1e:	a6 17       	cp	r26, r22
 e20:	b7 07       	cpc	r27, r23
 e22:	10 f0       	brcs	.+4      	; 0xe28 <__udivmodhi4_ep>
 e24:	a6 1b       	sub	r26, r22
 e26:	b7 0b       	sbc	r27, r23

00000e28 <__udivmodhi4_ep>:
 e28:	88 1f       	adc	r24, r24
 e2a:	99 1f       	adc	r25, r25
 e2c:	5a 95       	dec	r21
 e2e:	a9 f7       	brne	.-22     	; 0xe1a <__udivmodhi4_loop>
 e30:	80 95       	com	r24
 e32:	90 95       	com	r25
 e34:	bc 01       	movw	r22, r24
 e36:	cd 01       	movw	r24, r26
 e38:	08 95       	ret

00000e3a <_exit>:
 e3a:	f8 94       	cli

00000e3c <__stop_program>:
 e3c:	ff cf       	rjmp	.-2      	; 0xe3c <__stop_program>
=======
 89a:	0e 94 92 02 	call	0x524	; 0x524 <make_square_LUT>
   make_triangle_LUT();
 89e:	0e 94 10 03 	call	0x620	; 0x620 <make_triangle_LUT>
   make_sawtooth_LUT();
 8a2:	0e 94 98 03 	call	0x730	; 0x730 <make_sawtooth_LUT>
   make_sin_LUT();
 8a6:	0e 94 ee 03 	call	0x7dc	; 0x7dc <make_sin_LUT>
   
   Wave = SquareWave;
 8aa:	8e e8       	ldi	r24, 0x8E	; 142
 8ac:	94 e0       	ldi	r25, 0x04	; 4
 8ae:	90 93 b3 05 	sts	0x05B3, r25
 8b2:	80 93 b2 05 	sts	0x05B2, r24
 8b6:	08 95       	ret

000008b8 <__subsf3>:
 8b8:	50 58       	subi	r21, 0x80	; 128

000008ba <__addsf3>:
 8ba:	bb 27       	eor	r27, r27
 8bc:	aa 27       	eor	r26, r26
 8be:	0e 94 74 04 	call	0x8e8	; 0x8e8 <__addsf3x>
 8c2:	0c 94 c5 05 	jmp	0xb8a	; 0xb8a <__fp_round>
 8c6:	0e 94 b7 05 	call	0xb6e	; 0xb6e <__fp_pscA>
 8ca:	38 f0       	brcs	.+14     	; 0x8da <__addsf3+0x20>
 8cc:	0e 94 be 05 	call	0xb7c	; 0xb7c <__fp_pscB>
 8d0:	20 f0       	brcs	.+8      	; 0x8da <__addsf3+0x20>
 8d2:	39 f4       	brne	.+14     	; 0x8e2 <__addsf3+0x28>
 8d4:	9f 3f       	cpi	r25, 0xFF	; 255
 8d6:	19 f4       	brne	.+6      	; 0x8de <__addsf3+0x24>
 8d8:	26 f4       	brtc	.+8      	; 0x8e2 <__addsf3+0x28>
 8da:	0c 94 b4 05 	jmp	0xb68	; 0xb68 <__fp_nan>
 8de:	0e f4       	brtc	.+2      	; 0x8e2 <__addsf3+0x28>
 8e0:	e0 95       	com	r30
 8e2:	e7 fb       	bst	r30, 7
 8e4:	0c 94 ae 05 	jmp	0xb5c	; 0xb5c <__fp_inf>

000008e8 <__addsf3x>:
 8e8:	e9 2f       	mov	r30, r25
 8ea:	0e 94 d6 05 	call	0xbac	; 0xbac <__fp_split3>
 8ee:	58 f3       	brcs	.-42     	; 0x8c6 <__addsf3+0xc>
 8f0:	ba 17       	cp	r27, r26
 8f2:	62 07       	cpc	r22, r18
 8f4:	73 07       	cpc	r23, r19
 8f6:	84 07       	cpc	r24, r20
 8f8:	95 07       	cpc	r25, r21
 8fa:	20 f0       	brcs	.+8      	; 0x904 <__stack+0x5>
 8fc:	79 f4       	brne	.+30     	; 0x91c <__stack+0x1d>
 8fe:	a6 f5       	brtc	.+104    	; 0x968 <__stack+0x69>
 900:	0c 94 f8 05 	jmp	0xbf0	; 0xbf0 <__fp_zero>
 904:	0e f4       	brtc	.+2      	; 0x908 <__stack+0x9>
 906:	e0 95       	com	r30
 908:	0b 2e       	mov	r0, r27
 90a:	ba 2f       	mov	r27, r26
 90c:	a0 2d       	mov	r26, r0
 90e:	0b 01       	movw	r0, r22
 910:	b9 01       	movw	r22, r18
 912:	90 01       	movw	r18, r0
 914:	0c 01       	movw	r0, r24
 916:	ca 01       	movw	r24, r20
 918:	a0 01       	movw	r20, r0
 91a:	11 24       	eor	r1, r1
 91c:	ff 27       	eor	r31, r31
 91e:	59 1b       	sub	r21, r25
 920:	99 f0       	breq	.+38     	; 0x948 <__stack+0x49>
 922:	59 3f       	cpi	r21, 0xF9	; 249
 924:	50 f4       	brcc	.+20     	; 0x93a <__stack+0x3b>
 926:	50 3e       	cpi	r21, 0xE0	; 224
 928:	68 f1       	brcs	.+90     	; 0x984 <__stack+0x85>
 92a:	1a 16       	cp	r1, r26
 92c:	f0 40       	sbci	r31, 0x00	; 0
 92e:	a2 2f       	mov	r26, r18
 930:	23 2f       	mov	r18, r19
 932:	34 2f       	mov	r19, r20
 934:	44 27       	eor	r20, r20
 936:	58 5f       	subi	r21, 0xF8	; 248
 938:	f3 cf       	rjmp	.-26     	; 0x920 <__stack+0x21>
 93a:	46 95       	lsr	r20
 93c:	37 95       	ror	r19
 93e:	27 95       	ror	r18
 940:	a7 95       	ror	r26
 942:	f0 40       	sbci	r31, 0x00	; 0
 944:	53 95       	inc	r21
 946:	c9 f7       	brne	.-14     	; 0x93a <__stack+0x3b>
 948:	7e f4       	brtc	.+30     	; 0x968 <__stack+0x69>
 94a:	1f 16       	cp	r1, r31
 94c:	ba 0b       	sbc	r27, r26
 94e:	62 0b       	sbc	r22, r18
 950:	73 0b       	sbc	r23, r19
 952:	84 0b       	sbc	r24, r20
 954:	ba f0       	brmi	.+46     	; 0x984 <__stack+0x85>
 956:	91 50       	subi	r25, 0x01	; 1
 958:	a1 f0       	breq	.+40     	; 0x982 <__stack+0x83>
 95a:	ff 0f       	add	r31, r31
 95c:	bb 1f       	adc	r27, r27
 95e:	66 1f       	adc	r22, r22
 960:	77 1f       	adc	r23, r23
 962:	88 1f       	adc	r24, r24
 964:	c2 f7       	brpl	.-16     	; 0x956 <__stack+0x57>
 966:	0e c0       	rjmp	.+28     	; 0x984 <__stack+0x85>
 968:	ba 0f       	add	r27, r26
 96a:	62 1f       	adc	r22, r18
 96c:	73 1f       	adc	r23, r19
 96e:	84 1f       	adc	r24, r20
 970:	48 f4       	brcc	.+18     	; 0x984 <__stack+0x85>
 972:	87 95       	ror	r24
 974:	77 95       	ror	r23
 976:	67 95       	ror	r22
 978:	b7 95       	ror	r27
 97a:	f7 95       	ror	r31
 97c:	9e 3f       	cpi	r25, 0xFE	; 254
 97e:	08 f0       	brcs	.+2      	; 0x982 <__stack+0x83>
 980:	b0 cf       	rjmp	.-160    	; 0x8e2 <__addsf3+0x28>
 982:	93 95       	inc	r25
 984:	88 0f       	add	r24, r24
 986:	08 f0       	brcs	.+2      	; 0x98a <__stack+0x8b>
 988:	99 27       	eor	r25, r25
 98a:	ee 0f       	add	r30, r30
 98c:	97 95       	ror	r25
 98e:	87 95       	ror	r24
 990:	08 95       	ret

00000992 <__divsf3>:
 992:	0e 94 dd 04 	call	0x9ba	; 0x9ba <__divsf3x>
 996:	0c 94 c5 05 	jmp	0xb8a	; 0xb8a <__fp_round>
 99a:	0e 94 be 05 	call	0xb7c	; 0xb7c <__fp_pscB>
 99e:	58 f0       	brcs	.+22     	; 0x9b6 <__divsf3+0x24>
 9a0:	0e 94 b7 05 	call	0xb6e	; 0xb6e <__fp_pscA>
 9a4:	40 f0       	brcs	.+16     	; 0x9b6 <__divsf3+0x24>
 9a6:	29 f4       	brne	.+10     	; 0x9b2 <__divsf3+0x20>
 9a8:	5f 3f       	cpi	r21, 0xFF	; 255
 9aa:	29 f0       	breq	.+10     	; 0x9b6 <__divsf3+0x24>
 9ac:	0c 94 ae 05 	jmp	0xb5c	; 0xb5c <__fp_inf>
 9b0:	51 11       	cpse	r21, r1
 9b2:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__fp_szero>
 9b6:	0c 94 b4 05 	jmp	0xb68	; 0xb68 <__fp_nan>

000009ba <__divsf3x>:
 9ba:	0e 94 d6 05 	call	0xbac	; 0xbac <__fp_split3>
 9be:	68 f3       	brcs	.-38     	; 0x99a <__divsf3+0x8>

000009c0 <__divsf3_pse>:
 9c0:	99 23       	and	r25, r25
 9c2:	b1 f3       	breq	.-20     	; 0x9b0 <__divsf3+0x1e>
 9c4:	55 23       	and	r21, r21
 9c6:	91 f3       	breq	.-28     	; 0x9ac <__divsf3+0x1a>
 9c8:	95 1b       	sub	r25, r21
 9ca:	55 0b       	sbc	r21, r21
 9cc:	bb 27       	eor	r27, r27
 9ce:	aa 27       	eor	r26, r26
 9d0:	62 17       	cp	r22, r18
 9d2:	73 07       	cpc	r23, r19
 9d4:	84 07       	cpc	r24, r20
 9d6:	38 f0       	brcs	.+14     	; 0x9e6 <__divsf3_pse+0x26>
 9d8:	9f 5f       	subi	r25, 0xFF	; 255
 9da:	5f 4f       	sbci	r21, 0xFF	; 255
 9dc:	22 0f       	add	r18, r18
 9de:	33 1f       	adc	r19, r19
 9e0:	44 1f       	adc	r20, r20
 9e2:	aa 1f       	adc	r26, r26
 9e4:	a9 f3       	breq	.-22     	; 0x9d0 <__divsf3_pse+0x10>
 9e6:	35 d0       	rcall	.+106    	; 0xa52 <__divsf3_pse+0x92>
 9e8:	0e 2e       	mov	r0, r30
 9ea:	3a f0       	brmi	.+14     	; 0x9fa <__divsf3_pse+0x3a>
 9ec:	e0 e8       	ldi	r30, 0x80	; 128
 9ee:	32 d0       	rcall	.+100    	; 0xa54 <__divsf3_pse+0x94>
 9f0:	91 50       	subi	r25, 0x01	; 1
 9f2:	50 40       	sbci	r21, 0x00	; 0
 9f4:	e6 95       	lsr	r30
 9f6:	00 1c       	adc	r0, r0
 9f8:	ca f7       	brpl	.-14     	; 0x9ec <__divsf3_pse+0x2c>
 9fa:	2b d0       	rcall	.+86     	; 0xa52 <__divsf3_pse+0x92>
 9fc:	fe 2f       	mov	r31, r30
 9fe:	29 d0       	rcall	.+82     	; 0xa52 <__divsf3_pse+0x92>
 a00:	66 0f       	add	r22, r22
 a02:	77 1f       	adc	r23, r23
 a04:	88 1f       	adc	r24, r24
 a06:	bb 1f       	adc	r27, r27
 a08:	26 17       	cp	r18, r22
 a0a:	37 07       	cpc	r19, r23
 a0c:	48 07       	cpc	r20, r24
 a0e:	ab 07       	cpc	r26, r27
 a10:	b0 e8       	ldi	r27, 0x80	; 128
 a12:	09 f0       	breq	.+2      	; 0xa16 <__divsf3_pse+0x56>
 a14:	bb 0b       	sbc	r27, r27
 a16:	80 2d       	mov	r24, r0
 a18:	bf 01       	movw	r22, r30
 a1a:	ff 27       	eor	r31, r31
 a1c:	93 58       	subi	r25, 0x83	; 131
 a1e:	5f 4f       	sbci	r21, 0xFF	; 255
 a20:	3a f0       	brmi	.+14     	; 0xa30 <__divsf3_pse+0x70>
 a22:	9e 3f       	cpi	r25, 0xFE	; 254
 a24:	51 05       	cpc	r21, r1
 a26:	78 f0       	brcs	.+30     	; 0xa46 <__divsf3_pse+0x86>
 a28:	0c 94 ae 05 	jmp	0xb5c	; 0xb5c <__fp_inf>
 a2c:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__fp_szero>
 a30:	5f 3f       	cpi	r21, 0xFF	; 255
 a32:	e4 f3       	brlt	.-8      	; 0xa2c <__divsf3_pse+0x6c>
 a34:	98 3e       	cpi	r25, 0xE8	; 232
 a36:	d4 f3       	brlt	.-12     	; 0xa2c <__divsf3_pse+0x6c>
 a38:	86 95       	lsr	r24
 a3a:	77 95       	ror	r23
 a3c:	67 95       	ror	r22
 a3e:	b7 95       	ror	r27
 a40:	f7 95       	ror	r31
 a42:	9f 5f       	subi	r25, 0xFF	; 255
 a44:	c9 f7       	brne	.-14     	; 0xa38 <__divsf3_pse+0x78>
 a46:	88 0f       	add	r24, r24
 a48:	91 1d       	adc	r25, r1
 a4a:	96 95       	lsr	r25
 a4c:	87 95       	ror	r24
 a4e:	97 f9       	bld	r25, 7
 a50:	08 95       	ret
 a52:	e1 e0       	ldi	r30, 0x01	; 1
 a54:	66 0f       	add	r22, r22
 a56:	77 1f       	adc	r23, r23
 a58:	88 1f       	adc	r24, r24
 a5a:	bb 1f       	adc	r27, r27
 a5c:	62 17       	cp	r22, r18
 a5e:	73 07       	cpc	r23, r19
 a60:	84 07       	cpc	r24, r20
 a62:	ba 07       	cpc	r27, r26
 a64:	20 f0       	brcs	.+8      	; 0xa6e <__divsf3_pse+0xae>
 a66:	62 1b       	sub	r22, r18
 a68:	73 0b       	sbc	r23, r19
 a6a:	84 0b       	sbc	r24, r20
 a6c:	ba 0b       	sbc	r27, r26
 a6e:	ee 1f       	adc	r30, r30
 a70:	88 f7       	brcc	.-30     	; 0xa54 <__divsf3_pse+0x94>
 a72:	e0 95       	com	r30
 a74:	08 95       	ret

00000a76 <__fixsfsi>:
 a76:	0e 94 42 05 	call	0xa84	; 0xa84 <__fixunssfsi>
 a7a:	68 94       	set
 a7c:	b1 11       	cpse	r27, r1
 a7e:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__fp_szero>
 a82:	08 95       	ret

00000a84 <__fixunssfsi>:
 a84:	0e 94 de 05 	call	0xbbc	; 0xbbc <__fp_splitA>
 a88:	88 f0       	brcs	.+34     	; 0xaac <__fixunssfsi+0x28>
 a8a:	9f 57       	subi	r25, 0x7F	; 127
 a8c:	98 f0       	brcs	.+38     	; 0xab4 <__fixunssfsi+0x30>
 a8e:	b9 2f       	mov	r27, r25
 a90:	99 27       	eor	r25, r25
 a92:	b7 51       	subi	r27, 0x17	; 23
 a94:	b0 f0       	brcs	.+44     	; 0xac2 <__fixunssfsi+0x3e>
 a96:	e1 f0       	breq	.+56     	; 0xad0 <__fixunssfsi+0x4c>
 a98:	66 0f       	add	r22, r22
 a9a:	77 1f       	adc	r23, r23
 a9c:	88 1f       	adc	r24, r24
 a9e:	99 1f       	adc	r25, r25
 aa0:	1a f0       	brmi	.+6      	; 0xaa8 <__fixunssfsi+0x24>
 aa2:	ba 95       	dec	r27
 aa4:	c9 f7       	brne	.-14     	; 0xa98 <__fixunssfsi+0x14>
 aa6:	14 c0       	rjmp	.+40     	; 0xad0 <__fixunssfsi+0x4c>
 aa8:	b1 30       	cpi	r27, 0x01	; 1
 aaa:	91 f0       	breq	.+36     	; 0xad0 <__fixunssfsi+0x4c>
 aac:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__fp_zero>
 ab0:	b1 e0       	ldi	r27, 0x01	; 1
 ab2:	08 95       	ret
 ab4:	0c 94 f8 05 	jmp	0xbf0	; 0xbf0 <__fp_zero>
 ab8:	67 2f       	mov	r22, r23
 aba:	78 2f       	mov	r23, r24
 abc:	88 27       	eor	r24, r24
 abe:	b8 5f       	subi	r27, 0xF8	; 248
 ac0:	39 f0       	breq	.+14     	; 0xad0 <__fixunssfsi+0x4c>
 ac2:	b9 3f       	cpi	r27, 0xF9	; 249
 ac4:	cc f3       	brlt	.-14     	; 0xab8 <__fixunssfsi+0x34>
 ac6:	86 95       	lsr	r24
 ac8:	77 95       	ror	r23
 aca:	67 95       	ror	r22
 acc:	b3 95       	inc	r27
 ace:	d9 f7       	brne	.-10     	; 0xac6 <__fixunssfsi+0x42>
 ad0:	3e f4       	brtc	.+14     	; 0xae0 <__fixunssfsi+0x5c>
 ad2:	90 95       	com	r25
 ad4:	80 95       	com	r24
 ad6:	70 95       	com	r23
 ad8:	61 95       	neg	r22
 ada:	7f 4f       	sbci	r23, 0xFF	; 255
 adc:	8f 4f       	sbci	r24, 0xFF	; 255
 ade:	9f 4f       	sbci	r25, 0xFF	; 255
 ae0:	08 95       	ret

00000ae2 <__floatunsisf>:
 ae2:	e8 94       	clt
 ae4:	09 c0       	rjmp	.+18     	; 0xaf8 <__floatsisf+0x12>

00000ae6 <__floatsisf>:
 ae6:	97 fb       	bst	r25, 7
 ae8:	3e f4       	brtc	.+14     	; 0xaf8 <__floatsisf+0x12>
 aea:	90 95       	com	r25
 aec:	80 95       	com	r24
 aee:	70 95       	com	r23
 af0:	61 95       	neg	r22
 af2:	7f 4f       	sbci	r23, 0xFF	; 255
 af4:	8f 4f       	sbci	r24, 0xFF	; 255
 af6:	9f 4f       	sbci	r25, 0xFF	; 255
 af8:	99 23       	and	r25, r25
 afa:	a9 f0       	breq	.+42     	; 0xb26 <__floatsisf+0x40>
 afc:	f9 2f       	mov	r31, r25
 afe:	96 e9       	ldi	r25, 0x96	; 150
 b00:	bb 27       	eor	r27, r27
 b02:	93 95       	inc	r25
 b04:	f6 95       	lsr	r31
 b06:	87 95       	ror	r24
 b08:	77 95       	ror	r23
 b0a:	67 95       	ror	r22
 b0c:	b7 95       	ror	r27
 b0e:	f1 11       	cpse	r31, r1
 b10:	f8 cf       	rjmp	.-16     	; 0xb02 <__floatsisf+0x1c>
 b12:	fa f4       	brpl	.+62     	; 0xb52 <__floatsisf+0x6c>
 b14:	bb 0f       	add	r27, r27
 b16:	11 f4       	brne	.+4      	; 0xb1c <__floatsisf+0x36>
 b18:	60 ff       	sbrs	r22, 0
 b1a:	1b c0       	rjmp	.+54     	; 0xb52 <__floatsisf+0x6c>
 b1c:	6f 5f       	subi	r22, 0xFF	; 255
 b1e:	7f 4f       	sbci	r23, 0xFF	; 255
 b20:	8f 4f       	sbci	r24, 0xFF	; 255
 b22:	9f 4f       	sbci	r25, 0xFF	; 255
 b24:	16 c0       	rjmp	.+44     	; 0xb52 <__floatsisf+0x6c>
 b26:	88 23       	and	r24, r24
 b28:	11 f0       	breq	.+4      	; 0xb2e <__floatsisf+0x48>
 b2a:	96 e9       	ldi	r25, 0x96	; 150
 b2c:	11 c0       	rjmp	.+34     	; 0xb50 <__floatsisf+0x6a>
 b2e:	77 23       	and	r23, r23
 b30:	21 f0       	breq	.+8      	; 0xb3a <__floatsisf+0x54>
 b32:	9e e8       	ldi	r25, 0x8E	; 142
 b34:	87 2f       	mov	r24, r23
 b36:	76 2f       	mov	r23, r22
 b38:	05 c0       	rjmp	.+10     	; 0xb44 <__floatsisf+0x5e>
 b3a:	66 23       	and	r22, r22
 b3c:	71 f0       	breq	.+28     	; 0xb5a <__floatsisf+0x74>
 b3e:	96 e8       	ldi	r25, 0x86	; 134
 b40:	86 2f       	mov	r24, r22
 b42:	70 e0       	ldi	r23, 0x00	; 0
 b44:	60 e0       	ldi	r22, 0x00	; 0
 b46:	2a f0       	brmi	.+10     	; 0xb52 <__floatsisf+0x6c>
 b48:	9a 95       	dec	r25
 b4a:	66 0f       	add	r22, r22
 b4c:	77 1f       	adc	r23, r23
 b4e:	88 1f       	adc	r24, r24
 b50:	da f7       	brpl	.-10     	; 0xb48 <__floatsisf+0x62>
 b52:	88 0f       	add	r24, r24
 b54:	96 95       	lsr	r25
 b56:	87 95       	ror	r24
 b58:	97 f9       	bld	r25, 7
 b5a:	08 95       	ret

00000b5c <__fp_inf>:
 b5c:	97 f9       	bld	r25, 7
 b5e:	9f 67       	ori	r25, 0x7F	; 127
 b60:	80 e8       	ldi	r24, 0x80	; 128
 b62:	70 e0       	ldi	r23, 0x00	; 0
 b64:	60 e0       	ldi	r22, 0x00	; 0
 b66:	08 95       	ret

00000b68 <__fp_nan>:
 b68:	9f ef       	ldi	r25, 0xFF	; 255
 b6a:	80 ec       	ldi	r24, 0xC0	; 192
 b6c:	08 95       	ret

00000b6e <__fp_pscA>:
 b6e:	00 24       	eor	r0, r0
 b70:	0a 94       	dec	r0
 b72:	16 16       	cp	r1, r22
 b74:	17 06       	cpc	r1, r23
 b76:	18 06       	cpc	r1, r24
 b78:	09 06       	cpc	r0, r25
 b7a:	08 95       	ret

00000b7c <__fp_pscB>:
 b7c:	00 24       	eor	r0, r0
 b7e:	0a 94       	dec	r0
 b80:	12 16       	cp	r1, r18
 b82:	13 06       	cpc	r1, r19
 b84:	14 06       	cpc	r1, r20
 b86:	05 06       	cpc	r0, r21
 b88:	08 95       	ret

00000b8a <__fp_round>:
 b8a:	09 2e       	mov	r0, r25
 b8c:	03 94       	inc	r0
 b8e:	00 0c       	add	r0, r0
 b90:	11 f4       	brne	.+4      	; 0xb96 <__fp_round+0xc>
 b92:	88 23       	and	r24, r24
 b94:	52 f0       	brmi	.+20     	; 0xbaa <__fp_round+0x20>
 b96:	bb 0f       	add	r27, r27
 b98:	40 f4       	brcc	.+16     	; 0xbaa <__fp_round+0x20>
 b9a:	bf 2b       	or	r27, r31
 b9c:	11 f4       	brne	.+4      	; 0xba2 <__fp_round+0x18>
 b9e:	60 ff       	sbrs	r22, 0
 ba0:	04 c0       	rjmp	.+8      	; 0xbaa <__fp_round+0x20>
 ba2:	6f 5f       	subi	r22, 0xFF	; 255
 ba4:	7f 4f       	sbci	r23, 0xFF	; 255
 ba6:	8f 4f       	sbci	r24, 0xFF	; 255
 ba8:	9f 4f       	sbci	r25, 0xFF	; 255
 baa:	08 95       	ret

00000bac <__fp_split3>:
 bac:	57 fd       	sbrc	r21, 7
 bae:	90 58       	subi	r25, 0x80	; 128
 bb0:	44 0f       	add	r20, r20
 bb2:	55 1f       	adc	r21, r21
 bb4:	59 f0       	breq	.+22     	; 0xbcc <__fp_splitA+0x10>
 bb6:	5f 3f       	cpi	r21, 0xFF	; 255
 bb8:	71 f0       	breq	.+28     	; 0xbd6 <__fp_splitA+0x1a>
 bba:	47 95       	ror	r20

00000bbc <__fp_splitA>:
 bbc:	88 0f       	add	r24, r24
 bbe:	97 fb       	bst	r25, 7
 bc0:	99 1f       	adc	r25, r25
 bc2:	61 f0       	breq	.+24     	; 0xbdc <__fp_splitA+0x20>
 bc4:	9f 3f       	cpi	r25, 0xFF	; 255
 bc6:	79 f0       	breq	.+30     	; 0xbe6 <__fp_splitA+0x2a>
 bc8:	87 95       	ror	r24
 bca:	08 95       	ret
 bcc:	12 16       	cp	r1, r18
 bce:	13 06       	cpc	r1, r19
 bd0:	14 06       	cpc	r1, r20
 bd2:	55 1f       	adc	r21, r21
 bd4:	f2 cf       	rjmp	.-28     	; 0xbba <__fp_split3+0xe>
 bd6:	46 95       	lsr	r20
 bd8:	f1 df       	rcall	.-30     	; 0xbbc <__fp_splitA>
 bda:	08 c0       	rjmp	.+16     	; 0xbec <__fp_splitA+0x30>
 bdc:	16 16       	cp	r1, r22
 bde:	17 06       	cpc	r1, r23
 be0:	18 06       	cpc	r1, r24
 be2:	99 1f       	adc	r25, r25
 be4:	f1 cf       	rjmp	.-30     	; 0xbc8 <__fp_splitA+0xc>
 be6:	86 95       	lsr	r24
 be8:	71 05       	cpc	r23, r1
 bea:	61 05       	cpc	r22, r1
 bec:	08 94       	sec
 bee:	08 95       	ret

00000bf0 <__fp_zero>:
 bf0:	e8 94       	clt

00000bf2 <__fp_szero>:
 bf2:	bb 27       	eor	r27, r27
 bf4:	66 27       	eor	r22, r22
 bf6:	77 27       	eor	r23, r23
 bf8:	cb 01       	movw	r24, r22
 bfa:	97 f9       	bld	r25, 7
 bfc:	08 95       	ret

00000bfe <__gesf2>:
 bfe:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__fp_cmp>
 c02:	08 f4       	brcc	.+2      	; 0xc06 <__gesf2+0x8>
 c04:	8f ef       	ldi	r24, 0xFF	; 255
 c06:	08 95       	ret

00000c08 <__mulsf3>:
 c08:	0e 94 17 06 	call	0xc2e	; 0xc2e <__mulsf3x>
 c0c:	0c 94 c5 05 	jmp	0xb8a	; 0xb8a <__fp_round>
 c10:	0e 94 b7 05 	call	0xb6e	; 0xb6e <__fp_pscA>
 c14:	38 f0       	brcs	.+14     	; 0xc24 <__mulsf3+0x1c>
 c16:	0e 94 be 05 	call	0xb7c	; 0xb7c <__fp_pscB>
 c1a:	20 f0       	brcs	.+8      	; 0xc24 <__mulsf3+0x1c>
 c1c:	95 23       	and	r25, r21
 c1e:	11 f0       	breq	.+4      	; 0xc24 <__mulsf3+0x1c>
 c20:	0c 94 ae 05 	jmp	0xb5c	; 0xb5c <__fp_inf>
 c24:	0c 94 b4 05 	jmp	0xb68	; 0xb68 <__fp_nan>
 c28:	11 24       	eor	r1, r1
 c2a:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__fp_szero>

00000c2e <__mulsf3x>:
 c2e:	0e 94 d6 05 	call	0xbac	; 0xbac <__fp_split3>
 c32:	70 f3       	brcs	.-36     	; 0xc10 <__mulsf3+0x8>

00000c34 <__mulsf3_pse>:
 c34:	95 9f       	mul	r25, r21
 c36:	c1 f3       	breq	.-16     	; 0xc28 <__mulsf3+0x20>
 c38:	95 0f       	add	r25, r21
 c3a:	50 e0       	ldi	r21, 0x00	; 0
 c3c:	55 1f       	adc	r21, r21
 c3e:	62 9f       	mul	r22, r18
 c40:	f0 01       	movw	r30, r0
 c42:	72 9f       	mul	r23, r18
 c44:	bb 27       	eor	r27, r27
 c46:	f0 0d       	add	r31, r0
 c48:	b1 1d       	adc	r27, r1
 c4a:	63 9f       	mul	r22, r19
 c4c:	aa 27       	eor	r26, r26
 c4e:	f0 0d       	add	r31, r0
 c50:	b1 1d       	adc	r27, r1
 c52:	aa 1f       	adc	r26, r26
 c54:	64 9f       	mul	r22, r20
 c56:	66 27       	eor	r22, r22
 c58:	b0 0d       	add	r27, r0
 c5a:	a1 1d       	adc	r26, r1
 c5c:	66 1f       	adc	r22, r22
 c5e:	82 9f       	mul	r24, r18
 c60:	22 27       	eor	r18, r18
 c62:	b0 0d       	add	r27, r0
 c64:	a1 1d       	adc	r26, r1
 c66:	62 1f       	adc	r22, r18
 c68:	73 9f       	mul	r23, r19
 c6a:	b0 0d       	add	r27, r0
 c6c:	a1 1d       	adc	r26, r1
 c6e:	62 1f       	adc	r22, r18
 c70:	83 9f       	mul	r24, r19
 c72:	a0 0d       	add	r26, r0
 c74:	61 1d       	adc	r22, r1
 c76:	22 1f       	adc	r18, r18
 c78:	74 9f       	mul	r23, r20
 c7a:	33 27       	eor	r19, r19
 c7c:	a0 0d       	add	r26, r0
 c7e:	61 1d       	adc	r22, r1
 c80:	23 1f       	adc	r18, r19
 c82:	84 9f       	mul	r24, r20
 c84:	60 0d       	add	r22, r0
 c86:	21 1d       	adc	r18, r1
 c88:	82 2f       	mov	r24, r18
 c8a:	76 2f       	mov	r23, r22
 c8c:	6a 2f       	mov	r22, r26
 c8e:	11 24       	eor	r1, r1
 c90:	9f 57       	subi	r25, 0x7F	; 127
 c92:	50 40       	sbci	r21, 0x00	; 0
 c94:	9a f0       	brmi	.+38     	; 0xcbc <__mulsf3_pse+0x88>
 c96:	f1 f0       	breq	.+60     	; 0xcd4 <__mulsf3_pse+0xa0>
 c98:	88 23       	and	r24, r24
 c9a:	4a f0       	brmi	.+18     	; 0xcae <__mulsf3_pse+0x7a>
 c9c:	ee 0f       	add	r30, r30
 c9e:	ff 1f       	adc	r31, r31
 ca0:	bb 1f       	adc	r27, r27
 ca2:	66 1f       	adc	r22, r22
 ca4:	77 1f       	adc	r23, r23
 ca6:	88 1f       	adc	r24, r24
 ca8:	91 50       	subi	r25, 0x01	; 1
 caa:	50 40       	sbci	r21, 0x00	; 0
 cac:	a9 f7       	brne	.-22     	; 0xc98 <__mulsf3_pse+0x64>
 cae:	9e 3f       	cpi	r25, 0xFE	; 254
 cb0:	51 05       	cpc	r21, r1
 cb2:	80 f0       	brcs	.+32     	; 0xcd4 <__mulsf3_pse+0xa0>
 cb4:	0c 94 ae 05 	jmp	0xb5c	; 0xb5c <__fp_inf>
 cb8:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__fp_szero>
 cbc:	5f 3f       	cpi	r21, 0xFF	; 255
 cbe:	e4 f3       	brlt	.-8      	; 0xcb8 <__mulsf3_pse+0x84>
 cc0:	98 3e       	cpi	r25, 0xE8	; 232
 cc2:	d4 f3       	brlt	.-12     	; 0xcb8 <__mulsf3_pse+0x84>
 cc4:	86 95       	lsr	r24
 cc6:	77 95       	ror	r23
 cc8:	67 95       	ror	r22
 cca:	b7 95       	ror	r27
 ccc:	f7 95       	ror	r31
 cce:	e7 95       	ror	r30
 cd0:	9f 5f       	subi	r25, 0xFF	; 255
 cd2:	c1 f7       	brne	.-16     	; 0xcc4 <__mulsf3_pse+0x90>
 cd4:	fe 2b       	or	r31, r30
 cd6:	88 0f       	add	r24, r24
 cd8:	91 1d       	adc	r25, r1
 cda:	96 95       	lsr	r25
 cdc:	87 95       	ror	r24
 cde:	97 f9       	bld	r25, 7
 ce0:	08 95       	ret

00000ce2 <sin>:
 ce2:	9f 93       	push	r25
 ce4:	0e 94 9f 06 	call	0xd3e	; 0xd3e <__fp_rempio2>
 ce8:	0f 90       	pop	r0
 cea:	07 fc       	sbrc	r0, 7
 cec:	ee 5f       	subi	r30, 0xFE	; 254
 cee:	0c 94 c8 06 	jmp	0xd90	; 0xd90 <__fp_sinus>

00000cf2 <__fp_cmp>:
 cf2:	99 0f       	add	r25, r25
 cf4:	00 08       	sbc	r0, r0
 cf6:	55 0f       	add	r21, r21
 cf8:	aa 0b       	sbc	r26, r26
 cfa:	e0 e8       	ldi	r30, 0x80	; 128
 cfc:	fe ef       	ldi	r31, 0xFE	; 254
 cfe:	16 16       	cp	r1, r22
 d00:	17 06       	cpc	r1, r23
 d02:	e8 07       	cpc	r30, r24
 d04:	f9 07       	cpc	r31, r25
 d06:	c0 f0       	brcs	.+48     	; 0xd38 <__fp_cmp+0x46>
 d08:	12 16       	cp	r1, r18
 d0a:	13 06       	cpc	r1, r19
 d0c:	e4 07       	cpc	r30, r20
 d0e:	f5 07       	cpc	r31, r21
 d10:	98 f0       	brcs	.+38     	; 0xd38 <__fp_cmp+0x46>
 d12:	62 1b       	sub	r22, r18
 d14:	73 0b       	sbc	r23, r19
 d16:	84 0b       	sbc	r24, r20
 d18:	95 0b       	sbc	r25, r21
 d1a:	39 f4       	brne	.+14     	; 0xd2a <__fp_cmp+0x38>
 d1c:	0a 26       	eor	r0, r26
 d1e:	61 f0       	breq	.+24     	; 0xd38 <__fp_cmp+0x46>
 d20:	23 2b       	or	r18, r19
 d22:	24 2b       	or	r18, r20
 d24:	25 2b       	or	r18, r21
 d26:	21 f4       	brne	.+8      	; 0xd30 <__fp_cmp+0x3e>
 d28:	08 95       	ret
 d2a:	0a 26       	eor	r0, r26
 d2c:	09 f4       	brne	.+2      	; 0xd30 <__fp_cmp+0x3e>
 d2e:	a1 40       	sbci	r26, 0x01	; 1
 d30:	a6 95       	lsr	r26
 d32:	8f ef       	ldi	r24, 0xFF	; 255
 d34:	81 1d       	adc	r24, r1
 d36:	81 1d       	adc	r24, r1
 d38:	08 95       	ret
 d3a:	0c 94 b4 05 	jmp	0xb68	; 0xb68 <__fp_nan>

00000d3e <__fp_rempio2>:
 d3e:	0e 94 de 05 	call	0xbbc	; 0xbbc <__fp_splitA>
 d42:	d8 f3       	brcs	.-10     	; 0xd3a <__fp_cmp+0x48>
 d44:	e8 94       	clt
 d46:	e0 e0       	ldi	r30, 0x00	; 0
 d48:	bb 27       	eor	r27, r27
 d4a:	9f 57       	subi	r25, 0x7F	; 127
 d4c:	f0 f0       	brcs	.+60     	; 0xd8a <__fp_rempio2+0x4c>
 d4e:	2a ed       	ldi	r18, 0xDA	; 218
 d50:	3f e0       	ldi	r19, 0x0F	; 15
 d52:	49 ec       	ldi	r20, 0xC9	; 201
 d54:	06 c0       	rjmp	.+12     	; 0xd62 <__fp_rempio2+0x24>
 d56:	ee 0f       	add	r30, r30
 d58:	bb 0f       	add	r27, r27
 d5a:	66 1f       	adc	r22, r22
 d5c:	77 1f       	adc	r23, r23
 d5e:	88 1f       	adc	r24, r24
 d60:	28 f0       	brcs	.+10     	; 0xd6c <__fp_rempio2+0x2e>
 d62:	b2 3a       	cpi	r27, 0xA2	; 162
 d64:	62 07       	cpc	r22, r18
 d66:	73 07       	cpc	r23, r19
 d68:	84 07       	cpc	r24, r20
 d6a:	28 f0       	brcs	.+10     	; 0xd76 <__fp_rempio2+0x38>
 d6c:	b2 5a       	subi	r27, 0xA2	; 162
 d6e:	62 0b       	sbc	r22, r18
 d70:	73 0b       	sbc	r23, r19
 d72:	84 0b       	sbc	r24, r20
 d74:	e3 95       	inc	r30
 d76:	9a 95       	dec	r25
 d78:	72 f7       	brpl	.-36     	; 0xd56 <__fp_rempio2+0x18>
 d7a:	80 38       	cpi	r24, 0x80	; 128
 d7c:	30 f4       	brcc	.+12     	; 0xd8a <__fp_rempio2+0x4c>
 d7e:	9a 95       	dec	r25
 d80:	bb 0f       	add	r27, r27
 d82:	66 1f       	adc	r22, r22
 d84:	77 1f       	adc	r23, r23
 d86:	88 1f       	adc	r24, r24
 d88:	d2 f7       	brpl	.-12     	; 0xd7e <__fp_rempio2+0x40>
 d8a:	90 48       	sbci	r25, 0x80	; 128
 d8c:	0c 94 de 06 	jmp	0xdbc	; 0xdbc <__fp_mpack_finite>

00000d90 <__fp_sinus>:
 d90:	ef 93       	push	r30
 d92:	e0 ff       	sbrs	r30, 0
 d94:	07 c0       	rjmp	.+14     	; 0xda4 <__fp_sinus+0x14>
 d96:	a2 ea       	ldi	r26, 0xA2	; 162
 d98:	2a ed       	ldi	r18, 0xDA	; 218
 d9a:	3f e0       	ldi	r19, 0x0F	; 15
 d9c:	49 ec       	ldi	r20, 0xC9	; 201
 d9e:	5f eb       	ldi	r21, 0xBF	; 191
 da0:	0e 94 74 04 	call	0x8e8	; 0x8e8 <__addsf3x>
 da4:	0e 94 c5 05 	call	0xb8a	; 0xb8a <__fp_round>
 da8:	0f 90       	pop	r0
 daa:	03 94       	inc	r0
 dac:	01 fc       	sbrc	r0, 1
 dae:	90 58       	subi	r25, 0x80	; 128
 db0:	e8 e6       	ldi	r30, 0x68	; 104
 db2:	f0 e0       	ldi	r31, 0x00	; 0
 db4:	0c 94 ea 06 	jmp	0xdd4	; 0xdd4 <__fp_powsodd>

00000db8 <__fp_mpack>:
 db8:	9f 3f       	cpi	r25, 0xFF	; 255
 dba:	31 f0       	breq	.+12     	; 0xdc8 <__fp_mpack_finite+0xc>

00000dbc <__fp_mpack_finite>:
 dbc:	91 50       	subi	r25, 0x01	; 1
 dbe:	20 f4       	brcc	.+8      	; 0xdc8 <__fp_mpack_finite+0xc>
 dc0:	87 95       	ror	r24
 dc2:	77 95       	ror	r23
 dc4:	67 95       	ror	r22
 dc6:	b7 95       	ror	r27
 dc8:	88 0f       	add	r24, r24
 dca:	91 1d       	adc	r25, r1
 dcc:	96 95       	lsr	r25
 dce:	87 95       	ror	r24
 dd0:	97 f9       	bld	r25, 7
 dd2:	08 95       	ret

00000dd4 <__fp_powsodd>:
 dd4:	9f 93       	push	r25
 dd6:	8f 93       	push	r24
 dd8:	7f 93       	push	r23
 dda:	6f 93       	push	r22
 ddc:	ff 93       	push	r31
 dde:	ef 93       	push	r30
 de0:	9b 01       	movw	r18, r22
 de2:	ac 01       	movw	r20, r24
 de4:	0e 94 04 06 	call	0xc08	; 0xc08 <__mulsf3>
 de8:	ef 91       	pop	r30
 dea:	ff 91       	pop	r31
 dec:	0e 94 fe 06 	call	0xdfc	; 0xdfc <__fp_powser>
 df0:	2f 91       	pop	r18
 df2:	3f 91       	pop	r19
 df4:	4f 91       	pop	r20
 df6:	5f 91       	pop	r21
 df8:	0c 94 04 06 	jmp	0xc08	; 0xc08 <__mulsf3>

00000dfc <__fp_powser>:
 dfc:	df 93       	push	r29
 dfe:	cf 93       	push	r28
 e00:	1f 93       	push	r17
 e02:	0f 93       	push	r16
 e04:	ff 92       	push	r15
 e06:	ef 92       	push	r14
 e08:	df 92       	push	r13
 e0a:	7b 01       	movw	r14, r22
 e0c:	8c 01       	movw	r16, r24
 e0e:	68 94       	set
 e10:	06 c0       	rjmp	.+12     	; 0xe1e <__fp_powser+0x22>
 e12:	da 2e       	mov	r13, r26
 e14:	ef 01       	movw	r28, r30
 e16:	0e 94 17 06 	call	0xc2e	; 0xc2e <__mulsf3x>
 e1a:	fe 01       	movw	r30, r28
 e1c:	e8 94       	clt
 e1e:	a5 91       	lpm	r26, Z+
 e20:	25 91       	lpm	r18, Z+
 e22:	35 91       	lpm	r19, Z+
 e24:	45 91       	lpm	r20, Z+
 e26:	55 91       	lpm	r21, Z+
 e28:	a6 f3       	brts	.-24     	; 0xe12 <__fp_powser+0x16>
 e2a:	ef 01       	movw	r28, r30
 e2c:	0e 94 74 04 	call	0x8e8	; 0x8e8 <__addsf3x>
 e30:	fe 01       	movw	r30, r28
 e32:	97 01       	movw	r18, r14
 e34:	a8 01       	movw	r20, r16
 e36:	da 94       	dec	r13
 e38:	69 f7       	brne	.-38     	; 0xe14 <__fp_powser+0x18>
 e3a:	df 90       	pop	r13
 e3c:	ef 90       	pop	r14
 e3e:	ff 90       	pop	r15
 e40:	0f 91       	pop	r16
 e42:	1f 91       	pop	r17
 e44:	cf 91       	pop	r28
 e46:	df 91       	pop	r29
 e48:	08 95       	ret

00000e4a <__divmodhi4>:
 e4a:	97 fb       	bst	r25, 7
 e4c:	07 2e       	mov	r0, r23
 e4e:	16 f4       	brtc	.+4      	; 0xe54 <__divmodhi4+0xa>
 e50:	00 94       	com	r0
 e52:	07 d0       	rcall	.+14     	; 0xe62 <__divmodhi4_neg1>
 e54:	77 fd       	sbrc	r23, 7
 e56:	09 d0       	rcall	.+18     	; 0xe6a <__divmodhi4_neg2>
 e58:	0e 94 39 07 	call	0xe72	; 0xe72 <__udivmodhi4>
 e5c:	07 fc       	sbrc	r0, 7
 e5e:	05 d0       	rcall	.+10     	; 0xe6a <__divmodhi4_neg2>
 e60:	3e f4       	brtc	.+14     	; 0xe70 <__divmodhi4_exit>

00000e62 <__divmodhi4_neg1>:
 e62:	90 95       	com	r25
 e64:	81 95       	neg	r24
 e66:	9f 4f       	sbci	r25, 0xFF	; 255
 e68:	08 95       	ret

00000e6a <__divmodhi4_neg2>:
 e6a:	70 95       	com	r23
 e6c:	61 95       	neg	r22
 e6e:	7f 4f       	sbci	r23, 0xFF	; 255

00000e70 <__divmodhi4_exit>:
 e70:	08 95       	ret

00000e72 <__udivmodhi4>:
 e72:	aa 1b       	sub	r26, r26
 e74:	bb 1b       	sub	r27, r27
 e76:	51 e1       	ldi	r21, 0x11	; 17
 e78:	07 c0       	rjmp	.+14     	; 0xe88 <__udivmodhi4_ep>

00000e7a <__udivmodhi4_loop>:
 e7a:	aa 1f       	adc	r26, r26
 e7c:	bb 1f       	adc	r27, r27
 e7e:	a6 17       	cp	r26, r22
 e80:	b7 07       	cpc	r27, r23
 e82:	10 f0       	brcs	.+4      	; 0xe88 <__udivmodhi4_ep>
 e84:	a6 1b       	sub	r26, r22
 e86:	b7 0b       	sbc	r27, r23

00000e88 <__udivmodhi4_ep>:
 e88:	88 1f       	adc	r24, r24
 e8a:	99 1f       	adc	r25, r25
 e8c:	5a 95       	dec	r21
 e8e:	a9 f7       	brne	.-22     	; 0xe7a <__udivmodhi4_loop>
 e90:	80 95       	com	r24
 e92:	90 95       	com	r25
 e94:	bc 01       	movw	r22, r24
 e96:	cd 01       	movw	r24, r26
 e98:	08 95       	ret

00000e9a <_exit>:
 e9a:	f8 94       	cli

00000e9c <__stop_program>:
 e9c:	ff cf       	rjmp	.-2      	; 0xe9c <__stop_program>
>>>>>>> master
