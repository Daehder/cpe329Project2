
Project2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000090e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000089a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000641  00800100  00800100  0000090e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000090e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000940  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00000980  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000662  00000000  00000000  00000a28  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000304  00000000  00000000  0000108a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000324  00000000  00000000  0000138e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001ec  00000000  00000000  000016b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002f8  00000000  00000000  000018a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004a5  00000000  00000000  00001b98  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  0000203d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 43 00 	jmp	0x86	; 0x86 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 c8 00 	jmp	0x190	; 0x190 <__vector_14>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	05 a8       	ldd	r0, Z+53	; 0x35
  6a:	4c cd       	rjmp	.-1384   	; 0xfffffb04 <__eeprom_end+0xff7efb04>
  6c:	b2 d4       	rcall	.+2404   	; 0x9d2 <__stack+0xd3>
  6e:	4e b9       	out	0x0e, r20	; 14
  70:	38 36       	cpi	r19, 0x68	; 104
  72:	a9 02       	muls	r26, r25
  74:	0c 50       	subi	r16, 0x0C	; 12
  76:	b9 91       	ld	r27, Y+
  78:	86 88       	ldd	r8, Z+22	; 0x16
  7a:	08 3c       	cpi	r16, 0xC8	; 200
  7c:	a6 aa       	std	Z+54, r10	; 0x36
  7e:	aa 2a       	or	r10, r26
  80:	be 00       	.word	0x00be	; ????
  82:	00 00       	nop
  84:	80 3f       	cpi	r24, 0xF0	; 240

00000086 <__ctors_end>:
  86:	11 24       	eor	r1, r1
  88:	1f be       	out	0x3f, r1	; 63
  8a:	cf ef       	ldi	r28, 0xFF	; 255
  8c:	d8 e0       	ldi	r29, 0x08	; 8
  8e:	de bf       	out	0x3e, r29	; 62
  90:	cd bf       	out	0x3d, r28	; 61

00000092 <__do_clear_bss>:
  92:	27 e0       	ldi	r18, 0x07	; 7
  94:	a0 e0       	ldi	r26, 0x00	; 0
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a1 34       	cpi	r26, 0x41	; 65
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 88 00 	call	0x110	; 0x110 <main>
  a6:	0c 94 4b 04 	jmp	0x896	; 0x896 <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <Initialize_SPI_Master>:
    return 0;
}  

// sets up SPI system between ATmega328P and slave device(s)
void Initialize_SPI_Master(){     
    SPCR = (0<<SPIE) |		//No interrupts
  ae:	80 e5       	ldi	r24, 0x50	; 80
  b0:	8c bd       	out	0x2c, r24	; 44
    (1<<SPE) |				//SPI enabled
    (1<<MSTR) ;             //master
    SPSR = 0x00;			//clear flags
  b2:	1d bc       	out	0x2d, r1	; 45
    PORTB = 1 << SS;		// make sure SS is high
  b4:	84 e0       	ldi	r24, 0x04	; 4
  b6:	85 b9       	out	0x05, r24	; 5
  b8:	08 95       	ret

000000ba <initTimer0>:
}

// Initializing timer 0 (change OCR0A for freq change!!!!!)
void initTimer0(){
	TCCR0A = 0x02;			// timer CTC mode
  ba:	82 e0       	ldi	r24, 0x02	; 2
  bc:	84 bd       	out	0x24, r24	; 36
	OCR0A = OVERFLOW_100Hz;	// sets counter overflow to 250
  be:	98 ec       	ldi	r25, 0xC8	; 200
  c0:	97 bd       	out	0x27, r25	; 39
	TCCR0B = 0x02;			// timer clk = system clk / 8 (2MHz)
  c2:	85 bd       	out	0x25, r24	; 37
	TIFR0 = 0x02;			// Interrupt occurs at OCRF0A overflow 
  c4:	85 bb       	out	0x15, r24	; 21
	TIMSK0 = 0x02;			// OCRF0A overflow interrupt enabled
  c6:	80 93 6e 00 	sts	0x006E, r24
  ca:	08 95       	ret

000000cc <GPIO_Initialization>:
}


// initializes GPIO I/O, SPI interface, and interrupts (working)
void GPIO_Initialization(){
	DDRB |= (1<<MOSI) |						// make MOSI, SCK and SS outputs
  cc:	84 b1       	in	r24, 0x04	; 4
  ce:	8c 62       	ori	r24, 0x2C	; 44
  d0:	84 b9       	out	0x04, r24	; 4
			(1<<SCK)  | 
			(1<<SS);
	DDRD |= (1<<LED12);						// led at PB4 is output
  d2:	57 9a       	sbi	0x0a, 7	; 10
	DDRD &= ~(1<<BTN0) |					// buttons 0 and 1 are inputs
  d4:	8a b1       	in	r24, 0x0a	; 10
  d6:	8a b9       	out	0x0a, r24	; 10
			~(1<<BTN1);
	PORTD |= (1<<BTN0) | (1<<BTN1);			// set internal pull-ups on btns
  d8:	8b b1       	in	r24, 0x0b	; 11
  da:	80 66       	ori	r24, 0x60	; 96
  dc:	8b b9       	out	0x0b, r24	; 11
	Initialize_SPI_Master();				// initialize SPI to DAC
  de:	0e 94 57 00 	call	0xae	; 0xae <Initialize_SPI_Master>
	initTimer0();							// initialize timer0
  e2:	0e 94 5d 00 	call	0xba	; 0xba <initTimer0>
  e6:	08 95       	ret

000000e8 <genorate_LUTs>:
}

// fills all the lookup tables for every wave
void genorate_LUTs(){
	make_square_LUT();		// fill square wave LUT
  e8:	0e 94 ff 00 	call	0x1fe	; 0x1fe <make_square_LUT>
	make_sawtooth_LUT();	// fill sawtooth wave LUT
  ec:	0e 94 59 01 	call	0x2b2	; 0x2b2 <make_sawtooth_LUT>
	make_triangle_LUT();	// fill triangle wave LUT
  f0:	0e 94 14 01 	call	0x228	; 0x228 <make_triangle_LUT>
	make_sin_LUT();			// fill sine wave LUT
  f4:	0e 94 89 01 	call	0x312	; 0x312 <make_sin_LUT>
	sei();
  f8:	78 94       	sei
  fa:	08 95       	ret

000000fc <check_buttons>:
}

// returns a true bool if a buttons is pressed
uint8_t check_buttons(){
	if(!(PINB & (1<<BTN0)))			// return 1 if button at pin0 is pressed
  fc:	1d 9b       	sbis	0x03, 5	; 3
  fe:	04 c0       	rjmp	.+8      	; 0x108 <check_buttons+0xc>
		return 1;
	else if(!(PINB & (1<<BTN1)))	// return 2 if button at pin1 is pressed
 100:	1e 9b       	sbis	0x03, 6	; 3
 102:	04 c0       	rjmp	.+8      	; 0x10c <check_buttons+0x10>
		return 2;
	else
		return 0;					// return 0 if no buttons are pressed
 104:	80 e0       	ldi	r24, 0x00	; 0
 106:	08 95       	ret
}

// returns a true bool if a buttons is pressed
uint8_t check_buttons(){
	if(!(PINB & (1<<BTN0)))			// return 1 if button at pin0 is pressed
		return 1;
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	08 95       	ret
	else if(!(PINB & (1<<BTN1)))	// return 2 if button at pin1 is pressed
		return 2;
 10c:	82 e0       	ldi	r24, 0x02	; 2
	else
		return 0;					// return 0 if no buttons are pressed
}
 10e:	08 95       	ret

00000110 <main>:
uint8_t LUT_address = 0;

int main(void)
{	
	// initialize GPIO, interrupts, and timers
	GPIO_Initialization();
 110:	0e 94 66 00 	call	0xcc	; 0xcc <GPIO_Initialization>
	
	// fill square, sawtooth, triangle, and sine wave LUTs
	genorate_LUTs();
 114:	0e 94 74 00 	call	0xe8	; 0xe8 <genorate_LUTs>

	while(1){
		if(check_buttons())
 118:	0e 94 7e 00 	call	0xfc	; 0xfc <check_buttons>
 11c:	88 23       	and	r24, r24
 11e:	11 f0       	breq	.+4      	; 0x124 <main+0x14>
			PORTB |= (1<<LED12);
 120:	2f 9a       	sbi	0x05, 7	; 5
 122:	fa cf       	rjmp	.-12     	; 0x118 <main+0x8>
		else 
			PORTB &= ~(1<<LED12);
 124:	2f 98       	cbi	0x05, 7	; 5
 126:	f8 cf       	rjmp	.-16     	; 0x118 <main+0x8>

00000128 <Transmit_SPI_Master>:
		return 0;					// return 0 if no buttons are pressed
}

// sends data to DAC over SPI data port
void Transmit_SPI_Master(int Data) { 
PORTB &= ~(1 << SS);					//Assert slave select (active low)
 128:	2a 98       	cbi	0x05, 2	; 5
SPDR = ((Data >> 8) & 0xF) | 0x70;		//Attach configuration Bits onto MSB 
 12a:	9f 70       	andi	r25, 0x0F	; 15
 12c:	90 67       	ori	r25, 0x70	; 112
 12e:	9e bd       	out	0x2e, r25	; 46
while (!(SPSR & (1<<SPIF))); 
 130:	0d b4       	in	r0, 0x2d	; 45
 132:	07 fe       	sbrs	r0, 7
 134:	fd cf       	rjmp	.-6      	; 0x130 <Transmit_SPI_Master+0x8>
SPDR = 0xFF & Data; 
 136:	8e bd       	out	0x2e, r24	; 46
while (!(SPSR & (1<<SPIF))); 
 138:	0d b4       	in	r0, 0x2d	; 45
 13a:	07 fe       	sbrs	r0, 7
 13c:	fd cf       	rjmp	.-6      	; 0x138 <Transmit_SPI_Master+0x10>
PORTB |= 1 << SS;						//Turn off slave select 
 13e:	2a 9a       	sbi	0x05, 2	; 5
 140:	08 95       	ret

00000142 <volts_to_bits>:
		delay--;
	}
}

// converts input voltage between 0-5V to 12bit number for DAC
uint16_t volts_to_bits(double voltage){
 142:	cf 92       	push	r12
 144:	df 92       	push	r13
 146:	ef 92       	push	r14
 148:	ff 92       	push	r15
	double bits = ((voltage/5.0)*4095);
 14a:	20 e0       	ldi	r18, 0x00	; 0
 14c:	30 e0       	ldi	r19, 0x00	; 0
 14e:	40 ea       	ldi	r20, 0xA0	; 160
 150:	50 e4       	ldi	r21, 0x40	; 64
 152:	0e 94 33 02 	call	0x466	; 0x466 <__divsf3>
 156:	20 e0       	ldi	r18, 0x00	; 0
 158:	30 ef       	ldi	r19, 0xF0	; 240
 15a:	4f e7       	ldi	r20, 0x7F	; 127
 15c:	55 e4       	ldi	r21, 0x45	; 69
 15e:	0e 94 2a 03 	call	0x654	; 0x654 <__mulsf3>
 162:	6b 01       	movw	r12, r22
 164:	7c 01       	movw	r14, r24
	if(bits > 4095)						// if given above 5V return 5V
 166:	20 e0       	ldi	r18, 0x00	; 0
 168:	30 ef       	ldi	r19, 0xF0	; 240
 16a:	4f e7       	ldi	r20, 0x7F	; 127
 16c:	55 e4       	ldi	r21, 0x45	; 69
 16e:	0e 94 25 03 	call	0x64a	; 0x64a <__gesf2>
 172:	18 16       	cp	r1, r24
 174:	34 f0       	brlt	.+12     	; 0x182 <volts_to_bits+0x40>
		return 4095;
	else
		return bits;					// return 12bit equivalent for DAC
 176:	c7 01       	movw	r24, r14
 178:	b6 01       	movw	r22, r12
 17a:	0e 94 a5 02 	call	0x54a	; 0x54a <__fixunssfsi>
 17e:	cb 01       	movw	r24, r22
 180:	02 c0       	rjmp	.+4      	; 0x186 <volts_to_bits+0x44>

// converts input voltage between 0-5V to 12bit number for DAC
uint16_t volts_to_bits(double voltage){
	double bits = ((voltage/5.0)*4095);
	if(bits > 4095)						// if given above 5V return 5V
		return 4095;
 182:	8f ef       	ldi	r24, 0xFF	; 255
 184:	9f e0       	ldi	r25, 0x0F	; 15
	else
		return bits;					// return 12bit equivalent for DAC
}
 186:	ff 90       	pop	r15
 188:	ef 90       	pop	r14
 18a:	df 90       	pop	r13
 18c:	cf 90       	pop	r12
 18e:	08 95       	ret

00000190 <__vector_14>:

///////////////////////////////////ISR/////////////////////////////////////////


// ISR to incrament through wave function LUTs and set frequency 
ISR(TIMER0_COMPA_vect){
 190:	1f 92       	push	r1
 192:	0f 92       	push	r0
 194:	0f b6       	in	r0, 0x3f	; 63
 196:	0f 92       	push	r0
 198:	11 24       	eor	r1, r1
 19a:	2f 93       	push	r18
 19c:	3f 93       	push	r19
 19e:	4f 93       	push	r20
 1a0:	5f 93       	push	r21
 1a2:	6f 93       	push	r22
 1a4:	7f 93       	push	r23
 1a6:	8f 93       	push	r24
 1a8:	9f 93       	push	r25
 1aa:	af 93       	push	r26
 1ac:	bf 93       	push	r27
 1ae:	ef 93       	push	r30
 1b0:	ff 93       	push	r31
	Transmit_SPI_Master(SawWave[LUT_address]);
 1b2:	e0 91 00 01 	lds	r30, 0x0100
 1b6:	f0 e0       	ldi	r31, 0x00	; 0
 1b8:	ee 0f       	add	r30, r30
 1ba:	ff 1f       	adc	r31, r31
 1bc:	ef 56       	subi	r30, 0x6F	; 111
 1be:	fd 4f       	sbci	r31, 0xFD	; 253
 1c0:	80 81       	ld	r24, Z
 1c2:	91 81       	ldd	r25, Z+1	; 0x01
 1c4:	0e 94 94 00 	call	0x128	; 0x128 <Transmit_SPI_Master>
	LUT_address++;
 1c8:	80 91 00 01 	lds	r24, 0x0100
 1cc:	8f 5f       	subi	r24, 0xFF	; 255
	
	if(LUT_address>NUM_SAMPLES-1)
 1ce:	88 3c       	cpi	r24, 0xC8	; 200
 1d0:	18 f4       	brcc	.+6      	; 0x1d8 <__vector_14+0x48>


// ISR to incrament through wave function LUTs and set frequency 
ISR(TIMER0_COMPA_vect){
	Transmit_SPI_Master(SawWave[LUT_address]);
	LUT_address++;
 1d2:	80 93 00 01 	sts	0x0100, r24
 1d6:	02 c0       	rjmp	.+4      	; 0x1dc <__vector_14+0x4c>
	
	if(LUT_address>NUM_SAMPLES-1)
		LUT_address = 0;
 1d8:	10 92 00 01 	sts	0x0100, r1
}
 1dc:	ff 91       	pop	r31
 1de:	ef 91       	pop	r30
 1e0:	bf 91       	pop	r27
 1e2:	af 91       	pop	r26
 1e4:	9f 91       	pop	r25
 1e6:	8f 91       	pop	r24
 1e8:	7f 91       	pop	r23
 1ea:	6f 91       	pop	r22
 1ec:	5f 91       	pop	r21
 1ee:	4f 91       	pop	r20
 1f0:	3f 91       	pop	r19
 1f2:	2f 91       	pop	r18
 1f4:	0f 90       	pop	r0
 1f6:	0f be       	out	0x3f, r0	; 63
 1f8:	0f 90       	pop	r0
 1fa:	1f 90       	pop	r1
 1fc:	18 95       	reti

000001fe <make_square_LUT>:
   double bits = ((voltage/5.0)*4096);
   return bits;
}
*/

void make_square_LUT(){
 1fe:	e1 eb       	ldi	r30, 0xB1	; 177
 200:	f5 e0       	ldi	r31, 0x05	; 5
 202:	29 e7       	ldi	r18, 0x79	; 121
 204:	36 e0       	ldi	r19, 0x06	; 6
   int i;
   int duty = NUM_SAMPLES * (double) SQUARE_DUTY/100;
   
   for (i = 0; i < duty; i++)
      SquareWave[i] = 0xFFF;
 206:	8f ef       	ldi	r24, 0xFF	; 255
 208:	9f e0       	ldi	r25, 0x0F	; 15
 20a:	81 93       	st	Z+, r24
 20c:	91 93       	st	Z+, r25

void make_square_LUT(){
   int i;
   int duty = NUM_SAMPLES * (double) SQUARE_DUTY/100;
   
   for (i = 0; i < duty; i++)
 20e:	e2 17       	cp	r30, r18
 210:	f3 07       	cpc	r31, r19
 212:	d9 f7       	brne	.-10     	; 0x20a <make_square_LUT+0xc>
 214:	e9 e7       	ldi	r30, 0x79	; 121
 216:	f6 e0       	ldi	r31, 0x06	; 6
 218:	81 e4       	ldi	r24, 0x41	; 65
 21a:	97 e0       	ldi	r25, 0x07	; 7
      SquareWave[i] = 0xFFF;
   
   for ( ; i < NUM_SAMPLES ; i++)
      SquareWave[i] = 0x000;
 21c:	11 92       	st	Z+, r1
 21e:	11 92       	st	Z+, r1
   int duty = NUM_SAMPLES * (double) SQUARE_DUTY/100;
   
   for (i = 0; i < duty; i++)
      SquareWave[i] = 0xFFF;
   
   for ( ; i < NUM_SAMPLES ; i++)
 220:	e8 17       	cp	r30, r24
 222:	f9 07       	cpc	r31, r25
 224:	d9 f7       	brne	.-10     	; 0x21c <make_square_LUT+0x1e>
      SquareWave[i] = 0x000;
}
 226:	08 95       	ret

00000228 <make_triangle_LUT>:

void make_triangle_LUT(){
 228:	cf 92       	push	r12
 22a:	df 92       	push	r13
 22c:	ef 92       	push	r14
 22e:	ff 92       	push	r15
 230:	0f 93       	push	r16
 232:	1f 93       	push	r17
 234:	cf 93       	push	r28
 236:	df 93       	push	r29
 238:	c1 e2       	ldi	r28, 0x21	; 33
 23a:	d4 e0       	ldi	r29, 0x04	; 4
 23c:	0b ee       	ldi	r16, 0xEB	; 235
 23e:	14 e0       	ldi	r17, 0x04	; 4
   int i;
   int peak = NUM_SAMPLES / 2;
   double increment = ((double) MAX_VOLTAGE - MIN_VOLTAGE) / peak;
   double voltage = MIN_VOLTAGE - increment;
 240:	0f 2e       	mov	r0, r31
 242:	fd ec       	ldi	r31, 0xCD	; 205
 244:	cf 2e       	mov	r12, r31
 246:	fc ec       	ldi	r31, 0xCC	; 204
 248:	df 2e       	mov	r13, r31
 24a:	fc e4       	ldi	r31, 0x4C	; 76
 24c:	ef 2e       	mov	r14, r31
 24e:	fd eb       	ldi	r31, 0xBD	; 189
 250:	ff 2e       	mov	r15, r31
 252:	f0 2d       	mov	r31, r0
   
   for (i = 0; i < (peak + 1); i++)
      TriWave[i] = volts_to_bits(voltage += increment);
 254:	2d ec       	ldi	r18, 0xCD	; 205
 256:	3c ec       	ldi	r19, 0xCC	; 204
 258:	4c e4       	ldi	r20, 0x4C	; 76
 25a:	5d e3       	ldi	r21, 0x3D	; 61
 25c:	c7 01       	movw	r24, r14
 25e:	b6 01       	movw	r22, r12
 260:	0e 94 c7 01 	call	0x38e	; 0x38e <__addsf3>
 264:	6b 01       	movw	r12, r22
 266:	7c 01       	movw	r14, r24
 268:	0e 94 a1 00 	call	0x142	; 0x142 <volts_to_bits>
 26c:	89 93       	st	Y+, r24
 26e:	99 93       	st	Y+, r25
   int i;
   int peak = NUM_SAMPLES / 2;
   double increment = ((double) MAX_VOLTAGE - MIN_VOLTAGE) / peak;
   double voltage = MIN_VOLTAGE - increment;
   
   for (i = 0; i < (peak + 1); i++)
 270:	c0 17       	cp	r28, r16
 272:	d1 07       	cpc	r29, r17
 274:	79 f7       	brne	.-34     	; 0x254 <make_triangle_LUT+0x2c>
 276:	cb ee       	ldi	r28, 0xEB	; 235
 278:	d4 e0       	ldi	r29, 0x04	; 4
 27a:	0f ea       	ldi	r16, 0xAF	; 175
 27c:	15 e0       	ldi	r17, 0x05	; 5
      TriWave[i] = volts_to_bits(voltage += increment);
   
   for ( ; i < (NUM_SAMPLES - 1); i++)
      TriWave[i] = volts_to_bits(voltage -= increment);
 27e:	2d ec       	ldi	r18, 0xCD	; 205
 280:	3c ec       	ldi	r19, 0xCC	; 204
 282:	4c e4       	ldi	r20, 0x4C	; 76
 284:	5d e3       	ldi	r21, 0x3D	; 61
 286:	c7 01       	movw	r24, r14
 288:	b6 01       	movw	r22, r12
 28a:	0e 94 c6 01 	call	0x38c	; 0x38c <__subsf3>
 28e:	6b 01       	movw	r12, r22
 290:	7c 01       	movw	r14, r24
 292:	0e 94 a1 00 	call	0x142	; 0x142 <volts_to_bits>
 296:	89 93       	st	Y+, r24
 298:	99 93       	st	Y+, r25
   double voltage = MIN_VOLTAGE - increment;
   
   for (i = 0; i < (peak + 1); i++)
      TriWave[i] = volts_to_bits(voltage += increment);
   
   for ( ; i < (NUM_SAMPLES - 1); i++)
 29a:	c0 17       	cp	r28, r16
 29c:	d1 07       	cpc	r29, r17
 29e:	79 f7       	brne	.-34     	; 0x27e <make_triangle_LUT+0x56>
      TriWave[i] = volts_to_bits(voltage -= increment);
}
 2a0:	df 91       	pop	r29
 2a2:	cf 91       	pop	r28
 2a4:	1f 91       	pop	r17
 2a6:	0f 91       	pop	r16
 2a8:	ff 90       	pop	r15
 2aa:	ef 90       	pop	r14
 2ac:	df 90       	pop	r13
 2ae:	cf 90       	pop	r12
 2b0:	08 95       	ret

000002b2 <make_sawtooth_LUT>:

void make_sawtooth_LUT(){
 2b2:	cf 92       	push	r12
 2b4:	df 92       	push	r13
 2b6:	ef 92       	push	r14
 2b8:	ff 92       	push	r15
 2ba:	0f 93       	push	r16
 2bc:	1f 93       	push	r17
 2be:	cf 93       	push	r28
 2c0:	df 93       	push	r29
 2c2:	c1 e9       	ldi	r28, 0x91	; 145
 2c4:	d2 e0       	ldi	r29, 0x02	; 2
 2c6:	01 e2       	ldi	r16, 0x21	; 33
 2c8:	14 e0       	ldi	r17, 0x04	; 4
   int ndx;
   double increment = ((double) MAX_VOLTAGE - MIN_VOLTAGE) / (NUM_SAMPLES - 1);
   double voltage = -increment;
 2ca:	0f 2e       	mov	r0, r31
 2cc:	f3 e4       	ldi	r31, 0x43	; 67
 2ce:	cf 2e       	mov	r12, r31
 2d0:	f4 ed       	ldi	r31, 0xD4	; 212
 2d2:	df 2e       	mov	r13, r31
 2d4:	fd ec       	ldi	r31, 0xCD	; 205
 2d6:	ef 2e       	mov	r14, r31
 2d8:	fc eb       	ldi	r31, 0xBC	; 188
 2da:	ff 2e       	mov	r15, r31
 2dc:	f0 2d       	mov	r31, r0
   
   for (ndx = 0; ndx < NUM_SAMPLES; ndx++){
      SawWave[ndx] = volts_to_bits(voltage += increment);
 2de:	23 e4       	ldi	r18, 0x43	; 67
 2e0:	34 ed       	ldi	r19, 0xD4	; 212
 2e2:	4d ec       	ldi	r20, 0xCD	; 205
 2e4:	5c e3       	ldi	r21, 0x3C	; 60
 2e6:	c7 01       	movw	r24, r14
 2e8:	b6 01       	movw	r22, r12
 2ea:	0e 94 c7 01 	call	0x38e	; 0x38e <__addsf3>
 2ee:	6b 01       	movw	r12, r22
 2f0:	7c 01       	movw	r14, r24
 2f2:	0e 94 a1 00 	call	0x142	; 0x142 <volts_to_bits>
 2f6:	89 93       	st	Y+, r24
 2f8:	99 93       	st	Y+, r25
void make_sawtooth_LUT(){
   int ndx;
   double increment = ((double) MAX_VOLTAGE - MIN_VOLTAGE) / (NUM_SAMPLES - 1);
   double voltage = -increment;
   
   for (ndx = 0; ndx < NUM_SAMPLES; ndx++){
 2fa:	c0 17       	cp	r28, r16
 2fc:	d1 07       	cpc	r29, r17
 2fe:	79 f7       	brne	.-34     	; 0x2de <make_sawtooth_LUT+0x2c>
      SawWave[ndx] = volts_to_bits(voltage += increment);
   }
}
 300:	df 91       	pop	r29
 302:	cf 91       	pop	r28
 304:	1f 91       	pop	r17
 306:	0f 91       	pop	r16
 308:	ff 90       	pop	r15
 30a:	ef 90       	pop	r14
 30c:	df 90       	pop	r13
 30e:	cf 90       	pop	r12
 310:	08 95       	ret

00000312 <make_sin_LUT>:

void make_sin_LUT(){
 312:	cf 92       	push	r12
 314:	df 92       	push	r13
 316:	ef 92       	push	r14
 318:	ff 92       	push	r15
 31a:	0f 93       	push	r16
 31c:	1f 93       	push	r17
 31e:	cf 93       	push	r28
 320:	df 93       	push	r29
 322:	c1 e0       	ldi	r28, 0x01	; 1
 324:	d1 e0       	ldi	r29, 0x01	; 1
 326:	01 e9       	ldi	r16, 0x91	; 145
 328:	12 e0       	ldi	r17, 0x02	; 2
   int ndx;
   double increment = 2 * M_PI / NUM_SAMPLES;
   double rad = -increment;
 32a:	0f 2e       	mov	r0, r31
 32c:	fd ef       	ldi	r31, 0xFD	; 253
 32e:	cf 2e       	mov	r12, r31
 330:	fd ea       	ldi	r31, 0xAD	; 173
 332:	df 2e       	mov	r13, r31
 334:	e1 2c       	mov	r14, r1
 336:	fd eb       	ldi	r31, 0xBD	; 189
 338:	ff 2e       	mov	r15, r31
 33a:	f0 2d       	mov	r31, r0
   double ampli = ((double) MAX_VOLTAGE - MIN_VOLTAGE) / 2;
   // The amplitude/2 is neccessary to compensate for the default amplitude of 2
   double offset = MIN_VOLTAGE + ampli;
   
   for (ndx = 0; ndx < NUM_SAMPLES; ndx++){
      SinWave[ndx] = volts_to_bits(ampli * sin(rad += increment) + offset);
 33c:	2d ef       	ldi	r18, 0xFD	; 253
 33e:	3d ea       	ldi	r19, 0xAD	; 173
 340:	40 e0       	ldi	r20, 0x00	; 0
 342:	5d e3       	ldi	r21, 0x3D	; 61
 344:	c7 01       	movw	r24, r14
 346:	b6 01       	movw	r22, r12
 348:	0e 94 c7 01 	call	0x38e	; 0x38e <__addsf3>
 34c:	6b 01       	movw	r12, r22
 34e:	7c 01       	movw	r14, r24
 350:	0e 94 97 03 	call	0x72e	; 0x72e <sin>
 354:	20 e0       	ldi	r18, 0x00	; 0
 356:	30 e0       	ldi	r19, 0x00	; 0
 358:	40 e2       	ldi	r20, 0x20	; 32
 35a:	50 e4       	ldi	r21, 0x40	; 64
 35c:	0e 94 2a 03 	call	0x654	; 0x654 <__mulsf3>
 360:	20 e0       	ldi	r18, 0x00	; 0
 362:	30 e0       	ldi	r19, 0x00	; 0
 364:	40 e2       	ldi	r20, 0x20	; 32
 366:	50 e4       	ldi	r21, 0x40	; 64
 368:	0e 94 c7 01 	call	0x38e	; 0x38e <__addsf3>
 36c:	0e 94 a1 00 	call	0x142	; 0x142 <volts_to_bits>
 370:	89 93       	st	Y+, r24
 372:	99 93       	st	Y+, r25
   double rad = -increment;
   double ampli = ((double) MAX_VOLTAGE - MIN_VOLTAGE) / 2;
   // The amplitude/2 is neccessary to compensate for the default amplitude of 2
   double offset = MIN_VOLTAGE + ampli;
   
   for (ndx = 0; ndx < NUM_SAMPLES; ndx++){
 374:	c0 17       	cp	r28, r16
 376:	d1 07       	cpc	r29, r17
 378:	09 f7       	brne	.-62     	; 0x33c <make_sin_LUT+0x2a>
      SinWave[ndx] = volts_to_bits(ampli * sin(rad += increment) + offset);
   }
 37a:	df 91       	pop	r29
 37c:	cf 91       	pop	r28
 37e:	1f 91       	pop	r17
 380:	0f 91       	pop	r16
 382:	ff 90       	pop	r15
 384:	ef 90       	pop	r14
 386:	df 90       	pop	r13
 388:	cf 90       	pop	r12
 38a:	08 95       	ret

0000038c <__subsf3>:
 38c:	50 58       	subi	r21, 0x80	; 128

0000038e <__addsf3>:
 38e:	bb 27       	eor	r27, r27
 390:	aa 27       	eor	r26, r26
 392:	0e 94 de 01 	call	0x3bc	; 0x3bc <__addsf3x>
 396:	0c 94 eb 02 	jmp	0x5d6	; 0x5d6 <__fp_round>
 39a:	0e 94 dd 02 	call	0x5ba	; 0x5ba <__fp_pscA>
 39e:	38 f0       	brcs	.+14     	; 0x3ae <__addsf3+0x20>
 3a0:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <__fp_pscB>
 3a4:	20 f0       	brcs	.+8      	; 0x3ae <__addsf3+0x20>
 3a6:	39 f4       	brne	.+14     	; 0x3b6 <__addsf3+0x28>
 3a8:	9f 3f       	cpi	r25, 0xFF	; 255
 3aa:	19 f4       	brne	.+6      	; 0x3b2 <__addsf3+0x24>
 3ac:	26 f4       	brtc	.+8      	; 0x3b6 <__addsf3+0x28>
 3ae:	0c 94 da 02 	jmp	0x5b4	; 0x5b4 <__fp_nan>
 3b2:	0e f4       	brtc	.+2      	; 0x3b6 <__addsf3+0x28>
 3b4:	e0 95       	com	r30
 3b6:	e7 fb       	bst	r30, 7
 3b8:	0c 94 d4 02 	jmp	0x5a8	; 0x5a8 <__fp_inf>

000003bc <__addsf3x>:
 3bc:	e9 2f       	mov	r30, r25
 3be:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <__fp_split3>
 3c2:	58 f3       	brcs	.-42     	; 0x39a <__addsf3+0xc>
 3c4:	ba 17       	cp	r27, r26
 3c6:	62 07       	cpc	r22, r18
 3c8:	73 07       	cpc	r23, r19
 3ca:	84 07       	cpc	r24, r20
 3cc:	95 07       	cpc	r25, r21
 3ce:	20 f0       	brcs	.+8      	; 0x3d8 <__addsf3x+0x1c>
 3d0:	79 f4       	brne	.+30     	; 0x3f0 <__addsf3x+0x34>
 3d2:	a6 f5       	brtc	.+104    	; 0x43c <__addsf3x+0x80>
 3d4:	0c 94 1e 03 	jmp	0x63c	; 0x63c <__fp_zero>
 3d8:	0e f4       	brtc	.+2      	; 0x3dc <__addsf3x+0x20>
 3da:	e0 95       	com	r30
 3dc:	0b 2e       	mov	r0, r27
 3de:	ba 2f       	mov	r27, r26
 3e0:	a0 2d       	mov	r26, r0
 3e2:	0b 01       	movw	r0, r22
 3e4:	b9 01       	movw	r22, r18
 3e6:	90 01       	movw	r18, r0
 3e8:	0c 01       	movw	r0, r24
 3ea:	ca 01       	movw	r24, r20
 3ec:	a0 01       	movw	r20, r0
 3ee:	11 24       	eor	r1, r1
 3f0:	ff 27       	eor	r31, r31
 3f2:	59 1b       	sub	r21, r25
 3f4:	99 f0       	breq	.+38     	; 0x41c <__addsf3x+0x60>
 3f6:	59 3f       	cpi	r21, 0xF9	; 249
 3f8:	50 f4       	brcc	.+20     	; 0x40e <__addsf3x+0x52>
 3fa:	50 3e       	cpi	r21, 0xE0	; 224
 3fc:	68 f1       	brcs	.+90     	; 0x458 <__addsf3x+0x9c>
 3fe:	1a 16       	cp	r1, r26
 400:	f0 40       	sbci	r31, 0x00	; 0
 402:	a2 2f       	mov	r26, r18
 404:	23 2f       	mov	r18, r19
 406:	34 2f       	mov	r19, r20
 408:	44 27       	eor	r20, r20
 40a:	58 5f       	subi	r21, 0xF8	; 248
 40c:	f3 cf       	rjmp	.-26     	; 0x3f4 <__addsf3x+0x38>
 40e:	46 95       	lsr	r20
 410:	37 95       	ror	r19
 412:	27 95       	ror	r18
 414:	a7 95       	ror	r26
 416:	f0 40       	sbci	r31, 0x00	; 0
 418:	53 95       	inc	r21
 41a:	c9 f7       	brne	.-14     	; 0x40e <__addsf3x+0x52>
 41c:	7e f4       	brtc	.+30     	; 0x43c <__addsf3x+0x80>
 41e:	1f 16       	cp	r1, r31
 420:	ba 0b       	sbc	r27, r26
 422:	62 0b       	sbc	r22, r18
 424:	73 0b       	sbc	r23, r19
 426:	84 0b       	sbc	r24, r20
 428:	ba f0       	brmi	.+46     	; 0x458 <__addsf3x+0x9c>
 42a:	91 50       	subi	r25, 0x01	; 1
 42c:	a1 f0       	breq	.+40     	; 0x456 <__addsf3x+0x9a>
 42e:	ff 0f       	add	r31, r31
 430:	bb 1f       	adc	r27, r27
 432:	66 1f       	adc	r22, r22
 434:	77 1f       	adc	r23, r23
 436:	88 1f       	adc	r24, r24
 438:	c2 f7       	brpl	.-16     	; 0x42a <__addsf3x+0x6e>
 43a:	0e c0       	rjmp	.+28     	; 0x458 <__addsf3x+0x9c>
 43c:	ba 0f       	add	r27, r26
 43e:	62 1f       	adc	r22, r18
 440:	73 1f       	adc	r23, r19
 442:	84 1f       	adc	r24, r20
 444:	48 f4       	brcc	.+18     	; 0x458 <__addsf3x+0x9c>
 446:	87 95       	ror	r24
 448:	77 95       	ror	r23
 44a:	67 95       	ror	r22
 44c:	b7 95       	ror	r27
 44e:	f7 95       	ror	r31
 450:	9e 3f       	cpi	r25, 0xFE	; 254
 452:	08 f0       	brcs	.+2      	; 0x456 <__addsf3x+0x9a>
 454:	b0 cf       	rjmp	.-160    	; 0x3b6 <__addsf3+0x28>
 456:	93 95       	inc	r25
 458:	88 0f       	add	r24, r24
 45a:	08 f0       	brcs	.+2      	; 0x45e <__addsf3x+0xa2>
 45c:	99 27       	eor	r25, r25
 45e:	ee 0f       	add	r30, r30
 460:	97 95       	ror	r25
 462:	87 95       	ror	r24
 464:	08 95       	ret

00000466 <__divsf3>:
 466:	0e 94 47 02 	call	0x48e	; 0x48e <__divsf3x>
 46a:	0c 94 eb 02 	jmp	0x5d6	; 0x5d6 <__fp_round>
 46e:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <__fp_pscB>
 472:	58 f0       	brcs	.+22     	; 0x48a <__divsf3+0x24>
 474:	0e 94 dd 02 	call	0x5ba	; 0x5ba <__fp_pscA>
 478:	40 f0       	brcs	.+16     	; 0x48a <__divsf3+0x24>
 47a:	29 f4       	brne	.+10     	; 0x486 <__divsf3+0x20>
 47c:	5f 3f       	cpi	r21, 0xFF	; 255
 47e:	29 f0       	breq	.+10     	; 0x48a <__divsf3+0x24>
 480:	0c 94 d4 02 	jmp	0x5a8	; 0x5a8 <__fp_inf>
 484:	51 11       	cpse	r21, r1
 486:	0c 94 1f 03 	jmp	0x63e	; 0x63e <__fp_szero>
 48a:	0c 94 da 02 	jmp	0x5b4	; 0x5b4 <__fp_nan>

0000048e <__divsf3x>:
 48e:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <__fp_split3>
 492:	68 f3       	brcs	.-38     	; 0x46e <__divsf3+0x8>

00000494 <__divsf3_pse>:
 494:	99 23       	and	r25, r25
 496:	b1 f3       	breq	.-20     	; 0x484 <__divsf3+0x1e>
 498:	55 23       	and	r21, r21
 49a:	91 f3       	breq	.-28     	; 0x480 <__divsf3+0x1a>
 49c:	95 1b       	sub	r25, r21
 49e:	55 0b       	sbc	r21, r21
 4a0:	bb 27       	eor	r27, r27
 4a2:	aa 27       	eor	r26, r26
 4a4:	62 17       	cp	r22, r18
 4a6:	73 07       	cpc	r23, r19
 4a8:	84 07       	cpc	r24, r20
 4aa:	38 f0       	brcs	.+14     	; 0x4ba <__divsf3_pse+0x26>
 4ac:	9f 5f       	subi	r25, 0xFF	; 255
 4ae:	5f 4f       	sbci	r21, 0xFF	; 255
 4b0:	22 0f       	add	r18, r18
 4b2:	33 1f       	adc	r19, r19
 4b4:	44 1f       	adc	r20, r20
 4b6:	aa 1f       	adc	r26, r26
 4b8:	a9 f3       	breq	.-22     	; 0x4a4 <__divsf3_pse+0x10>
 4ba:	35 d0       	rcall	.+106    	; 0x526 <__divsf3_pse+0x92>
 4bc:	0e 2e       	mov	r0, r30
 4be:	3a f0       	brmi	.+14     	; 0x4ce <__divsf3_pse+0x3a>
 4c0:	e0 e8       	ldi	r30, 0x80	; 128
 4c2:	32 d0       	rcall	.+100    	; 0x528 <__divsf3_pse+0x94>
 4c4:	91 50       	subi	r25, 0x01	; 1
 4c6:	50 40       	sbci	r21, 0x00	; 0
 4c8:	e6 95       	lsr	r30
 4ca:	00 1c       	adc	r0, r0
 4cc:	ca f7       	brpl	.-14     	; 0x4c0 <__divsf3_pse+0x2c>
 4ce:	2b d0       	rcall	.+86     	; 0x526 <__divsf3_pse+0x92>
 4d0:	fe 2f       	mov	r31, r30
 4d2:	29 d0       	rcall	.+82     	; 0x526 <__divsf3_pse+0x92>
 4d4:	66 0f       	add	r22, r22
 4d6:	77 1f       	adc	r23, r23
 4d8:	88 1f       	adc	r24, r24
 4da:	bb 1f       	adc	r27, r27
 4dc:	26 17       	cp	r18, r22
 4de:	37 07       	cpc	r19, r23
 4e0:	48 07       	cpc	r20, r24
 4e2:	ab 07       	cpc	r26, r27
 4e4:	b0 e8       	ldi	r27, 0x80	; 128
 4e6:	09 f0       	breq	.+2      	; 0x4ea <__divsf3_pse+0x56>
 4e8:	bb 0b       	sbc	r27, r27
 4ea:	80 2d       	mov	r24, r0
 4ec:	bf 01       	movw	r22, r30
 4ee:	ff 27       	eor	r31, r31
 4f0:	93 58       	subi	r25, 0x83	; 131
 4f2:	5f 4f       	sbci	r21, 0xFF	; 255
 4f4:	3a f0       	brmi	.+14     	; 0x504 <__divsf3_pse+0x70>
 4f6:	9e 3f       	cpi	r25, 0xFE	; 254
 4f8:	51 05       	cpc	r21, r1
 4fa:	78 f0       	brcs	.+30     	; 0x51a <__divsf3_pse+0x86>
 4fc:	0c 94 d4 02 	jmp	0x5a8	; 0x5a8 <__fp_inf>
 500:	0c 94 1f 03 	jmp	0x63e	; 0x63e <__fp_szero>
 504:	5f 3f       	cpi	r21, 0xFF	; 255
 506:	e4 f3       	brlt	.-8      	; 0x500 <__divsf3_pse+0x6c>
 508:	98 3e       	cpi	r25, 0xE8	; 232
 50a:	d4 f3       	brlt	.-12     	; 0x500 <__divsf3_pse+0x6c>
 50c:	86 95       	lsr	r24
 50e:	77 95       	ror	r23
 510:	67 95       	ror	r22
 512:	b7 95       	ror	r27
 514:	f7 95       	ror	r31
 516:	9f 5f       	subi	r25, 0xFF	; 255
 518:	c9 f7       	brne	.-14     	; 0x50c <__divsf3_pse+0x78>
 51a:	88 0f       	add	r24, r24
 51c:	91 1d       	adc	r25, r1
 51e:	96 95       	lsr	r25
 520:	87 95       	ror	r24
 522:	97 f9       	bld	r25, 7
 524:	08 95       	ret
 526:	e1 e0       	ldi	r30, 0x01	; 1
 528:	66 0f       	add	r22, r22
 52a:	77 1f       	adc	r23, r23
 52c:	88 1f       	adc	r24, r24
 52e:	bb 1f       	adc	r27, r27
 530:	62 17       	cp	r22, r18
 532:	73 07       	cpc	r23, r19
 534:	84 07       	cpc	r24, r20
 536:	ba 07       	cpc	r27, r26
 538:	20 f0       	brcs	.+8      	; 0x542 <__divsf3_pse+0xae>
 53a:	62 1b       	sub	r22, r18
 53c:	73 0b       	sbc	r23, r19
 53e:	84 0b       	sbc	r24, r20
 540:	ba 0b       	sbc	r27, r26
 542:	ee 1f       	adc	r30, r30
 544:	88 f7       	brcc	.-30     	; 0x528 <__divsf3_pse+0x94>
 546:	e0 95       	com	r30
 548:	08 95       	ret

0000054a <__fixunssfsi>:
 54a:	0e 94 04 03 	call	0x608	; 0x608 <__fp_splitA>
 54e:	88 f0       	brcs	.+34     	; 0x572 <__fixunssfsi+0x28>
 550:	9f 57       	subi	r25, 0x7F	; 127
 552:	98 f0       	brcs	.+38     	; 0x57a <__fixunssfsi+0x30>
 554:	b9 2f       	mov	r27, r25
 556:	99 27       	eor	r25, r25
 558:	b7 51       	subi	r27, 0x17	; 23
 55a:	b0 f0       	brcs	.+44     	; 0x588 <__fixunssfsi+0x3e>
 55c:	e1 f0       	breq	.+56     	; 0x596 <__fixunssfsi+0x4c>
 55e:	66 0f       	add	r22, r22
 560:	77 1f       	adc	r23, r23
 562:	88 1f       	adc	r24, r24
 564:	99 1f       	adc	r25, r25
 566:	1a f0       	brmi	.+6      	; 0x56e <__fixunssfsi+0x24>
 568:	ba 95       	dec	r27
 56a:	c9 f7       	brne	.-14     	; 0x55e <__fixunssfsi+0x14>
 56c:	14 c0       	rjmp	.+40     	; 0x596 <__fixunssfsi+0x4c>
 56e:	b1 30       	cpi	r27, 0x01	; 1
 570:	91 f0       	breq	.+36     	; 0x596 <__fixunssfsi+0x4c>
 572:	0e 94 1e 03 	call	0x63c	; 0x63c <__fp_zero>
 576:	b1 e0       	ldi	r27, 0x01	; 1
 578:	08 95       	ret
 57a:	0c 94 1e 03 	jmp	0x63c	; 0x63c <__fp_zero>
 57e:	67 2f       	mov	r22, r23
 580:	78 2f       	mov	r23, r24
 582:	88 27       	eor	r24, r24
 584:	b8 5f       	subi	r27, 0xF8	; 248
 586:	39 f0       	breq	.+14     	; 0x596 <__fixunssfsi+0x4c>
 588:	b9 3f       	cpi	r27, 0xF9	; 249
 58a:	cc f3       	brlt	.-14     	; 0x57e <__fixunssfsi+0x34>
 58c:	86 95       	lsr	r24
 58e:	77 95       	ror	r23
 590:	67 95       	ror	r22
 592:	b3 95       	inc	r27
 594:	d9 f7       	brne	.-10     	; 0x58c <__fixunssfsi+0x42>
 596:	3e f4       	brtc	.+14     	; 0x5a6 <__fixunssfsi+0x5c>
 598:	90 95       	com	r25
 59a:	80 95       	com	r24
 59c:	70 95       	com	r23
 59e:	61 95       	neg	r22
 5a0:	7f 4f       	sbci	r23, 0xFF	; 255
 5a2:	8f 4f       	sbci	r24, 0xFF	; 255
 5a4:	9f 4f       	sbci	r25, 0xFF	; 255
 5a6:	08 95       	ret

000005a8 <__fp_inf>:
 5a8:	97 f9       	bld	r25, 7
 5aa:	9f 67       	ori	r25, 0x7F	; 127
 5ac:	80 e8       	ldi	r24, 0x80	; 128
 5ae:	70 e0       	ldi	r23, 0x00	; 0
 5b0:	60 e0       	ldi	r22, 0x00	; 0
 5b2:	08 95       	ret

000005b4 <__fp_nan>:
 5b4:	9f ef       	ldi	r25, 0xFF	; 255
 5b6:	80 ec       	ldi	r24, 0xC0	; 192
 5b8:	08 95       	ret

000005ba <__fp_pscA>:
 5ba:	00 24       	eor	r0, r0
 5bc:	0a 94       	dec	r0
 5be:	16 16       	cp	r1, r22
 5c0:	17 06       	cpc	r1, r23
 5c2:	18 06       	cpc	r1, r24
 5c4:	09 06       	cpc	r0, r25
 5c6:	08 95       	ret

000005c8 <__fp_pscB>:
 5c8:	00 24       	eor	r0, r0
 5ca:	0a 94       	dec	r0
 5cc:	12 16       	cp	r1, r18
 5ce:	13 06       	cpc	r1, r19
 5d0:	14 06       	cpc	r1, r20
 5d2:	05 06       	cpc	r0, r21
 5d4:	08 95       	ret

000005d6 <__fp_round>:
 5d6:	09 2e       	mov	r0, r25
 5d8:	03 94       	inc	r0
 5da:	00 0c       	add	r0, r0
 5dc:	11 f4       	brne	.+4      	; 0x5e2 <__fp_round+0xc>
 5de:	88 23       	and	r24, r24
 5e0:	52 f0       	brmi	.+20     	; 0x5f6 <__fp_round+0x20>
 5e2:	bb 0f       	add	r27, r27
 5e4:	40 f4       	brcc	.+16     	; 0x5f6 <__fp_round+0x20>
 5e6:	bf 2b       	or	r27, r31
 5e8:	11 f4       	brne	.+4      	; 0x5ee <__fp_round+0x18>
 5ea:	60 ff       	sbrs	r22, 0
 5ec:	04 c0       	rjmp	.+8      	; 0x5f6 <__fp_round+0x20>
 5ee:	6f 5f       	subi	r22, 0xFF	; 255
 5f0:	7f 4f       	sbci	r23, 0xFF	; 255
 5f2:	8f 4f       	sbci	r24, 0xFF	; 255
 5f4:	9f 4f       	sbci	r25, 0xFF	; 255
 5f6:	08 95       	ret

000005f8 <__fp_split3>:
 5f8:	57 fd       	sbrc	r21, 7
 5fa:	90 58       	subi	r25, 0x80	; 128
 5fc:	44 0f       	add	r20, r20
 5fe:	55 1f       	adc	r21, r21
 600:	59 f0       	breq	.+22     	; 0x618 <__fp_splitA+0x10>
 602:	5f 3f       	cpi	r21, 0xFF	; 255
 604:	71 f0       	breq	.+28     	; 0x622 <__fp_splitA+0x1a>
 606:	47 95       	ror	r20

00000608 <__fp_splitA>:
 608:	88 0f       	add	r24, r24
 60a:	97 fb       	bst	r25, 7
 60c:	99 1f       	adc	r25, r25
 60e:	61 f0       	breq	.+24     	; 0x628 <__fp_splitA+0x20>
 610:	9f 3f       	cpi	r25, 0xFF	; 255
 612:	79 f0       	breq	.+30     	; 0x632 <__fp_splitA+0x2a>
 614:	87 95       	ror	r24
 616:	08 95       	ret
 618:	12 16       	cp	r1, r18
 61a:	13 06       	cpc	r1, r19
 61c:	14 06       	cpc	r1, r20
 61e:	55 1f       	adc	r21, r21
 620:	f2 cf       	rjmp	.-28     	; 0x606 <__fp_split3+0xe>
 622:	46 95       	lsr	r20
 624:	f1 df       	rcall	.-30     	; 0x608 <__fp_splitA>
 626:	08 c0       	rjmp	.+16     	; 0x638 <__fp_splitA+0x30>
 628:	16 16       	cp	r1, r22
 62a:	17 06       	cpc	r1, r23
 62c:	18 06       	cpc	r1, r24
 62e:	99 1f       	adc	r25, r25
 630:	f1 cf       	rjmp	.-30     	; 0x614 <__fp_splitA+0xc>
 632:	86 95       	lsr	r24
 634:	71 05       	cpc	r23, r1
 636:	61 05       	cpc	r22, r1
 638:	08 94       	sec
 63a:	08 95       	ret

0000063c <__fp_zero>:
 63c:	e8 94       	clt

0000063e <__fp_szero>:
 63e:	bb 27       	eor	r27, r27
 640:	66 27       	eor	r22, r22
 642:	77 27       	eor	r23, r23
 644:	cb 01       	movw	r24, r22
 646:	97 f9       	bld	r25, 7
 648:	08 95       	ret

0000064a <__gesf2>:
 64a:	0e 94 9f 03 	call	0x73e	; 0x73e <__fp_cmp>
 64e:	08 f4       	brcc	.+2      	; 0x652 <__gesf2+0x8>
 650:	8f ef       	ldi	r24, 0xFF	; 255
 652:	08 95       	ret

00000654 <__mulsf3>:
 654:	0e 94 3d 03 	call	0x67a	; 0x67a <__mulsf3x>
 658:	0c 94 eb 02 	jmp	0x5d6	; 0x5d6 <__fp_round>
 65c:	0e 94 dd 02 	call	0x5ba	; 0x5ba <__fp_pscA>
 660:	38 f0       	brcs	.+14     	; 0x670 <__mulsf3+0x1c>
 662:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <__fp_pscB>
 666:	20 f0       	brcs	.+8      	; 0x670 <__mulsf3+0x1c>
 668:	95 23       	and	r25, r21
 66a:	11 f0       	breq	.+4      	; 0x670 <__mulsf3+0x1c>
 66c:	0c 94 d4 02 	jmp	0x5a8	; 0x5a8 <__fp_inf>
 670:	0c 94 da 02 	jmp	0x5b4	; 0x5b4 <__fp_nan>
 674:	11 24       	eor	r1, r1
 676:	0c 94 1f 03 	jmp	0x63e	; 0x63e <__fp_szero>

0000067a <__mulsf3x>:
 67a:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <__fp_split3>
 67e:	70 f3       	brcs	.-36     	; 0x65c <__mulsf3+0x8>

00000680 <__mulsf3_pse>:
 680:	95 9f       	mul	r25, r21
 682:	c1 f3       	breq	.-16     	; 0x674 <__mulsf3+0x20>
 684:	95 0f       	add	r25, r21
 686:	50 e0       	ldi	r21, 0x00	; 0
 688:	55 1f       	adc	r21, r21
 68a:	62 9f       	mul	r22, r18
 68c:	f0 01       	movw	r30, r0
 68e:	72 9f       	mul	r23, r18
 690:	bb 27       	eor	r27, r27
 692:	f0 0d       	add	r31, r0
 694:	b1 1d       	adc	r27, r1
 696:	63 9f       	mul	r22, r19
 698:	aa 27       	eor	r26, r26
 69a:	f0 0d       	add	r31, r0
 69c:	b1 1d       	adc	r27, r1
 69e:	aa 1f       	adc	r26, r26
 6a0:	64 9f       	mul	r22, r20
 6a2:	66 27       	eor	r22, r22
 6a4:	b0 0d       	add	r27, r0
 6a6:	a1 1d       	adc	r26, r1
 6a8:	66 1f       	adc	r22, r22
 6aa:	82 9f       	mul	r24, r18
 6ac:	22 27       	eor	r18, r18
 6ae:	b0 0d       	add	r27, r0
 6b0:	a1 1d       	adc	r26, r1
 6b2:	62 1f       	adc	r22, r18
 6b4:	73 9f       	mul	r23, r19
 6b6:	b0 0d       	add	r27, r0
 6b8:	a1 1d       	adc	r26, r1
 6ba:	62 1f       	adc	r22, r18
 6bc:	83 9f       	mul	r24, r19
 6be:	a0 0d       	add	r26, r0
 6c0:	61 1d       	adc	r22, r1
 6c2:	22 1f       	adc	r18, r18
 6c4:	74 9f       	mul	r23, r20
 6c6:	33 27       	eor	r19, r19
 6c8:	a0 0d       	add	r26, r0
 6ca:	61 1d       	adc	r22, r1
 6cc:	23 1f       	adc	r18, r19
 6ce:	84 9f       	mul	r24, r20
 6d0:	60 0d       	add	r22, r0
 6d2:	21 1d       	adc	r18, r1
 6d4:	82 2f       	mov	r24, r18
 6d6:	76 2f       	mov	r23, r22
 6d8:	6a 2f       	mov	r22, r26
 6da:	11 24       	eor	r1, r1
 6dc:	9f 57       	subi	r25, 0x7F	; 127
 6de:	50 40       	sbci	r21, 0x00	; 0
 6e0:	9a f0       	brmi	.+38     	; 0x708 <__mulsf3_pse+0x88>
 6e2:	f1 f0       	breq	.+60     	; 0x720 <__mulsf3_pse+0xa0>
 6e4:	88 23       	and	r24, r24
 6e6:	4a f0       	brmi	.+18     	; 0x6fa <__mulsf3_pse+0x7a>
 6e8:	ee 0f       	add	r30, r30
 6ea:	ff 1f       	adc	r31, r31
 6ec:	bb 1f       	adc	r27, r27
 6ee:	66 1f       	adc	r22, r22
 6f0:	77 1f       	adc	r23, r23
 6f2:	88 1f       	adc	r24, r24
 6f4:	91 50       	subi	r25, 0x01	; 1
 6f6:	50 40       	sbci	r21, 0x00	; 0
 6f8:	a9 f7       	brne	.-22     	; 0x6e4 <__mulsf3_pse+0x64>
 6fa:	9e 3f       	cpi	r25, 0xFE	; 254
 6fc:	51 05       	cpc	r21, r1
 6fe:	80 f0       	brcs	.+32     	; 0x720 <__mulsf3_pse+0xa0>
 700:	0c 94 d4 02 	jmp	0x5a8	; 0x5a8 <__fp_inf>
 704:	0c 94 1f 03 	jmp	0x63e	; 0x63e <__fp_szero>
 708:	5f 3f       	cpi	r21, 0xFF	; 255
 70a:	e4 f3       	brlt	.-8      	; 0x704 <__mulsf3_pse+0x84>
 70c:	98 3e       	cpi	r25, 0xE8	; 232
 70e:	d4 f3       	brlt	.-12     	; 0x704 <__mulsf3_pse+0x84>
 710:	86 95       	lsr	r24
 712:	77 95       	ror	r23
 714:	67 95       	ror	r22
 716:	b7 95       	ror	r27
 718:	f7 95       	ror	r31
 71a:	e7 95       	ror	r30
 71c:	9f 5f       	subi	r25, 0xFF	; 255
 71e:	c1 f7       	brne	.-16     	; 0x710 <__mulsf3_pse+0x90>
 720:	fe 2b       	or	r31, r30
 722:	88 0f       	add	r24, r24
 724:	91 1d       	adc	r25, r1
 726:	96 95       	lsr	r25
 728:	87 95       	ror	r24
 72a:	97 f9       	bld	r25, 7
 72c:	08 95       	ret

0000072e <sin>:
 72e:	9f 93       	push	r25
 730:	0e 94 c5 03 	call	0x78a	; 0x78a <__fp_rempio2>
 734:	0f 90       	pop	r0
 736:	07 fc       	sbrc	r0, 7
 738:	ee 5f       	subi	r30, 0xFE	; 254
 73a:	0c 94 ee 03 	jmp	0x7dc	; 0x7dc <__fp_sinus>

0000073e <__fp_cmp>:
 73e:	99 0f       	add	r25, r25
 740:	00 08       	sbc	r0, r0
 742:	55 0f       	add	r21, r21
 744:	aa 0b       	sbc	r26, r26
 746:	e0 e8       	ldi	r30, 0x80	; 128
 748:	fe ef       	ldi	r31, 0xFE	; 254
 74a:	16 16       	cp	r1, r22
 74c:	17 06       	cpc	r1, r23
 74e:	e8 07       	cpc	r30, r24
 750:	f9 07       	cpc	r31, r25
 752:	c0 f0       	brcs	.+48     	; 0x784 <__fp_cmp+0x46>
 754:	12 16       	cp	r1, r18
 756:	13 06       	cpc	r1, r19
 758:	e4 07       	cpc	r30, r20
 75a:	f5 07       	cpc	r31, r21
 75c:	98 f0       	brcs	.+38     	; 0x784 <__fp_cmp+0x46>
 75e:	62 1b       	sub	r22, r18
 760:	73 0b       	sbc	r23, r19
 762:	84 0b       	sbc	r24, r20
 764:	95 0b       	sbc	r25, r21
 766:	39 f4       	brne	.+14     	; 0x776 <__fp_cmp+0x38>
 768:	0a 26       	eor	r0, r26
 76a:	61 f0       	breq	.+24     	; 0x784 <__fp_cmp+0x46>
 76c:	23 2b       	or	r18, r19
 76e:	24 2b       	or	r18, r20
 770:	25 2b       	or	r18, r21
 772:	21 f4       	brne	.+8      	; 0x77c <__fp_cmp+0x3e>
 774:	08 95       	ret
 776:	0a 26       	eor	r0, r26
 778:	09 f4       	brne	.+2      	; 0x77c <__fp_cmp+0x3e>
 77a:	a1 40       	sbci	r26, 0x01	; 1
 77c:	a6 95       	lsr	r26
 77e:	8f ef       	ldi	r24, 0xFF	; 255
 780:	81 1d       	adc	r24, r1
 782:	81 1d       	adc	r24, r1
 784:	08 95       	ret
 786:	0c 94 da 02 	jmp	0x5b4	; 0x5b4 <__fp_nan>

0000078a <__fp_rempio2>:
 78a:	0e 94 04 03 	call	0x608	; 0x608 <__fp_splitA>
 78e:	d8 f3       	brcs	.-10     	; 0x786 <__fp_cmp+0x48>
 790:	e8 94       	clt
 792:	e0 e0       	ldi	r30, 0x00	; 0
 794:	bb 27       	eor	r27, r27
 796:	9f 57       	subi	r25, 0x7F	; 127
 798:	f0 f0       	brcs	.+60     	; 0x7d6 <__fp_rempio2+0x4c>
 79a:	2a ed       	ldi	r18, 0xDA	; 218
 79c:	3f e0       	ldi	r19, 0x0F	; 15
 79e:	49 ec       	ldi	r20, 0xC9	; 201
 7a0:	06 c0       	rjmp	.+12     	; 0x7ae <__fp_rempio2+0x24>
 7a2:	ee 0f       	add	r30, r30
 7a4:	bb 0f       	add	r27, r27
 7a6:	66 1f       	adc	r22, r22
 7a8:	77 1f       	adc	r23, r23
 7aa:	88 1f       	adc	r24, r24
 7ac:	28 f0       	brcs	.+10     	; 0x7b8 <__fp_rempio2+0x2e>
 7ae:	b2 3a       	cpi	r27, 0xA2	; 162
 7b0:	62 07       	cpc	r22, r18
 7b2:	73 07       	cpc	r23, r19
 7b4:	84 07       	cpc	r24, r20
 7b6:	28 f0       	brcs	.+10     	; 0x7c2 <__fp_rempio2+0x38>
 7b8:	b2 5a       	subi	r27, 0xA2	; 162
 7ba:	62 0b       	sbc	r22, r18
 7bc:	73 0b       	sbc	r23, r19
 7be:	84 0b       	sbc	r24, r20
 7c0:	e3 95       	inc	r30
 7c2:	9a 95       	dec	r25
 7c4:	72 f7       	brpl	.-36     	; 0x7a2 <__fp_rempio2+0x18>
 7c6:	80 38       	cpi	r24, 0x80	; 128
 7c8:	30 f4       	brcc	.+12     	; 0x7d6 <__fp_rempio2+0x4c>
 7ca:	9a 95       	dec	r25
 7cc:	bb 0f       	add	r27, r27
 7ce:	66 1f       	adc	r22, r22
 7d0:	77 1f       	adc	r23, r23
 7d2:	88 1f       	adc	r24, r24
 7d4:	d2 f7       	brpl	.-12     	; 0x7ca <__fp_rempio2+0x40>
 7d6:	90 48       	sbci	r25, 0x80	; 128
 7d8:	0c 94 04 04 	jmp	0x808	; 0x808 <__fp_mpack_finite>

000007dc <__fp_sinus>:
 7dc:	ef 93       	push	r30
 7de:	e0 ff       	sbrs	r30, 0
 7e0:	07 c0       	rjmp	.+14     	; 0x7f0 <__fp_sinus+0x14>
 7e2:	a2 ea       	ldi	r26, 0xA2	; 162
 7e4:	2a ed       	ldi	r18, 0xDA	; 218
 7e6:	3f e0       	ldi	r19, 0x0F	; 15
 7e8:	49 ec       	ldi	r20, 0xC9	; 201
 7ea:	5f eb       	ldi	r21, 0xBF	; 191
 7ec:	0e 94 de 01 	call	0x3bc	; 0x3bc <__addsf3x>
 7f0:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <__fp_round>
 7f4:	0f 90       	pop	r0
 7f6:	03 94       	inc	r0
 7f8:	01 fc       	sbrc	r0, 1
 7fa:	90 58       	subi	r25, 0x80	; 128
 7fc:	e8 e6       	ldi	r30, 0x68	; 104
 7fe:	f0 e0       	ldi	r31, 0x00	; 0
 800:	0c 94 10 04 	jmp	0x820	; 0x820 <__fp_powsodd>

00000804 <__fp_mpack>:
 804:	9f 3f       	cpi	r25, 0xFF	; 255
 806:	31 f0       	breq	.+12     	; 0x814 <__fp_mpack_finite+0xc>

00000808 <__fp_mpack_finite>:
 808:	91 50       	subi	r25, 0x01	; 1
 80a:	20 f4       	brcc	.+8      	; 0x814 <__fp_mpack_finite+0xc>
 80c:	87 95       	ror	r24
 80e:	77 95       	ror	r23
 810:	67 95       	ror	r22
 812:	b7 95       	ror	r27
 814:	88 0f       	add	r24, r24
 816:	91 1d       	adc	r25, r1
 818:	96 95       	lsr	r25
 81a:	87 95       	ror	r24
 81c:	97 f9       	bld	r25, 7
 81e:	08 95       	ret

00000820 <__fp_powsodd>:
 820:	9f 93       	push	r25
 822:	8f 93       	push	r24
 824:	7f 93       	push	r23
 826:	6f 93       	push	r22
 828:	ff 93       	push	r31
 82a:	ef 93       	push	r30
 82c:	9b 01       	movw	r18, r22
 82e:	ac 01       	movw	r20, r24
 830:	0e 94 2a 03 	call	0x654	; 0x654 <__mulsf3>
 834:	ef 91       	pop	r30
 836:	ff 91       	pop	r31
 838:	0e 94 24 04 	call	0x848	; 0x848 <__fp_powser>
 83c:	2f 91       	pop	r18
 83e:	3f 91       	pop	r19
 840:	4f 91       	pop	r20
 842:	5f 91       	pop	r21
 844:	0c 94 2a 03 	jmp	0x654	; 0x654 <__mulsf3>

00000848 <__fp_powser>:
 848:	df 93       	push	r29
 84a:	cf 93       	push	r28
 84c:	1f 93       	push	r17
 84e:	0f 93       	push	r16
 850:	ff 92       	push	r15
 852:	ef 92       	push	r14
 854:	df 92       	push	r13
 856:	7b 01       	movw	r14, r22
 858:	8c 01       	movw	r16, r24
 85a:	68 94       	set
 85c:	06 c0       	rjmp	.+12     	; 0x86a <__fp_powser+0x22>
 85e:	da 2e       	mov	r13, r26
 860:	ef 01       	movw	r28, r30
 862:	0e 94 3d 03 	call	0x67a	; 0x67a <__mulsf3x>
 866:	fe 01       	movw	r30, r28
 868:	e8 94       	clt
 86a:	a5 91       	lpm	r26, Z+
 86c:	25 91       	lpm	r18, Z+
 86e:	35 91       	lpm	r19, Z+
 870:	45 91       	lpm	r20, Z+
 872:	55 91       	lpm	r21, Z+
 874:	a6 f3       	brts	.-24     	; 0x85e <__fp_powser+0x16>
 876:	ef 01       	movw	r28, r30
 878:	0e 94 de 01 	call	0x3bc	; 0x3bc <__addsf3x>
 87c:	fe 01       	movw	r30, r28
 87e:	97 01       	movw	r18, r14
 880:	a8 01       	movw	r20, r16
 882:	da 94       	dec	r13
 884:	69 f7       	brne	.-38     	; 0x860 <__fp_powser+0x18>
 886:	df 90       	pop	r13
 888:	ef 90       	pop	r14
 88a:	ff 90       	pop	r15
 88c:	0f 91       	pop	r16
 88e:	1f 91       	pop	r17
 890:	cf 91       	pop	r28
 892:	df 91       	pop	r29
 894:	08 95       	ret

00000896 <_exit>:
 896:	f8 94       	cli

00000898 <__stop_program>:
 898:	ff cf       	rjmp	.-2      	; 0x898 <__stop_program>
