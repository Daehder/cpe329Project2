
Project2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000134  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000e0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000134  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000164  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000004c9  00000000  00000000  0000021c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001fb  00000000  00000000  000006e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000021f  00000000  00000000  000008e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000130  00000000  00000000  00000b00  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000255  00000000  00000000  00000c30  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000042b  00000000  00000000  00000e85  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  000012b0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 5b 00 	call	0xb6	; 0xb6 <main>
  78:	0c 94 6e 00 	jmp	0xdc	; 0xdc <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <Initialize_SPI_Master>:
    return 0;
}  

// sets up SPI system between ATmega328P and slave device(s)
void Initialize_SPI_Master(){     
    SPCR = (0<<SPIE) |         //No interrupts
  80:	80 e5       	ldi	r24, 0x50	; 80
  82:	8c bd       	out	0x2c, r24	; 44
    (1<<SPE) |             //SPI enabled
    (1<<MSTR) ;             //master
    SPSR = 0x00;             //clear flags
  84:	1d bc       	out	0x2d, r1	; 45
    PORTB = 1 << SS;          // make sure SS is high
  86:	84 e0       	ldi	r24, 0x04	; 4
  88:	85 b9       	out	0x05, r24	; 5
  8a:	08 95       	ret

0000008c <GPIO_Initialization>:
}

// initializes GPIO I/O, SPI interface, and interrupts
void GPIO_Initialization(){
	DDRB |= (1<<MOSI) | (1<<SCK) | (1<<SS);		// make MOSI, SCK and SS outputs
  8c:	84 b1       	in	r24, 0x04	; 4
  8e:	8c 62       	ori	r24, 0x2C	; 44
  90:	84 b9       	out	0x04, r24	; 4
	DDRB &= ~(1<<BTN1) | ~(1<<BTN1);			// set buttons as inputs
  92:	21 98       	cbi	0x04, 1	; 4
	PORTB |= (1<<BTN0) | (1<<BTN1);				// set internal pull-ups on buttons
  94:	85 b1       	in	r24, 0x05	; 5
  96:	83 60       	ori	r24, 0x03	; 3
  98:	85 b9       	out	0x05, r24	; 5
	Initialize_SPI_Master();					// initialize SPI interface to DAC
  9a:	0e 94 40 00 	call	0x80	; 0x80 <Initialize_SPI_Master>
	sei();										// enable global interrupts 
  9e:	78 94       	sei
  a0:	08 95       	ret

000000a2 <check_buttons>:
}

// returns a true bool if a buttons is pressed
uint8_t check_buttons(){
	if(!(PIND & (1<<BTN0)))			// return 1 if button at pin0 is pressed
  a2:	48 9b       	sbis	0x09, 0	; 9
  a4:	04 c0       	rjmp	.+8      	; 0xae <check_buttons+0xc>
		return 1;
	else if(!(PIND & (1<<BTN1)))	// return 2 if button at pin1 is pressed
  a6:	49 9b       	sbis	0x09, 1	; 9
  a8:	04 c0       	rjmp	.+8      	; 0xb2 <check_buttons+0x10>
		return 2;
	else
		return 0;					// return 0 if no buttons are pressed
  aa:	80 e0       	ldi	r24, 0x00	; 0
  ac:	08 95       	ret
}

// returns a true bool if a buttons is pressed
uint8_t check_buttons(){
	if(!(PIND & (1<<BTN0)))			// return 1 if button at pin0 is pressed
		return 1;
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	08 95       	ret
	else if(!(PIND & (1<<BTN1)))	// return 2 if button at pin1 is pressed
		return 2;
  b2:	82 e0       	ldi	r24, 0x02	; 2
	else
		return 0;					// return 0 if no buttons are pressed
}
  b4:	08 95       	ret

000000b6 <main>:
void sin_LUT(uint16_t wave[], double offset);


int main(void)
{	
	GPIO_Initialization();
  b6:	0e 94 46 00 	call	0x8c	; 0x8c <GPIO_Initialization>
	
    while(1){
		// send square wave data to DAC
		while(!(check_buttons()));
  ba:	0e 94 51 00 	call	0xa2	; 0xa2 <check_buttons>
  be:	88 23       	and	r24, r24
  c0:	e1 f3       	breq	.-8      	; 0xba <main+0x4>
		// send sawtooth wave data to DAC
		while(!(check_buttons()));
  c2:	0e 94 51 00 	call	0xa2	; 0xa2 <check_buttons>
  c6:	88 23       	and	r24, r24
  c8:	e1 f3       	breq	.-8      	; 0xc2 <main+0xc>
		// send triangle wave data to DAC
		while(!(check_buttons()));
  ca:	0e 94 51 00 	call	0xa2	; 0xa2 <check_buttons>
  ce:	88 23       	and	r24, r24
  d0:	e1 f3       	breq	.-8      	; 0xca <main+0x14>
		// send sine wave data to DAC
		while(!(check_buttons()));			
  d2:	0e 94 51 00 	call	0xa2	; 0xa2 <check_buttons>
  d6:	88 23       	and	r24, r24
  d8:	e1 f3       	breq	.-8      	; 0xd2 <main+0x1c>
  da:	ef cf       	rjmp	.-34     	; 0xba <main+0x4>

000000dc <_exit>:
  dc:	f8 94       	cli

000000de <__stop_program>:
  de:	ff cf       	rjmp	.-2      	; 0xde <__stop_program>
