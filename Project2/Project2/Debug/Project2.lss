
Project2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000e4a  00000ede  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e4a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000004a4  00800110  00800110  00000eee  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000eee  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000f20  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  00000f60  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b8f  00000000  00000000  00001078  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000476  00000000  00000000  00001c07  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000530  00000000  00000000  0000207d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000368  00000000  00000000  000025b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000040f  00000000  00000000  00002918  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000085f  00000000  00000000  00002d27  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  00003586  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 43 00 	jmp	0x86	; 0x86 <__ctors_end>
   4:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
   8:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
   c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  10:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  14:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  18:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  1c:	0c 94 88 01 	jmp	0x310	; 0x310 <__vector_7>
  20:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  24:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  28:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  2c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  30:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  34:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  38:	0c 94 62 01 	jmp	0x2c4	; 0x2c4 <__vector_14>
  3c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  40:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  44:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  48:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  4c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  50:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  54:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  58:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  5c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  60:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  64:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  68:	05 a8       	ldd	r0, Z+53	; 0x35
  6a:	4c cd       	rjmp	.-1384   	; 0xfffffb04 <__eeprom_end+0xff7efb04>
  6c:	b2 d4       	rcall	.+2404   	; 0x9d2 <__divsf3_pse+0x66>
  6e:	4e b9       	out	0x0e, r20	; 14
  70:	38 36       	cpi	r19, 0x68	; 104
  72:	a9 02       	muls	r26, r25
  74:	0c 50       	subi	r16, 0x0C	; 12
  76:	b9 91       	ld	r27, Y+
  78:	86 88       	ldd	r8, Z+22	; 0x16
  7a:	08 3c       	cpi	r16, 0xC8	; 200
  7c:	a6 aa       	std	Z+54, r10	; 0x36
  7e:	aa 2a       	or	r10, r26
  80:	be 00       	.word	0x00be	; ????
  82:	00 00       	nop
  84:	80 3f       	cpi	r24, 0xF0	; 240

00000086 <__ctors_end>:
  86:	11 24       	eor	r1, r1
  88:	1f be       	out	0x3f, r1	; 63
  8a:	cf ef       	ldi	r28, 0xFF	; 255
  8c:	d8 e0       	ldi	r29, 0x08	; 8
  8e:	de bf       	out	0x3e, r29	; 62
  90:	cd bf       	out	0x3d, r28	; 61

00000092 <__do_copy_data>:
  92:	11 e0       	ldi	r17, 0x01	; 1
  94:	a0 e0       	ldi	r26, 0x00	; 0
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	ea e4       	ldi	r30, 0x4A	; 74
  9a:	fe e0       	ldi	r31, 0x0E	; 14
  9c:	02 c0       	rjmp	.+4      	; 0xa2 <__do_copy_data+0x10>
  9e:	05 90       	lpm	r0, Z+
  a0:	0d 92       	st	X+, r0
  a2:	a0 31       	cpi	r26, 0x10	; 16
  a4:	b1 07       	cpc	r27, r17
  a6:	d9 f7       	brne	.-10     	; 0x9e <__do_copy_data+0xc>

000000a8 <__do_clear_bss>:
  a8:	25 e0       	ldi	r18, 0x05	; 5
  aa:	a0 e1       	ldi	r26, 0x10	; 16
  ac:	b1 e0       	ldi	r27, 0x01	; 1
  ae:	01 c0       	rjmp	.+2      	; 0xb2 <.do_clear_bss_start>

000000b0 <.do_clear_bss_loop>:
  b0:	1d 92       	st	X+, r1

000000b2 <.do_clear_bss_start>:
  b2:	a4 3b       	cpi	r26, 0xB4	; 180
  b4:	b2 07       	cpc	r27, r18
  b6:	e1 f7       	brne	.-8      	; 0xb0 <.do_clear_bss_loop>
  b8:	0e 94 1f 01 	call	0x23e	; 0x23e <main>
  bc:	0c 94 23 07 	jmp	0xe46	; 0xe46 <_exit>

000000c0 <__bad_interrupt>:
  c0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c4 <Initialize_ADC0>:
int sampleDivider = 1;

// sets up SPI system between ATmega328P and slave device(s)
void Initialize_ADC0(void)
{
	ADCSRA = 0x87;	//Turn On ADC and set prescaler (CLK/128)
  c4:	87 e8       	ldi	r24, 0x87	; 135
  c6:	80 93 7a 00 	sts	0x007A, r24
	ADCSRB = 0x00;	//turn off autotrigger
  ca:	10 92 7b 00 	sts	0x007B, r1
	ADMUX = 0x00;    	//Set ADC channel ADC0
  ce:	10 92 7c 00 	sts	0x007C, r1
  d2:	08 95       	ret

000000d4 <Initialize_SPI_Master>:
}

void Initialize_SPI_Master(){
   SPCR = (0<<SPIE) |               // No interrupts
  d4:	80 e5       	ldi	r24, 0x50	; 80
  d6:	8c bd       	out	0x2c, r24	; 44
   (1<<SPE) |                       // SPI enabled
   (1<<MSTR) ;                      // master
   SPSR = 0x00;                     // clear flags
  d8:	1d bc       	out	0x2d, r1	; 45
   PORTB = 1 << SS;                 // make sure SS is high
  da:	84 e0       	ldi	r24, 0x04	; 4
  dc:	85 b9       	out	0x05, r24	; 5
  de:	08 95       	ret

000000e0 <initTimer0>:
}

// Initializing timer 0 (change OCR0A for freq change!!!!!)
void initTimer0(){
   TCCR0A = 0x02;                   // timer CTC mode
  e0:	82 e0       	ldi	r24, 0x02	; 2
  e2:	84 bd       	out	0x24, r24	; 36
   OCR0A = overflow0;          // sets counter overflow
  e4:	90 91 03 01 	lds	r25, 0x0103
  e8:	97 bd       	out	0x27, r25	; 39
   TCCR0B = 0x02;                   // timer clk = system clk / 8 (2MHz)
  ea:	85 bd       	out	0x25, r24	; 37
   TIFR0 = 0x02;                    // Interrupt occurs at OCRF0A overflow
  ec:	85 bb       	out	0x15, r24	; 21
   TIMSK0 = 0x02;                   // OCRF0A overflow interrupt enabled
  ee:	80 93 6e 00 	sts	0x006E, r24
  f2:	08 95       	ret

000000f4 <initTimer2>:
}

void initTimer2(){
	TCCR2A = 0x02;                   // timer CTC mode
  f4:	82 e0       	ldi	r24, 0x02	; 2
  f6:	80 93 b0 00 	sts	0x00B0, r24
	OCR2A = overflow2;		        // sets counter overflow
  fa:	90 91 02 01 	lds	r25, 0x0102
  fe:	90 93 b3 00 	sts	0x00B3, r25
	TCCR2B = 0x04;                   // timer clk = system clk / 256 (2MHz)
 102:	94 e0       	ldi	r25, 0x04	; 4
 104:	90 93 b1 00 	sts	0x00B1, r25
	TIFR2 = 0x02;                    // Interrupt occurs at OCRF2A overflow
 108:	87 bb       	out	0x17, r24	; 23
	TIMSK2 = 0x02;                   // OCRF0A overflow interrupt enabled
 10a:	80 93 70 00 	sts	0x0070, r24
 10e:	08 95       	ret

00000110 <GPIO_Initialization>:
}


// initializes GPIO I/O, SPI interface, and interrupts
void GPIO_Initialization(){
   DDRB |= (1<<MOSI) | (1<<SCK) | (1<<SS);	// make MOSI, SCK and SS outputs
 110:	84 b1       	in	r24, 0x04	; 4
 112:	8c 62       	ori	r24, 0x2C	; 44
 114:	84 b9       	out	0x04, r24	; 4
   DDRD &= ~(1<<BTN1) | ~(1<<BTN1) | ~(1<<BTN2) | ~(1<<SW1);	// set buttons & switches as inputs
 116:	8a b1       	in	r24, 0x0a	; 10
 118:	8a b9       	out	0x0a, r24	; 10
   DDRD |= (1<<LED2) | (1<<LED3);				// debug LEDs are output
 11a:	8a b1       	in	r24, 0x0a	; 10
 11c:	8c 60       	ori	r24, 0x0C	; 12
 11e:	8a b9       	out	0x0a, r24	; 10
   PORTD |= (1<<BTN0) | (1<<BTN1) | (1<<BTN2);	// set internal pull-ups
 120:	8b b1       	in	r24, 0x0b	; 11
 122:	80 6e       	ori	r24, 0xE0	; 224
 124:	8b b9       	out	0x0b, r24	; 11
   Initialize_SPI_Master();			// initialize SPI to DAC
 126:	0e 94 6a 00 	call	0xd4	; 0xd4 <Initialize_SPI_Master>
   initTimer0();							// initialize timer0
 12a:	0e 94 70 00 	call	0xe0	; 0xe0 <initTimer0>
   initTimer2();
 12e:	0e 94 7a 00 	call	0xf4	; 0xf4 <initTimer2>
   Initialize_ADC0();
 132:	0e 94 62 00 	call	0xc4	; 0xc4 <Initialize_ADC0>
   sei();									// enable interrupts
 136:	78 94       	sei
 138:	08 95       	ret

0000013a <check_voltage>:
uint8_t check_switch(){
	return (PIND & 1<<SW1);
}

uint16_t check_voltage(){
	ADCSRA = 0xC7;        		// start conversion
 13a:	87 ec       	ldi	r24, 0xC7	; 199
 13c:	80 93 7a 00 	sts	0x007A, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 140:	8f e0       	ldi	r24, 0x0F	; 15
 142:	94 e0       	ldi	r25, 0x04	; 4
 144:	01 97       	sbiw	r24, 0x01	; 1
 146:	f1 f7       	brne	.-4      	; 0x144 <check_voltage+0xa>
 148:	00 c0       	rjmp	.+0      	; 0x14a <check_voltage+0x10>
 14a:	00 00       	nop
	_delay_us(260);				// ensure max sampling rate not exceeded
	voltage = (ADC & 0x3FF)/4;  // read 10 bit voltage and convert to 8 bit (255)
 14c:	80 91 78 00 	lds	r24, 0x0078
 150:	90 91 79 00 	lds	r25, 0x0079
 154:	93 70       	andi	r25, 0x03	; 3
 156:	96 95       	lsr	r25
 158:	87 95       	ror	r24
 15a:	96 95       	lsr	r25
 15c:	87 95       	ror	r24
 15e:	90 93 11 01 	sts	0x0111, r25
 162:	80 93 10 01 	sts	0x0110, r24
 166:	00 97       	sbiw	r24, 0x00	; 0
 168:	11 f4       	brne	.+4      	; 0x16e <check_voltage+0x34>
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	90 e0       	ldi	r25, 0x00	; 0
	if(voltage < 2)
		return 1;
	else 
		return voltage;
}
 16e:	08 95       	ret

00000170 <Transmit_SPI_Master>:

// sends data to DAC over SPI data port
void Transmit_SPI_Master(int Data) {
   PORTB &= ~(1 << SS);					//Assert slave select (active low)
 170:	2a 98       	cbi	0x05, 2	; 5
   SPDR = ((Data >> 8) & 0xF) | 0x70;		//Attach configuration Bits onto MSB
 172:	9f 70       	andi	r25, 0x0F	; 15
 174:	90 67       	ori	r25, 0x70	; 112
 176:	9e bd       	out	0x2e, r25	; 46
   while (!(SPSR & (1<<SPIF)));
 178:	0d b4       	in	r0, 0x2d	; 45
 17a:	07 fe       	sbrs	r0, 7
 17c:	fd cf       	rjmp	.-6      	; 0x178 <Transmit_SPI_Master+0x8>
   SPDR = 0xFF & Data;
 17e:	8e bd       	out	0x2e, r24	; 46
   while (!(SPSR & (1<<SPIF)));
 180:	0d b4       	in	r0, 0x2d	; 45
 182:	07 fe       	sbrs	r0, 7
 184:	fd cf       	rjmp	.-6      	; 0x180 <Transmit_SPI_Master+0x10>
   PORTB |= 1 << SS;						//Turn off slave select
 186:	2a 9a       	sbi	0x05, 2	; 5
 188:	08 95       	ret

0000018a <volts_to_bits>:
      _delay_ms(1);

}

// converts input voltage between 0-5V to 12bit number for DAC
uint16_t volts_to_bits(double voltage){
 18a:	cf 92       	push	r12
 18c:	df 92       	push	r13
 18e:	ef 92       	push	r14
 190:	ff 92       	push	r15
   double bits = ((voltage/5.0)*4095);
 192:	20 e0       	ldi	r18, 0x00	; 0
 194:	30 e0       	ldi	r19, 0x00	; 0
 196:	40 ea       	ldi	r20, 0xA0	; 160
 198:	50 e4       	ldi	r21, 0x40	; 64
 19a:	0e 94 9f 04 	call	0x93e	; 0x93e <__divsf3>
 19e:	20 e0       	ldi	r18, 0x00	; 0
 1a0:	30 ef       	ldi	r19, 0xF0	; 240
 1a2:	4f e7       	ldi	r20, 0x7F	; 127
 1a4:	55 e4       	ldi	r21, 0x45	; 69
 1a6:	0e 94 da 05 	call	0xbb4	; 0xbb4 <__mulsf3>
 1aa:	6b 01       	movw	r12, r22
 1ac:	7c 01       	movw	r14, r24
   if(bits>4095)
 1ae:	20 e0       	ldi	r18, 0x00	; 0
 1b0:	30 ef       	ldi	r19, 0xF0	; 240
 1b2:	4f e7       	ldi	r20, 0x7F	; 127
 1b4:	55 e4       	ldi	r21, 0x45	; 69
 1b6:	0e 94 d5 05 	call	0xbaa	; 0xbaa <__gesf2>
 1ba:	18 16       	cp	r1, r24
 1bc:	34 f0       	brlt	.+12     	; 0x1ca <volts_to_bits+0x40>
		return 4095;
	else
	 return bits;                  // return 12bit equivalent for DAC
 1be:	c7 01       	movw	r24, r14
 1c0:	b6 01       	movw	r22, r12
 1c2:	0e 94 18 05 	call	0xa30	; 0xa30 <__fixunssfsi>
 1c6:	cb 01       	movw	r24, r22
 1c8:	02 c0       	rjmp	.+4      	; 0x1ce <volts_to_bits+0x44>

// converts input voltage between 0-5V to 12bit number for DAC
uint16_t volts_to_bits(double voltage){
   double bits = ((voltage/5.0)*4095);
   if(bits>4095)
		return 4095;
 1ca:	8f ef       	ldi	r24, 0xFF	; 255
 1cc:	9f e0       	ldi	r25, 0x0F	; 15
	else
	 return bits;                  // return 12bit equivalent for DAC
}
 1ce:	ff 90       	pop	r15
 1d0:	ef 90       	pop	r14
 1d2:	df 90       	pop	r13
 1d4:	cf 90       	pop	r12
 1d6:	08 95       	ret

000001d8 <cycleFreq>:
   sampleDivider++;
   sampleDivider %= 3;
}

void cycleFreq() {
   if (overflow0 == OVERFLOW_100HZ){
 1d8:	80 91 03 01 	lds	r24, 0x0103
 1dc:	87 38       	cpi	r24, 0x87	; 135
 1de:	51 f4       	brne	.+20     	; 0x1f4 <cycleFreq+0x1c>
      sampleDivider = 1;
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	90 93 01 01 	sts	0x0101, r25
 1e8:	80 93 00 01 	sts	0x0100, r24
      overflow0 = OVERFLOW_200HZ;
 1ec:	83 e4       	ldi	r24, 0x43	; 67
 1ee:	80 93 03 01 	sts	0x0103, r24
 1f2:	21 c0       	rjmp	.+66     	; 0x236 <cycleFreq+0x5e>
   }
   else if (overflow0 == OVERFLOW_200HZ) {
 1f4:	83 34       	cpi	r24, 0x43	; 67
 1f6:	51 f4       	brne	.+20     	; 0x20c <cycleFreq+0x34>
      sampleDivider = 2;
 1f8:	82 e0       	ldi	r24, 0x02	; 2
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	90 93 01 01 	sts	0x0101, r25
 200:	80 93 00 01 	sts	0x0100, r24
      overflow0 = OVERFLOW_300HZ;
 204:	8a e5       	ldi	r24, 0x5A	; 90
 206:	80 93 03 01 	sts	0x0103, r24
 20a:	15 c0       	rjmp	.+42     	; 0x236 <cycleFreq+0x5e>
   }
   else if (overflow0 == OVERFLOW_300HZ) {
 20c:	8a 35       	cpi	r24, 0x5A	; 90
 20e:	51 f4       	brne	.+20     	; 0x224 <cycleFreq+0x4c>
      sampleDivider = 2;
 210:	82 e0       	ldi	r24, 0x02	; 2
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	90 93 01 01 	sts	0x0101, r25
 218:	80 93 00 01 	sts	0x0100, r24
      overflow0 = OVERFLOW_400HZ;
 21c:	83 e4       	ldi	r24, 0x43	; 67
 21e:	80 93 03 01 	sts	0x0103, r24
 222:	09 c0       	rjmp	.+18     	; 0x236 <cycleFreq+0x5e>
   else if (overflow0 == OVERFLOW_400HZ) {
      sampleDivider = 2;
      overflow0 = OVERFLOW_500HZ;
   }
   else{
      sampleDivider = 1;
 224:	81 e0       	ldi	r24, 0x01	; 1
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	90 93 01 01 	sts	0x0101, r25
 22c:	80 93 00 01 	sts	0x0100, r24
      overflow0 = OVERFLOW_100HZ;
 230:	87 e8       	ldi	r24, 0x87	; 135
 232:	80 93 03 01 	sts	0x0103, r24
   }
   OCR0A = overflow0;
 236:	80 91 03 01 	lds	r24, 0x0103
 23a:	87 bd       	out	0x27, r24	; 39
 23c:	08 95       	ret

0000023e <main>:
uint8_t overflow2 = 63;	// set overflow value for button checking
uint16_t voltage = 0;

int main(void)
{
	num_samples = NUM_SAMPS;
 23e:	82 e9       	ldi	r24, 0x92	; 146
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	90 93 21 01 	sts	0x0121, r25
 246:	80 93 20 01 	sts	0x0120, r24
	
   // initialize GPIO, interrupts, and timers
   GPIO_Initialization();
 24a:	0e 94 88 00 	call	0x110	; 0x110 <GPIO_Initialization>
   
   // fill square, sawtooth, triangle, and sine wave LUTs
   initWaves();
 24e:	0e 94 23 04 	call	0x846	; 0x846 <initWaves>
   
   PORTD |= (1<<LED3);		// indcates the system is ready
 252:	5b 9a       	sbi	0x0b, 3	; 11
   
   while (1){
	   if(check_voltage() <= 51)
 254:	0e 94 9d 00 	call	0x13a	; 0x13a <check_voltage>
 258:	c4 97       	sbiw	r24, 0x34	; 52
 25a:	10 f4       	brcc	.+4      	; 0x260 <main+0x22>
			PORTD |= (1<<LED2);
 25c:	5a 9a       	sbi	0x0b, 2	; 11
 25e:	fa cf       	rjmp	.-12     	; 0x254 <main+0x16>
		else if( check_voltage() > 51 && check_voltage() <= 102)
 260:	0e 94 9d 00 	call	0x13a	; 0x13a <check_voltage>
 264:	c4 97       	sbiw	r24, 0x34	; 52
 266:	38 f0       	brcs	.+14     	; 0x276 <main+0x38>
 268:	0e 94 9d 00 	call	0x13a	; 0x13a <check_voltage>
 26c:	87 36       	cpi	r24, 0x67	; 103
 26e:	91 05       	cpc	r25, r1
 270:	10 f4       	brcc	.+4      	; 0x276 <main+0x38>
			PORTD &= ~(1<<LED2);
 272:	5a 98       	cbi	0x0b, 2	; 11
 274:	ef cf       	rjmp	.-34     	; 0x254 <main+0x16>
		else if( check_voltage() > 102 && check_voltage() <= 153)
 276:	0e 94 9d 00 	call	0x13a	; 0x13a <check_voltage>
 27a:	87 36       	cpi	r24, 0x67	; 103
 27c:	91 05       	cpc	r25, r1
 27e:	38 f0       	brcs	.+14     	; 0x28e <main+0x50>
 280:	0e 94 9d 00 	call	0x13a	; 0x13a <check_voltage>
 284:	8a 39       	cpi	r24, 0x9A	; 154
 286:	91 05       	cpc	r25, r1
 288:	10 f4       	brcc	.+4      	; 0x28e <main+0x50>
			PORTD |= (1<<LED2);
 28a:	5a 9a       	sbi	0x0b, 2	; 11
 28c:	e3 cf       	rjmp	.-58     	; 0x254 <main+0x16>
		else if( check_voltage() > 153 && check_voltage() <= 204)
 28e:	0e 94 9d 00 	call	0x13a	; 0x13a <check_voltage>
 292:	8a 39       	cpi	r24, 0x9A	; 154
 294:	91 05       	cpc	r25, r1
 296:	38 f0       	brcs	.+14     	; 0x2a6 <main+0x68>
 298:	0e 94 9d 00 	call	0x13a	; 0x13a <check_voltage>
 29c:	8d 3c       	cpi	r24, 0xCD	; 205
 29e:	91 05       	cpc	r25, r1
 2a0:	10 f4       	brcc	.+4      	; 0x2a6 <main+0x68>
			PORTD &= ~(1<<LED2);
 2a2:	5a 98       	cbi	0x0b, 2	; 11
 2a4:	d7 cf       	rjmp	.-82     	; 0x254 <main+0x16>
		else if( check_voltage() > 204 && check_voltage() <= 255)
 2a6:	0e 94 9d 00 	call	0x13a	; 0x13a <check_voltage>
 2aa:	8d 3c       	cpi	r24, 0xCD	; 205
 2ac:	91 05       	cpc	r25, r1
 2ae:	40 f0       	brcs	.+16     	; 0x2c0 <main+0x82>
 2b0:	0e 94 9d 00 	call	0x13a	; 0x13a <check_voltage>
 2b4:	8f 3f       	cpi	r24, 0xFF	; 255
 2b6:	91 05       	cpc	r25, r1
 2b8:	09 f0       	breq	.+2      	; 0x2bc <main+0x7e>
 2ba:	10 f4       	brcc	.+4      	; 0x2c0 <main+0x82>
			PORTD |= (1<<LED2);
 2bc:	5a 9a       	sbi	0x0b, 2	; 11
 2be:	ca cf       	rjmp	.-108    	; 0x254 <main+0x16>
		else
			PORTD &= ~(1<<LED3);
 2c0:	5b 98       	cbi	0x0b, 3	; 11
 2c2:	c8 cf       	rjmp	.-112    	; 0x254 <main+0x16>

000002c4 <__vector_14>:
}

///////////////////////////////////ISR/////////////////////////////////////////

// ISR to increment through wave function LUTs and set frequency
ISR(TIMER0_COMPA_vect){
 2c4:	1f 92       	push	r1
 2c6:	0f 92       	push	r0
 2c8:	0f b6       	in	r0, 0x3f	; 63
 2ca:	0f 92       	push	r0
 2cc:	11 24       	eor	r1, r1
 2ce:	2f 93       	push	r18
 2d0:	3f 93       	push	r19
 2d2:	4f 93       	push	r20
 2d4:	5f 93       	push	r21
 2d6:	6f 93       	push	r22
 2d8:	7f 93       	push	r23
 2da:	8f 93       	push	r24
 2dc:	9f 93       	push	r25
 2de:	af 93       	push	r26
 2e0:	bf 93       	push	r27
 2e2:	ef 93       	push	r30
 2e4:	ff 93       	push	r31
   Transmit_SPI_Master(nextWavePoint());
 2e6:	0e 94 4b 02 	call	0x496	; 0x496 <nextWavePoint>
 2ea:	0e 94 b8 00 	call	0x170	; 0x170 <Transmit_SPI_Master>
   //PORTD |= (1<<LED2);
 
}
 2ee:	ff 91       	pop	r31
 2f0:	ef 91       	pop	r30
 2f2:	bf 91       	pop	r27
 2f4:	af 91       	pop	r26
 2f6:	9f 91       	pop	r25
 2f8:	8f 91       	pop	r24
 2fa:	7f 91       	pop	r23
 2fc:	6f 91       	pop	r22
 2fe:	5f 91       	pop	r21
 300:	4f 91       	pop	r20
 302:	3f 91       	pop	r19
 304:	2f 91       	pop	r18
 306:	0f 90       	pop	r0
 308:	0f be       	out	0x3f, r0	; 63
 30a:	0f 90       	pop	r0
 30c:	1f 90       	pop	r1
 30e:	18 95       	reti

00000310 <__vector_7>:

ISR(TIMER2_COMPA_vect){
 310:	1f 92       	push	r1
 312:	0f 92       	push	r0
 314:	0f b6       	in	r0, 0x3f	; 63
 316:	0f 92       	push	r0
 318:	11 24       	eor	r1, r1
 31a:	2f 93       	push	r18
 31c:	3f 93       	push	r19
 31e:	4f 93       	push	r20
 320:	5f 93       	push	r21
 322:	6f 93       	push	r22
 324:	7f 93       	push	r23
 326:	8f 93       	push	r24
 328:	9f 93       	push	r25
 32a:	af 93       	push	r26
 32c:	bf 93       	push	r27
 32e:	ef 93       	push	r30
 330:	ff 93       	push	r31
   if (!(PIND & 1 << BTN0))
 332:	4f 99       	sbic	0x09, 7	; 9
 334:	0a c0       	rjmp	.+20     	; 0x34a <__vector_7+0x3a>
      btn0++;
 336:	80 91 1c 01 	lds	r24, 0x011C
 33a:	90 91 1d 01 	lds	r25, 0x011D
 33e:	01 96       	adiw	r24, 0x01	; 1
 340:	90 93 1d 01 	sts	0x011D, r25
 344:	80 93 1c 01 	sts	0x011C, r24
 348:	08 c0       	rjmp	.+16     	; 0x35a <__vector_7+0x4a>
   else
      btn0 = was0Pressed = 0;
 34a:	10 92 17 01 	sts	0x0117, r1
 34e:	10 92 16 01 	sts	0x0116, r1
 352:	10 92 1d 01 	sts	0x011D, r1
 356:	10 92 1c 01 	sts	0x011C, r1
   
   if (!(PIND & 1 << BTN1))
 35a:	4e 99       	sbic	0x09, 6	; 9
 35c:	0a c0       	rjmp	.+20     	; 0x372 <__vector_7+0x62>
      btn1++;
 35e:	80 91 1a 01 	lds	r24, 0x011A
 362:	90 91 1b 01 	lds	r25, 0x011B
 366:	01 96       	adiw	r24, 0x01	; 1
 368:	90 93 1b 01 	sts	0x011B, r25
 36c:	80 93 1a 01 	sts	0x011A, r24
 370:	08 c0       	rjmp	.+16     	; 0x382 <__vector_7+0x72>
   else
      btn1 = was1Pressed = 0;
 372:	10 92 15 01 	sts	0x0115, r1
 376:	10 92 14 01 	sts	0x0114, r1
 37a:	10 92 1b 01 	sts	0x011B, r1
 37e:	10 92 1a 01 	sts	0x011A, r1
   
   if (!(PIND & 1 << BTN2))
 382:	4d 99       	sbic	0x09, 5	; 9
 384:	0a c0       	rjmp	.+20     	; 0x39a <__vector_7+0x8a>
      btn2++;
 386:	80 91 18 01 	lds	r24, 0x0118
 38a:	90 91 19 01 	lds	r25, 0x0119
 38e:	01 96       	adiw	r24, 0x01	; 1
 390:	90 93 19 01 	sts	0x0119, r25
 394:	80 93 18 01 	sts	0x0118, r24
 398:	08 c0       	rjmp	.+16     	; 0x3aa <__vector_7+0x9a>
   else
      btn2 = was2Pressed = 0;
 39a:	10 92 13 01 	sts	0x0113, r1
 39e:	10 92 12 01 	sts	0x0112, r1
 3a2:	10 92 19 01 	sts	0x0119, r1
 3a6:	10 92 18 01 	sts	0x0118, r1
   
   if(btn0 >= DEBOUNCE) {
 3aa:	80 91 1c 01 	lds	r24, 0x011C
 3ae:	90 91 1d 01 	lds	r25, 0x011D
 3b2:	0a 97       	sbiw	r24, 0x0a	; 10
 3b4:	94 f0       	brlt	.+36     	; 0x3da <__vector_7+0xca>
      if (!was0Pressed)
 3b6:	80 91 16 01 	lds	r24, 0x0116
 3ba:	90 91 17 01 	lds	r25, 0x0117
 3be:	89 2b       	or	r24, r25
 3c0:	11 f4       	brne	.+4      	; 0x3c6 <__vector_7+0xb6>
         nextWave();
 3c2:	0e 94 2e 02 	call	0x45c	; 0x45c <nextWave>
      btn0 = 0;
 3c6:	10 92 1d 01 	sts	0x011D, r1
 3ca:	10 92 1c 01 	sts	0x011C, r1
      was0Pressed = 1;
 3ce:	81 e0       	ldi	r24, 0x01	; 1
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	90 93 17 01 	sts	0x0117, r25
 3d6:	80 93 16 01 	sts	0x0116, r24
   }
   
   if(btn1 >= DEBOUNCE) {
 3da:	80 91 1a 01 	lds	r24, 0x011A
 3de:	90 91 1b 01 	lds	r25, 0x011B
 3e2:	0a 97       	sbiw	r24, 0x0a	; 10
 3e4:	94 f0       	brlt	.+36     	; 0x40a <__vector_7+0xfa>
      if (!was1Pressed) {
 3e6:	80 91 14 01 	lds	r24, 0x0114
 3ea:	90 91 15 01 	lds	r25, 0x0115
 3ee:	89 2b       	or	r24, r25
 3f0:	11 f4       	brne	.+4      	; 0x3f6 <__vector_7+0xe6>
         //PORTD &= ~(1<<LED3);
         cycleFreq();
 3f2:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <cycleFreq>
      }
      btn1 = 0;
 3f6:	10 92 1b 01 	sts	0x011B, r1
 3fa:	10 92 1a 01 	sts	0x011A, r1
      was1Pressed = 1;
 3fe:	81 e0       	ldi	r24, 0x01	; 1
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	90 93 15 01 	sts	0x0115, r25
 406:	80 93 14 01 	sts	0x0114, r24
   }
   
   if(btn2 >= DEBOUNCE) {
 40a:	80 91 18 01 	lds	r24, 0x0118
 40e:	90 91 19 01 	lds	r25, 0x0119
 412:	0a 97       	sbiw	r24, 0x0a	; 10
 414:	94 f0       	brlt	.+36     	; 0x43a <__vector_7+0x12a>
      if (!was2Pressed) {
 416:	80 91 12 01 	lds	r24, 0x0112
 41a:	90 91 13 01 	lds	r25, 0x0113
 41e:	89 2b       	or	r24, r25
 420:	11 f4       	brne	.+4      	; 0x426 <__vector_7+0x116>
         cycleDuty();
 422:	0e 94 d6 02 	call	0x5ac	; 0x5ac <cycleDuty>
      }
	  //PORTD |= (1<<LED3);
      btn2 = 0;
 426:	10 92 19 01 	sts	0x0119, r1
 42a:	10 92 18 01 	sts	0x0118, r1
      was2Pressed = 1;
 42e:	81 e0       	ldi	r24, 0x01	; 1
 430:	90 e0       	ldi	r25, 0x00	; 0
 432:	90 93 13 01 	sts	0x0113, r25
 436:	80 93 12 01 	sts	0x0112, r24
   }
  
}
 43a:	ff 91       	pop	r31
 43c:	ef 91       	pop	r30
 43e:	bf 91       	pop	r27
 440:	af 91       	pop	r26
 442:	9f 91       	pop	r25
 444:	8f 91       	pop	r24
 446:	7f 91       	pop	r23
 448:	6f 91       	pop	r22
 44a:	5f 91       	pop	r21
 44c:	4f 91       	pop	r20
 44e:	3f 91       	pop	r19
 450:	2f 91       	pop	r18
 452:	0f 90       	pop	r0
 454:	0f be       	out	0x3f, r0	; 63
 456:	0f 90       	pop	r0
 458:	1f 90       	pop	r1
 45a:	18 95       	reti

0000045c <nextWave>:

void nextWave() {
   static int waveNdx = 0;
   static uint16_t* waves[NUM_WAVES] = {SquareWave, TriWave, SawWave, SinWave};
   
   waveNdx++;
 45c:	80 91 1e 01 	lds	r24, 0x011E
 460:	90 91 1f 01 	lds	r25, 0x011F
 464:	01 96       	adiw	r24, 0x01	; 1
   waveNdx %= NUM_WAVES;
 466:	83 70       	andi	r24, 0x03	; 3
 468:	90 78       	andi	r25, 0x80	; 128
 46a:	99 23       	and	r25, r25
 46c:	24 f4       	brge	.+8      	; 0x476 <nextWave+0x1a>
 46e:	01 97       	sbiw	r24, 0x01	; 1
 470:	8c 6f       	ori	r24, 0xFC	; 252
 472:	9f 6f       	ori	r25, 0xFF	; 255
 474:	01 96       	adiw	r24, 0x01	; 1
 476:	90 93 1f 01 	sts	0x011F, r25
 47a:	80 93 1e 01 	sts	0x011E, r24
   
   Wave = waves[waveNdx];
 47e:	88 0f       	add	r24, r24
 480:	99 1f       	adc	r25, r25
 482:	fc 01       	movw	r30, r24
 484:	e8 5f       	subi	r30, 0xF8	; 248
 486:	fe 4f       	sbci	r31, 0xFE	; 254
 488:	80 81       	ld	r24, Z
 48a:	91 81       	ldd	r25, Z+1	; 0x01
 48c:	90 93 b3 05 	sts	0x05B3, r25
 490:	80 93 b2 05 	sts	0x05B2, r24
 494:	08 95       	ret

00000496 <nextWavePoint>:
}

uint16_t nextWavePoint() {
   static int ndx = -1;
   
   ndx += sampleDivider;
 496:	20 91 04 01 	lds	r18, 0x0104
 49a:	30 91 05 01 	lds	r19, 0x0105
 49e:	80 91 00 01 	lds	r24, 0x0100
 4a2:	90 91 01 01 	lds	r25, 0x0101
 4a6:	82 0f       	add	r24, r18
 4a8:	93 1f       	adc	r25, r19
   ndx %= NUM_SAMPS;
 4aa:	62 e9       	ldi	r22, 0x92	; 146
 4ac:	70 e0       	ldi	r23, 0x00	; 0
 4ae:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <__divmodhi4>
 4b2:	90 93 05 01 	sts	0x0105, r25
 4b6:	80 93 04 01 	sts	0x0104, r24
   
   return Wave[ndx];
 4ba:	88 0f       	add	r24, r24
 4bc:	99 1f       	adc	r25, r25
 4be:	e0 91 b2 05 	lds	r30, 0x05B2
 4c2:	f0 91 b3 05 	lds	r31, 0x05B3
 4c6:	e8 0f       	add	r30, r24
 4c8:	f9 1f       	adc	r31, r25
}
 4ca:	80 81       	ld	r24, Z
 4cc:	91 81       	ldd	r25, Z+1	; 0x01
 4ce:	08 95       	ret

000004d0 <make_square_LUT>:
   dutyCycle += 10;
   dutyCycle %= 110;
   make_square_LUT();
}

void make_square_LUT(){
 4d0:	cf 92       	push	r12
 4d2:	df 92       	push	r13
 4d4:	ef 92       	push	r14
 4d6:	ff 92       	push	r15
 4d8:	0f 93       	push	r16
 4da:	1f 93       	push	r17
 4dc:	cf 93       	push	r28
 4de:	df 93       	push	r29
   int i;
   int duty = num_samples * (double) dutyCycle/100;
 4e0:	60 91 20 01 	lds	r22, 0x0120
 4e4:	70 91 21 01 	lds	r23, 0x0121
 4e8:	07 2e       	mov	r0, r23
 4ea:	00 0c       	add	r0, r0
 4ec:	88 0b       	sbc	r24, r24
 4ee:	99 0b       	sbc	r25, r25
 4f0:	0e 94 49 05 	call	0xa92	; 0xa92 <__floatsisf>
 4f4:	6b 01       	movw	r12, r22
 4f6:	7c 01       	movw	r14, r24
 4f8:	80 91 06 01 	lds	r24, 0x0106
 4fc:	90 91 07 01 	lds	r25, 0x0107
 500:	bc 01       	movw	r22, r24
 502:	99 0f       	add	r25, r25
 504:	88 0b       	sbc	r24, r24
 506:	99 0b       	sbc	r25, r25
 508:	0e 94 49 05 	call	0xa92	; 0xa92 <__floatsisf>
 50c:	9b 01       	movw	r18, r22
 50e:	ac 01       	movw	r20, r24
 510:	c7 01       	movw	r24, r14
 512:	b6 01       	movw	r22, r12
 514:	0e 94 da 05 	call	0xbb4	; 0xbb4 <__mulsf3>
 518:	20 e0       	ldi	r18, 0x00	; 0
 51a:	30 e0       	ldi	r19, 0x00	; 0
 51c:	48 ec       	ldi	r20, 0xC8	; 200
 51e:	52 e4       	ldi	r21, 0x42	; 66
 520:	0e 94 9f 04 	call	0x93e	; 0x93e <__divsf3>
 524:	0e 94 11 05 	call	0xa22	; 0xa22 <__fixsfsi>
 528:	eb 01       	movw	r28, r22
   
   for (i = 0; i < duty; i++)
 52a:	1c 16       	cp	r1, r28
 52c:	1d 06       	cpc	r1, r29
 52e:	b4 f4       	brge	.+44     	; 0x55c <make_square_LUT+0x8c>
 530:	0e e8       	ldi	r16, 0x8E	; 142
 532:	14 e0       	ldi	r17, 0x04	; 4
 534:	66 0f       	add	r22, r22
 536:	77 1f       	adc	r23, r23
 538:	cb 01       	movw	r24, r22
 53a:	82 57       	subi	r24, 0x72	; 114
 53c:	9b 4f       	sbci	r25, 0xFB	; 251
 53e:	7c 01       	movw	r14, r24
      SquareWave[i] = volts_to_bits(MAX_VOLTAGE);
 540:	60 e0       	ldi	r22, 0x00	; 0
 542:	70 e0       	ldi	r23, 0x00	; 0
 544:	80 ea       	ldi	r24, 0xA0	; 160
 546:	90 e4       	ldi	r25, 0x40	; 64
 548:	0e 94 c5 00 	call	0x18a	; 0x18a <volts_to_bits>
 54c:	f8 01       	movw	r30, r16
 54e:	81 93       	st	Z+, r24
 550:	91 93       	st	Z+, r25
 552:	8f 01       	movw	r16, r30

void make_square_LUT(){
   int i;
   int duty = num_samples * (double) dutyCycle/100;
   
   for (i = 0; i < duty; i++)
 554:	ee 15       	cp	r30, r14
 556:	ff 05       	cpc	r31, r15
 558:	99 f7       	brne	.-26     	; 0x540 <make_square_LUT+0x70>
 55a:	02 c0       	rjmp	.+4      	; 0x560 <make_square_LUT+0x90>
 55c:	c0 e0       	ldi	r28, 0x00	; 0
 55e:	d0 e0       	ldi	r29, 0x00	; 0
      SquareWave[i] = volts_to_bits(MAX_VOLTAGE);
   
   for ( ; i < num_samples ; i++)
 560:	80 91 20 01 	lds	r24, 0x0120
 564:	90 91 21 01 	lds	r25, 0x0121
 568:	c8 17       	cp	r28, r24
 56a:	d9 07       	cpc	r29, r25
 56c:	b4 f4       	brge	.+44     	; 0x59a <make_square_LUT+0xca>
 56e:	8e 01       	movw	r16, r28
 570:	00 0f       	add	r16, r16
 572:	11 1f       	adc	r17, r17
 574:	02 57       	subi	r16, 0x72	; 114
 576:	1b 4f       	sbci	r17, 0xFB	; 251
      SquareWave[i] = volts_to_bits(MIN_VOLTAGE);
 578:	60 e0       	ldi	r22, 0x00	; 0
 57a:	70 e0       	ldi	r23, 0x00	; 0
 57c:	cb 01       	movw	r24, r22
 57e:	0e 94 c5 00 	call	0x18a	; 0x18a <volts_to_bits>
 582:	f8 01       	movw	r30, r16
 584:	81 93       	st	Z+, r24
 586:	91 93       	st	Z+, r25
 588:	8f 01       	movw	r16, r30
   int duty = num_samples * (double) dutyCycle/100;
   
   for (i = 0; i < duty; i++)
      SquareWave[i] = volts_to_bits(MAX_VOLTAGE);
   
   for ( ; i < num_samples ; i++)
 58a:	21 96       	adiw	r28, 0x01	; 1
 58c:	80 91 20 01 	lds	r24, 0x0120
 590:	90 91 21 01 	lds	r25, 0x0121
 594:	c8 17       	cp	r28, r24
 596:	d9 07       	cpc	r29, r25
 598:	7c f3       	brlt	.-34     	; 0x578 <make_square_LUT+0xa8>
      SquareWave[i] = volts_to_bits(MIN_VOLTAGE);
}
 59a:	df 91       	pop	r29
 59c:	cf 91       	pop	r28
 59e:	1f 91       	pop	r17
 5a0:	0f 91       	pop	r16
 5a2:	ff 90       	pop	r15
 5a4:	ef 90       	pop	r14
 5a6:	df 90       	pop	r13
 5a8:	cf 90       	pop	r12
 5aa:	08 95       	ret

000005ac <cycleDuty>:
   
   return Wave[ndx];
}

void cycleDuty() {
   dutyCycle += 10;
 5ac:	80 91 06 01 	lds	r24, 0x0106
 5b0:	90 91 07 01 	lds	r25, 0x0107
 5b4:	0a 96       	adiw	r24, 0x0a	; 10
   dutyCycle %= 110;
 5b6:	6e e6       	ldi	r22, 0x6E	; 110
 5b8:	70 e0       	ldi	r23, 0x00	; 0
 5ba:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <__divmodhi4>
 5be:	90 93 07 01 	sts	0x0107, r25
 5c2:	80 93 06 01 	sts	0x0106, r24
   make_square_LUT();
 5c6:	0e 94 68 02 	call	0x4d0	; 0x4d0 <make_square_LUT>
 5ca:	08 95       	ret

000005cc <make_triangle_LUT>:
   
   for ( ; i < num_samples ; i++)
      SquareWave[i] = volts_to_bits(MIN_VOLTAGE);
}

void make_triangle_LUT(){
 5cc:	4f 92       	push	r4
 5ce:	5f 92       	push	r5
 5d0:	6f 92       	push	r6
 5d2:	7f 92       	push	r7
 5d4:	af 92       	push	r10
 5d6:	bf 92       	push	r11
 5d8:	cf 92       	push	r12
 5da:	df 92       	push	r13
 5dc:	ef 92       	push	r14
 5de:	ff 92       	push	r15
 5e0:	0f 93       	push	r16
 5e2:	1f 93       	push	r17
 5e4:	cf 93       	push	r28
 5e6:	df 93       	push	r29
   int i;
   int peak = num_samples / 2;
 5e8:	a0 90 20 01 	lds	r10, 0x0120
 5ec:	b0 90 21 01 	lds	r11, 0x0121
 5f0:	bb 20       	and	r11, r11
 5f2:	1c f4       	brge	.+6      	; 0x5fa <make_triangle_LUT+0x2e>
 5f4:	2f ef       	ldi	r18, 0xFF	; 255
 5f6:	a2 1a       	sub	r10, r18
 5f8:	b2 0a       	sbc	r11, r18
 5fa:	b5 94       	asr	r11
 5fc:	a7 94       	ror	r10
   double increment = ((double) MAX_VOLTAGE - MIN_VOLTAGE) / peak;
 5fe:	b5 01       	movw	r22, r10
 600:	0b 2c       	mov	r0, r11
 602:	00 0c       	add	r0, r0
 604:	88 0b       	sbc	r24, r24
 606:	99 0b       	sbc	r25, r25
 608:	0e 94 49 05 	call	0xa92	; 0xa92 <__floatsisf>
 60c:	9b 01       	movw	r18, r22
 60e:	ac 01       	movw	r20, r24
 610:	60 e0       	ldi	r22, 0x00	; 0
 612:	70 e0       	ldi	r23, 0x00	; 0
 614:	80 ea       	ldi	r24, 0xA0	; 160
 616:	90 e4       	ldi	r25, 0x40	; 64
 618:	0e 94 9f 04 	call	0x93e	; 0x93e <__divsf3>
 61c:	2b 01       	movw	r4, r22
 61e:	3c 01       	movw	r6, r24
   double voltage = MIN_VOLTAGE - increment;
 620:	9b 01       	movw	r18, r22
 622:	ac 01       	movw	r20, r24
 624:	60 e0       	ldi	r22, 0x00	; 0
 626:	70 e0       	ldi	r23, 0x00	; 0
 628:	cb 01       	movw	r24, r22
 62a:	0e 94 32 04 	call	0x864	; 0x864 <__subsf3>
 62e:	6b 01       	movw	r12, r22
 630:	7c 01       	movw	r14, r24
   
   for (i = 0; i < (peak + 1); i++)
 632:	e5 01       	movw	r28, r10
 634:	21 96       	adiw	r28, 0x01	; 1
 636:	1c 16       	cp	r1, r28
 638:	1d 06       	cpc	r1, r29
 63a:	dc f4       	brge	.+54     	; 0x672 <make_triangle_LUT+0xa6>
 63c:	0a e6       	ldi	r16, 0x6A	; 106
 63e:	13 e0       	ldi	r17, 0x03	; 3
 640:	c5 01       	movw	r24, r10
 642:	88 0f       	add	r24, r24
 644:	99 1f       	adc	r25, r25
 646:	fc 01       	movw	r30, r24
 648:	e4 59       	subi	r30, 0x94	; 148
 64a:	fc 4f       	sbci	r31, 0xFC	; 252
 64c:	5f 01       	movw	r10, r30
      TriWave[i] = volts_to_bits(voltage += increment);
 64e:	a3 01       	movw	r20, r6
 650:	92 01       	movw	r18, r4
 652:	c7 01       	movw	r24, r14
 654:	b6 01       	movw	r22, r12
 656:	0e 94 33 04 	call	0x866	; 0x866 <__addsf3>
 65a:	6b 01       	movw	r12, r22
 65c:	7c 01       	movw	r14, r24
 65e:	0e 94 c5 00 	call	0x18a	; 0x18a <volts_to_bits>
 662:	f8 01       	movw	r30, r16
 664:	81 93       	st	Z+, r24
 666:	91 93       	st	Z+, r25
 668:	8f 01       	movw	r16, r30
   int i;
   int peak = num_samples / 2;
   double increment = ((double) MAX_VOLTAGE - MIN_VOLTAGE) / peak;
   double voltage = MIN_VOLTAGE - increment;
   
   for (i = 0; i < (peak + 1); i++)
 66a:	ea 15       	cp	r30, r10
 66c:	fb 05       	cpc	r31, r11
 66e:	79 f7       	brne	.-34     	; 0x64e <make_triangle_LUT+0x82>
 670:	02 c0       	rjmp	.+4      	; 0x676 <make_triangle_LUT+0xaa>
 672:	c0 e0       	ldi	r28, 0x00	; 0
 674:	d0 e0       	ldi	r29, 0x00	; 0
      TriWave[i] = volts_to_bits(voltage += increment);
   
   for ( ; i < (num_samples - 1); i++)
 676:	80 91 20 01 	lds	r24, 0x0120
 67a:	90 91 21 01 	lds	r25, 0x0121
 67e:	01 97       	sbiw	r24, 0x01	; 1
 680:	c8 17       	cp	r28, r24
 682:	d9 07       	cpc	r29, r25
 684:	e4 f4       	brge	.+56     	; 0x6be <make_triangle_LUT+0xf2>
 686:	8e 01       	movw	r16, r28
 688:	00 0f       	add	r16, r16
 68a:	11 1f       	adc	r17, r17
 68c:	06 59       	subi	r16, 0x96	; 150
 68e:	1c 4f       	sbci	r17, 0xFC	; 252
      TriWave[i] = volts_to_bits(voltage -= increment);
 690:	a3 01       	movw	r20, r6
 692:	92 01       	movw	r18, r4
 694:	c7 01       	movw	r24, r14
 696:	b6 01       	movw	r22, r12
 698:	0e 94 32 04 	call	0x864	; 0x864 <__subsf3>
 69c:	6b 01       	movw	r12, r22
 69e:	7c 01       	movw	r14, r24
 6a0:	0e 94 c5 00 	call	0x18a	; 0x18a <volts_to_bits>
 6a4:	f8 01       	movw	r30, r16
 6a6:	81 93       	st	Z+, r24
 6a8:	91 93       	st	Z+, r25
 6aa:	8f 01       	movw	r16, r30
   double voltage = MIN_VOLTAGE - increment;
   
   for (i = 0; i < (peak + 1); i++)
      TriWave[i] = volts_to_bits(voltage += increment);
   
   for ( ; i < (num_samples - 1); i++)
 6ac:	21 96       	adiw	r28, 0x01	; 1
 6ae:	80 91 20 01 	lds	r24, 0x0120
 6b2:	90 91 21 01 	lds	r25, 0x0121
 6b6:	01 97       	sbiw	r24, 0x01	; 1
 6b8:	c8 17       	cp	r28, r24
 6ba:	d9 07       	cpc	r29, r25
 6bc:	4c f3       	brlt	.-46     	; 0x690 <make_triangle_LUT+0xc4>
      TriWave[i] = volts_to_bits(voltage -= increment);
}
 6be:	df 91       	pop	r29
 6c0:	cf 91       	pop	r28
 6c2:	1f 91       	pop	r17
 6c4:	0f 91       	pop	r16
 6c6:	ff 90       	pop	r15
 6c8:	ef 90       	pop	r14
 6ca:	df 90       	pop	r13
 6cc:	cf 90       	pop	r12
 6ce:	bf 90       	pop	r11
 6d0:	af 90       	pop	r10
 6d2:	7f 90       	pop	r7
 6d4:	6f 90       	pop	r6
 6d6:	5f 90       	pop	r5
 6d8:	4f 90       	pop	r4
 6da:	08 95       	ret

000006dc <make_sawtooth_LUT>:

void make_sawtooth_LUT(){
 6dc:	8f 92       	push	r8
 6de:	9f 92       	push	r9
 6e0:	af 92       	push	r10
 6e2:	bf 92       	push	r11
 6e4:	cf 92       	push	r12
 6e6:	df 92       	push	r13
 6e8:	ef 92       	push	r14
 6ea:	ff 92       	push	r15
 6ec:	0f 93       	push	r16
 6ee:	1f 93       	push	r17
 6f0:	cf 93       	push	r28
 6f2:	df 93       	push	r29
   int ndx;
   double increment = ((double) MAX_VOLTAGE - MIN_VOLTAGE) / (num_samples - 1);
 6f4:	c0 91 20 01 	lds	r28, 0x0120
 6f8:	d0 91 21 01 	lds	r29, 0x0121
 6fc:	be 01       	movw	r22, r28
 6fe:	61 50       	subi	r22, 0x01	; 1
 700:	71 09       	sbc	r23, r1
 702:	07 2e       	mov	r0, r23
 704:	00 0c       	add	r0, r0
 706:	88 0b       	sbc	r24, r24
 708:	99 0b       	sbc	r25, r25
 70a:	0e 94 49 05 	call	0xa92	; 0xa92 <__floatsisf>
 70e:	9b 01       	movw	r18, r22
 710:	ac 01       	movw	r20, r24
 712:	60 e0       	ldi	r22, 0x00	; 0
 714:	70 e0       	ldi	r23, 0x00	; 0
 716:	80 ea       	ldi	r24, 0xA0	; 160
 718:	90 e4       	ldi	r25, 0x40	; 64
 71a:	0e 94 9f 04 	call	0x93e	; 0x93e <__divsf3>
 71e:	4b 01       	movw	r8, r22
 720:	5c 01       	movw	r10, r24
   double voltage = MIN_VOLTAGE -increment;
 722:	9b 01       	movw	r18, r22
 724:	ac 01       	movw	r20, r24
 726:	60 e0       	ldi	r22, 0x00	; 0
 728:	70 e0       	ldi	r23, 0x00	; 0
 72a:	cb 01       	movw	r24, r22
 72c:	0e 94 32 04 	call	0x864	; 0x864 <__subsf3>
 730:	6b 01       	movw	r12, r22
 732:	7c 01       	movw	r14, r24
   
   for (ndx = 0; ndx < num_samples; ndx++)
 734:	1c 16       	cp	r1, r28
 736:	1d 06       	cpc	r1, r29
 738:	d4 f4       	brge	.+52     	; 0x76e <make_sawtooth_LUT+0x92>
 73a:	06 e4       	ldi	r16, 0x46	; 70
 73c:	12 e0       	ldi	r17, 0x02	; 2
 73e:	c0 e0       	ldi	r28, 0x00	; 0
 740:	d0 e0       	ldi	r29, 0x00	; 0
      SawWave[ndx] = volts_to_bits(voltage += increment);
 742:	a5 01       	movw	r20, r10
 744:	94 01       	movw	r18, r8
 746:	c7 01       	movw	r24, r14
 748:	b6 01       	movw	r22, r12
 74a:	0e 94 33 04 	call	0x866	; 0x866 <__addsf3>
 74e:	6b 01       	movw	r12, r22
 750:	7c 01       	movw	r14, r24
 752:	0e 94 c5 00 	call	0x18a	; 0x18a <volts_to_bits>
 756:	f8 01       	movw	r30, r16
 758:	81 93       	st	Z+, r24
 75a:	91 93       	st	Z+, r25
 75c:	8f 01       	movw	r16, r30
void make_sawtooth_LUT(){
   int ndx;
   double increment = ((double) MAX_VOLTAGE - MIN_VOLTAGE) / (num_samples - 1);
   double voltage = MIN_VOLTAGE -increment;
   
   for (ndx = 0; ndx < num_samples; ndx++)
 75e:	21 96       	adiw	r28, 0x01	; 1
 760:	80 91 20 01 	lds	r24, 0x0120
 764:	90 91 21 01 	lds	r25, 0x0121
 768:	c8 17       	cp	r28, r24
 76a:	d9 07       	cpc	r29, r25
 76c:	54 f3       	brlt	.-44     	; 0x742 <make_sawtooth_LUT+0x66>
      SawWave[ndx] = volts_to_bits(voltage += increment);
}
 76e:	df 91       	pop	r29
 770:	cf 91       	pop	r28
 772:	1f 91       	pop	r17
 774:	0f 91       	pop	r16
 776:	ff 90       	pop	r15
 778:	ef 90       	pop	r14
 77a:	df 90       	pop	r13
 77c:	cf 90       	pop	r12
 77e:	bf 90       	pop	r11
 780:	af 90       	pop	r10
 782:	9f 90       	pop	r9
 784:	8f 90       	pop	r8
 786:	08 95       	ret

00000788 <make_sin_LUT>:

void make_sin_LUT(){
 788:	8f 92       	push	r8
 78a:	9f 92       	push	r9
 78c:	af 92       	push	r10
 78e:	bf 92       	push	r11
 790:	cf 92       	push	r12
 792:	df 92       	push	r13
 794:	ef 92       	push	r14
 796:	ff 92       	push	r15
 798:	0f 93       	push	r16
 79a:	1f 93       	push	r17
 79c:	cf 93       	push	r28
 79e:	df 93       	push	r29
   int ndx;
   double increment = 2 * M_PI / num_samples;
 7a0:	c0 91 20 01 	lds	r28, 0x0120
 7a4:	d0 91 21 01 	lds	r29, 0x0121
 7a8:	be 01       	movw	r22, r28
 7aa:	0d 2e       	mov	r0, r29
 7ac:	00 0c       	add	r0, r0
 7ae:	88 0b       	sbc	r24, r24
 7b0:	99 0b       	sbc	r25, r25
 7b2:	0e 94 49 05 	call	0xa92	; 0xa92 <__floatsisf>
 7b6:	9b 01       	movw	r18, r22
 7b8:	ac 01       	movw	r20, r24
 7ba:	6b ed       	ldi	r22, 0xDB	; 219
 7bc:	7f e0       	ldi	r23, 0x0F	; 15
 7be:	89 ec       	ldi	r24, 0xC9	; 201
 7c0:	90 e4       	ldi	r25, 0x40	; 64
 7c2:	0e 94 9f 04 	call	0x93e	; 0x93e <__divsf3>
 7c6:	4b 01       	movw	r8, r22
 7c8:	5c 01       	movw	r10, r24
   double rad = -increment;
 7ca:	6b 01       	movw	r12, r22
 7cc:	7c 01       	movw	r14, r24
 7ce:	f7 fa       	bst	r15, 7
 7d0:	f0 94       	com	r15
 7d2:	f7 f8       	bld	r15, 7
 7d4:	f0 94       	com	r15
   double ampli = ((double) MAX_VOLTAGE - MIN_VOLTAGE) / 2;
   // The amplitude/2 is neccessary to compensate for sin()'s amplitude of 2
   double offset = MIN_VOLTAGE + ampli;
   
   for (ndx = 0; ndx < num_samples; ndx++)
 7d6:	1c 16       	cp	r1, r28
 7d8:	1d 06       	cpc	r1, r29
 7da:	44 f5       	brge	.+80     	; 0x82c <make_sin_LUT+0xa4>
 7dc:	02 e2       	ldi	r16, 0x22	; 34
 7de:	11 e0       	ldi	r17, 0x01	; 1
 7e0:	c0 e0       	ldi	r28, 0x00	; 0
 7e2:	d0 e0       	ldi	r29, 0x00	; 0
      SinWave[ndx] = volts_to_bits(ampli * sin(rad += increment) + offset);
 7e4:	a5 01       	movw	r20, r10
 7e6:	94 01       	movw	r18, r8
 7e8:	c7 01       	movw	r24, r14
 7ea:	b6 01       	movw	r22, r12
 7ec:	0e 94 33 04 	call	0x866	; 0x866 <__addsf3>
 7f0:	6b 01       	movw	r12, r22
 7f2:	7c 01       	movw	r14, r24
 7f4:	0e 94 47 06 	call	0xc8e	; 0xc8e <sin>
 7f8:	20 e0       	ldi	r18, 0x00	; 0
 7fa:	30 e0       	ldi	r19, 0x00	; 0
 7fc:	40 e2       	ldi	r20, 0x20	; 32
 7fe:	50 e4       	ldi	r21, 0x40	; 64
 800:	0e 94 da 05 	call	0xbb4	; 0xbb4 <__mulsf3>
 804:	20 e0       	ldi	r18, 0x00	; 0
 806:	30 e0       	ldi	r19, 0x00	; 0
 808:	40 e2       	ldi	r20, 0x20	; 32
 80a:	50 e4       	ldi	r21, 0x40	; 64
 80c:	0e 94 33 04 	call	0x866	; 0x866 <__addsf3>
 810:	0e 94 c5 00 	call	0x18a	; 0x18a <volts_to_bits>
 814:	f8 01       	movw	r30, r16
 816:	81 93       	st	Z+, r24
 818:	91 93       	st	Z+, r25
 81a:	8f 01       	movw	r16, r30
   double rad = -increment;
   double ampli = ((double) MAX_VOLTAGE - MIN_VOLTAGE) / 2;
   // The amplitude/2 is neccessary to compensate for sin()'s amplitude of 2
   double offset = MIN_VOLTAGE + ampli;
   
   for (ndx = 0; ndx < num_samples; ndx++)
 81c:	21 96       	adiw	r28, 0x01	; 1
 81e:	80 91 20 01 	lds	r24, 0x0120
 822:	90 91 21 01 	lds	r25, 0x0121
 826:	c8 17       	cp	r28, r24
 828:	d9 07       	cpc	r29, r25
 82a:	e4 f2       	brlt	.-72     	; 0x7e4 <make_sin_LUT+0x5c>
      SinWave[ndx] = volts_to_bits(ampli * sin(rad += increment) + offset);
 82c:	df 91       	pop	r29
 82e:	cf 91       	pop	r28
 830:	1f 91       	pop	r17
 832:	0f 91       	pop	r16
 834:	ff 90       	pop	r15
 836:	ef 90       	pop	r14
 838:	df 90       	pop	r13
 83a:	cf 90       	pop	r12
 83c:	bf 90       	pop	r11
 83e:	af 90       	pop	r10
 840:	9f 90       	pop	r9
 842:	8f 90       	pop	r8
 844:	08 95       	ret

00000846 <initWaves>:
//   else
//      return bits;                  // return 12bit equivalent for DAC
//}

void initWaves() {
   make_square_LUT();
 846:	0e 94 68 02 	call	0x4d0	; 0x4d0 <make_square_LUT>
   make_triangle_LUT();
 84a:	0e 94 e6 02 	call	0x5cc	; 0x5cc <make_triangle_LUT>
   make_sawtooth_LUT();
 84e:	0e 94 6e 03 	call	0x6dc	; 0x6dc <make_sawtooth_LUT>
   make_sin_LUT();
 852:	0e 94 c4 03 	call	0x788	; 0x788 <make_sin_LUT>
   
   Wave = SquareWave;
 856:	8e e8       	ldi	r24, 0x8E	; 142
 858:	94 e0       	ldi	r25, 0x04	; 4
 85a:	90 93 b3 05 	sts	0x05B3, r25
 85e:	80 93 b2 05 	sts	0x05B2, r24
 862:	08 95       	ret

00000864 <__subsf3>:
 864:	50 58       	subi	r21, 0x80	; 128

00000866 <__addsf3>:
 866:	bb 27       	eor	r27, r27
 868:	aa 27       	eor	r26, r26
 86a:	0e 94 4a 04 	call	0x894	; 0x894 <__addsf3x>
 86e:	0c 94 9b 05 	jmp	0xb36	; 0xb36 <__fp_round>
 872:	0e 94 8d 05 	call	0xb1a	; 0xb1a <__fp_pscA>
 876:	38 f0       	brcs	.+14     	; 0x886 <__addsf3+0x20>
 878:	0e 94 94 05 	call	0xb28	; 0xb28 <__fp_pscB>
 87c:	20 f0       	brcs	.+8      	; 0x886 <__addsf3+0x20>
 87e:	39 f4       	brne	.+14     	; 0x88e <__addsf3+0x28>
 880:	9f 3f       	cpi	r25, 0xFF	; 255
 882:	19 f4       	brne	.+6      	; 0x88a <__addsf3+0x24>
 884:	26 f4       	brtc	.+8      	; 0x88e <__addsf3+0x28>
 886:	0c 94 8a 05 	jmp	0xb14	; 0xb14 <__fp_nan>
 88a:	0e f4       	brtc	.+2      	; 0x88e <__addsf3+0x28>
 88c:	e0 95       	com	r30
 88e:	e7 fb       	bst	r30, 7
 890:	0c 94 84 05 	jmp	0xb08	; 0xb08 <__fp_inf>

00000894 <__addsf3x>:
 894:	e9 2f       	mov	r30, r25
 896:	0e 94 ac 05 	call	0xb58	; 0xb58 <__fp_split3>
 89a:	58 f3       	brcs	.-42     	; 0x872 <__addsf3+0xc>
 89c:	ba 17       	cp	r27, r26
 89e:	62 07       	cpc	r22, r18
 8a0:	73 07       	cpc	r23, r19
 8a2:	84 07       	cpc	r24, r20
 8a4:	95 07       	cpc	r25, r21
 8a6:	20 f0       	brcs	.+8      	; 0x8b0 <__addsf3x+0x1c>
 8a8:	79 f4       	brne	.+30     	; 0x8c8 <__addsf3x+0x34>
 8aa:	a6 f5       	brtc	.+104    	; 0x914 <__stack+0x15>
 8ac:	0c 94 ce 05 	jmp	0xb9c	; 0xb9c <__fp_zero>
 8b0:	0e f4       	brtc	.+2      	; 0x8b4 <__addsf3x+0x20>
 8b2:	e0 95       	com	r30
 8b4:	0b 2e       	mov	r0, r27
 8b6:	ba 2f       	mov	r27, r26
 8b8:	a0 2d       	mov	r26, r0
 8ba:	0b 01       	movw	r0, r22
 8bc:	b9 01       	movw	r22, r18
 8be:	90 01       	movw	r18, r0
 8c0:	0c 01       	movw	r0, r24
 8c2:	ca 01       	movw	r24, r20
 8c4:	a0 01       	movw	r20, r0
 8c6:	11 24       	eor	r1, r1
 8c8:	ff 27       	eor	r31, r31
 8ca:	59 1b       	sub	r21, r25
 8cc:	99 f0       	breq	.+38     	; 0x8f4 <__addsf3x+0x60>
 8ce:	59 3f       	cpi	r21, 0xF9	; 249
 8d0:	50 f4       	brcc	.+20     	; 0x8e6 <__addsf3x+0x52>
 8d2:	50 3e       	cpi	r21, 0xE0	; 224
 8d4:	68 f1       	brcs	.+90     	; 0x930 <__stack+0x31>
 8d6:	1a 16       	cp	r1, r26
 8d8:	f0 40       	sbci	r31, 0x00	; 0
 8da:	a2 2f       	mov	r26, r18
 8dc:	23 2f       	mov	r18, r19
 8de:	34 2f       	mov	r19, r20
 8e0:	44 27       	eor	r20, r20
 8e2:	58 5f       	subi	r21, 0xF8	; 248
 8e4:	f3 cf       	rjmp	.-26     	; 0x8cc <__addsf3x+0x38>
 8e6:	46 95       	lsr	r20
 8e8:	37 95       	ror	r19
 8ea:	27 95       	ror	r18
 8ec:	a7 95       	ror	r26
 8ee:	f0 40       	sbci	r31, 0x00	; 0
 8f0:	53 95       	inc	r21
 8f2:	c9 f7       	brne	.-14     	; 0x8e6 <__addsf3x+0x52>
 8f4:	7e f4       	brtc	.+30     	; 0x914 <__stack+0x15>
 8f6:	1f 16       	cp	r1, r31
 8f8:	ba 0b       	sbc	r27, r26
 8fa:	62 0b       	sbc	r22, r18
 8fc:	73 0b       	sbc	r23, r19
 8fe:	84 0b       	sbc	r24, r20
 900:	ba f0       	brmi	.+46     	; 0x930 <__stack+0x31>
 902:	91 50       	subi	r25, 0x01	; 1
 904:	a1 f0       	breq	.+40     	; 0x92e <__stack+0x2f>
 906:	ff 0f       	add	r31, r31
 908:	bb 1f       	adc	r27, r27
 90a:	66 1f       	adc	r22, r22
 90c:	77 1f       	adc	r23, r23
 90e:	88 1f       	adc	r24, r24
 910:	c2 f7       	brpl	.-16     	; 0x902 <__stack+0x3>
 912:	0e c0       	rjmp	.+28     	; 0x930 <__stack+0x31>
 914:	ba 0f       	add	r27, r26
 916:	62 1f       	adc	r22, r18
 918:	73 1f       	adc	r23, r19
 91a:	84 1f       	adc	r24, r20
 91c:	48 f4       	brcc	.+18     	; 0x930 <__stack+0x31>
 91e:	87 95       	ror	r24
 920:	77 95       	ror	r23
 922:	67 95       	ror	r22
 924:	b7 95       	ror	r27
 926:	f7 95       	ror	r31
 928:	9e 3f       	cpi	r25, 0xFE	; 254
 92a:	08 f0       	brcs	.+2      	; 0x92e <__stack+0x2f>
 92c:	b0 cf       	rjmp	.-160    	; 0x88e <__addsf3+0x28>
 92e:	93 95       	inc	r25
 930:	88 0f       	add	r24, r24
 932:	08 f0       	brcs	.+2      	; 0x936 <__stack+0x37>
 934:	99 27       	eor	r25, r25
 936:	ee 0f       	add	r30, r30
 938:	97 95       	ror	r25
 93a:	87 95       	ror	r24
 93c:	08 95       	ret

0000093e <__divsf3>:
 93e:	0e 94 b3 04 	call	0x966	; 0x966 <__divsf3x>
 942:	0c 94 9b 05 	jmp	0xb36	; 0xb36 <__fp_round>
 946:	0e 94 94 05 	call	0xb28	; 0xb28 <__fp_pscB>
 94a:	58 f0       	brcs	.+22     	; 0x962 <__divsf3+0x24>
 94c:	0e 94 8d 05 	call	0xb1a	; 0xb1a <__fp_pscA>
 950:	40 f0       	brcs	.+16     	; 0x962 <__divsf3+0x24>
 952:	29 f4       	brne	.+10     	; 0x95e <__divsf3+0x20>
 954:	5f 3f       	cpi	r21, 0xFF	; 255
 956:	29 f0       	breq	.+10     	; 0x962 <__divsf3+0x24>
 958:	0c 94 84 05 	jmp	0xb08	; 0xb08 <__fp_inf>
 95c:	51 11       	cpse	r21, r1
 95e:	0c 94 cf 05 	jmp	0xb9e	; 0xb9e <__fp_szero>
 962:	0c 94 8a 05 	jmp	0xb14	; 0xb14 <__fp_nan>

00000966 <__divsf3x>:
 966:	0e 94 ac 05 	call	0xb58	; 0xb58 <__fp_split3>
 96a:	68 f3       	brcs	.-38     	; 0x946 <__divsf3+0x8>

0000096c <__divsf3_pse>:
 96c:	99 23       	and	r25, r25
 96e:	b1 f3       	breq	.-20     	; 0x95c <__divsf3+0x1e>
 970:	55 23       	and	r21, r21
 972:	91 f3       	breq	.-28     	; 0x958 <__divsf3+0x1a>
 974:	95 1b       	sub	r25, r21
 976:	55 0b       	sbc	r21, r21
 978:	bb 27       	eor	r27, r27
 97a:	aa 27       	eor	r26, r26
 97c:	62 17       	cp	r22, r18
 97e:	73 07       	cpc	r23, r19
 980:	84 07       	cpc	r24, r20
 982:	38 f0       	brcs	.+14     	; 0x992 <__divsf3_pse+0x26>
 984:	9f 5f       	subi	r25, 0xFF	; 255
 986:	5f 4f       	sbci	r21, 0xFF	; 255
 988:	22 0f       	add	r18, r18
 98a:	33 1f       	adc	r19, r19
 98c:	44 1f       	adc	r20, r20
 98e:	aa 1f       	adc	r26, r26
 990:	a9 f3       	breq	.-22     	; 0x97c <__divsf3_pse+0x10>
 992:	35 d0       	rcall	.+106    	; 0x9fe <__divsf3_pse+0x92>
 994:	0e 2e       	mov	r0, r30
 996:	3a f0       	brmi	.+14     	; 0x9a6 <__divsf3_pse+0x3a>
 998:	e0 e8       	ldi	r30, 0x80	; 128
 99a:	32 d0       	rcall	.+100    	; 0xa00 <__divsf3_pse+0x94>
 99c:	91 50       	subi	r25, 0x01	; 1
 99e:	50 40       	sbci	r21, 0x00	; 0
 9a0:	e6 95       	lsr	r30
 9a2:	00 1c       	adc	r0, r0
 9a4:	ca f7       	brpl	.-14     	; 0x998 <__divsf3_pse+0x2c>
 9a6:	2b d0       	rcall	.+86     	; 0x9fe <__divsf3_pse+0x92>
 9a8:	fe 2f       	mov	r31, r30
 9aa:	29 d0       	rcall	.+82     	; 0x9fe <__divsf3_pse+0x92>
 9ac:	66 0f       	add	r22, r22
 9ae:	77 1f       	adc	r23, r23
 9b0:	88 1f       	adc	r24, r24
 9b2:	bb 1f       	adc	r27, r27
 9b4:	26 17       	cp	r18, r22
 9b6:	37 07       	cpc	r19, r23
 9b8:	48 07       	cpc	r20, r24
 9ba:	ab 07       	cpc	r26, r27
 9bc:	b0 e8       	ldi	r27, 0x80	; 128
 9be:	09 f0       	breq	.+2      	; 0x9c2 <__divsf3_pse+0x56>
 9c0:	bb 0b       	sbc	r27, r27
 9c2:	80 2d       	mov	r24, r0
 9c4:	bf 01       	movw	r22, r30
 9c6:	ff 27       	eor	r31, r31
 9c8:	93 58       	subi	r25, 0x83	; 131
 9ca:	5f 4f       	sbci	r21, 0xFF	; 255
 9cc:	3a f0       	brmi	.+14     	; 0x9dc <__divsf3_pse+0x70>
 9ce:	9e 3f       	cpi	r25, 0xFE	; 254
 9d0:	51 05       	cpc	r21, r1
 9d2:	78 f0       	brcs	.+30     	; 0x9f2 <__divsf3_pse+0x86>
 9d4:	0c 94 84 05 	jmp	0xb08	; 0xb08 <__fp_inf>
 9d8:	0c 94 cf 05 	jmp	0xb9e	; 0xb9e <__fp_szero>
 9dc:	5f 3f       	cpi	r21, 0xFF	; 255
 9de:	e4 f3       	brlt	.-8      	; 0x9d8 <__divsf3_pse+0x6c>
 9e0:	98 3e       	cpi	r25, 0xE8	; 232
 9e2:	d4 f3       	brlt	.-12     	; 0x9d8 <__divsf3_pse+0x6c>
 9e4:	86 95       	lsr	r24
 9e6:	77 95       	ror	r23
 9e8:	67 95       	ror	r22
 9ea:	b7 95       	ror	r27
 9ec:	f7 95       	ror	r31
 9ee:	9f 5f       	subi	r25, 0xFF	; 255
 9f0:	c9 f7       	brne	.-14     	; 0x9e4 <__divsf3_pse+0x78>
 9f2:	88 0f       	add	r24, r24
 9f4:	91 1d       	adc	r25, r1
 9f6:	96 95       	lsr	r25
 9f8:	87 95       	ror	r24
 9fa:	97 f9       	bld	r25, 7
 9fc:	08 95       	ret
 9fe:	e1 e0       	ldi	r30, 0x01	; 1
 a00:	66 0f       	add	r22, r22
 a02:	77 1f       	adc	r23, r23
 a04:	88 1f       	adc	r24, r24
 a06:	bb 1f       	adc	r27, r27
 a08:	62 17       	cp	r22, r18
 a0a:	73 07       	cpc	r23, r19
 a0c:	84 07       	cpc	r24, r20
 a0e:	ba 07       	cpc	r27, r26
 a10:	20 f0       	brcs	.+8      	; 0xa1a <__divsf3_pse+0xae>
 a12:	62 1b       	sub	r22, r18
 a14:	73 0b       	sbc	r23, r19
 a16:	84 0b       	sbc	r24, r20
 a18:	ba 0b       	sbc	r27, r26
 a1a:	ee 1f       	adc	r30, r30
 a1c:	88 f7       	brcc	.-30     	; 0xa00 <__divsf3_pse+0x94>
 a1e:	e0 95       	com	r30
 a20:	08 95       	ret

00000a22 <__fixsfsi>:
 a22:	0e 94 18 05 	call	0xa30	; 0xa30 <__fixunssfsi>
 a26:	68 94       	set
 a28:	b1 11       	cpse	r27, r1
 a2a:	0c 94 cf 05 	jmp	0xb9e	; 0xb9e <__fp_szero>
 a2e:	08 95       	ret

00000a30 <__fixunssfsi>:
 a30:	0e 94 b4 05 	call	0xb68	; 0xb68 <__fp_splitA>
 a34:	88 f0       	brcs	.+34     	; 0xa58 <__fixunssfsi+0x28>
 a36:	9f 57       	subi	r25, 0x7F	; 127
 a38:	98 f0       	brcs	.+38     	; 0xa60 <__fixunssfsi+0x30>
 a3a:	b9 2f       	mov	r27, r25
 a3c:	99 27       	eor	r25, r25
 a3e:	b7 51       	subi	r27, 0x17	; 23
 a40:	b0 f0       	brcs	.+44     	; 0xa6e <__fixunssfsi+0x3e>
 a42:	e1 f0       	breq	.+56     	; 0xa7c <__fixunssfsi+0x4c>
 a44:	66 0f       	add	r22, r22
 a46:	77 1f       	adc	r23, r23
 a48:	88 1f       	adc	r24, r24
 a4a:	99 1f       	adc	r25, r25
 a4c:	1a f0       	brmi	.+6      	; 0xa54 <__fixunssfsi+0x24>
 a4e:	ba 95       	dec	r27
 a50:	c9 f7       	brne	.-14     	; 0xa44 <__fixunssfsi+0x14>
 a52:	14 c0       	rjmp	.+40     	; 0xa7c <__fixunssfsi+0x4c>
 a54:	b1 30       	cpi	r27, 0x01	; 1
 a56:	91 f0       	breq	.+36     	; 0xa7c <__fixunssfsi+0x4c>
 a58:	0e 94 ce 05 	call	0xb9c	; 0xb9c <__fp_zero>
 a5c:	b1 e0       	ldi	r27, 0x01	; 1
 a5e:	08 95       	ret
 a60:	0c 94 ce 05 	jmp	0xb9c	; 0xb9c <__fp_zero>
 a64:	67 2f       	mov	r22, r23
 a66:	78 2f       	mov	r23, r24
 a68:	88 27       	eor	r24, r24
 a6a:	b8 5f       	subi	r27, 0xF8	; 248
 a6c:	39 f0       	breq	.+14     	; 0xa7c <__fixunssfsi+0x4c>
 a6e:	b9 3f       	cpi	r27, 0xF9	; 249
 a70:	cc f3       	brlt	.-14     	; 0xa64 <__fixunssfsi+0x34>
 a72:	86 95       	lsr	r24
 a74:	77 95       	ror	r23
 a76:	67 95       	ror	r22
 a78:	b3 95       	inc	r27
 a7a:	d9 f7       	brne	.-10     	; 0xa72 <__fixunssfsi+0x42>
 a7c:	3e f4       	brtc	.+14     	; 0xa8c <__fixunssfsi+0x5c>
 a7e:	90 95       	com	r25
 a80:	80 95       	com	r24
 a82:	70 95       	com	r23
 a84:	61 95       	neg	r22
 a86:	7f 4f       	sbci	r23, 0xFF	; 255
 a88:	8f 4f       	sbci	r24, 0xFF	; 255
 a8a:	9f 4f       	sbci	r25, 0xFF	; 255
 a8c:	08 95       	ret

00000a8e <__floatunsisf>:
 a8e:	e8 94       	clt
 a90:	09 c0       	rjmp	.+18     	; 0xaa4 <__floatsisf+0x12>

00000a92 <__floatsisf>:
 a92:	97 fb       	bst	r25, 7
 a94:	3e f4       	brtc	.+14     	; 0xaa4 <__floatsisf+0x12>
 a96:	90 95       	com	r25
 a98:	80 95       	com	r24
 a9a:	70 95       	com	r23
 a9c:	61 95       	neg	r22
 a9e:	7f 4f       	sbci	r23, 0xFF	; 255
 aa0:	8f 4f       	sbci	r24, 0xFF	; 255
 aa2:	9f 4f       	sbci	r25, 0xFF	; 255
 aa4:	99 23       	and	r25, r25
 aa6:	a9 f0       	breq	.+42     	; 0xad2 <__floatsisf+0x40>
 aa8:	f9 2f       	mov	r31, r25
 aaa:	96 e9       	ldi	r25, 0x96	; 150
 aac:	bb 27       	eor	r27, r27
 aae:	93 95       	inc	r25
 ab0:	f6 95       	lsr	r31
 ab2:	87 95       	ror	r24
 ab4:	77 95       	ror	r23
 ab6:	67 95       	ror	r22
 ab8:	b7 95       	ror	r27
 aba:	f1 11       	cpse	r31, r1
 abc:	f8 cf       	rjmp	.-16     	; 0xaae <__floatsisf+0x1c>
 abe:	fa f4       	brpl	.+62     	; 0xafe <__floatsisf+0x6c>
 ac0:	bb 0f       	add	r27, r27
 ac2:	11 f4       	brne	.+4      	; 0xac8 <__floatsisf+0x36>
 ac4:	60 ff       	sbrs	r22, 0
 ac6:	1b c0       	rjmp	.+54     	; 0xafe <__floatsisf+0x6c>
 ac8:	6f 5f       	subi	r22, 0xFF	; 255
 aca:	7f 4f       	sbci	r23, 0xFF	; 255
 acc:	8f 4f       	sbci	r24, 0xFF	; 255
 ace:	9f 4f       	sbci	r25, 0xFF	; 255
 ad0:	16 c0       	rjmp	.+44     	; 0xafe <__floatsisf+0x6c>
 ad2:	88 23       	and	r24, r24
 ad4:	11 f0       	breq	.+4      	; 0xada <__floatsisf+0x48>
 ad6:	96 e9       	ldi	r25, 0x96	; 150
 ad8:	11 c0       	rjmp	.+34     	; 0xafc <__floatsisf+0x6a>
 ada:	77 23       	and	r23, r23
 adc:	21 f0       	breq	.+8      	; 0xae6 <__floatsisf+0x54>
 ade:	9e e8       	ldi	r25, 0x8E	; 142
 ae0:	87 2f       	mov	r24, r23
 ae2:	76 2f       	mov	r23, r22
 ae4:	05 c0       	rjmp	.+10     	; 0xaf0 <__floatsisf+0x5e>
 ae6:	66 23       	and	r22, r22
 ae8:	71 f0       	breq	.+28     	; 0xb06 <__floatsisf+0x74>
 aea:	96 e8       	ldi	r25, 0x86	; 134
 aec:	86 2f       	mov	r24, r22
 aee:	70 e0       	ldi	r23, 0x00	; 0
 af0:	60 e0       	ldi	r22, 0x00	; 0
 af2:	2a f0       	brmi	.+10     	; 0xafe <__floatsisf+0x6c>
 af4:	9a 95       	dec	r25
 af6:	66 0f       	add	r22, r22
 af8:	77 1f       	adc	r23, r23
 afa:	88 1f       	adc	r24, r24
 afc:	da f7       	brpl	.-10     	; 0xaf4 <__floatsisf+0x62>
 afe:	88 0f       	add	r24, r24
 b00:	96 95       	lsr	r25
 b02:	87 95       	ror	r24
 b04:	97 f9       	bld	r25, 7
 b06:	08 95       	ret

00000b08 <__fp_inf>:
 b08:	97 f9       	bld	r25, 7
 b0a:	9f 67       	ori	r25, 0x7F	; 127
 b0c:	80 e8       	ldi	r24, 0x80	; 128
 b0e:	70 e0       	ldi	r23, 0x00	; 0
 b10:	60 e0       	ldi	r22, 0x00	; 0
 b12:	08 95       	ret

00000b14 <__fp_nan>:
 b14:	9f ef       	ldi	r25, 0xFF	; 255
 b16:	80 ec       	ldi	r24, 0xC0	; 192
 b18:	08 95       	ret

00000b1a <__fp_pscA>:
 b1a:	00 24       	eor	r0, r0
 b1c:	0a 94       	dec	r0
 b1e:	16 16       	cp	r1, r22
 b20:	17 06       	cpc	r1, r23
 b22:	18 06       	cpc	r1, r24
 b24:	09 06       	cpc	r0, r25
 b26:	08 95       	ret

00000b28 <__fp_pscB>:
 b28:	00 24       	eor	r0, r0
 b2a:	0a 94       	dec	r0
 b2c:	12 16       	cp	r1, r18
 b2e:	13 06       	cpc	r1, r19
 b30:	14 06       	cpc	r1, r20
 b32:	05 06       	cpc	r0, r21
 b34:	08 95       	ret

00000b36 <__fp_round>:
 b36:	09 2e       	mov	r0, r25
 b38:	03 94       	inc	r0
 b3a:	00 0c       	add	r0, r0
 b3c:	11 f4       	brne	.+4      	; 0xb42 <__fp_round+0xc>
 b3e:	88 23       	and	r24, r24
 b40:	52 f0       	brmi	.+20     	; 0xb56 <__fp_round+0x20>
 b42:	bb 0f       	add	r27, r27
 b44:	40 f4       	brcc	.+16     	; 0xb56 <__fp_round+0x20>
 b46:	bf 2b       	or	r27, r31
 b48:	11 f4       	brne	.+4      	; 0xb4e <__fp_round+0x18>
 b4a:	60 ff       	sbrs	r22, 0
 b4c:	04 c0       	rjmp	.+8      	; 0xb56 <__fp_round+0x20>
 b4e:	6f 5f       	subi	r22, 0xFF	; 255
 b50:	7f 4f       	sbci	r23, 0xFF	; 255
 b52:	8f 4f       	sbci	r24, 0xFF	; 255
 b54:	9f 4f       	sbci	r25, 0xFF	; 255
 b56:	08 95       	ret

00000b58 <__fp_split3>:
 b58:	57 fd       	sbrc	r21, 7
 b5a:	90 58       	subi	r25, 0x80	; 128
 b5c:	44 0f       	add	r20, r20
 b5e:	55 1f       	adc	r21, r21
 b60:	59 f0       	breq	.+22     	; 0xb78 <__fp_splitA+0x10>
 b62:	5f 3f       	cpi	r21, 0xFF	; 255
 b64:	71 f0       	breq	.+28     	; 0xb82 <__fp_splitA+0x1a>
 b66:	47 95       	ror	r20

00000b68 <__fp_splitA>:
 b68:	88 0f       	add	r24, r24
 b6a:	97 fb       	bst	r25, 7
 b6c:	99 1f       	adc	r25, r25
 b6e:	61 f0       	breq	.+24     	; 0xb88 <__fp_splitA+0x20>
 b70:	9f 3f       	cpi	r25, 0xFF	; 255
 b72:	79 f0       	breq	.+30     	; 0xb92 <__fp_splitA+0x2a>
 b74:	87 95       	ror	r24
 b76:	08 95       	ret
 b78:	12 16       	cp	r1, r18
 b7a:	13 06       	cpc	r1, r19
 b7c:	14 06       	cpc	r1, r20
 b7e:	55 1f       	adc	r21, r21
 b80:	f2 cf       	rjmp	.-28     	; 0xb66 <__fp_split3+0xe>
 b82:	46 95       	lsr	r20
 b84:	f1 df       	rcall	.-30     	; 0xb68 <__fp_splitA>
 b86:	08 c0       	rjmp	.+16     	; 0xb98 <__fp_splitA+0x30>
 b88:	16 16       	cp	r1, r22
 b8a:	17 06       	cpc	r1, r23
 b8c:	18 06       	cpc	r1, r24
 b8e:	99 1f       	adc	r25, r25
 b90:	f1 cf       	rjmp	.-30     	; 0xb74 <__fp_splitA+0xc>
 b92:	86 95       	lsr	r24
 b94:	71 05       	cpc	r23, r1
 b96:	61 05       	cpc	r22, r1
 b98:	08 94       	sec
 b9a:	08 95       	ret

00000b9c <__fp_zero>:
 b9c:	e8 94       	clt

00000b9e <__fp_szero>:
 b9e:	bb 27       	eor	r27, r27
 ba0:	66 27       	eor	r22, r22
 ba2:	77 27       	eor	r23, r23
 ba4:	cb 01       	movw	r24, r22
 ba6:	97 f9       	bld	r25, 7
 ba8:	08 95       	ret

00000baa <__gesf2>:
 baa:	0e 94 4f 06 	call	0xc9e	; 0xc9e <__fp_cmp>
 bae:	08 f4       	brcc	.+2      	; 0xbb2 <__gesf2+0x8>
 bb0:	8f ef       	ldi	r24, 0xFF	; 255
 bb2:	08 95       	ret

00000bb4 <__mulsf3>:
 bb4:	0e 94 ed 05 	call	0xbda	; 0xbda <__mulsf3x>
 bb8:	0c 94 9b 05 	jmp	0xb36	; 0xb36 <__fp_round>
 bbc:	0e 94 8d 05 	call	0xb1a	; 0xb1a <__fp_pscA>
 bc0:	38 f0       	brcs	.+14     	; 0xbd0 <__mulsf3+0x1c>
 bc2:	0e 94 94 05 	call	0xb28	; 0xb28 <__fp_pscB>
 bc6:	20 f0       	brcs	.+8      	; 0xbd0 <__mulsf3+0x1c>
 bc8:	95 23       	and	r25, r21
 bca:	11 f0       	breq	.+4      	; 0xbd0 <__mulsf3+0x1c>
 bcc:	0c 94 84 05 	jmp	0xb08	; 0xb08 <__fp_inf>
 bd0:	0c 94 8a 05 	jmp	0xb14	; 0xb14 <__fp_nan>
 bd4:	11 24       	eor	r1, r1
 bd6:	0c 94 cf 05 	jmp	0xb9e	; 0xb9e <__fp_szero>

00000bda <__mulsf3x>:
 bda:	0e 94 ac 05 	call	0xb58	; 0xb58 <__fp_split3>
 bde:	70 f3       	brcs	.-36     	; 0xbbc <__mulsf3+0x8>

00000be0 <__mulsf3_pse>:
 be0:	95 9f       	mul	r25, r21
 be2:	c1 f3       	breq	.-16     	; 0xbd4 <__mulsf3+0x20>
 be4:	95 0f       	add	r25, r21
 be6:	50 e0       	ldi	r21, 0x00	; 0
 be8:	55 1f       	adc	r21, r21
 bea:	62 9f       	mul	r22, r18
 bec:	f0 01       	movw	r30, r0
 bee:	72 9f       	mul	r23, r18
 bf0:	bb 27       	eor	r27, r27
 bf2:	f0 0d       	add	r31, r0
 bf4:	b1 1d       	adc	r27, r1
 bf6:	63 9f       	mul	r22, r19
 bf8:	aa 27       	eor	r26, r26
 bfa:	f0 0d       	add	r31, r0
 bfc:	b1 1d       	adc	r27, r1
 bfe:	aa 1f       	adc	r26, r26
 c00:	64 9f       	mul	r22, r20
 c02:	66 27       	eor	r22, r22
 c04:	b0 0d       	add	r27, r0
 c06:	a1 1d       	adc	r26, r1
 c08:	66 1f       	adc	r22, r22
 c0a:	82 9f       	mul	r24, r18
 c0c:	22 27       	eor	r18, r18
 c0e:	b0 0d       	add	r27, r0
 c10:	a1 1d       	adc	r26, r1
 c12:	62 1f       	adc	r22, r18
 c14:	73 9f       	mul	r23, r19
 c16:	b0 0d       	add	r27, r0
 c18:	a1 1d       	adc	r26, r1
 c1a:	62 1f       	adc	r22, r18
 c1c:	83 9f       	mul	r24, r19
 c1e:	a0 0d       	add	r26, r0
 c20:	61 1d       	adc	r22, r1
 c22:	22 1f       	adc	r18, r18
 c24:	74 9f       	mul	r23, r20
 c26:	33 27       	eor	r19, r19
 c28:	a0 0d       	add	r26, r0
 c2a:	61 1d       	adc	r22, r1
 c2c:	23 1f       	adc	r18, r19
 c2e:	84 9f       	mul	r24, r20
 c30:	60 0d       	add	r22, r0
 c32:	21 1d       	adc	r18, r1
 c34:	82 2f       	mov	r24, r18
 c36:	76 2f       	mov	r23, r22
 c38:	6a 2f       	mov	r22, r26
 c3a:	11 24       	eor	r1, r1
 c3c:	9f 57       	subi	r25, 0x7F	; 127
 c3e:	50 40       	sbci	r21, 0x00	; 0
 c40:	9a f0       	brmi	.+38     	; 0xc68 <__mulsf3_pse+0x88>
 c42:	f1 f0       	breq	.+60     	; 0xc80 <__mulsf3_pse+0xa0>
 c44:	88 23       	and	r24, r24
 c46:	4a f0       	brmi	.+18     	; 0xc5a <__mulsf3_pse+0x7a>
 c48:	ee 0f       	add	r30, r30
 c4a:	ff 1f       	adc	r31, r31
 c4c:	bb 1f       	adc	r27, r27
 c4e:	66 1f       	adc	r22, r22
 c50:	77 1f       	adc	r23, r23
 c52:	88 1f       	adc	r24, r24
 c54:	91 50       	subi	r25, 0x01	; 1
 c56:	50 40       	sbci	r21, 0x00	; 0
 c58:	a9 f7       	brne	.-22     	; 0xc44 <__mulsf3_pse+0x64>
 c5a:	9e 3f       	cpi	r25, 0xFE	; 254
 c5c:	51 05       	cpc	r21, r1
 c5e:	80 f0       	brcs	.+32     	; 0xc80 <__mulsf3_pse+0xa0>
 c60:	0c 94 84 05 	jmp	0xb08	; 0xb08 <__fp_inf>
 c64:	0c 94 cf 05 	jmp	0xb9e	; 0xb9e <__fp_szero>
 c68:	5f 3f       	cpi	r21, 0xFF	; 255
 c6a:	e4 f3       	brlt	.-8      	; 0xc64 <__mulsf3_pse+0x84>
 c6c:	98 3e       	cpi	r25, 0xE8	; 232
 c6e:	d4 f3       	brlt	.-12     	; 0xc64 <__mulsf3_pse+0x84>
 c70:	86 95       	lsr	r24
 c72:	77 95       	ror	r23
 c74:	67 95       	ror	r22
 c76:	b7 95       	ror	r27
 c78:	f7 95       	ror	r31
 c7a:	e7 95       	ror	r30
 c7c:	9f 5f       	subi	r25, 0xFF	; 255
 c7e:	c1 f7       	brne	.-16     	; 0xc70 <__mulsf3_pse+0x90>
 c80:	fe 2b       	or	r31, r30
 c82:	88 0f       	add	r24, r24
 c84:	91 1d       	adc	r25, r1
 c86:	96 95       	lsr	r25
 c88:	87 95       	ror	r24
 c8a:	97 f9       	bld	r25, 7
 c8c:	08 95       	ret

00000c8e <sin>:
 c8e:	9f 93       	push	r25
 c90:	0e 94 75 06 	call	0xcea	; 0xcea <__fp_rempio2>
 c94:	0f 90       	pop	r0
 c96:	07 fc       	sbrc	r0, 7
 c98:	ee 5f       	subi	r30, 0xFE	; 254
 c9a:	0c 94 9e 06 	jmp	0xd3c	; 0xd3c <__fp_sinus>

00000c9e <__fp_cmp>:
 c9e:	99 0f       	add	r25, r25
 ca0:	00 08       	sbc	r0, r0
 ca2:	55 0f       	add	r21, r21
 ca4:	aa 0b       	sbc	r26, r26
 ca6:	e0 e8       	ldi	r30, 0x80	; 128
 ca8:	fe ef       	ldi	r31, 0xFE	; 254
 caa:	16 16       	cp	r1, r22
 cac:	17 06       	cpc	r1, r23
 cae:	e8 07       	cpc	r30, r24
 cb0:	f9 07       	cpc	r31, r25
 cb2:	c0 f0       	brcs	.+48     	; 0xce4 <__fp_cmp+0x46>
 cb4:	12 16       	cp	r1, r18
 cb6:	13 06       	cpc	r1, r19
 cb8:	e4 07       	cpc	r30, r20
 cba:	f5 07       	cpc	r31, r21
 cbc:	98 f0       	brcs	.+38     	; 0xce4 <__fp_cmp+0x46>
 cbe:	62 1b       	sub	r22, r18
 cc0:	73 0b       	sbc	r23, r19
 cc2:	84 0b       	sbc	r24, r20
 cc4:	95 0b       	sbc	r25, r21
 cc6:	39 f4       	brne	.+14     	; 0xcd6 <__fp_cmp+0x38>
 cc8:	0a 26       	eor	r0, r26
 cca:	61 f0       	breq	.+24     	; 0xce4 <__fp_cmp+0x46>
 ccc:	23 2b       	or	r18, r19
 cce:	24 2b       	or	r18, r20
 cd0:	25 2b       	or	r18, r21
 cd2:	21 f4       	brne	.+8      	; 0xcdc <__fp_cmp+0x3e>
 cd4:	08 95       	ret
 cd6:	0a 26       	eor	r0, r26
 cd8:	09 f4       	brne	.+2      	; 0xcdc <__fp_cmp+0x3e>
 cda:	a1 40       	sbci	r26, 0x01	; 1
 cdc:	a6 95       	lsr	r26
 cde:	8f ef       	ldi	r24, 0xFF	; 255
 ce0:	81 1d       	adc	r24, r1
 ce2:	81 1d       	adc	r24, r1
 ce4:	08 95       	ret
 ce6:	0c 94 8a 05 	jmp	0xb14	; 0xb14 <__fp_nan>

00000cea <__fp_rempio2>:
 cea:	0e 94 b4 05 	call	0xb68	; 0xb68 <__fp_splitA>
 cee:	d8 f3       	brcs	.-10     	; 0xce6 <__fp_cmp+0x48>
 cf0:	e8 94       	clt
 cf2:	e0 e0       	ldi	r30, 0x00	; 0
 cf4:	bb 27       	eor	r27, r27
 cf6:	9f 57       	subi	r25, 0x7F	; 127
 cf8:	f0 f0       	brcs	.+60     	; 0xd36 <__fp_rempio2+0x4c>
 cfa:	2a ed       	ldi	r18, 0xDA	; 218
 cfc:	3f e0       	ldi	r19, 0x0F	; 15
 cfe:	49 ec       	ldi	r20, 0xC9	; 201
 d00:	06 c0       	rjmp	.+12     	; 0xd0e <__fp_rempio2+0x24>
 d02:	ee 0f       	add	r30, r30
 d04:	bb 0f       	add	r27, r27
 d06:	66 1f       	adc	r22, r22
 d08:	77 1f       	adc	r23, r23
 d0a:	88 1f       	adc	r24, r24
 d0c:	28 f0       	brcs	.+10     	; 0xd18 <__fp_rempio2+0x2e>
 d0e:	b2 3a       	cpi	r27, 0xA2	; 162
 d10:	62 07       	cpc	r22, r18
 d12:	73 07       	cpc	r23, r19
 d14:	84 07       	cpc	r24, r20
 d16:	28 f0       	brcs	.+10     	; 0xd22 <__fp_rempio2+0x38>
 d18:	b2 5a       	subi	r27, 0xA2	; 162
 d1a:	62 0b       	sbc	r22, r18
 d1c:	73 0b       	sbc	r23, r19
 d1e:	84 0b       	sbc	r24, r20
 d20:	e3 95       	inc	r30
 d22:	9a 95       	dec	r25
 d24:	72 f7       	brpl	.-36     	; 0xd02 <__fp_rempio2+0x18>
 d26:	80 38       	cpi	r24, 0x80	; 128
 d28:	30 f4       	brcc	.+12     	; 0xd36 <__fp_rempio2+0x4c>
 d2a:	9a 95       	dec	r25
 d2c:	bb 0f       	add	r27, r27
 d2e:	66 1f       	adc	r22, r22
 d30:	77 1f       	adc	r23, r23
 d32:	88 1f       	adc	r24, r24
 d34:	d2 f7       	brpl	.-12     	; 0xd2a <__fp_rempio2+0x40>
 d36:	90 48       	sbci	r25, 0x80	; 128
 d38:	0c 94 b4 06 	jmp	0xd68	; 0xd68 <__fp_mpack_finite>

00000d3c <__fp_sinus>:
 d3c:	ef 93       	push	r30
 d3e:	e0 ff       	sbrs	r30, 0
 d40:	07 c0       	rjmp	.+14     	; 0xd50 <__fp_sinus+0x14>
 d42:	a2 ea       	ldi	r26, 0xA2	; 162
 d44:	2a ed       	ldi	r18, 0xDA	; 218
 d46:	3f e0       	ldi	r19, 0x0F	; 15
 d48:	49 ec       	ldi	r20, 0xC9	; 201
 d4a:	5f eb       	ldi	r21, 0xBF	; 191
 d4c:	0e 94 4a 04 	call	0x894	; 0x894 <__addsf3x>
 d50:	0e 94 9b 05 	call	0xb36	; 0xb36 <__fp_round>
 d54:	0f 90       	pop	r0
 d56:	03 94       	inc	r0
 d58:	01 fc       	sbrc	r0, 1
 d5a:	90 58       	subi	r25, 0x80	; 128
 d5c:	e8 e6       	ldi	r30, 0x68	; 104
 d5e:	f0 e0       	ldi	r31, 0x00	; 0
 d60:	0c 94 c0 06 	jmp	0xd80	; 0xd80 <__fp_powsodd>

00000d64 <__fp_mpack>:
 d64:	9f 3f       	cpi	r25, 0xFF	; 255
 d66:	31 f0       	breq	.+12     	; 0xd74 <__fp_mpack_finite+0xc>

00000d68 <__fp_mpack_finite>:
 d68:	91 50       	subi	r25, 0x01	; 1
 d6a:	20 f4       	brcc	.+8      	; 0xd74 <__fp_mpack_finite+0xc>
 d6c:	87 95       	ror	r24
 d6e:	77 95       	ror	r23
 d70:	67 95       	ror	r22
 d72:	b7 95       	ror	r27
 d74:	88 0f       	add	r24, r24
 d76:	91 1d       	adc	r25, r1
 d78:	96 95       	lsr	r25
 d7a:	87 95       	ror	r24
 d7c:	97 f9       	bld	r25, 7
 d7e:	08 95       	ret

00000d80 <__fp_powsodd>:
 d80:	9f 93       	push	r25
 d82:	8f 93       	push	r24
 d84:	7f 93       	push	r23
 d86:	6f 93       	push	r22
 d88:	ff 93       	push	r31
 d8a:	ef 93       	push	r30
 d8c:	9b 01       	movw	r18, r22
 d8e:	ac 01       	movw	r20, r24
 d90:	0e 94 da 05 	call	0xbb4	; 0xbb4 <__mulsf3>
 d94:	ef 91       	pop	r30
 d96:	ff 91       	pop	r31
 d98:	0e 94 d4 06 	call	0xda8	; 0xda8 <__fp_powser>
 d9c:	2f 91       	pop	r18
 d9e:	3f 91       	pop	r19
 da0:	4f 91       	pop	r20
 da2:	5f 91       	pop	r21
 da4:	0c 94 da 05 	jmp	0xbb4	; 0xbb4 <__mulsf3>

00000da8 <__fp_powser>:
 da8:	df 93       	push	r29
 daa:	cf 93       	push	r28
 dac:	1f 93       	push	r17
 dae:	0f 93       	push	r16
 db0:	ff 92       	push	r15
 db2:	ef 92       	push	r14
 db4:	df 92       	push	r13
 db6:	7b 01       	movw	r14, r22
 db8:	8c 01       	movw	r16, r24
 dba:	68 94       	set
 dbc:	06 c0       	rjmp	.+12     	; 0xdca <__fp_powser+0x22>
 dbe:	da 2e       	mov	r13, r26
 dc0:	ef 01       	movw	r28, r30
 dc2:	0e 94 ed 05 	call	0xbda	; 0xbda <__mulsf3x>
 dc6:	fe 01       	movw	r30, r28
 dc8:	e8 94       	clt
 dca:	a5 91       	lpm	r26, Z+
 dcc:	25 91       	lpm	r18, Z+
 dce:	35 91       	lpm	r19, Z+
 dd0:	45 91       	lpm	r20, Z+
 dd2:	55 91       	lpm	r21, Z+
 dd4:	a6 f3       	brts	.-24     	; 0xdbe <__fp_powser+0x16>
 dd6:	ef 01       	movw	r28, r30
 dd8:	0e 94 4a 04 	call	0x894	; 0x894 <__addsf3x>
 ddc:	fe 01       	movw	r30, r28
 dde:	97 01       	movw	r18, r14
 de0:	a8 01       	movw	r20, r16
 de2:	da 94       	dec	r13
 de4:	69 f7       	brne	.-38     	; 0xdc0 <__fp_powser+0x18>
 de6:	df 90       	pop	r13
 de8:	ef 90       	pop	r14
 dea:	ff 90       	pop	r15
 dec:	0f 91       	pop	r16
 dee:	1f 91       	pop	r17
 df0:	cf 91       	pop	r28
 df2:	df 91       	pop	r29
 df4:	08 95       	ret

00000df6 <__divmodhi4>:
 df6:	97 fb       	bst	r25, 7
 df8:	07 2e       	mov	r0, r23
 dfa:	16 f4       	brtc	.+4      	; 0xe00 <__divmodhi4+0xa>
 dfc:	00 94       	com	r0
 dfe:	07 d0       	rcall	.+14     	; 0xe0e <__divmodhi4_neg1>
 e00:	77 fd       	sbrc	r23, 7
 e02:	09 d0       	rcall	.+18     	; 0xe16 <__divmodhi4_neg2>
 e04:	0e 94 0f 07 	call	0xe1e	; 0xe1e <__udivmodhi4>
 e08:	07 fc       	sbrc	r0, 7
 e0a:	05 d0       	rcall	.+10     	; 0xe16 <__divmodhi4_neg2>
 e0c:	3e f4       	brtc	.+14     	; 0xe1c <__divmodhi4_exit>

00000e0e <__divmodhi4_neg1>:
 e0e:	90 95       	com	r25
 e10:	81 95       	neg	r24
 e12:	9f 4f       	sbci	r25, 0xFF	; 255
 e14:	08 95       	ret

00000e16 <__divmodhi4_neg2>:
 e16:	70 95       	com	r23
 e18:	61 95       	neg	r22
 e1a:	7f 4f       	sbci	r23, 0xFF	; 255

00000e1c <__divmodhi4_exit>:
 e1c:	08 95       	ret

00000e1e <__udivmodhi4>:
 e1e:	aa 1b       	sub	r26, r26
 e20:	bb 1b       	sub	r27, r27
 e22:	51 e1       	ldi	r21, 0x11	; 17
 e24:	07 c0       	rjmp	.+14     	; 0xe34 <__udivmodhi4_ep>

00000e26 <__udivmodhi4_loop>:
 e26:	aa 1f       	adc	r26, r26
 e28:	bb 1f       	adc	r27, r27
 e2a:	a6 17       	cp	r26, r22
 e2c:	b7 07       	cpc	r27, r23
 e2e:	10 f0       	brcs	.+4      	; 0xe34 <__udivmodhi4_ep>
 e30:	a6 1b       	sub	r26, r22
 e32:	b7 0b       	sbc	r27, r23

00000e34 <__udivmodhi4_ep>:
 e34:	88 1f       	adc	r24, r24
 e36:	99 1f       	adc	r25, r25
 e38:	5a 95       	dec	r21
 e3a:	a9 f7       	brne	.-22     	; 0xe26 <__udivmodhi4_loop>
 e3c:	80 95       	com	r24
 e3e:	90 95       	com	r25
 e40:	bc 01       	movw	r22, r24
 e42:	cd 01       	movw	r24, r26
 e44:	08 95       	ret

00000e46 <_exit>:
 e46:	f8 94       	cli

00000e48 <__stop_program>:
 e48:	ff cf       	rjmp	.-2      	; 0xe48 <__stop_program>
