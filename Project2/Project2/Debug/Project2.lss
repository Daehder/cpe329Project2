
Project2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000008d2  00000966  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008d2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000641  00800102  00800102  00000968  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000968  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000998  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  000009d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000079e  00000000  00000000  00000a98  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000038d  00000000  00000000  00001236  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003cf  00000000  00000000  000015c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000214  00000000  00000000  00001994  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000314  00000000  00000000  00001ba8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000051c  00000000  00000000  00001ebc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  000023d8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 43 00 	jmp	0x86	; 0x86 <__ctors_end>
   4:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
   8:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
   c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  10:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  14:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  18:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  1c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  20:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  24:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  28:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  2c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  30:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  34:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  38:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__vector_14>
  3c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  40:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  44:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  48:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  4c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  50:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  54:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  58:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  5c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  60:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  64:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  68:	05 a8       	ldd	r0, Z+53	; 0x35
  6a:	4c cd       	rjmp	.-1384   	; 0xfffffb04 <__eeprom_end+0xff7efb04>
  6c:	b2 d4       	rcall	.+2404   	; 0x9d2 <__stack+0xd3>
  6e:	4e b9       	out	0x0e, r20	; 14
  70:	38 36       	cpi	r19, 0x68	; 104
  72:	a9 02       	muls	r26, r25
  74:	0c 50       	subi	r16, 0x0C	; 12
  76:	b9 91       	ld	r27, Y+
  78:	86 88       	ldd	r8, Z+22	; 0x16
  7a:	08 3c       	cpi	r16, 0xC8	; 200
  7c:	a6 aa       	std	Z+54, r10	; 0x36
  7e:	aa 2a       	or	r10, r26
  80:	be 00       	.word	0x00be	; ????
  82:	00 00       	nop
  84:	80 3f       	cpi	r24, 0xF0	; 240

00000086 <__ctors_end>:
  86:	11 24       	eor	r1, r1
  88:	1f be       	out	0x3f, r1	; 63
  8a:	cf ef       	ldi	r28, 0xFF	; 255
  8c:	d8 e0       	ldi	r29, 0x08	; 8
  8e:	de bf       	out	0x3e, r29	; 62
  90:	cd bf       	out	0x3d, r28	; 61

00000092 <__do_copy_data>:
  92:	11 e0       	ldi	r17, 0x01	; 1
  94:	a0 e0       	ldi	r26, 0x00	; 0
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	e2 ed       	ldi	r30, 0xD2	; 210
  9a:	f8 e0       	ldi	r31, 0x08	; 8
  9c:	02 c0       	rjmp	.+4      	; 0xa2 <__do_copy_data+0x10>
  9e:	05 90       	lpm	r0, Z+
  a0:	0d 92       	st	X+, r0
  a2:	a2 30       	cpi	r26, 0x02	; 2
  a4:	b1 07       	cpc	r27, r17
  a6:	d9 f7       	brne	.-10     	; 0x9e <__do_copy_data+0xc>

000000a8 <__do_clear_bss>:
  a8:	27 e0       	ldi	r18, 0x07	; 7
  aa:	a2 e0       	ldi	r26, 0x02	; 2
  ac:	b1 e0       	ldi	r27, 0x01	; 1
  ae:	01 c0       	rjmp	.+2      	; 0xb2 <.do_clear_bss_start>

000000b0 <.do_clear_bss_loop>:
  b0:	1d 92       	st	X+, r1

000000b2 <.do_clear_bss_start>:
  b2:	a3 34       	cpi	r26, 0x43	; 67
  b4:	b2 07       	cpc	r27, r18
  b6:	e1 f7       	brne	.-8      	; 0xb0 <.do_clear_bss_loop>
  b8:	0e 94 c7 00 	call	0x18e	; 0x18e <main>
  bc:	0c 94 67 04 	jmp	0x8ce	; 0x8ce <_exit>

000000c0 <__bad_interrupt>:
  c0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c4 <Initialize_SPI_Master>:
#define BTN1 1                      // Button 1 is at pin 1
#define ANALOGIN0 0                 // analog input at pin A0

// sets up SPI system between ATmega328P and slave device(s)
void Initialize_SPI_Master(){
   SPCR = (0<<SPIE) |               // No interrupts
  c4:	80 e5       	ldi	r24, 0x50	; 80
  c6:	8c bd       	out	0x2c, r24	; 44
   (1<<SPE) |                       // SPI enabled
   (1<<MSTR) ;                      // master
   SPSR = 0x00;                     // clear flags
  c8:	1d bc       	out	0x2d, r1	; 45
   PORTB = 1 << SS;                 // make sure SS is high
  ca:	84 e0       	ldi	r24, 0x04	; 4
  cc:	85 b9       	out	0x05, r24	; 5
  ce:	08 95       	ret

000000d0 <initTimer0>:
}

// Initializing timer 0 (change OCR0A for freq change!!!!!)
void initTimer0(){
   TCCR0A = 0x02;                   // timer CTC mode
  d0:	82 e0       	ldi	r24, 0x02	; 2
  d2:	84 bd       	out	0x24, r24	; 36
   OCR0A = overflow_100Hz;          // sets counter overflow to 250
  d4:	90 91 00 01 	lds	r25, 0x0100
  d8:	97 bd       	out	0x27, r25	; 39
   TCCR0B = 0x02;                   // timer clk = system clk / 8 (2MHz)
  da:	85 bd       	out	0x25, r24	; 37
   TIFR0 = 0x02;                    // Interrupt occurs at OCRF0A overflow
  dc:	85 bb       	out	0x15, r24	; 21
   TIMSK0 = 0x02;                   // OCRF0A overflow interrupt enabled
  de:	80 93 6e 00 	sts	0x006E, r24
  e2:	08 95       	ret

000000e4 <GPIO_Initialization>:
}


// initializes GPIO I/O, SPI interface, and interrupts
void GPIO_Initialization(){
   DDRB |= (1<<MOSI) | (1<<SCK) | (1<<SS);	// make MOSI, SCK and SS outputs
  e4:	84 b1       	in	r24, 0x04	; 4
  e6:	8c 62       	ori	r24, 0x2C	; 44
  e8:	84 b9       	out	0x04, r24	; 4
   DDRB &= ~(1<<BTN1) | ~(1<<BTN1);	// set buttons as inputs
  ea:	21 98       	cbi	0x04, 1	; 4
   PORTB |= (1<<BTN0) | (1<<BTN1);	// set internal pull-ups
  ec:	85 b1       	in	r24, 0x05	; 5
  ee:	83 60       	ori	r24, 0x03	; 3
  f0:	85 b9       	out	0x05, r24	; 5
   Initialize_SPI_Master();			// initialize SPI to DAC
  f2:	0e 94 62 00 	call	0xc4	; 0xc4 <Initialize_SPI_Master>
   initTimer0();							// initialize timer0
  f6:	0e 94 68 00 	call	0xd0	; 0xd0 <initTimer0>
   sei();									// enable interrupts
  fa:	78 94       	sei
  fc:	08 95       	ret

000000fe <check_buttons>:
}

// returns a true bool if a buttons is pressed
uint8_t check_buttons(){
   if (!(PIND & (1<<BTN0)))          // return 1 if button at pin0 is pressed
  fe:	48 9b       	sbis	0x09, 0	; 9
 100:	04 c0       	rjmp	.+8      	; 0x10a <check_buttons+0xc>
      return 1;
   else if(!(PIND & (1<<BTN1)))     // return 2 if button at pin1 is pressed
 102:	49 9b       	sbis	0x09, 1	; 9
 104:	04 c0       	rjmp	.+8      	; 0x10e <check_buttons+0x10>
      return 2;
   else
      return 0;                     // return 0 if no buttons are pressed
 106:	80 e0       	ldi	r24, 0x00	; 0
 108:	08 95       	ret
}

// returns a true bool if a buttons is pressed
uint8_t check_buttons(){
   if (!(PIND & (1<<BTN0)))          // return 1 if button at pin0 is pressed
      return 1;
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	08 95       	ret
   else if(!(PIND & (1<<BTN1)))     // return 2 if button at pin1 is pressed
      return 2;
 10e:	82 e0       	ldi	r24, 0x02	; 2
   else
      return 0;                     // return 0 if no buttons are pressed
}
 110:	08 95       	ret

00000112 <Transmit_SPI_Master>:

// sends data to DAC over SPI data port
void Transmit_SPI_Master(int Data) {
   PORTB &= ~(1 << SS);					//Assert slave select (active low)
 112:	2a 98       	cbi	0x05, 2	; 5
   SPDR = ((Data >> 8) & 0xF) | 0x70;		//Attach configuration Bits onto MSB
 114:	9f 70       	andi	r25, 0x0F	; 15
 116:	90 67       	ori	r25, 0x70	; 112
 118:	9e bd       	out	0x2e, r25	; 46
   while (!(SPSR & (1<<SPIF)))
 11a:	0d b4       	in	r0, 0x2d	; 45
 11c:	07 fe       	sbrs	r0, 7
 11e:	fd cf       	rjmp	.-6      	; 0x11a <Transmit_SPI_Master+0x8>
      ;
   SPDR = 0xFF & Data;
 120:	8e bd       	out	0x2e, r24	; 46
   while (!(SPSR & (1<<SPIF)))
 122:	0d b4       	in	r0, 0x2d	; 45
 124:	07 fe       	sbrs	r0, 7
 126:	fd cf       	rjmp	.-6      	; 0x122 <Transmit_SPI_Master+0x10>
      ;
   PORTB |= 1 << SS;						//Turn off slave select
 128:	2a 9a       	sbi	0x05, 2	; 5
 12a:	08 95       	ret

0000012c <volts_to_bits>:
      _delay_ms(1);

}

// converts input voltage between 0-5V to 12bit number for DAC
uint16_t volts_to_bits(double voltage){
 12c:	cf 92       	push	r12
 12e:	df 92       	push	r13
 130:	ef 92       	push	r14
 132:	ff 92       	push	r15
   double bits = ((voltage/5.0)*4095);
 134:	20 e0       	ldi	r18, 0x00	; 0
 136:	30 e0       	ldi	r19, 0x00	; 0
 138:	40 ea       	ldi	r20, 0xA0	; 160
 13a:	50 e4       	ldi	r21, 0x40	; 64
 13c:	0e 94 4f 02 	call	0x49e	; 0x49e <__divsf3>
 140:	20 e0       	ldi	r18, 0x00	; 0
 142:	30 ef       	ldi	r19, 0xF0	; 240
 144:	4f e7       	ldi	r20, 0x7F	; 127
 146:	55 e4       	ldi	r21, 0x45	; 69
 148:	0e 94 46 03 	call	0x68c	; 0x68c <__mulsf3>
 14c:	6b 01       	movw	r12, r22
 14e:	7c 01       	movw	r14, r24
   if(bits>4095)
 150:	20 e0       	ldi	r18, 0x00	; 0
 152:	30 ef       	ldi	r19, 0xF0	; 240
 154:	4f e7       	ldi	r20, 0x7F	; 127
 156:	55 e4       	ldi	r21, 0x45	; 69
 158:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
 15c:	18 16       	cp	r1, r24
 15e:	34 f0       	brlt	.+12     	; 0x16c <volts_to_bits+0x40>
		return 4095;
	else
	 return bits;                  // return 12bit equivalent for DAC
 160:	c7 01       	movw	r24, r14
 162:	b6 01       	movw	r22, r12
 164:	0e 94 c1 02 	call	0x582	; 0x582 <__fixunssfsi>
 168:	cb 01       	movw	r24, r22
 16a:	02 c0       	rjmp	.+4      	; 0x170 <volts_to_bits+0x44>

// converts input voltage between 0-5V to 12bit number for DAC
uint16_t volts_to_bits(double voltage){
   double bits = ((voltage/5.0)*4095);
   if(bits>4095)
		return 4095;
 16c:	8f ef       	ldi	r24, 0xFF	; 255
 16e:	9f e0       	ldi	r25, 0x0F	; 15
	else
	 return bits;                  // return 12bit equivalent for DAC
 170:	ff 90       	pop	r15
 172:	ef 90       	pop	r14
 174:	df 90       	pop	r13
 176:	cf 90       	pop	r12
 178:	08 95       	ret

0000017a <genorate_LUTs>:
   return 0;
}

// fills all the lookup tables for every wave
void genorate_LUTs(){
   make_square_LUT();		// fill square wave LUT
 17a:	0e 94 0a 01 	call	0x214	; 0x214 <make_square_LUT>
   make_sawtooth_LUT();	// fill sawtooth wave LUT
 17e:	0e 94 75 01 	call	0x2ea	; 0x2ea <make_sawtooth_LUT>
   make_triangle_LUT();	// fill triangle wave LUT
 182:	0e 94 30 01 	call	0x260	; 0x260 <make_triangle_LUT>
   make_sin_LUT();			// fill sine wave LUT
 186:	0e 94 a5 01 	call	0x34a	; 0x34a <make_sin_LUT>
   sei();
 18a:	78 94       	sei
 18c:	08 95       	ret

0000018e <main>:
uint8_t LUT_address = 0;

int main(void)
{
   // initialize GPIO, interrupts, and timers
   GPIO_Initialization();
 18e:	0e 94 72 00 	call	0xe4	; 0xe4 <GPIO_Initialization>
   
   // fill square, sawtooth, triangle, and sine wave LUTs
   genorate_LUTs();
 192:	0e 94 bd 00 	call	0x17a	; 0x17a <genorate_LUTs>
   
   while (1){
      if(check_buttons())
 196:	0e 94 7f 00 	call	0xfe	; 0xfe <check_buttons>
 19a:	88 23       	and	r24, r24
 19c:	11 f0       	breq	.+4      	; 0x1a2 <main+0x14>
         PORTB |= (1<<LED12);
 19e:	2f 9a       	sbi	0x05, 7	; 5
 1a0:	fa cf       	rjmp	.-12     	; 0x196 <main+0x8>
      else
         PORTB &= ~(1<<LED12);
 1a2:	2f 98       	cbi	0x05, 7	; 5
 1a4:	f8 cf       	rjmp	.-16     	; 0x196 <main+0x8>

000001a6 <__vector_14>:

///////////////////////////////////ISR/////////////////////////////////////////


// ISR to increment through wave function LUTs and set frequency
ISR(TIMER0_COMPA_vect){
 1a6:	1f 92       	push	r1
 1a8:	0f 92       	push	r0
 1aa:	0f b6       	in	r0, 0x3f	; 63
 1ac:	0f 92       	push	r0
 1ae:	11 24       	eor	r1, r1
 1b0:	2f 93       	push	r18
 1b2:	3f 93       	push	r19
 1b4:	4f 93       	push	r20
 1b6:	5f 93       	push	r21
 1b8:	6f 93       	push	r22
 1ba:	7f 93       	push	r23
 1bc:	8f 93       	push	r24
 1be:	9f 93       	push	r25
 1c0:	af 93       	push	r26
 1c2:	bf 93       	push	r27
 1c4:	ef 93       	push	r30
 1c6:	ff 93       	push	r31
   Transmit_SPI_Master(SinWave[LUT_address]);
 1c8:	e0 91 02 01 	lds	r30, 0x0102
 1cc:	f0 e0       	ldi	r31, 0x00	; 0
 1ce:	ee 0f       	add	r30, r30
 1d0:	ff 1f       	adc	r31, r31
 1d2:	ed 5f       	subi	r30, 0xFD	; 253
 1d4:	fe 4f       	sbci	r31, 0xFE	; 254
 1d6:	80 81       	ld	r24, Z
 1d8:	91 81       	ldd	r25, Z+1	; 0x01
 1da:	0e 94 89 00 	call	0x112	; 0x112 <Transmit_SPI_Master>
   LUT_address++;
 1de:	80 91 02 01 	lds	r24, 0x0102
 1e2:	8f 5f       	subi	r24, 0xFF	; 255
   
   if (LUT_address>=NUM_SAMPLES)
 1e4:	88 3c       	cpi	r24, 0xC8	; 200
 1e6:	18 f4       	brcc	.+6      	; 0x1ee <__vector_14+0x48>


// ISR to increment through wave function LUTs and set frequency
ISR(TIMER0_COMPA_vect){
   Transmit_SPI_Master(SinWave[LUT_address]);
   LUT_address++;
 1e8:	80 93 02 01 	sts	0x0102, r24
 1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <__vector_14+0x4c>
   
   if (LUT_address>=NUM_SAMPLES)
      LUT_address = 0;
 1ee:	10 92 02 01 	sts	0x0102, r1
}
 1f2:	ff 91       	pop	r31
 1f4:	ef 91       	pop	r30
 1f6:	bf 91       	pop	r27
 1f8:	af 91       	pop	r26
 1fa:	9f 91       	pop	r25
 1fc:	8f 91       	pop	r24
 1fe:	7f 91       	pop	r23
 200:	6f 91       	pop	r22
 202:	5f 91       	pop	r21
 204:	4f 91       	pop	r20
 206:	3f 91       	pop	r19
 208:	2f 91       	pop	r18
 20a:	0f 90       	pop	r0
 20c:	0f be       	out	0x3f, r0	; 63
 20e:	0f 90       	pop	r0
 210:	1f 90       	pop	r1
 212:	18 95       	reti

00000214 <make_square_LUT>:
   double bits = ((voltage/5.0)*4096);
   return bits;
}
*/

void make_square_LUT(){
 214:	0f 93       	push	r16
 216:	1f 93       	push	r17
 218:	cf 93       	push	r28
 21a:	df 93       	push	r29
 21c:	c3 eb       	ldi	r28, 0xB3	; 179
 21e:	d5 e0       	ldi	r29, 0x05	; 5
 220:	0b e7       	ldi	r16, 0x7B	; 123
 222:	16 e0       	ldi	r17, 0x06	; 6
   int i;
   int duty = NUM_SAMPLES * (double) SQUARE_DUTY/100;
   
   for (i = 0; i < duty; i++)
      SquareWave[i] = volts_to_bits(MAX_VOLTAGE);
 224:	60 e0       	ldi	r22, 0x00	; 0
 226:	70 e0       	ldi	r23, 0x00	; 0
 228:	80 ea       	ldi	r24, 0xA0	; 160
 22a:	90 e4       	ldi	r25, 0x40	; 64
 22c:	0e 94 96 00 	call	0x12c	; 0x12c <volts_to_bits>
 230:	89 93       	st	Y+, r24
 232:	99 93       	st	Y+, r25

void make_square_LUT(){
   int i;
   int duty = NUM_SAMPLES * (double) SQUARE_DUTY/100;
   
   for (i = 0; i < duty; i++)
 234:	c0 17       	cp	r28, r16
 236:	d1 07       	cpc	r29, r17
 238:	a9 f7       	brne	.-22     	; 0x224 <make_square_LUT+0x10>
 23a:	cb e7       	ldi	r28, 0x7B	; 123
 23c:	d6 e0       	ldi	r29, 0x06	; 6
 23e:	03 e4       	ldi	r16, 0x43	; 67
 240:	17 e0       	ldi	r17, 0x07	; 7
      SquareWave[i] = volts_to_bits(MAX_VOLTAGE);
   
   for ( ; i < NUM_SAMPLES ; i++)
      SquareWave[i] = volts_to_bits(MIN_VOLTAGE);
 242:	60 e0       	ldi	r22, 0x00	; 0
 244:	70 e0       	ldi	r23, 0x00	; 0
 246:	cb 01       	movw	r24, r22
 248:	0e 94 96 00 	call	0x12c	; 0x12c <volts_to_bits>
 24c:	89 93       	st	Y+, r24
 24e:	99 93       	st	Y+, r25
   int duty = NUM_SAMPLES * (double) SQUARE_DUTY/100;
   
   for (i = 0; i < duty; i++)
      SquareWave[i] = volts_to_bits(MAX_VOLTAGE);
   
   for ( ; i < NUM_SAMPLES ; i++)
 250:	c0 17       	cp	r28, r16
 252:	d1 07       	cpc	r29, r17
 254:	b1 f7       	brne	.-20     	; 0x242 <make_square_LUT+0x2e>
      SquareWave[i] = volts_to_bits(MIN_VOLTAGE);
}
 256:	df 91       	pop	r29
 258:	cf 91       	pop	r28
 25a:	1f 91       	pop	r17
 25c:	0f 91       	pop	r16
 25e:	08 95       	ret

00000260 <make_triangle_LUT>:

void make_triangle_LUT(){
 260:	cf 92       	push	r12
 262:	df 92       	push	r13
 264:	ef 92       	push	r14
 266:	ff 92       	push	r15
 268:	0f 93       	push	r16
 26a:	1f 93       	push	r17
 26c:	cf 93       	push	r28
 26e:	df 93       	push	r29
 270:	c3 e2       	ldi	r28, 0x23	; 35
 272:	d4 e0       	ldi	r29, 0x04	; 4
 274:	0d ee       	ldi	r16, 0xED	; 237
 276:	14 e0       	ldi	r17, 0x04	; 4
   int i;
   int peak = NUM_SAMPLES / 2;
   double increment = ((double) MAX_VOLTAGE - MIN_VOLTAGE) / peak;
   double voltage = MIN_VOLTAGE - increment;
 278:	0f 2e       	mov	r0, r31
 27a:	fd ec       	ldi	r31, 0xCD	; 205
 27c:	cf 2e       	mov	r12, r31
 27e:	fc ec       	ldi	r31, 0xCC	; 204
 280:	df 2e       	mov	r13, r31
 282:	fc e4       	ldi	r31, 0x4C	; 76
 284:	ef 2e       	mov	r14, r31
 286:	fd eb       	ldi	r31, 0xBD	; 189
 288:	ff 2e       	mov	r15, r31
 28a:	f0 2d       	mov	r31, r0
   
   for (i = 0; i < (peak + 1); i++)
      TriWave[i] = volts_to_bits(voltage += increment);
 28c:	2d ec       	ldi	r18, 0xCD	; 205
 28e:	3c ec       	ldi	r19, 0xCC	; 204
 290:	4c e4       	ldi	r20, 0x4C	; 76
 292:	5d e3       	ldi	r21, 0x3D	; 61
 294:	c7 01       	movw	r24, r14
 296:	b6 01       	movw	r22, r12
 298:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <__addsf3>
 29c:	6b 01       	movw	r12, r22
 29e:	7c 01       	movw	r14, r24
 2a0:	0e 94 96 00 	call	0x12c	; 0x12c <volts_to_bits>
 2a4:	89 93       	st	Y+, r24
 2a6:	99 93       	st	Y+, r25
   int i;
   int peak = NUM_SAMPLES / 2;
   double increment = ((double) MAX_VOLTAGE - MIN_VOLTAGE) / peak;
   double voltage = MIN_VOLTAGE - increment;
   
   for (i = 0; i < (peak + 1); i++)
 2a8:	c0 17       	cp	r28, r16
 2aa:	d1 07       	cpc	r29, r17
 2ac:	79 f7       	brne	.-34     	; 0x28c <make_triangle_LUT+0x2c>
 2ae:	cd ee       	ldi	r28, 0xED	; 237
 2b0:	d4 e0       	ldi	r29, 0x04	; 4
 2b2:	01 eb       	ldi	r16, 0xB1	; 177
 2b4:	15 e0       	ldi	r17, 0x05	; 5
      TriWave[i] = volts_to_bits(voltage += increment);
   
   for ( ; i < (NUM_SAMPLES - 1); i++)
      TriWave[i] = volts_to_bits(voltage -= increment);
 2b6:	2d ec       	ldi	r18, 0xCD	; 205
 2b8:	3c ec       	ldi	r19, 0xCC	; 204
 2ba:	4c e4       	ldi	r20, 0x4C	; 76
 2bc:	5d e3       	ldi	r21, 0x3D	; 61
 2be:	c7 01       	movw	r24, r14
 2c0:	b6 01       	movw	r22, r12
 2c2:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <__subsf3>
 2c6:	6b 01       	movw	r12, r22
 2c8:	7c 01       	movw	r14, r24
 2ca:	0e 94 96 00 	call	0x12c	; 0x12c <volts_to_bits>
 2ce:	89 93       	st	Y+, r24
 2d0:	99 93       	st	Y+, r25
   double voltage = MIN_VOLTAGE - increment;
   
   for (i = 0; i < (peak + 1); i++)
      TriWave[i] = volts_to_bits(voltage += increment);
   
   for ( ; i < (NUM_SAMPLES - 1); i++)
 2d2:	c0 17       	cp	r28, r16
 2d4:	d1 07       	cpc	r29, r17
 2d6:	79 f7       	brne	.-34     	; 0x2b6 <make_triangle_LUT+0x56>
      TriWave[i] = volts_to_bits(voltage -= increment);
}
 2d8:	df 91       	pop	r29
 2da:	cf 91       	pop	r28
 2dc:	1f 91       	pop	r17
 2de:	0f 91       	pop	r16
 2e0:	ff 90       	pop	r15
 2e2:	ef 90       	pop	r14
 2e4:	df 90       	pop	r13
 2e6:	cf 90       	pop	r12
 2e8:	08 95       	ret

000002ea <make_sawtooth_LUT>:

void make_sawtooth_LUT(){
 2ea:	cf 92       	push	r12
 2ec:	df 92       	push	r13
 2ee:	ef 92       	push	r14
 2f0:	ff 92       	push	r15
 2f2:	0f 93       	push	r16
 2f4:	1f 93       	push	r17
 2f6:	cf 93       	push	r28
 2f8:	df 93       	push	r29
 2fa:	c3 e9       	ldi	r28, 0x93	; 147
 2fc:	d2 e0       	ldi	r29, 0x02	; 2
 2fe:	03 e2       	ldi	r16, 0x23	; 35
 300:	14 e0       	ldi	r17, 0x04	; 4
   int ndx;
   double increment = ((double) MAX_VOLTAGE - MIN_VOLTAGE) / (NUM_SAMPLES - 1);
   double voltage = -increment;
 302:	0f 2e       	mov	r0, r31
 304:	f3 e4       	ldi	r31, 0x43	; 67
 306:	cf 2e       	mov	r12, r31
 308:	f4 ed       	ldi	r31, 0xD4	; 212
 30a:	df 2e       	mov	r13, r31
 30c:	fd ec       	ldi	r31, 0xCD	; 205
 30e:	ef 2e       	mov	r14, r31
 310:	fc eb       	ldi	r31, 0xBC	; 188
 312:	ff 2e       	mov	r15, r31
 314:	f0 2d       	mov	r31, r0
   
   for (ndx = 0; ndx < NUM_SAMPLES; ndx++){
      SawWave[ndx] = volts_to_bits(voltage += increment);
 316:	23 e4       	ldi	r18, 0x43	; 67
 318:	34 ed       	ldi	r19, 0xD4	; 212
 31a:	4d ec       	ldi	r20, 0xCD	; 205
 31c:	5c e3       	ldi	r21, 0x3C	; 60
 31e:	c7 01       	movw	r24, r14
 320:	b6 01       	movw	r22, r12
 322:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <__addsf3>
 326:	6b 01       	movw	r12, r22
 328:	7c 01       	movw	r14, r24
 32a:	0e 94 96 00 	call	0x12c	; 0x12c <volts_to_bits>
 32e:	89 93       	st	Y+, r24
 330:	99 93       	st	Y+, r25
void make_sawtooth_LUT(){
   int ndx;
   double increment = ((double) MAX_VOLTAGE - MIN_VOLTAGE) / (NUM_SAMPLES - 1);
   double voltage = -increment;
   
   for (ndx = 0; ndx < NUM_SAMPLES; ndx++){
 332:	c0 17       	cp	r28, r16
 334:	d1 07       	cpc	r29, r17
 336:	79 f7       	brne	.-34     	; 0x316 <make_sawtooth_LUT+0x2c>
      SawWave[ndx] = volts_to_bits(voltage += increment);
   }
}
 338:	df 91       	pop	r29
 33a:	cf 91       	pop	r28
 33c:	1f 91       	pop	r17
 33e:	0f 91       	pop	r16
 340:	ff 90       	pop	r15
 342:	ef 90       	pop	r14
 344:	df 90       	pop	r13
 346:	cf 90       	pop	r12
 348:	08 95       	ret

0000034a <make_sin_LUT>:

void make_sin_LUT(){
 34a:	cf 92       	push	r12
 34c:	df 92       	push	r13
 34e:	ef 92       	push	r14
 350:	ff 92       	push	r15
 352:	0f 93       	push	r16
 354:	1f 93       	push	r17
 356:	cf 93       	push	r28
 358:	df 93       	push	r29
 35a:	c3 e0       	ldi	r28, 0x03	; 3
 35c:	d1 e0       	ldi	r29, 0x01	; 1
 35e:	03 e9       	ldi	r16, 0x93	; 147
 360:	12 e0       	ldi	r17, 0x02	; 2
   int ndx;
   double increment = 2 * M_PI / NUM_SAMPLES;
   double rad = -increment;
 362:	0f 2e       	mov	r0, r31
 364:	fd ef       	ldi	r31, 0xFD	; 253
 366:	cf 2e       	mov	r12, r31
 368:	fd ea       	ldi	r31, 0xAD	; 173
 36a:	df 2e       	mov	r13, r31
 36c:	e1 2c       	mov	r14, r1
 36e:	fd eb       	ldi	r31, 0xBD	; 189
 370:	ff 2e       	mov	r15, r31
 372:	f0 2d       	mov	r31, r0
   double ampli = ((double) MAX_VOLTAGE - MIN_VOLTAGE) / 2;
   // The amplitude/2 is neccessary to compensate for sin()'s amplitude of 2
   double offset = MIN_VOLTAGE + ampli;
   
   for (ndx = 0; ndx < NUM_SAMPLES; ndx++)
      SinWave[ndx] = volts_to_bits(ampli * sin(rad += increment) + offset);
 374:	2d ef       	ldi	r18, 0xFD	; 253
 376:	3d ea       	ldi	r19, 0xAD	; 173
 378:	40 e0       	ldi	r20, 0x00	; 0
 37a:	5d e3       	ldi	r21, 0x3D	; 61
 37c:	c7 01       	movw	r24, r14
 37e:	b6 01       	movw	r22, r12
 380:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <__addsf3>
 384:	6b 01       	movw	r12, r22
 386:	7c 01       	movw	r14, r24
 388:	0e 94 b3 03 	call	0x766	; 0x766 <sin>
 38c:	20 e0       	ldi	r18, 0x00	; 0
 38e:	30 e0       	ldi	r19, 0x00	; 0
 390:	40 e2       	ldi	r20, 0x20	; 32
 392:	50 e4       	ldi	r21, 0x40	; 64
 394:	0e 94 46 03 	call	0x68c	; 0x68c <__mulsf3>
 398:	20 e0       	ldi	r18, 0x00	; 0
 39a:	30 e0       	ldi	r19, 0x00	; 0
 39c:	40 e2       	ldi	r20, 0x20	; 32
 39e:	50 e4       	ldi	r21, 0x40	; 64
 3a0:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <__addsf3>
 3a4:	0e 94 96 00 	call	0x12c	; 0x12c <volts_to_bits>
 3a8:	89 93       	st	Y+, r24
 3aa:	99 93       	st	Y+, r25
   double rad = -increment;
   double ampli = ((double) MAX_VOLTAGE - MIN_VOLTAGE) / 2;
   // The amplitude/2 is neccessary to compensate for sin()'s amplitude of 2
   double offset = MIN_VOLTAGE + ampli;
   
   for (ndx = 0; ndx < NUM_SAMPLES; ndx++)
 3ac:	c0 17       	cp	r28, r16
 3ae:	d1 07       	cpc	r29, r17
 3b0:	09 f7       	brne	.-62     	; 0x374 <make_sin_LUT+0x2a>
      SinWave[ndx] = volts_to_bits(ampli * sin(rad += increment) + offset);
 3b2:	df 91       	pop	r29
 3b4:	cf 91       	pop	r28
 3b6:	1f 91       	pop	r17
 3b8:	0f 91       	pop	r16
 3ba:	ff 90       	pop	r15
 3bc:	ef 90       	pop	r14
 3be:	df 90       	pop	r13
 3c0:	cf 90       	pop	r12
 3c2:	08 95       	ret

000003c4 <__subsf3>:
 3c4:	50 58       	subi	r21, 0x80	; 128

000003c6 <__addsf3>:
 3c6:	bb 27       	eor	r27, r27
 3c8:	aa 27       	eor	r26, r26
 3ca:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <__addsf3x>
 3ce:	0c 94 07 03 	jmp	0x60e	; 0x60e <__fp_round>
 3d2:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <__fp_pscA>
 3d6:	38 f0       	brcs	.+14     	; 0x3e6 <__addsf3+0x20>
 3d8:	0e 94 00 03 	call	0x600	; 0x600 <__fp_pscB>
 3dc:	20 f0       	brcs	.+8      	; 0x3e6 <__addsf3+0x20>
 3de:	39 f4       	brne	.+14     	; 0x3ee <__addsf3+0x28>
 3e0:	9f 3f       	cpi	r25, 0xFF	; 255
 3e2:	19 f4       	brne	.+6      	; 0x3ea <__addsf3+0x24>
 3e4:	26 f4       	brtc	.+8      	; 0x3ee <__addsf3+0x28>
 3e6:	0c 94 f6 02 	jmp	0x5ec	; 0x5ec <__fp_nan>
 3ea:	0e f4       	brtc	.+2      	; 0x3ee <__addsf3+0x28>
 3ec:	e0 95       	com	r30
 3ee:	e7 fb       	bst	r30, 7
 3f0:	0c 94 f0 02 	jmp	0x5e0	; 0x5e0 <__fp_inf>

000003f4 <__addsf3x>:
 3f4:	e9 2f       	mov	r30, r25
 3f6:	0e 94 18 03 	call	0x630	; 0x630 <__fp_split3>
 3fa:	58 f3       	brcs	.-42     	; 0x3d2 <__addsf3+0xc>
 3fc:	ba 17       	cp	r27, r26
 3fe:	62 07       	cpc	r22, r18
 400:	73 07       	cpc	r23, r19
 402:	84 07       	cpc	r24, r20
 404:	95 07       	cpc	r25, r21
 406:	20 f0       	brcs	.+8      	; 0x410 <__addsf3x+0x1c>
 408:	79 f4       	brne	.+30     	; 0x428 <__addsf3x+0x34>
 40a:	a6 f5       	brtc	.+104    	; 0x474 <__addsf3x+0x80>
 40c:	0c 94 3a 03 	jmp	0x674	; 0x674 <__fp_zero>
 410:	0e f4       	brtc	.+2      	; 0x414 <__addsf3x+0x20>
 412:	e0 95       	com	r30
 414:	0b 2e       	mov	r0, r27
 416:	ba 2f       	mov	r27, r26
 418:	a0 2d       	mov	r26, r0
 41a:	0b 01       	movw	r0, r22
 41c:	b9 01       	movw	r22, r18
 41e:	90 01       	movw	r18, r0
 420:	0c 01       	movw	r0, r24
 422:	ca 01       	movw	r24, r20
 424:	a0 01       	movw	r20, r0
 426:	11 24       	eor	r1, r1
 428:	ff 27       	eor	r31, r31
 42a:	59 1b       	sub	r21, r25
 42c:	99 f0       	breq	.+38     	; 0x454 <__addsf3x+0x60>
 42e:	59 3f       	cpi	r21, 0xF9	; 249
 430:	50 f4       	brcc	.+20     	; 0x446 <__addsf3x+0x52>
 432:	50 3e       	cpi	r21, 0xE0	; 224
 434:	68 f1       	brcs	.+90     	; 0x490 <__addsf3x+0x9c>
 436:	1a 16       	cp	r1, r26
 438:	f0 40       	sbci	r31, 0x00	; 0
 43a:	a2 2f       	mov	r26, r18
 43c:	23 2f       	mov	r18, r19
 43e:	34 2f       	mov	r19, r20
 440:	44 27       	eor	r20, r20
 442:	58 5f       	subi	r21, 0xF8	; 248
 444:	f3 cf       	rjmp	.-26     	; 0x42c <__addsf3x+0x38>
 446:	46 95       	lsr	r20
 448:	37 95       	ror	r19
 44a:	27 95       	ror	r18
 44c:	a7 95       	ror	r26
 44e:	f0 40       	sbci	r31, 0x00	; 0
 450:	53 95       	inc	r21
 452:	c9 f7       	brne	.-14     	; 0x446 <__addsf3x+0x52>
 454:	7e f4       	brtc	.+30     	; 0x474 <__addsf3x+0x80>
 456:	1f 16       	cp	r1, r31
 458:	ba 0b       	sbc	r27, r26
 45a:	62 0b       	sbc	r22, r18
 45c:	73 0b       	sbc	r23, r19
 45e:	84 0b       	sbc	r24, r20
 460:	ba f0       	brmi	.+46     	; 0x490 <__addsf3x+0x9c>
 462:	91 50       	subi	r25, 0x01	; 1
 464:	a1 f0       	breq	.+40     	; 0x48e <__addsf3x+0x9a>
 466:	ff 0f       	add	r31, r31
 468:	bb 1f       	adc	r27, r27
 46a:	66 1f       	adc	r22, r22
 46c:	77 1f       	adc	r23, r23
 46e:	88 1f       	adc	r24, r24
 470:	c2 f7       	brpl	.-16     	; 0x462 <__addsf3x+0x6e>
 472:	0e c0       	rjmp	.+28     	; 0x490 <__addsf3x+0x9c>
 474:	ba 0f       	add	r27, r26
 476:	62 1f       	adc	r22, r18
 478:	73 1f       	adc	r23, r19
 47a:	84 1f       	adc	r24, r20
 47c:	48 f4       	brcc	.+18     	; 0x490 <__addsf3x+0x9c>
 47e:	87 95       	ror	r24
 480:	77 95       	ror	r23
 482:	67 95       	ror	r22
 484:	b7 95       	ror	r27
 486:	f7 95       	ror	r31
 488:	9e 3f       	cpi	r25, 0xFE	; 254
 48a:	08 f0       	brcs	.+2      	; 0x48e <__addsf3x+0x9a>
 48c:	b0 cf       	rjmp	.-160    	; 0x3ee <__addsf3+0x28>
 48e:	93 95       	inc	r25
 490:	88 0f       	add	r24, r24
 492:	08 f0       	brcs	.+2      	; 0x496 <__addsf3x+0xa2>
 494:	99 27       	eor	r25, r25
 496:	ee 0f       	add	r30, r30
 498:	97 95       	ror	r25
 49a:	87 95       	ror	r24
 49c:	08 95       	ret

0000049e <__divsf3>:
 49e:	0e 94 63 02 	call	0x4c6	; 0x4c6 <__divsf3x>
 4a2:	0c 94 07 03 	jmp	0x60e	; 0x60e <__fp_round>
 4a6:	0e 94 00 03 	call	0x600	; 0x600 <__fp_pscB>
 4aa:	58 f0       	brcs	.+22     	; 0x4c2 <__divsf3+0x24>
 4ac:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <__fp_pscA>
 4b0:	40 f0       	brcs	.+16     	; 0x4c2 <__divsf3+0x24>
 4b2:	29 f4       	brne	.+10     	; 0x4be <__divsf3+0x20>
 4b4:	5f 3f       	cpi	r21, 0xFF	; 255
 4b6:	29 f0       	breq	.+10     	; 0x4c2 <__divsf3+0x24>
 4b8:	0c 94 f0 02 	jmp	0x5e0	; 0x5e0 <__fp_inf>
 4bc:	51 11       	cpse	r21, r1
 4be:	0c 94 3b 03 	jmp	0x676	; 0x676 <__fp_szero>
 4c2:	0c 94 f6 02 	jmp	0x5ec	; 0x5ec <__fp_nan>

000004c6 <__divsf3x>:
 4c6:	0e 94 18 03 	call	0x630	; 0x630 <__fp_split3>
 4ca:	68 f3       	brcs	.-38     	; 0x4a6 <__divsf3+0x8>

000004cc <__divsf3_pse>:
 4cc:	99 23       	and	r25, r25
 4ce:	b1 f3       	breq	.-20     	; 0x4bc <__divsf3+0x1e>
 4d0:	55 23       	and	r21, r21
 4d2:	91 f3       	breq	.-28     	; 0x4b8 <__divsf3+0x1a>
 4d4:	95 1b       	sub	r25, r21
 4d6:	55 0b       	sbc	r21, r21
 4d8:	bb 27       	eor	r27, r27
 4da:	aa 27       	eor	r26, r26
 4dc:	62 17       	cp	r22, r18
 4de:	73 07       	cpc	r23, r19
 4e0:	84 07       	cpc	r24, r20
 4e2:	38 f0       	brcs	.+14     	; 0x4f2 <__divsf3_pse+0x26>
 4e4:	9f 5f       	subi	r25, 0xFF	; 255
 4e6:	5f 4f       	sbci	r21, 0xFF	; 255
 4e8:	22 0f       	add	r18, r18
 4ea:	33 1f       	adc	r19, r19
 4ec:	44 1f       	adc	r20, r20
 4ee:	aa 1f       	adc	r26, r26
 4f0:	a9 f3       	breq	.-22     	; 0x4dc <__divsf3_pse+0x10>
 4f2:	35 d0       	rcall	.+106    	; 0x55e <__divsf3_pse+0x92>
 4f4:	0e 2e       	mov	r0, r30
 4f6:	3a f0       	brmi	.+14     	; 0x506 <__divsf3_pse+0x3a>
 4f8:	e0 e8       	ldi	r30, 0x80	; 128
 4fa:	32 d0       	rcall	.+100    	; 0x560 <__divsf3_pse+0x94>
 4fc:	91 50       	subi	r25, 0x01	; 1
 4fe:	50 40       	sbci	r21, 0x00	; 0
 500:	e6 95       	lsr	r30
 502:	00 1c       	adc	r0, r0
 504:	ca f7       	brpl	.-14     	; 0x4f8 <__divsf3_pse+0x2c>
 506:	2b d0       	rcall	.+86     	; 0x55e <__divsf3_pse+0x92>
 508:	fe 2f       	mov	r31, r30
 50a:	29 d0       	rcall	.+82     	; 0x55e <__divsf3_pse+0x92>
 50c:	66 0f       	add	r22, r22
 50e:	77 1f       	adc	r23, r23
 510:	88 1f       	adc	r24, r24
 512:	bb 1f       	adc	r27, r27
 514:	26 17       	cp	r18, r22
 516:	37 07       	cpc	r19, r23
 518:	48 07       	cpc	r20, r24
 51a:	ab 07       	cpc	r26, r27
 51c:	b0 e8       	ldi	r27, 0x80	; 128
 51e:	09 f0       	breq	.+2      	; 0x522 <__divsf3_pse+0x56>
 520:	bb 0b       	sbc	r27, r27
 522:	80 2d       	mov	r24, r0
 524:	bf 01       	movw	r22, r30
 526:	ff 27       	eor	r31, r31
 528:	93 58       	subi	r25, 0x83	; 131
 52a:	5f 4f       	sbci	r21, 0xFF	; 255
 52c:	3a f0       	brmi	.+14     	; 0x53c <__divsf3_pse+0x70>
 52e:	9e 3f       	cpi	r25, 0xFE	; 254
 530:	51 05       	cpc	r21, r1
 532:	78 f0       	brcs	.+30     	; 0x552 <__divsf3_pse+0x86>
 534:	0c 94 f0 02 	jmp	0x5e0	; 0x5e0 <__fp_inf>
 538:	0c 94 3b 03 	jmp	0x676	; 0x676 <__fp_szero>
 53c:	5f 3f       	cpi	r21, 0xFF	; 255
 53e:	e4 f3       	brlt	.-8      	; 0x538 <__divsf3_pse+0x6c>
 540:	98 3e       	cpi	r25, 0xE8	; 232
 542:	d4 f3       	brlt	.-12     	; 0x538 <__divsf3_pse+0x6c>
 544:	86 95       	lsr	r24
 546:	77 95       	ror	r23
 548:	67 95       	ror	r22
 54a:	b7 95       	ror	r27
 54c:	f7 95       	ror	r31
 54e:	9f 5f       	subi	r25, 0xFF	; 255
 550:	c9 f7       	brne	.-14     	; 0x544 <__divsf3_pse+0x78>
 552:	88 0f       	add	r24, r24
 554:	91 1d       	adc	r25, r1
 556:	96 95       	lsr	r25
 558:	87 95       	ror	r24
 55a:	97 f9       	bld	r25, 7
 55c:	08 95       	ret
 55e:	e1 e0       	ldi	r30, 0x01	; 1
 560:	66 0f       	add	r22, r22
 562:	77 1f       	adc	r23, r23
 564:	88 1f       	adc	r24, r24
 566:	bb 1f       	adc	r27, r27
 568:	62 17       	cp	r22, r18
 56a:	73 07       	cpc	r23, r19
 56c:	84 07       	cpc	r24, r20
 56e:	ba 07       	cpc	r27, r26
 570:	20 f0       	brcs	.+8      	; 0x57a <__divsf3_pse+0xae>
 572:	62 1b       	sub	r22, r18
 574:	73 0b       	sbc	r23, r19
 576:	84 0b       	sbc	r24, r20
 578:	ba 0b       	sbc	r27, r26
 57a:	ee 1f       	adc	r30, r30
 57c:	88 f7       	brcc	.-30     	; 0x560 <__divsf3_pse+0x94>
 57e:	e0 95       	com	r30
 580:	08 95       	ret

00000582 <__fixunssfsi>:
 582:	0e 94 20 03 	call	0x640	; 0x640 <__fp_splitA>
 586:	88 f0       	brcs	.+34     	; 0x5aa <__fixunssfsi+0x28>
 588:	9f 57       	subi	r25, 0x7F	; 127
 58a:	98 f0       	brcs	.+38     	; 0x5b2 <__fixunssfsi+0x30>
 58c:	b9 2f       	mov	r27, r25
 58e:	99 27       	eor	r25, r25
 590:	b7 51       	subi	r27, 0x17	; 23
 592:	b0 f0       	brcs	.+44     	; 0x5c0 <__fixunssfsi+0x3e>
 594:	e1 f0       	breq	.+56     	; 0x5ce <__fixunssfsi+0x4c>
 596:	66 0f       	add	r22, r22
 598:	77 1f       	adc	r23, r23
 59a:	88 1f       	adc	r24, r24
 59c:	99 1f       	adc	r25, r25
 59e:	1a f0       	brmi	.+6      	; 0x5a6 <__fixunssfsi+0x24>
 5a0:	ba 95       	dec	r27
 5a2:	c9 f7       	brne	.-14     	; 0x596 <__fixunssfsi+0x14>
 5a4:	14 c0       	rjmp	.+40     	; 0x5ce <__fixunssfsi+0x4c>
 5a6:	b1 30       	cpi	r27, 0x01	; 1
 5a8:	91 f0       	breq	.+36     	; 0x5ce <__fixunssfsi+0x4c>
 5aa:	0e 94 3a 03 	call	0x674	; 0x674 <__fp_zero>
 5ae:	b1 e0       	ldi	r27, 0x01	; 1
 5b0:	08 95       	ret
 5b2:	0c 94 3a 03 	jmp	0x674	; 0x674 <__fp_zero>
 5b6:	67 2f       	mov	r22, r23
 5b8:	78 2f       	mov	r23, r24
 5ba:	88 27       	eor	r24, r24
 5bc:	b8 5f       	subi	r27, 0xF8	; 248
 5be:	39 f0       	breq	.+14     	; 0x5ce <__fixunssfsi+0x4c>
 5c0:	b9 3f       	cpi	r27, 0xF9	; 249
 5c2:	cc f3       	brlt	.-14     	; 0x5b6 <__fixunssfsi+0x34>
 5c4:	86 95       	lsr	r24
 5c6:	77 95       	ror	r23
 5c8:	67 95       	ror	r22
 5ca:	b3 95       	inc	r27
 5cc:	d9 f7       	brne	.-10     	; 0x5c4 <__fixunssfsi+0x42>
 5ce:	3e f4       	brtc	.+14     	; 0x5de <__fixunssfsi+0x5c>
 5d0:	90 95       	com	r25
 5d2:	80 95       	com	r24
 5d4:	70 95       	com	r23
 5d6:	61 95       	neg	r22
 5d8:	7f 4f       	sbci	r23, 0xFF	; 255
 5da:	8f 4f       	sbci	r24, 0xFF	; 255
 5dc:	9f 4f       	sbci	r25, 0xFF	; 255
 5de:	08 95       	ret

000005e0 <__fp_inf>:
 5e0:	97 f9       	bld	r25, 7
 5e2:	9f 67       	ori	r25, 0x7F	; 127
 5e4:	80 e8       	ldi	r24, 0x80	; 128
 5e6:	70 e0       	ldi	r23, 0x00	; 0
 5e8:	60 e0       	ldi	r22, 0x00	; 0
 5ea:	08 95       	ret

000005ec <__fp_nan>:
 5ec:	9f ef       	ldi	r25, 0xFF	; 255
 5ee:	80 ec       	ldi	r24, 0xC0	; 192
 5f0:	08 95       	ret

000005f2 <__fp_pscA>:
 5f2:	00 24       	eor	r0, r0
 5f4:	0a 94       	dec	r0
 5f6:	16 16       	cp	r1, r22
 5f8:	17 06       	cpc	r1, r23
 5fa:	18 06       	cpc	r1, r24
 5fc:	09 06       	cpc	r0, r25
 5fe:	08 95       	ret

00000600 <__fp_pscB>:
 600:	00 24       	eor	r0, r0
 602:	0a 94       	dec	r0
 604:	12 16       	cp	r1, r18
 606:	13 06       	cpc	r1, r19
 608:	14 06       	cpc	r1, r20
 60a:	05 06       	cpc	r0, r21
 60c:	08 95       	ret

0000060e <__fp_round>:
 60e:	09 2e       	mov	r0, r25
 610:	03 94       	inc	r0
 612:	00 0c       	add	r0, r0
 614:	11 f4       	brne	.+4      	; 0x61a <__fp_round+0xc>
 616:	88 23       	and	r24, r24
 618:	52 f0       	brmi	.+20     	; 0x62e <__fp_round+0x20>
 61a:	bb 0f       	add	r27, r27
 61c:	40 f4       	brcc	.+16     	; 0x62e <__fp_round+0x20>
 61e:	bf 2b       	or	r27, r31
 620:	11 f4       	brne	.+4      	; 0x626 <__fp_round+0x18>
 622:	60 ff       	sbrs	r22, 0
 624:	04 c0       	rjmp	.+8      	; 0x62e <__fp_round+0x20>
 626:	6f 5f       	subi	r22, 0xFF	; 255
 628:	7f 4f       	sbci	r23, 0xFF	; 255
 62a:	8f 4f       	sbci	r24, 0xFF	; 255
 62c:	9f 4f       	sbci	r25, 0xFF	; 255
 62e:	08 95       	ret

00000630 <__fp_split3>:
 630:	57 fd       	sbrc	r21, 7
 632:	90 58       	subi	r25, 0x80	; 128
 634:	44 0f       	add	r20, r20
 636:	55 1f       	adc	r21, r21
 638:	59 f0       	breq	.+22     	; 0x650 <__fp_splitA+0x10>
 63a:	5f 3f       	cpi	r21, 0xFF	; 255
 63c:	71 f0       	breq	.+28     	; 0x65a <__fp_splitA+0x1a>
 63e:	47 95       	ror	r20

00000640 <__fp_splitA>:
 640:	88 0f       	add	r24, r24
 642:	97 fb       	bst	r25, 7
 644:	99 1f       	adc	r25, r25
 646:	61 f0       	breq	.+24     	; 0x660 <__fp_splitA+0x20>
 648:	9f 3f       	cpi	r25, 0xFF	; 255
 64a:	79 f0       	breq	.+30     	; 0x66a <__fp_splitA+0x2a>
 64c:	87 95       	ror	r24
 64e:	08 95       	ret
 650:	12 16       	cp	r1, r18
 652:	13 06       	cpc	r1, r19
 654:	14 06       	cpc	r1, r20
 656:	55 1f       	adc	r21, r21
 658:	f2 cf       	rjmp	.-28     	; 0x63e <__fp_split3+0xe>
 65a:	46 95       	lsr	r20
 65c:	f1 df       	rcall	.-30     	; 0x640 <__fp_splitA>
 65e:	08 c0       	rjmp	.+16     	; 0x670 <__fp_splitA+0x30>
 660:	16 16       	cp	r1, r22
 662:	17 06       	cpc	r1, r23
 664:	18 06       	cpc	r1, r24
 666:	99 1f       	adc	r25, r25
 668:	f1 cf       	rjmp	.-30     	; 0x64c <__fp_splitA+0xc>
 66a:	86 95       	lsr	r24
 66c:	71 05       	cpc	r23, r1
 66e:	61 05       	cpc	r22, r1
 670:	08 94       	sec
 672:	08 95       	ret

00000674 <__fp_zero>:
 674:	e8 94       	clt

00000676 <__fp_szero>:
 676:	bb 27       	eor	r27, r27
 678:	66 27       	eor	r22, r22
 67a:	77 27       	eor	r23, r23
 67c:	cb 01       	movw	r24, r22
 67e:	97 f9       	bld	r25, 7
 680:	08 95       	ret

00000682 <__gesf2>:
 682:	0e 94 bb 03 	call	0x776	; 0x776 <__fp_cmp>
 686:	08 f4       	brcc	.+2      	; 0x68a <__gesf2+0x8>
 688:	8f ef       	ldi	r24, 0xFF	; 255
 68a:	08 95       	ret

0000068c <__mulsf3>:
 68c:	0e 94 59 03 	call	0x6b2	; 0x6b2 <__mulsf3x>
 690:	0c 94 07 03 	jmp	0x60e	; 0x60e <__fp_round>
 694:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <__fp_pscA>
 698:	38 f0       	brcs	.+14     	; 0x6a8 <__mulsf3+0x1c>
 69a:	0e 94 00 03 	call	0x600	; 0x600 <__fp_pscB>
 69e:	20 f0       	brcs	.+8      	; 0x6a8 <__mulsf3+0x1c>
 6a0:	95 23       	and	r25, r21
 6a2:	11 f0       	breq	.+4      	; 0x6a8 <__mulsf3+0x1c>
 6a4:	0c 94 f0 02 	jmp	0x5e0	; 0x5e0 <__fp_inf>
 6a8:	0c 94 f6 02 	jmp	0x5ec	; 0x5ec <__fp_nan>
 6ac:	11 24       	eor	r1, r1
 6ae:	0c 94 3b 03 	jmp	0x676	; 0x676 <__fp_szero>

000006b2 <__mulsf3x>:
 6b2:	0e 94 18 03 	call	0x630	; 0x630 <__fp_split3>
 6b6:	70 f3       	brcs	.-36     	; 0x694 <__mulsf3+0x8>

000006b8 <__mulsf3_pse>:
 6b8:	95 9f       	mul	r25, r21
 6ba:	c1 f3       	breq	.-16     	; 0x6ac <__mulsf3+0x20>
 6bc:	95 0f       	add	r25, r21
 6be:	50 e0       	ldi	r21, 0x00	; 0
 6c0:	55 1f       	adc	r21, r21
 6c2:	62 9f       	mul	r22, r18
 6c4:	f0 01       	movw	r30, r0
 6c6:	72 9f       	mul	r23, r18
 6c8:	bb 27       	eor	r27, r27
 6ca:	f0 0d       	add	r31, r0
 6cc:	b1 1d       	adc	r27, r1
 6ce:	63 9f       	mul	r22, r19
 6d0:	aa 27       	eor	r26, r26
 6d2:	f0 0d       	add	r31, r0
 6d4:	b1 1d       	adc	r27, r1
 6d6:	aa 1f       	adc	r26, r26
 6d8:	64 9f       	mul	r22, r20
 6da:	66 27       	eor	r22, r22
 6dc:	b0 0d       	add	r27, r0
 6de:	a1 1d       	adc	r26, r1
 6e0:	66 1f       	adc	r22, r22
 6e2:	82 9f       	mul	r24, r18
 6e4:	22 27       	eor	r18, r18
 6e6:	b0 0d       	add	r27, r0
 6e8:	a1 1d       	adc	r26, r1
 6ea:	62 1f       	adc	r22, r18
 6ec:	73 9f       	mul	r23, r19
 6ee:	b0 0d       	add	r27, r0
 6f0:	a1 1d       	adc	r26, r1
 6f2:	62 1f       	adc	r22, r18
 6f4:	83 9f       	mul	r24, r19
 6f6:	a0 0d       	add	r26, r0
 6f8:	61 1d       	adc	r22, r1
 6fa:	22 1f       	adc	r18, r18
 6fc:	74 9f       	mul	r23, r20
 6fe:	33 27       	eor	r19, r19
 700:	a0 0d       	add	r26, r0
 702:	61 1d       	adc	r22, r1
 704:	23 1f       	adc	r18, r19
 706:	84 9f       	mul	r24, r20
 708:	60 0d       	add	r22, r0
 70a:	21 1d       	adc	r18, r1
 70c:	82 2f       	mov	r24, r18
 70e:	76 2f       	mov	r23, r22
 710:	6a 2f       	mov	r22, r26
 712:	11 24       	eor	r1, r1
 714:	9f 57       	subi	r25, 0x7F	; 127
 716:	50 40       	sbci	r21, 0x00	; 0
 718:	9a f0       	brmi	.+38     	; 0x740 <__mulsf3_pse+0x88>
 71a:	f1 f0       	breq	.+60     	; 0x758 <__mulsf3_pse+0xa0>
 71c:	88 23       	and	r24, r24
 71e:	4a f0       	brmi	.+18     	; 0x732 <__mulsf3_pse+0x7a>
 720:	ee 0f       	add	r30, r30
 722:	ff 1f       	adc	r31, r31
 724:	bb 1f       	adc	r27, r27
 726:	66 1f       	adc	r22, r22
 728:	77 1f       	adc	r23, r23
 72a:	88 1f       	adc	r24, r24
 72c:	91 50       	subi	r25, 0x01	; 1
 72e:	50 40       	sbci	r21, 0x00	; 0
 730:	a9 f7       	brne	.-22     	; 0x71c <__mulsf3_pse+0x64>
 732:	9e 3f       	cpi	r25, 0xFE	; 254
 734:	51 05       	cpc	r21, r1
 736:	80 f0       	brcs	.+32     	; 0x758 <__mulsf3_pse+0xa0>
 738:	0c 94 f0 02 	jmp	0x5e0	; 0x5e0 <__fp_inf>
 73c:	0c 94 3b 03 	jmp	0x676	; 0x676 <__fp_szero>
 740:	5f 3f       	cpi	r21, 0xFF	; 255
 742:	e4 f3       	brlt	.-8      	; 0x73c <__mulsf3_pse+0x84>
 744:	98 3e       	cpi	r25, 0xE8	; 232
 746:	d4 f3       	brlt	.-12     	; 0x73c <__mulsf3_pse+0x84>
 748:	86 95       	lsr	r24
 74a:	77 95       	ror	r23
 74c:	67 95       	ror	r22
 74e:	b7 95       	ror	r27
 750:	f7 95       	ror	r31
 752:	e7 95       	ror	r30
 754:	9f 5f       	subi	r25, 0xFF	; 255
 756:	c1 f7       	brne	.-16     	; 0x748 <__mulsf3_pse+0x90>
 758:	fe 2b       	or	r31, r30
 75a:	88 0f       	add	r24, r24
 75c:	91 1d       	adc	r25, r1
 75e:	96 95       	lsr	r25
 760:	87 95       	ror	r24
 762:	97 f9       	bld	r25, 7
 764:	08 95       	ret

00000766 <sin>:
 766:	9f 93       	push	r25
 768:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <__fp_rempio2>
 76c:	0f 90       	pop	r0
 76e:	07 fc       	sbrc	r0, 7
 770:	ee 5f       	subi	r30, 0xFE	; 254
 772:	0c 94 0a 04 	jmp	0x814	; 0x814 <__fp_sinus>

00000776 <__fp_cmp>:
 776:	99 0f       	add	r25, r25
 778:	00 08       	sbc	r0, r0
 77a:	55 0f       	add	r21, r21
 77c:	aa 0b       	sbc	r26, r26
 77e:	e0 e8       	ldi	r30, 0x80	; 128
 780:	fe ef       	ldi	r31, 0xFE	; 254
 782:	16 16       	cp	r1, r22
 784:	17 06       	cpc	r1, r23
 786:	e8 07       	cpc	r30, r24
 788:	f9 07       	cpc	r31, r25
 78a:	c0 f0       	brcs	.+48     	; 0x7bc <__fp_cmp+0x46>
 78c:	12 16       	cp	r1, r18
 78e:	13 06       	cpc	r1, r19
 790:	e4 07       	cpc	r30, r20
 792:	f5 07       	cpc	r31, r21
 794:	98 f0       	brcs	.+38     	; 0x7bc <__fp_cmp+0x46>
 796:	62 1b       	sub	r22, r18
 798:	73 0b       	sbc	r23, r19
 79a:	84 0b       	sbc	r24, r20
 79c:	95 0b       	sbc	r25, r21
 79e:	39 f4       	brne	.+14     	; 0x7ae <__fp_cmp+0x38>
 7a0:	0a 26       	eor	r0, r26
 7a2:	61 f0       	breq	.+24     	; 0x7bc <__fp_cmp+0x46>
 7a4:	23 2b       	or	r18, r19
 7a6:	24 2b       	or	r18, r20
 7a8:	25 2b       	or	r18, r21
 7aa:	21 f4       	brne	.+8      	; 0x7b4 <__fp_cmp+0x3e>
 7ac:	08 95       	ret
 7ae:	0a 26       	eor	r0, r26
 7b0:	09 f4       	brne	.+2      	; 0x7b4 <__fp_cmp+0x3e>
 7b2:	a1 40       	sbci	r26, 0x01	; 1
 7b4:	a6 95       	lsr	r26
 7b6:	8f ef       	ldi	r24, 0xFF	; 255
 7b8:	81 1d       	adc	r24, r1
 7ba:	81 1d       	adc	r24, r1
 7bc:	08 95       	ret
 7be:	0c 94 f6 02 	jmp	0x5ec	; 0x5ec <__fp_nan>

000007c2 <__fp_rempio2>:
 7c2:	0e 94 20 03 	call	0x640	; 0x640 <__fp_splitA>
 7c6:	d8 f3       	brcs	.-10     	; 0x7be <__fp_cmp+0x48>
 7c8:	e8 94       	clt
 7ca:	e0 e0       	ldi	r30, 0x00	; 0
 7cc:	bb 27       	eor	r27, r27
 7ce:	9f 57       	subi	r25, 0x7F	; 127
 7d0:	f0 f0       	brcs	.+60     	; 0x80e <__fp_rempio2+0x4c>
 7d2:	2a ed       	ldi	r18, 0xDA	; 218
 7d4:	3f e0       	ldi	r19, 0x0F	; 15
 7d6:	49 ec       	ldi	r20, 0xC9	; 201
 7d8:	06 c0       	rjmp	.+12     	; 0x7e6 <__fp_rempio2+0x24>
 7da:	ee 0f       	add	r30, r30
 7dc:	bb 0f       	add	r27, r27
 7de:	66 1f       	adc	r22, r22
 7e0:	77 1f       	adc	r23, r23
 7e2:	88 1f       	adc	r24, r24
 7e4:	28 f0       	brcs	.+10     	; 0x7f0 <__fp_rempio2+0x2e>
 7e6:	b2 3a       	cpi	r27, 0xA2	; 162
 7e8:	62 07       	cpc	r22, r18
 7ea:	73 07       	cpc	r23, r19
 7ec:	84 07       	cpc	r24, r20
 7ee:	28 f0       	brcs	.+10     	; 0x7fa <__fp_rempio2+0x38>
 7f0:	b2 5a       	subi	r27, 0xA2	; 162
 7f2:	62 0b       	sbc	r22, r18
 7f4:	73 0b       	sbc	r23, r19
 7f6:	84 0b       	sbc	r24, r20
 7f8:	e3 95       	inc	r30
 7fa:	9a 95       	dec	r25
 7fc:	72 f7       	brpl	.-36     	; 0x7da <__fp_rempio2+0x18>
 7fe:	80 38       	cpi	r24, 0x80	; 128
 800:	30 f4       	brcc	.+12     	; 0x80e <__fp_rempio2+0x4c>
 802:	9a 95       	dec	r25
 804:	bb 0f       	add	r27, r27
 806:	66 1f       	adc	r22, r22
 808:	77 1f       	adc	r23, r23
 80a:	88 1f       	adc	r24, r24
 80c:	d2 f7       	brpl	.-12     	; 0x802 <__fp_rempio2+0x40>
 80e:	90 48       	sbci	r25, 0x80	; 128
 810:	0c 94 20 04 	jmp	0x840	; 0x840 <__fp_mpack_finite>

00000814 <__fp_sinus>:
 814:	ef 93       	push	r30
 816:	e0 ff       	sbrs	r30, 0
 818:	07 c0       	rjmp	.+14     	; 0x828 <__fp_sinus+0x14>
 81a:	a2 ea       	ldi	r26, 0xA2	; 162
 81c:	2a ed       	ldi	r18, 0xDA	; 218
 81e:	3f e0       	ldi	r19, 0x0F	; 15
 820:	49 ec       	ldi	r20, 0xC9	; 201
 822:	5f eb       	ldi	r21, 0xBF	; 191
 824:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <__addsf3x>
 828:	0e 94 07 03 	call	0x60e	; 0x60e <__fp_round>
 82c:	0f 90       	pop	r0
 82e:	03 94       	inc	r0
 830:	01 fc       	sbrc	r0, 1
 832:	90 58       	subi	r25, 0x80	; 128
 834:	e8 e6       	ldi	r30, 0x68	; 104
 836:	f0 e0       	ldi	r31, 0x00	; 0
 838:	0c 94 2c 04 	jmp	0x858	; 0x858 <__fp_powsodd>

0000083c <__fp_mpack>:
 83c:	9f 3f       	cpi	r25, 0xFF	; 255
 83e:	31 f0       	breq	.+12     	; 0x84c <__fp_mpack_finite+0xc>

00000840 <__fp_mpack_finite>:
 840:	91 50       	subi	r25, 0x01	; 1
 842:	20 f4       	brcc	.+8      	; 0x84c <__fp_mpack_finite+0xc>
 844:	87 95       	ror	r24
 846:	77 95       	ror	r23
 848:	67 95       	ror	r22
 84a:	b7 95       	ror	r27
 84c:	88 0f       	add	r24, r24
 84e:	91 1d       	adc	r25, r1
 850:	96 95       	lsr	r25
 852:	87 95       	ror	r24
 854:	97 f9       	bld	r25, 7
 856:	08 95       	ret

00000858 <__fp_powsodd>:
 858:	9f 93       	push	r25
 85a:	8f 93       	push	r24
 85c:	7f 93       	push	r23
 85e:	6f 93       	push	r22
 860:	ff 93       	push	r31
 862:	ef 93       	push	r30
 864:	9b 01       	movw	r18, r22
 866:	ac 01       	movw	r20, r24
 868:	0e 94 46 03 	call	0x68c	; 0x68c <__mulsf3>
 86c:	ef 91       	pop	r30
 86e:	ff 91       	pop	r31
 870:	0e 94 40 04 	call	0x880	; 0x880 <__fp_powser>
 874:	2f 91       	pop	r18
 876:	3f 91       	pop	r19
 878:	4f 91       	pop	r20
 87a:	5f 91       	pop	r21
 87c:	0c 94 46 03 	jmp	0x68c	; 0x68c <__mulsf3>

00000880 <__fp_powser>:
 880:	df 93       	push	r29
 882:	cf 93       	push	r28
 884:	1f 93       	push	r17
 886:	0f 93       	push	r16
 888:	ff 92       	push	r15
 88a:	ef 92       	push	r14
 88c:	df 92       	push	r13
 88e:	7b 01       	movw	r14, r22
 890:	8c 01       	movw	r16, r24
 892:	68 94       	set
 894:	06 c0       	rjmp	.+12     	; 0x8a2 <__fp_powser+0x22>
 896:	da 2e       	mov	r13, r26
 898:	ef 01       	movw	r28, r30
 89a:	0e 94 59 03 	call	0x6b2	; 0x6b2 <__mulsf3x>
 89e:	fe 01       	movw	r30, r28
 8a0:	e8 94       	clt
 8a2:	a5 91       	lpm	r26, Z+
 8a4:	25 91       	lpm	r18, Z+
 8a6:	35 91       	lpm	r19, Z+
 8a8:	45 91       	lpm	r20, Z+
 8aa:	55 91       	lpm	r21, Z+
 8ac:	a6 f3       	brts	.-24     	; 0x896 <__fp_powser+0x16>
 8ae:	ef 01       	movw	r28, r30
 8b0:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <__addsf3x>
 8b4:	fe 01       	movw	r30, r28
 8b6:	97 01       	movw	r18, r14
 8b8:	a8 01       	movw	r20, r16
 8ba:	da 94       	dec	r13
 8bc:	69 f7       	brne	.-38     	; 0x898 <__fp_powser+0x18>
 8be:	df 90       	pop	r13
 8c0:	ef 90       	pop	r14
 8c2:	ff 90       	pop	r15
 8c4:	0f 91       	pop	r16
 8c6:	1f 91       	pop	r17
 8c8:	cf 91       	pop	r28
 8ca:	df 91       	pop	r29
 8cc:	08 95       	ret

000008ce <_exit>:
 8ce:	f8 94       	cli

000008d0 <__stop_program>:
 8d0:	ff cf       	rjmp	.-2      	; 0x8d0 <__stop_program>
