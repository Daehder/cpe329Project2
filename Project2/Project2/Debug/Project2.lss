
Project2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00000ba6  00000c3a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ba6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000004b4  00800108  00800108  00000c42  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c42  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c74  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  00000cb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008fc  00000000  00000000  00000d94  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000003b3  00000000  00000000  00001690  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000447  00000000  00000000  00001a43  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002b0  00000000  00000000  00001e8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000377  00000000  00000000  0000213c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000713  00000000  00000000  000024b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00002bc6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 43 00 	jmp	0x86	; 0x86 <__ctors_end>
   4:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
   8:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
   c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  10:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  14:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  18:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  1c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  20:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  24:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  28:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  2c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  30:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  34:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  38:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__vector_14>
  3c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  40:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  44:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  48:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  4c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  50:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  54:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  58:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  5c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  60:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  64:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  68:	05 a8       	ldd	r0, Z+53	; 0x35
  6a:	4c cd       	rjmp	.-1384   	; 0xfffffb04 <__eeprom_end+0xff7efb04>
  6c:	b2 d4       	rcall	.+2404   	; 0x9d2 <__mulsf3_pse+0x96>
  6e:	4e b9       	out	0x0e, r20	; 14
  70:	38 36       	cpi	r19, 0x68	; 104
  72:	a9 02       	muls	r26, r25
  74:	0c 50       	subi	r16, 0x0C	; 12
  76:	b9 91       	ld	r27, Y+
  78:	86 88       	ldd	r8, Z+22	; 0x16
  7a:	08 3c       	cpi	r16, 0xC8	; 200
  7c:	a6 aa       	std	Z+54, r10	; 0x36
  7e:	aa 2a       	or	r10, r26
  80:	be 00       	.word	0x00be	; ????
  82:	00 00       	nop
  84:	80 3f       	cpi	r24, 0xF0	; 240

00000086 <__ctors_end>:
  86:	11 24       	eor	r1, r1
  88:	1f be       	out	0x3f, r1	; 63
  8a:	cf ef       	ldi	r28, 0xFF	; 255
  8c:	d8 e0       	ldi	r29, 0x08	; 8
  8e:	de bf       	out	0x3e, r29	; 62
  90:	cd bf       	out	0x3d, r28	; 61

00000092 <__do_copy_data>:
  92:	11 e0       	ldi	r17, 0x01	; 1
  94:	a0 e0       	ldi	r26, 0x00	; 0
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	e6 ea       	ldi	r30, 0xA6	; 166
  9a:	fb e0       	ldi	r31, 0x0B	; 11
  9c:	02 c0       	rjmp	.+4      	; 0xa2 <__do_copy_data+0x10>
  9e:	05 90       	lpm	r0, Z+
  a0:	0d 92       	st	X+, r0
  a2:	a8 30       	cpi	r26, 0x08	; 8
  a4:	b1 07       	cpc	r27, r17
  a6:	d9 f7       	brne	.-10     	; 0x9e <__do_copy_data+0xc>

000000a8 <__do_clear_bss>:
  a8:	25 e0       	ldi	r18, 0x05	; 5
  aa:	a8 e0       	ldi	r26, 0x08	; 8
  ac:	b1 e0       	ldi	r27, 0x01	; 1
  ae:	01 c0       	rjmp	.+2      	; 0xb2 <.do_clear_bss_start>

000000b0 <.do_clear_bss_loop>:
  b0:	1d 92       	st	X+, r1

000000b2 <.do_clear_bss_start>:
  b2:	ac 3b       	cpi	r26, 0xBC	; 188
  b4:	b2 07       	cpc	r27, r18
  b6:	e1 f7       	brne	.-8      	; 0xb0 <.do_clear_bss_loop>
  b8:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <main>
  bc:	0c 94 d1 05 	jmp	0xba2	; 0xba2 <_exit>

000000c0 <__bad_interrupt>:
  c0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c4 <Initialize_SPI_Master>:

int sampleDivider = 1;

// sets up SPI system between ATmega328P and slave device(s)
void Initialize_SPI_Master(){
   SPCR = (0<<SPIE) |               // No interrupts
  c4:	80 e5       	ldi	r24, 0x50	; 80
  c6:	8c bd       	out	0x2c, r24	; 44
   (1<<SPE) |                       // SPI enabled
   (1<<MSTR) ;                      // master
   SPSR = 0x00;                     // clear flags
  c8:	1d bc       	out	0x2d, r1	; 45
   PORTB = 1 << SS;                 // make sure SS is high
  ca:	84 e0       	ldi	r24, 0x04	; 4
  cc:	85 b9       	out	0x05, r24	; 5
  ce:	08 95       	ret

000000d0 <initTimer0>:
}

// Initializing timer 0 (change OCR0A for freq change!!!!!)
void initTimer0(){
   TCCR0A = 0x02;                   // timer CTC mode
  d0:	82 e0       	ldi	r24, 0x02	; 2
  d2:	84 bd       	out	0x24, r24	; 36
   OCR0A = overflow;          // sets counter overflow to 250
  d4:	90 91 02 01 	lds	r25, 0x0102
  d8:	97 bd       	out	0x27, r25	; 39
   TCCR0B = 0x02;                   // timer clk = system clk / 8 (2MHz)
  da:	85 bd       	out	0x25, r24	; 37
   TIFR0 = 0x02;                    // Interrupt occurs at OCRF0A overflow
  dc:	85 bb       	out	0x15, r24	; 21
   TIMSK0 = 0x02;                   // OCRF0A overflow interrupt enabled
  de:	80 93 6e 00 	sts	0x006E, r24
  e2:	08 95       	ret

000000e4 <GPIO_Initialization>:
}


// initializes GPIO I/O, SPI interface, and interrupts
void GPIO_Initialization(){
   DDRB |= (1<<MOSI) | (1<<SCK) | (1<<SS);	// make MOSI, SCK and SS outputs
  e4:	84 b1       	in	r24, 0x04	; 4
  e6:	8c 62       	ori	r24, 0x2C	; 44
  e8:	84 b9       	out	0x04, r24	; 4
   DDRD &= ~(1<<BTN1) | ~(1<<BTN1) | ~(1<<BTN2);	// set buttons as inputs
  ea:	8a b1       	in	r24, 0x0a	; 10
  ec:	8a b9       	out	0x0a, r24	; 10
   DDRD |= (1<<LED2);				// degub LED is output
  ee:	52 9a       	sbi	0x0a, 2	; 10
   PORTD |= (1<<BTN0) | (1<<BTN1) | (1<<BTN2);	// set internal pull-ups
  f0:	8b b1       	in	r24, 0x0b	; 11
  f2:	80 6e       	ori	r24, 0xE0	; 224
  f4:	8b b9       	out	0x0b, r24	; 11
   Initialize_SPI_Master();			// initialize SPI to DAC
  f6:	0e 94 62 00 	call	0xc4	; 0xc4 <Initialize_SPI_Master>
   initTimer0();							// initialize timer0
  fa:	0e 94 68 00 	call	0xd0	; 0xd0 <initTimer0>
   sei();									// enable interrupts
  fe:	78 94       	sei
 100:	08 95       	ret

00000102 <check_buttons>:
}

// returns a true bool if a buttons is pressed
uint8_t check_buttons(){
   if (!(PIND & (1<<BTN0))){          // return 1 if button at pin7 is pressed
 102:	4f 99       	sbic	0x09, 7	; 9
 104:	0b c0       	rjmp	.+22     	; 0x11c <check_buttons+0x1a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 106:	2f ef       	ldi	r18, 0xFF	; 255
 108:	81 ee       	ldi	r24, 0xE1	; 225
 10a:	94 e0       	ldi	r25, 0x04	; 4
 10c:	21 50       	subi	r18, 0x01	; 1
 10e:	80 40       	sbci	r24, 0x00	; 0
 110:	90 40       	sbci	r25, 0x00	; 0
 112:	e1 f7       	brne	.-8      	; 0x10c <check_buttons+0xa>
 114:	00 c0       	rjmp	.+0      	; 0x116 <check_buttons+0x14>
 116:	00 00       	nop
		_delay_ms(DEBOUNCE);
      return 1;
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	08 95       	ret
      return 3;                     // return 3 if buttons at pin5 pressed
	  //_delay_ms(DEBOUNCE);
	}
	*/
	else
		return 0;
 11c:	80 e0       	ldi	r24, 0x00	; 0
}
 11e:	08 95       	ret

00000120 <Transmit_SPI_Master>:

// sends data to DAC over SPI data port
void Transmit_SPI_Master(int Data) {
   PORTB &= ~(1 << SS);					//Assert slave select (active low)
 120:	2a 98       	cbi	0x05, 2	; 5
   SPDR = ((Data >> 8) & 0xF) | 0x70;		//Attach configuration Bits onto MSB
 122:	9f 70       	andi	r25, 0x0F	; 15
 124:	90 67       	ori	r25, 0x70	; 112
 126:	9e bd       	out	0x2e, r25	; 46
   while (!(SPSR & (1<<SPIF)))
 128:	0d b4       	in	r0, 0x2d	; 45
 12a:	07 fe       	sbrs	r0, 7
 12c:	fd cf       	rjmp	.-6      	; 0x128 <Transmit_SPI_Master+0x8>
      ;
   SPDR = 0xFF & Data;
 12e:	8e bd       	out	0x2e, r24	; 46
   while (!(SPSR & (1<<SPIF)))
 130:	0d b4       	in	r0, 0x2d	; 45
 132:	07 fe       	sbrs	r0, 7
 134:	fd cf       	rjmp	.-6      	; 0x130 <Transmit_SPI_Master+0x10>
      ;
   PORTB |= 1 << SS;						//Turn off slave select
 136:	2a 9a       	sbi	0x05, 2	; 5
 138:	08 95       	ret

0000013a <volts_to_bits>:
      _delay_ms(1);

}

// converts input voltage between 0-5V to 12bit number for DAC
uint16_t volts_to_bits(double voltage){
 13a:	cf 92       	push	r12
 13c:	df 92       	push	r13
 13e:	ef 92       	push	r14
 140:	ff 92       	push	r15
   double bits = ((voltage/5.0)*4095);
 142:	20 e0       	ldi	r18, 0x00	; 0
 144:	30 e0       	ldi	r19, 0x00	; 0
 146:	40 ea       	ldi	r20, 0xA0	; 160
 148:	50 e4       	ldi	r21, 0x40	; 64
 14a:	0e 94 4d 03 	call	0x69a	; 0x69a <__divsf3>
 14e:	20 e0       	ldi	r18, 0x00	; 0
 150:	30 ef       	ldi	r19, 0xF0	; 240
 152:	4f e7       	ldi	r20, 0x7F	; 127
 154:	55 e4       	ldi	r21, 0x45	; 69
 156:	0e 94 88 04 	call	0x910	; 0x910 <__mulsf3>
 15a:	6b 01       	movw	r12, r22
 15c:	7c 01       	movw	r14, r24
   if(bits>4095)
 15e:	20 e0       	ldi	r18, 0x00	; 0
 160:	30 ef       	ldi	r19, 0xF0	; 240
 162:	4f e7       	ldi	r20, 0x7F	; 127
 164:	55 e4       	ldi	r21, 0x45	; 69
 166:	0e 94 83 04 	call	0x906	; 0x906 <__gesf2>
 16a:	18 16       	cp	r1, r24
 16c:	34 f0       	brlt	.+12     	; 0x17a <volts_to_bits+0x40>
		return 4095;
	else
	 return bits;                  // return 12bit equivalent for DAC
 16e:	c7 01       	movw	r24, r14
 170:	b6 01       	movw	r22, r12
 172:	0e 94 c6 03 	call	0x78c	; 0x78c <__fixunssfsi>
 176:	cb 01       	movw	r24, r22
 178:	02 c0       	rjmp	.+4      	; 0x17e <volts_to_bits+0x44>

// converts input voltage between 0-5V to 12bit number for DAC
uint16_t volts_to_bits(double voltage){
   double bits = ((voltage/5.0)*4095);
   if(bits>4095)
		return 4095;
 17a:	8f ef       	ldi	r24, 0xFF	; 255
 17c:	9f e0       	ldi	r25, 0x0F	; 15
	else
	 return bits;                  // return 12bit equivalent for DAC
}
 17e:	ff 90       	pop	r15
 180:	ef 90       	pop	r14
 182:	df 90       	pop	r13
 184:	cf 90       	pop	r12
 186:	08 95       	ret

00000188 <change_freq>:
//	overflow -= 50;
//	if(overflow<50)
//		overflow = 200;
//		
//	OCR0A = overflow;          // sets counter overflow to 250
   sampleDivider++;
 188:	80 91 00 01 	lds	r24, 0x0100
 18c:	90 91 01 01 	lds	r25, 0x0101
 190:	01 96       	adiw	r24, 0x01	; 1
   sampleDivider %= 3;
 192:	63 e0       	ldi	r22, 0x03	; 3
 194:	70 e0       	ldi	r23, 0x00	; 0
 196:	0e 94 a9 05 	call	0xb52	; 0xb52 <__divmodhi4>
 19a:	90 93 01 01 	sts	0x0101, r25
 19e:	80 93 00 01 	sts	0x0100, r24
 1a2:	08 95       	ret

000001a4 <main>:
int num_samples;	// sets global number of samples
uint8_t overflow = 1;	// set overflow value for 100Hz

int main(void)
{
	num_samples = NUM_SAMPS;
 1a4:	86 e9       	ldi	r24, 0x96	; 150
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	90 93 09 01 	sts	0x0109, r25
 1ac:	80 93 08 01 	sts	0x0108, r24
	
   // initialize GPIO, interrupts, and timers
   GPIO_Initialization();
 1b0:	0e 94 72 00 	call	0xe4	; 0xe4 <GPIO_Initialization>
   
   // fill square, sawtooth, triangle, and sine wave LUTs
   initWaves();
 1b4:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <initWaves>
   
   while (1){
	   if(check_buttons())
 1b8:	0e 94 81 00 	call	0x102	; 0x102 <check_buttons>
 1bc:	88 23       	and	r24, r24
 1be:	e1 f3       	breq	.-8      	; 0x1b8 <main+0x14>
			change_freq();
 1c0:	0e 94 c4 00 	call	0x188	; 0x188 <change_freq>
 1c4:	f9 cf       	rjmp	.-14     	; 0x1b8 <main+0x14>

000001c6 <__vector_14>:
}

///////////////////////////////////ISR/////////////////////////////////////////

// ISR to increment through wave function LUTs and set frequency
ISR(TIMER0_COMPA_vect){
 1c6:	1f 92       	push	r1
 1c8:	0f 92       	push	r0
 1ca:	0f b6       	in	r0, 0x3f	; 63
 1cc:	0f 92       	push	r0
 1ce:	11 24       	eor	r1, r1
 1d0:	2f 93       	push	r18
 1d2:	3f 93       	push	r19
 1d4:	4f 93       	push	r20
 1d6:	5f 93       	push	r21
 1d8:	6f 93       	push	r22
 1da:	7f 93       	push	r23
 1dc:	8f 93       	push	r24
 1de:	9f 93       	push	r25
 1e0:	af 93       	push	r26
 1e2:	bf 93       	push	r27
 1e4:	ef 93       	push	r30
 1e6:	ff 93       	push	r31
   Transmit_SPI_Master(nextWavePoint());
 1e8:	0e 94 09 01 	call	0x212	; 0x212 <nextWavePoint>
 1ec:	0e 94 90 00 	call	0x120	; 0x120 <Transmit_SPI_Master>
}
 1f0:	ff 91       	pop	r31
 1f2:	ef 91       	pop	r30
 1f4:	bf 91       	pop	r27
 1f6:	af 91       	pop	r26
 1f8:	9f 91       	pop	r25
 1fa:	8f 91       	pop	r24
 1fc:	7f 91       	pop	r23
 1fe:	6f 91       	pop	r22
 200:	5f 91       	pop	r21
 202:	4f 91       	pop	r20
 204:	3f 91       	pop	r19
 206:	2f 91       	pop	r18
 208:	0f 90       	pop	r0
 20a:	0f be       	out	0x3f, r0	; 63
 20c:	0f 90       	pop	r0
 20e:	1f 90       	pop	r1
 210:	18 95       	reti

00000212 <nextWavePoint>:
}

uint16_t nextWavePoint() {
   static int ndx = -1;
   
   ndx += sampleDivider;
 212:	20 91 03 01 	lds	r18, 0x0103
 216:	30 91 04 01 	lds	r19, 0x0104
 21a:	80 91 00 01 	lds	r24, 0x0100
 21e:	90 91 01 01 	lds	r25, 0x0101
 222:	82 0f       	add	r24, r18
 224:	93 1f       	adc	r25, r19
   ndx %= NUM_SAMPS;
 226:	66 e9       	ldi	r22, 0x96	; 150
 228:	70 e0       	ldi	r23, 0x00	; 0
 22a:	0e 94 a9 05 	call	0xb52	; 0xb52 <__divmodhi4>
 22e:	90 93 04 01 	sts	0x0104, r25
 232:	80 93 03 01 	sts	0x0103, r24
   
   return Wave[ndx];
 236:	88 0f       	add	r24, r24
 238:	99 1f       	adc	r25, r25
 23a:	e0 91 ba 05 	lds	r30, 0x05BA
 23e:	f0 91 bb 05 	lds	r31, 0x05BB
 242:	e8 0f       	add	r30, r24
 244:	f9 1f       	adc	r31, r25
}
 246:	80 81       	ld	r24, Z
 248:	91 81       	ldd	r25, Z+1	; 0x01
 24a:	08 95       	ret

0000024c <make_square_LUT>:
   dutyCycle += 10;
   dutyCycle %= 110;
   make_square_LUT();
}

void make_square_LUT(){
 24c:	cf 92       	push	r12
 24e:	df 92       	push	r13
 250:	ef 92       	push	r14
 252:	ff 92       	push	r15
 254:	0f 93       	push	r16
 256:	1f 93       	push	r17
 258:	cf 93       	push	r28
 25a:	df 93       	push	r29
   int i;
   int duty = num_samples * (double) dutyCycle/100;
 25c:	60 91 08 01 	lds	r22, 0x0108
 260:	70 91 09 01 	lds	r23, 0x0109
 264:	07 2e       	mov	r0, r23
 266:	00 0c       	add	r0, r0
 268:	88 0b       	sbc	r24, r24
 26a:	99 0b       	sbc	r25, r25
 26c:	0e 94 f7 03 	call	0x7ee	; 0x7ee <__floatsisf>
 270:	6b 01       	movw	r12, r22
 272:	7c 01       	movw	r14, r24
 274:	80 91 05 01 	lds	r24, 0x0105
 278:	90 91 06 01 	lds	r25, 0x0106
 27c:	bc 01       	movw	r22, r24
 27e:	99 0f       	add	r25, r25
 280:	88 0b       	sbc	r24, r24
 282:	99 0b       	sbc	r25, r25
 284:	0e 94 f7 03 	call	0x7ee	; 0x7ee <__floatsisf>
 288:	9b 01       	movw	r18, r22
 28a:	ac 01       	movw	r20, r24
 28c:	c7 01       	movw	r24, r14
 28e:	b6 01       	movw	r22, r12
 290:	0e 94 88 04 	call	0x910	; 0x910 <__mulsf3>
 294:	20 e0       	ldi	r18, 0x00	; 0
 296:	30 e0       	ldi	r19, 0x00	; 0
 298:	48 ec       	ldi	r20, 0xC8	; 200
 29a:	52 e4       	ldi	r21, 0x42	; 66
 29c:	0e 94 4d 03 	call	0x69a	; 0x69a <__divsf3>
 2a0:	0e 94 bf 03 	call	0x77e	; 0x77e <__fixsfsi>
 2a4:	eb 01       	movw	r28, r22
   
   for (i = 0; i < duty; i++)
 2a6:	1c 16       	cp	r1, r28
 2a8:	1d 06       	cpc	r1, r29
 2aa:	b4 f4       	brge	.+44     	; 0x2d8 <make_square_LUT+0x8c>
 2ac:	0e e8       	ldi	r16, 0x8E	; 142
 2ae:	14 e0       	ldi	r17, 0x04	; 4
 2b0:	66 0f       	add	r22, r22
 2b2:	77 1f       	adc	r23, r23
 2b4:	cb 01       	movw	r24, r22
 2b6:	82 57       	subi	r24, 0x72	; 114
 2b8:	9b 4f       	sbci	r25, 0xFB	; 251
 2ba:	7c 01       	movw	r14, r24
      SquareWave[i] = volts_to_bits(MAX_VOLTAGE);
 2bc:	60 e0       	ldi	r22, 0x00	; 0
 2be:	70 e0       	ldi	r23, 0x00	; 0
 2c0:	80 ea       	ldi	r24, 0xA0	; 160
 2c2:	90 e4       	ldi	r25, 0x40	; 64
 2c4:	0e 94 9d 00 	call	0x13a	; 0x13a <volts_to_bits>
 2c8:	f8 01       	movw	r30, r16
 2ca:	81 93       	st	Z+, r24
 2cc:	91 93       	st	Z+, r25
 2ce:	8f 01       	movw	r16, r30

void make_square_LUT(){
   int i;
   int duty = num_samples * (double) dutyCycle/100;
   
   for (i = 0; i < duty; i++)
 2d0:	ee 15       	cp	r30, r14
 2d2:	ff 05       	cpc	r31, r15
 2d4:	99 f7       	brne	.-26     	; 0x2bc <make_square_LUT+0x70>
 2d6:	02 c0       	rjmp	.+4      	; 0x2dc <make_square_LUT+0x90>
 2d8:	c0 e0       	ldi	r28, 0x00	; 0
 2da:	d0 e0       	ldi	r29, 0x00	; 0
      SquareWave[i] = volts_to_bits(MAX_VOLTAGE);
   
   for ( ; i < num_samples ; i++)
 2dc:	80 91 08 01 	lds	r24, 0x0108
 2e0:	90 91 09 01 	lds	r25, 0x0109
 2e4:	c8 17       	cp	r28, r24
 2e6:	d9 07       	cpc	r29, r25
 2e8:	b4 f4       	brge	.+44     	; 0x316 <make_square_LUT+0xca>
 2ea:	8e 01       	movw	r16, r28
 2ec:	00 0f       	add	r16, r16
 2ee:	11 1f       	adc	r17, r17
 2f0:	02 57       	subi	r16, 0x72	; 114
 2f2:	1b 4f       	sbci	r17, 0xFB	; 251
      SquareWave[i] = volts_to_bits(MIN_VOLTAGE);
 2f4:	60 e0       	ldi	r22, 0x00	; 0
 2f6:	70 e0       	ldi	r23, 0x00	; 0
 2f8:	cb 01       	movw	r24, r22
 2fa:	0e 94 9d 00 	call	0x13a	; 0x13a <volts_to_bits>
 2fe:	f8 01       	movw	r30, r16
 300:	81 93       	st	Z+, r24
 302:	91 93       	st	Z+, r25
 304:	8f 01       	movw	r16, r30
   int duty = num_samples * (double) dutyCycle/100;
   
   for (i = 0; i < duty; i++)
      SquareWave[i] = volts_to_bits(MAX_VOLTAGE);
   
   for ( ; i < num_samples ; i++)
 306:	21 96       	adiw	r28, 0x01	; 1
 308:	80 91 08 01 	lds	r24, 0x0108
 30c:	90 91 09 01 	lds	r25, 0x0109
 310:	c8 17       	cp	r28, r24
 312:	d9 07       	cpc	r29, r25
 314:	7c f3       	brlt	.-34     	; 0x2f4 <make_square_LUT+0xa8>
      SquareWave[i] = volts_to_bits(MIN_VOLTAGE);
}
 316:	df 91       	pop	r29
 318:	cf 91       	pop	r28
 31a:	1f 91       	pop	r17
 31c:	0f 91       	pop	r16
 31e:	ff 90       	pop	r15
 320:	ef 90       	pop	r14
 322:	df 90       	pop	r13
 324:	cf 90       	pop	r12
 326:	08 95       	ret

00000328 <make_triangle_LUT>:

void make_triangle_LUT(){
 328:	4f 92       	push	r4
 32a:	5f 92       	push	r5
 32c:	6f 92       	push	r6
 32e:	7f 92       	push	r7
 330:	af 92       	push	r10
 332:	bf 92       	push	r11
 334:	cf 92       	push	r12
 336:	df 92       	push	r13
 338:	ef 92       	push	r14
 33a:	ff 92       	push	r15
 33c:	0f 93       	push	r16
 33e:	1f 93       	push	r17
 340:	cf 93       	push	r28
 342:	df 93       	push	r29
   int i;
   int peak = num_samples / 2;
 344:	a0 90 08 01 	lds	r10, 0x0108
 348:	b0 90 09 01 	lds	r11, 0x0109
 34c:	bb 20       	and	r11, r11
 34e:	1c f4       	brge	.+6      	; 0x356 <make_triangle_LUT+0x2e>
 350:	2f ef       	ldi	r18, 0xFF	; 255
 352:	a2 1a       	sub	r10, r18
 354:	b2 0a       	sbc	r11, r18
 356:	b5 94       	asr	r11
 358:	a7 94       	ror	r10
   double increment = ((double) MAX_VOLTAGE - MIN_VOLTAGE) / peak;
 35a:	b5 01       	movw	r22, r10
 35c:	0b 2c       	mov	r0, r11
 35e:	00 0c       	add	r0, r0
 360:	88 0b       	sbc	r24, r24
 362:	99 0b       	sbc	r25, r25
 364:	0e 94 f7 03 	call	0x7ee	; 0x7ee <__floatsisf>
 368:	9b 01       	movw	r18, r22
 36a:	ac 01       	movw	r20, r24
 36c:	60 e0       	ldi	r22, 0x00	; 0
 36e:	70 e0       	ldi	r23, 0x00	; 0
 370:	80 ea       	ldi	r24, 0xA0	; 160
 372:	90 e4       	ldi	r25, 0x40	; 64
 374:	0e 94 4d 03 	call	0x69a	; 0x69a <__divsf3>
 378:	2b 01       	movw	r4, r22
 37a:	3c 01       	movw	r6, r24
   double voltage = MIN_VOLTAGE - increment;
 37c:	9b 01       	movw	r18, r22
 37e:	ac 01       	movw	r20, r24
 380:	60 e0       	ldi	r22, 0x00	; 0
 382:	70 e0       	ldi	r23, 0x00	; 0
 384:	cb 01       	movw	r24, r22
 386:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <__subsf3>
 38a:	6b 01       	movw	r12, r22
 38c:	7c 01       	movw	r14, r24
   
   for (i = 0; i < (peak + 1); i++)
 38e:	e5 01       	movw	r28, r10
 390:	21 96       	adiw	r28, 0x01	; 1
 392:	1c 16       	cp	r1, r28
 394:	1d 06       	cpc	r1, r29
 396:	dc f4       	brge	.+54     	; 0x3ce <make_triangle_LUT+0xa6>
 398:	02 e6       	ldi	r16, 0x62	; 98
 39a:	13 e0       	ldi	r17, 0x03	; 3
 39c:	c5 01       	movw	r24, r10
 39e:	88 0f       	add	r24, r24
 3a0:	99 1f       	adc	r25, r25
 3a2:	fc 01       	movw	r30, r24
 3a4:	ec 59       	subi	r30, 0x9C	; 156
 3a6:	fc 4f       	sbci	r31, 0xFC	; 252
 3a8:	5f 01       	movw	r10, r30
      TriWave[i] = volts_to_bits(voltage += increment);
 3aa:	a3 01       	movw	r20, r6
 3ac:	92 01       	movw	r18, r4
 3ae:	c7 01       	movw	r24, r14
 3b0:	b6 01       	movw	r22, r12
 3b2:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <__addsf3>
 3b6:	6b 01       	movw	r12, r22
 3b8:	7c 01       	movw	r14, r24
 3ba:	0e 94 9d 00 	call	0x13a	; 0x13a <volts_to_bits>
 3be:	f8 01       	movw	r30, r16
 3c0:	81 93       	st	Z+, r24
 3c2:	91 93       	st	Z+, r25
 3c4:	8f 01       	movw	r16, r30
   int i;
   int peak = num_samples / 2;
   double increment = ((double) MAX_VOLTAGE - MIN_VOLTAGE) / peak;
   double voltage = MIN_VOLTAGE - increment;
   
   for (i = 0; i < (peak + 1); i++)
 3c6:	ea 15       	cp	r30, r10
 3c8:	fb 05       	cpc	r31, r11
 3ca:	79 f7       	brne	.-34     	; 0x3aa <make_triangle_LUT+0x82>
 3cc:	02 c0       	rjmp	.+4      	; 0x3d2 <make_triangle_LUT+0xaa>
 3ce:	c0 e0       	ldi	r28, 0x00	; 0
 3d0:	d0 e0       	ldi	r29, 0x00	; 0
      TriWave[i] = volts_to_bits(voltage += increment);
   
   for ( ; i < (num_samples - 1); i++)
 3d2:	80 91 08 01 	lds	r24, 0x0108
 3d6:	90 91 09 01 	lds	r25, 0x0109
 3da:	01 97       	sbiw	r24, 0x01	; 1
 3dc:	c8 17       	cp	r28, r24
 3de:	d9 07       	cpc	r29, r25
 3e0:	e4 f4       	brge	.+56     	; 0x41a <make_triangle_LUT+0xf2>
 3e2:	8e 01       	movw	r16, r28
 3e4:	00 0f       	add	r16, r16
 3e6:	11 1f       	adc	r17, r17
 3e8:	0e 59       	subi	r16, 0x9E	; 158
 3ea:	1c 4f       	sbci	r17, 0xFC	; 252
      TriWave[i] = volts_to_bits(voltage -= increment);
 3ec:	a3 01       	movw	r20, r6
 3ee:	92 01       	movw	r18, r4
 3f0:	c7 01       	movw	r24, r14
 3f2:	b6 01       	movw	r22, r12
 3f4:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <__subsf3>
 3f8:	6b 01       	movw	r12, r22
 3fa:	7c 01       	movw	r14, r24
 3fc:	0e 94 9d 00 	call	0x13a	; 0x13a <volts_to_bits>
 400:	f8 01       	movw	r30, r16
 402:	81 93       	st	Z+, r24
 404:	91 93       	st	Z+, r25
 406:	8f 01       	movw	r16, r30
   double voltage = MIN_VOLTAGE - increment;
   
   for (i = 0; i < (peak + 1); i++)
      TriWave[i] = volts_to_bits(voltage += increment);
   
   for ( ; i < (num_samples - 1); i++)
 408:	21 96       	adiw	r28, 0x01	; 1
 40a:	80 91 08 01 	lds	r24, 0x0108
 40e:	90 91 09 01 	lds	r25, 0x0109
 412:	01 97       	sbiw	r24, 0x01	; 1
 414:	c8 17       	cp	r28, r24
 416:	d9 07       	cpc	r29, r25
 418:	4c f3       	brlt	.-46     	; 0x3ec <make_triangle_LUT+0xc4>
      TriWave[i] = volts_to_bits(voltage -= increment);
}
 41a:	df 91       	pop	r29
 41c:	cf 91       	pop	r28
 41e:	1f 91       	pop	r17
 420:	0f 91       	pop	r16
 422:	ff 90       	pop	r15
 424:	ef 90       	pop	r14
 426:	df 90       	pop	r13
 428:	cf 90       	pop	r12
 42a:	bf 90       	pop	r11
 42c:	af 90       	pop	r10
 42e:	7f 90       	pop	r7
 430:	6f 90       	pop	r6
 432:	5f 90       	pop	r5
 434:	4f 90       	pop	r4
 436:	08 95       	ret

00000438 <make_sawtooth_LUT>:

void make_sawtooth_LUT(){
 438:	8f 92       	push	r8
 43a:	9f 92       	push	r9
 43c:	af 92       	push	r10
 43e:	bf 92       	push	r11
 440:	cf 92       	push	r12
 442:	df 92       	push	r13
 444:	ef 92       	push	r14
 446:	ff 92       	push	r15
 448:	0f 93       	push	r16
 44a:	1f 93       	push	r17
 44c:	cf 93       	push	r28
 44e:	df 93       	push	r29
   int ndx;
   double increment = ((double) MAX_VOLTAGE - MIN_VOLTAGE) / (num_samples - 1);
 450:	c0 91 08 01 	lds	r28, 0x0108
 454:	d0 91 09 01 	lds	r29, 0x0109
 458:	be 01       	movw	r22, r28
 45a:	61 50       	subi	r22, 0x01	; 1
 45c:	71 09       	sbc	r23, r1
 45e:	07 2e       	mov	r0, r23
 460:	00 0c       	add	r0, r0
 462:	88 0b       	sbc	r24, r24
 464:	99 0b       	sbc	r25, r25
 466:	0e 94 f7 03 	call	0x7ee	; 0x7ee <__floatsisf>
 46a:	9b 01       	movw	r18, r22
 46c:	ac 01       	movw	r20, r24
 46e:	60 e0       	ldi	r22, 0x00	; 0
 470:	70 e0       	ldi	r23, 0x00	; 0
 472:	80 ea       	ldi	r24, 0xA0	; 160
 474:	90 e4       	ldi	r25, 0x40	; 64
 476:	0e 94 4d 03 	call	0x69a	; 0x69a <__divsf3>
 47a:	4b 01       	movw	r8, r22
 47c:	5c 01       	movw	r10, r24
   double voltage = MIN_VOLTAGE -increment;
 47e:	9b 01       	movw	r18, r22
 480:	ac 01       	movw	r20, r24
 482:	60 e0       	ldi	r22, 0x00	; 0
 484:	70 e0       	ldi	r23, 0x00	; 0
 486:	cb 01       	movw	r24, r22
 488:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <__subsf3>
 48c:	6b 01       	movw	r12, r22
 48e:	7c 01       	movw	r14, r24
   
   for (ndx = 0; ndx < num_samples; ndx++)
 490:	1c 16       	cp	r1, r28
 492:	1d 06       	cpc	r1, r29
 494:	d4 f4       	brge	.+52     	; 0x4ca <make_sawtooth_LUT+0x92>
 496:	06 e3       	ldi	r16, 0x36	; 54
 498:	12 e0       	ldi	r17, 0x02	; 2
 49a:	c0 e0       	ldi	r28, 0x00	; 0
 49c:	d0 e0       	ldi	r29, 0x00	; 0
      SawWave[ndx] = volts_to_bits(voltage += increment);
 49e:	a5 01       	movw	r20, r10
 4a0:	94 01       	movw	r18, r8
 4a2:	c7 01       	movw	r24, r14
 4a4:	b6 01       	movw	r22, r12
 4a6:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <__addsf3>
 4aa:	6b 01       	movw	r12, r22
 4ac:	7c 01       	movw	r14, r24
 4ae:	0e 94 9d 00 	call	0x13a	; 0x13a <volts_to_bits>
 4b2:	f8 01       	movw	r30, r16
 4b4:	81 93       	st	Z+, r24
 4b6:	91 93       	st	Z+, r25
 4b8:	8f 01       	movw	r16, r30
void make_sawtooth_LUT(){
   int ndx;
   double increment = ((double) MAX_VOLTAGE - MIN_VOLTAGE) / (num_samples - 1);
   double voltage = MIN_VOLTAGE -increment;
   
   for (ndx = 0; ndx < num_samples; ndx++)
 4ba:	21 96       	adiw	r28, 0x01	; 1
 4bc:	80 91 08 01 	lds	r24, 0x0108
 4c0:	90 91 09 01 	lds	r25, 0x0109
 4c4:	c8 17       	cp	r28, r24
 4c6:	d9 07       	cpc	r29, r25
 4c8:	54 f3       	brlt	.-44     	; 0x49e <make_sawtooth_LUT+0x66>
      SawWave[ndx] = volts_to_bits(voltage += increment);
}
 4ca:	df 91       	pop	r29
 4cc:	cf 91       	pop	r28
 4ce:	1f 91       	pop	r17
 4d0:	0f 91       	pop	r16
 4d2:	ff 90       	pop	r15
 4d4:	ef 90       	pop	r14
 4d6:	df 90       	pop	r13
 4d8:	cf 90       	pop	r12
 4da:	bf 90       	pop	r11
 4dc:	af 90       	pop	r10
 4de:	9f 90       	pop	r9
 4e0:	8f 90       	pop	r8
 4e2:	08 95       	ret

000004e4 <make_sin_LUT>:

void make_sin_LUT(){
 4e4:	8f 92       	push	r8
 4e6:	9f 92       	push	r9
 4e8:	af 92       	push	r10
 4ea:	bf 92       	push	r11
 4ec:	cf 92       	push	r12
 4ee:	df 92       	push	r13
 4f0:	ef 92       	push	r14
 4f2:	ff 92       	push	r15
 4f4:	0f 93       	push	r16
 4f6:	1f 93       	push	r17
 4f8:	cf 93       	push	r28
 4fa:	df 93       	push	r29
   int ndx;
   double increment = 2 * M_PI / num_samples;
 4fc:	c0 91 08 01 	lds	r28, 0x0108
 500:	d0 91 09 01 	lds	r29, 0x0109
 504:	be 01       	movw	r22, r28
 506:	0d 2e       	mov	r0, r29
 508:	00 0c       	add	r0, r0
 50a:	88 0b       	sbc	r24, r24
 50c:	99 0b       	sbc	r25, r25
 50e:	0e 94 f7 03 	call	0x7ee	; 0x7ee <__floatsisf>
 512:	9b 01       	movw	r18, r22
 514:	ac 01       	movw	r20, r24
 516:	6b ed       	ldi	r22, 0xDB	; 219
 518:	7f e0       	ldi	r23, 0x0F	; 15
 51a:	89 ec       	ldi	r24, 0xC9	; 201
 51c:	90 e4       	ldi	r25, 0x40	; 64
 51e:	0e 94 4d 03 	call	0x69a	; 0x69a <__divsf3>
 522:	4b 01       	movw	r8, r22
 524:	5c 01       	movw	r10, r24
   double rad = -increment;
 526:	6b 01       	movw	r12, r22
 528:	7c 01       	movw	r14, r24
 52a:	f7 fa       	bst	r15, 7
 52c:	f0 94       	com	r15
 52e:	f7 f8       	bld	r15, 7
 530:	f0 94       	com	r15
   double ampli = ((double) MAX_VOLTAGE - MIN_VOLTAGE) / 2;
   // The amplitude/2 is neccessary to compensate for sin()'s amplitude of 2
   double offset = MIN_VOLTAGE + ampli;
   
   for (ndx = 0; ndx < num_samples; ndx++)
 532:	1c 16       	cp	r1, r28
 534:	1d 06       	cpc	r1, r29
 536:	44 f5       	brge	.+80     	; 0x588 <make_sin_LUT+0xa4>
 538:	0a e0       	ldi	r16, 0x0A	; 10
 53a:	11 e0       	ldi	r17, 0x01	; 1
 53c:	c0 e0       	ldi	r28, 0x00	; 0
 53e:	d0 e0       	ldi	r29, 0x00	; 0
      SinWave[ndx] = volts_to_bits(ampli * sin(rad += increment) + offset);
 540:	a5 01       	movw	r20, r10
 542:	94 01       	movw	r18, r8
 544:	c7 01       	movw	r24, r14
 546:	b6 01       	movw	r22, r12
 548:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <__addsf3>
 54c:	6b 01       	movw	r12, r22
 54e:	7c 01       	movw	r14, r24
 550:	0e 94 f5 04 	call	0x9ea	; 0x9ea <sin>
 554:	20 e0       	ldi	r18, 0x00	; 0
 556:	30 e0       	ldi	r19, 0x00	; 0
 558:	40 e2       	ldi	r20, 0x20	; 32
 55a:	50 e4       	ldi	r21, 0x40	; 64
 55c:	0e 94 88 04 	call	0x910	; 0x910 <__mulsf3>
 560:	20 e0       	ldi	r18, 0x00	; 0
 562:	30 e0       	ldi	r19, 0x00	; 0
 564:	40 e2       	ldi	r20, 0x20	; 32
 566:	50 e4       	ldi	r21, 0x40	; 64
 568:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <__addsf3>
 56c:	0e 94 9d 00 	call	0x13a	; 0x13a <volts_to_bits>
 570:	f8 01       	movw	r30, r16
 572:	81 93       	st	Z+, r24
 574:	91 93       	st	Z+, r25
 576:	8f 01       	movw	r16, r30
   double rad = -increment;
   double ampli = ((double) MAX_VOLTAGE - MIN_VOLTAGE) / 2;
   // The amplitude/2 is neccessary to compensate for sin()'s amplitude of 2
   double offset = MIN_VOLTAGE + ampli;
   
   for (ndx = 0; ndx < num_samples; ndx++)
 578:	21 96       	adiw	r28, 0x01	; 1
 57a:	80 91 08 01 	lds	r24, 0x0108
 57e:	90 91 09 01 	lds	r25, 0x0109
 582:	c8 17       	cp	r28, r24
 584:	d9 07       	cpc	r29, r25
 586:	e4 f2       	brlt	.-72     	; 0x540 <make_sin_LUT+0x5c>
      SinWave[ndx] = volts_to_bits(ampli * sin(rad += increment) + offset);
 588:	df 91       	pop	r29
 58a:	cf 91       	pop	r28
 58c:	1f 91       	pop	r17
 58e:	0f 91       	pop	r16
 590:	ff 90       	pop	r15
 592:	ef 90       	pop	r14
 594:	df 90       	pop	r13
 596:	cf 90       	pop	r12
 598:	bf 90       	pop	r11
 59a:	af 90       	pop	r10
 59c:	9f 90       	pop	r9
 59e:	8f 90       	pop	r8
 5a0:	08 95       	ret

000005a2 <initWaves>:
//   else
//      return bits;                  // return 12bit equivalent for DAC
//}

void initWaves() {
   make_square_LUT();
 5a2:	0e 94 26 01 	call	0x24c	; 0x24c <make_square_LUT>
   make_triangle_LUT();
 5a6:	0e 94 94 01 	call	0x328	; 0x328 <make_triangle_LUT>
   make_sawtooth_LUT();
 5aa:	0e 94 1c 02 	call	0x438	; 0x438 <make_sawtooth_LUT>
   make_sin_LUT();
 5ae:	0e 94 72 02 	call	0x4e4	; 0x4e4 <make_sin_LUT>
   
   Wave = SquareWave;
 5b2:	8e e8       	ldi	r24, 0x8E	; 142
 5b4:	94 e0       	ldi	r25, 0x04	; 4
 5b6:	90 93 bb 05 	sts	0x05BB, r25
 5ba:	80 93 ba 05 	sts	0x05BA, r24
 5be:	08 95       	ret

000005c0 <__subsf3>:
 5c0:	50 58       	subi	r21, 0x80	; 128

000005c2 <__addsf3>:
 5c2:	bb 27       	eor	r27, r27
 5c4:	aa 27       	eor	r26, r26
 5c6:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <__addsf3x>
 5ca:	0c 94 49 04 	jmp	0x892	; 0x892 <__fp_round>
 5ce:	0e 94 3b 04 	call	0x876	; 0x876 <__fp_pscA>
 5d2:	38 f0       	brcs	.+14     	; 0x5e2 <__addsf3+0x20>
 5d4:	0e 94 42 04 	call	0x884	; 0x884 <__fp_pscB>
 5d8:	20 f0       	brcs	.+8      	; 0x5e2 <__addsf3+0x20>
 5da:	39 f4       	brne	.+14     	; 0x5ea <__addsf3+0x28>
 5dc:	9f 3f       	cpi	r25, 0xFF	; 255
 5de:	19 f4       	brne	.+6      	; 0x5e6 <__addsf3+0x24>
 5e0:	26 f4       	brtc	.+8      	; 0x5ea <__addsf3+0x28>
 5e2:	0c 94 38 04 	jmp	0x870	; 0x870 <__fp_nan>
 5e6:	0e f4       	brtc	.+2      	; 0x5ea <__addsf3+0x28>
 5e8:	e0 95       	com	r30
 5ea:	e7 fb       	bst	r30, 7
 5ec:	0c 94 32 04 	jmp	0x864	; 0x864 <__fp_inf>

000005f0 <__addsf3x>:
 5f0:	e9 2f       	mov	r30, r25
 5f2:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <__fp_split3>
 5f6:	58 f3       	brcs	.-42     	; 0x5ce <__addsf3+0xc>
 5f8:	ba 17       	cp	r27, r26
 5fa:	62 07       	cpc	r22, r18
 5fc:	73 07       	cpc	r23, r19
 5fe:	84 07       	cpc	r24, r20
 600:	95 07       	cpc	r25, r21
 602:	20 f0       	brcs	.+8      	; 0x60c <__addsf3x+0x1c>
 604:	79 f4       	brne	.+30     	; 0x624 <__addsf3x+0x34>
 606:	a6 f5       	brtc	.+104    	; 0x670 <__addsf3x+0x80>
 608:	0c 94 7c 04 	jmp	0x8f8	; 0x8f8 <__fp_zero>
 60c:	0e f4       	brtc	.+2      	; 0x610 <__addsf3x+0x20>
 60e:	e0 95       	com	r30
 610:	0b 2e       	mov	r0, r27
 612:	ba 2f       	mov	r27, r26
 614:	a0 2d       	mov	r26, r0
 616:	0b 01       	movw	r0, r22
 618:	b9 01       	movw	r22, r18
 61a:	90 01       	movw	r18, r0
 61c:	0c 01       	movw	r0, r24
 61e:	ca 01       	movw	r24, r20
 620:	a0 01       	movw	r20, r0
 622:	11 24       	eor	r1, r1
 624:	ff 27       	eor	r31, r31
 626:	59 1b       	sub	r21, r25
 628:	99 f0       	breq	.+38     	; 0x650 <__addsf3x+0x60>
 62a:	59 3f       	cpi	r21, 0xF9	; 249
 62c:	50 f4       	brcc	.+20     	; 0x642 <__addsf3x+0x52>
 62e:	50 3e       	cpi	r21, 0xE0	; 224
 630:	68 f1       	brcs	.+90     	; 0x68c <__addsf3x+0x9c>
 632:	1a 16       	cp	r1, r26
 634:	f0 40       	sbci	r31, 0x00	; 0
 636:	a2 2f       	mov	r26, r18
 638:	23 2f       	mov	r18, r19
 63a:	34 2f       	mov	r19, r20
 63c:	44 27       	eor	r20, r20
 63e:	58 5f       	subi	r21, 0xF8	; 248
 640:	f3 cf       	rjmp	.-26     	; 0x628 <__addsf3x+0x38>
 642:	46 95       	lsr	r20
 644:	37 95       	ror	r19
 646:	27 95       	ror	r18
 648:	a7 95       	ror	r26
 64a:	f0 40       	sbci	r31, 0x00	; 0
 64c:	53 95       	inc	r21
 64e:	c9 f7       	brne	.-14     	; 0x642 <__addsf3x+0x52>
 650:	7e f4       	brtc	.+30     	; 0x670 <__addsf3x+0x80>
 652:	1f 16       	cp	r1, r31
 654:	ba 0b       	sbc	r27, r26
 656:	62 0b       	sbc	r22, r18
 658:	73 0b       	sbc	r23, r19
 65a:	84 0b       	sbc	r24, r20
 65c:	ba f0       	brmi	.+46     	; 0x68c <__addsf3x+0x9c>
 65e:	91 50       	subi	r25, 0x01	; 1
 660:	a1 f0       	breq	.+40     	; 0x68a <__addsf3x+0x9a>
 662:	ff 0f       	add	r31, r31
 664:	bb 1f       	adc	r27, r27
 666:	66 1f       	adc	r22, r22
 668:	77 1f       	adc	r23, r23
 66a:	88 1f       	adc	r24, r24
 66c:	c2 f7       	brpl	.-16     	; 0x65e <__addsf3x+0x6e>
 66e:	0e c0       	rjmp	.+28     	; 0x68c <__addsf3x+0x9c>
 670:	ba 0f       	add	r27, r26
 672:	62 1f       	adc	r22, r18
 674:	73 1f       	adc	r23, r19
 676:	84 1f       	adc	r24, r20
 678:	48 f4       	brcc	.+18     	; 0x68c <__addsf3x+0x9c>
 67a:	87 95       	ror	r24
 67c:	77 95       	ror	r23
 67e:	67 95       	ror	r22
 680:	b7 95       	ror	r27
 682:	f7 95       	ror	r31
 684:	9e 3f       	cpi	r25, 0xFE	; 254
 686:	08 f0       	brcs	.+2      	; 0x68a <__addsf3x+0x9a>
 688:	b0 cf       	rjmp	.-160    	; 0x5ea <__addsf3+0x28>
 68a:	93 95       	inc	r25
 68c:	88 0f       	add	r24, r24
 68e:	08 f0       	brcs	.+2      	; 0x692 <__addsf3x+0xa2>
 690:	99 27       	eor	r25, r25
 692:	ee 0f       	add	r30, r30
 694:	97 95       	ror	r25
 696:	87 95       	ror	r24
 698:	08 95       	ret

0000069a <__divsf3>:
 69a:	0e 94 61 03 	call	0x6c2	; 0x6c2 <__divsf3x>
 69e:	0c 94 49 04 	jmp	0x892	; 0x892 <__fp_round>
 6a2:	0e 94 42 04 	call	0x884	; 0x884 <__fp_pscB>
 6a6:	58 f0       	brcs	.+22     	; 0x6be <__divsf3+0x24>
 6a8:	0e 94 3b 04 	call	0x876	; 0x876 <__fp_pscA>
 6ac:	40 f0       	brcs	.+16     	; 0x6be <__divsf3+0x24>
 6ae:	29 f4       	brne	.+10     	; 0x6ba <__divsf3+0x20>
 6b0:	5f 3f       	cpi	r21, 0xFF	; 255
 6b2:	29 f0       	breq	.+10     	; 0x6be <__divsf3+0x24>
 6b4:	0c 94 32 04 	jmp	0x864	; 0x864 <__fp_inf>
 6b8:	51 11       	cpse	r21, r1
 6ba:	0c 94 7d 04 	jmp	0x8fa	; 0x8fa <__fp_szero>
 6be:	0c 94 38 04 	jmp	0x870	; 0x870 <__fp_nan>

000006c2 <__divsf3x>:
 6c2:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <__fp_split3>
 6c6:	68 f3       	brcs	.-38     	; 0x6a2 <__divsf3+0x8>

000006c8 <__divsf3_pse>:
 6c8:	99 23       	and	r25, r25
 6ca:	b1 f3       	breq	.-20     	; 0x6b8 <__divsf3+0x1e>
 6cc:	55 23       	and	r21, r21
 6ce:	91 f3       	breq	.-28     	; 0x6b4 <__divsf3+0x1a>
 6d0:	95 1b       	sub	r25, r21
 6d2:	55 0b       	sbc	r21, r21
 6d4:	bb 27       	eor	r27, r27
 6d6:	aa 27       	eor	r26, r26
 6d8:	62 17       	cp	r22, r18
 6da:	73 07       	cpc	r23, r19
 6dc:	84 07       	cpc	r24, r20
 6de:	38 f0       	brcs	.+14     	; 0x6ee <__divsf3_pse+0x26>
 6e0:	9f 5f       	subi	r25, 0xFF	; 255
 6e2:	5f 4f       	sbci	r21, 0xFF	; 255
 6e4:	22 0f       	add	r18, r18
 6e6:	33 1f       	adc	r19, r19
 6e8:	44 1f       	adc	r20, r20
 6ea:	aa 1f       	adc	r26, r26
 6ec:	a9 f3       	breq	.-22     	; 0x6d8 <__divsf3_pse+0x10>
 6ee:	35 d0       	rcall	.+106    	; 0x75a <__divsf3_pse+0x92>
 6f0:	0e 2e       	mov	r0, r30
 6f2:	3a f0       	brmi	.+14     	; 0x702 <__divsf3_pse+0x3a>
 6f4:	e0 e8       	ldi	r30, 0x80	; 128
 6f6:	32 d0       	rcall	.+100    	; 0x75c <__divsf3_pse+0x94>
 6f8:	91 50       	subi	r25, 0x01	; 1
 6fa:	50 40       	sbci	r21, 0x00	; 0
 6fc:	e6 95       	lsr	r30
 6fe:	00 1c       	adc	r0, r0
 700:	ca f7       	brpl	.-14     	; 0x6f4 <__divsf3_pse+0x2c>
 702:	2b d0       	rcall	.+86     	; 0x75a <__divsf3_pse+0x92>
 704:	fe 2f       	mov	r31, r30
 706:	29 d0       	rcall	.+82     	; 0x75a <__divsf3_pse+0x92>
 708:	66 0f       	add	r22, r22
 70a:	77 1f       	adc	r23, r23
 70c:	88 1f       	adc	r24, r24
 70e:	bb 1f       	adc	r27, r27
 710:	26 17       	cp	r18, r22
 712:	37 07       	cpc	r19, r23
 714:	48 07       	cpc	r20, r24
 716:	ab 07       	cpc	r26, r27
 718:	b0 e8       	ldi	r27, 0x80	; 128
 71a:	09 f0       	breq	.+2      	; 0x71e <__divsf3_pse+0x56>
 71c:	bb 0b       	sbc	r27, r27
 71e:	80 2d       	mov	r24, r0
 720:	bf 01       	movw	r22, r30
 722:	ff 27       	eor	r31, r31
 724:	93 58       	subi	r25, 0x83	; 131
 726:	5f 4f       	sbci	r21, 0xFF	; 255
 728:	3a f0       	brmi	.+14     	; 0x738 <__divsf3_pse+0x70>
 72a:	9e 3f       	cpi	r25, 0xFE	; 254
 72c:	51 05       	cpc	r21, r1
 72e:	78 f0       	brcs	.+30     	; 0x74e <__divsf3_pse+0x86>
 730:	0c 94 32 04 	jmp	0x864	; 0x864 <__fp_inf>
 734:	0c 94 7d 04 	jmp	0x8fa	; 0x8fa <__fp_szero>
 738:	5f 3f       	cpi	r21, 0xFF	; 255
 73a:	e4 f3       	brlt	.-8      	; 0x734 <__divsf3_pse+0x6c>
 73c:	98 3e       	cpi	r25, 0xE8	; 232
 73e:	d4 f3       	brlt	.-12     	; 0x734 <__divsf3_pse+0x6c>
 740:	86 95       	lsr	r24
 742:	77 95       	ror	r23
 744:	67 95       	ror	r22
 746:	b7 95       	ror	r27
 748:	f7 95       	ror	r31
 74a:	9f 5f       	subi	r25, 0xFF	; 255
 74c:	c9 f7       	brne	.-14     	; 0x740 <__divsf3_pse+0x78>
 74e:	88 0f       	add	r24, r24
 750:	91 1d       	adc	r25, r1
 752:	96 95       	lsr	r25
 754:	87 95       	ror	r24
 756:	97 f9       	bld	r25, 7
 758:	08 95       	ret
 75a:	e1 e0       	ldi	r30, 0x01	; 1
 75c:	66 0f       	add	r22, r22
 75e:	77 1f       	adc	r23, r23
 760:	88 1f       	adc	r24, r24
 762:	bb 1f       	adc	r27, r27
 764:	62 17       	cp	r22, r18
 766:	73 07       	cpc	r23, r19
 768:	84 07       	cpc	r24, r20
 76a:	ba 07       	cpc	r27, r26
 76c:	20 f0       	brcs	.+8      	; 0x776 <__divsf3_pse+0xae>
 76e:	62 1b       	sub	r22, r18
 770:	73 0b       	sbc	r23, r19
 772:	84 0b       	sbc	r24, r20
 774:	ba 0b       	sbc	r27, r26
 776:	ee 1f       	adc	r30, r30
 778:	88 f7       	brcc	.-30     	; 0x75c <__divsf3_pse+0x94>
 77a:	e0 95       	com	r30
 77c:	08 95       	ret

0000077e <__fixsfsi>:
 77e:	0e 94 c6 03 	call	0x78c	; 0x78c <__fixunssfsi>
 782:	68 94       	set
 784:	b1 11       	cpse	r27, r1
 786:	0c 94 7d 04 	jmp	0x8fa	; 0x8fa <__fp_szero>
 78a:	08 95       	ret

0000078c <__fixunssfsi>:
 78c:	0e 94 62 04 	call	0x8c4	; 0x8c4 <__fp_splitA>
 790:	88 f0       	brcs	.+34     	; 0x7b4 <__fixunssfsi+0x28>
 792:	9f 57       	subi	r25, 0x7F	; 127
 794:	98 f0       	brcs	.+38     	; 0x7bc <__fixunssfsi+0x30>
 796:	b9 2f       	mov	r27, r25
 798:	99 27       	eor	r25, r25
 79a:	b7 51       	subi	r27, 0x17	; 23
 79c:	b0 f0       	brcs	.+44     	; 0x7ca <__fixunssfsi+0x3e>
 79e:	e1 f0       	breq	.+56     	; 0x7d8 <__fixunssfsi+0x4c>
 7a0:	66 0f       	add	r22, r22
 7a2:	77 1f       	adc	r23, r23
 7a4:	88 1f       	adc	r24, r24
 7a6:	99 1f       	adc	r25, r25
 7a8:	1a f0       	brmi	.+6      	; 0x7b0 <__fixunssfsi+0x24>
 7aa:	ba 95       	dec	r27
 7ac:	c9 f7       	brne	.-14     	; 0x7a0 <__fixunssfsi+0x14>
 7ae:	14 c0       	rjmp	.+40     	; 0x7d8 <__fixunssfsi+0x4c>
 7b0:	b1 30       	cpi	r27, 0x01	; 1
 7b2:	91 f0       	breq	.+36     	; 0x7d8 <__fixunssfsi+0x4c>
 7b4:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <__fp_zero>
 7b8:	b1 e0       	ldi	r27, 0x01	; 1
 7ba:	08 95       	ret
 7bc:	0c 94 7c 04 	jmp	0x8f8	; 0x8f8 <__fp_zero>
 7c0:	67 2f       	mov	r22, r23
 7c2:	78 2f       	mov	r23, r24
 7c4:	88 27       	eor	r24, r24
 7c6:	b8 5f       	subi	r27, 0xF8	; 248
 7c8:	39 f0       	breq	.+14     	; 0x7d8 <__fixunssfsi+0x4c>
 7ca:	b9 3f       	cpi	r27, 0xF9	; 249
 7cc:	cc f3       	brlt	.-14     	; 0x7c0 <__fixunssfsi+0x34>
 7ce:	86 95       	lsr	r24
 7d0:	77 95       	ror	r23
 7d2:	67 95       	ror	r22
 7d4:	b3 95       	inc	r27
 7d6:	d9 f7       	brne	.-10     	; 0x7ce <__fixunssfsi+0x42>
 7d8:	3e f4       	brtc	.+14     	; 0x7e8 <__fixunssfsi+0x5c>
 7da:	90 95       	com	r25
 7dc:	80 95       	com	r24
 7de:	70 95       	com	r23
 7e0:	61 95       	neg	r22
 7e2:	7f 4f       	sbci	r23, 0xFF	; 255
 7e4:	8f 4f       	sbci	r24, 0xFF	; 255
 7e6:	9f 4f       	sbci	r25, 0xFF	; 255
 7e8:	08 95       	ret

000007ea <__floatunsisf>:
 7ea:	e8 94       	clt
 7ec:	09 c0       	rjmp	.+18     	; 0x800 <__floatsisf+0x12>

000007ee <__floatsisf>:
 7ee:	97 fb       	bst	r25, 7
 7f0:	3e f4       	brtc	.+14     	; 0x800 <__floatsisf+0x12>
 7f2:	90 95       	com	r25
 7f4:	80 95       	com	r24
 7f6:	70 95       	com	r23
 7f8:	61 95       	neg	r22
 7fa:	7f 4f       	sbci	r23, 0xFF	; 255
 7fc:	8f 4f       	sbci	r24, 0xFF	; 255
 7fe:	9f 4f       	sbci	r25, 0xFF	; 255
 800:	99 23       	and	r25, r25
 802:	a9 f0       	breq	.+42     	; 0x82e <__floatsisf+0x40>
 804:	f9 2f       	mov	r31, r25
 806:	96 e9       	ldi	r25, 0x96	; 150
 808:	bb 27       	eor	r27, r27
 80a:	93 95       	inc	r25
 80c:	f6 95       	lsr	r31
 80e:	87 95       	ror	r24
 810:	77 95       	ror	r23
 812:	67 95       	ror	r22
 814:	b7 95       	ror	r27
 816:	f1 11       	cpse	r31, r1
 818:	f8 cf       	rjmp	.-16     	; 0x80a <__floatsisf+0x1c>
 81a:	fa f4       	brpl	.+62     	; 0x85a <__floatsisf+0x6c>
 81c:	bb 0f       	add	r27, r27
 81e:	11 f4       	brne	.+4      	; 0x824 <__floatsisf+0x36>
 820:	60 ff       	sbrs	r22, 0
 822:	1b c0       	rjmp	.+54     	; 0x85a <__floatsisf+0x6c>
 824:	6f 5f       	subi	r22, 0xFF	; 255
 826:	7f 4f       	sbci	r23, 0xFF	; 255
 828:	8f 4f       	sbci	r24, 0xFF	; 255
 82a:	9f 4f       	sbci	r25, 0xFF	; 255
 82c:	16 c0       	rjmp	.+44     	; 0x85a <__floatsisf+0x6c>
 82e:	88 23       	and	r24, r24
 830:	11 f0       	breq	.+4      	; 0x836 <__floatsisf+0x48>
 832:	96 e9       	ldi	r25, 0x96	; 150
 834:	11 c0       	rjmp	.+34     	; 0x858 <__floatsisf+0x6a>
 836:	77 23       	and	r23, r23
 838:	21 f0       	breq	.+8      	; 0x842 <__floatsisf+0x54>
 83a:	9e e8       	ldi	r25, 0x8E	; 142
 83c:	87 2f       	mov	r24, r23
 83e:	76 2f       	mov	r23, r22
 840:	05 c0       	rjmp	.+10     	; 0x84c <__floatsisf+0x5e>
 842:	66 23       	and	r22, r22
 844:	71 f0       	breq	.+28     	; 0x862 <__floatsisf+0x74>
 846:	96 e8       	ldi	r25, 0x86	; 134
 848:	86 2f       	mov	r24, r22
 84a:	70 e0       	ldi	r23, 0x00	; 0
 84c:	60 e0       	ldi	r22, 0x00	; 0
 84e:	2a f0       	brmi	.+10     	; 0x85a <__floatsisf+0x6c>
 850:	9a 95       	dec	r25
 852:	66 0f       	add	r22, r22
 854:	77 1f       	adc	r23, r23
 856:	88 1f       	adc	r24, r24
 858:	da f7       	brpl	.-10     	; 0x850 <__floatsisf+0x62>
 85a:	88 0f       	add	r24, r24
 85c:	96 95       	lsr	r25
 85e:	87 95       	ror	r24
 860:	97 f9       	bld	r25, 7
 862:	08 95       	ret

00000864 <__fp_inf>:
 864:	97 f9       	bld	r25, 7
 866:	9f 67       	ori	r25, 0x7F	; 127
 868:	80 e8       	ldi	r24, 0x80	; 128
 86a:	70 e0       	ldi	r23, 0x00	; 0
 86c:	60 e0       	ldi	r22, 0x00	; 0
 86e:	08 95       	ret

00000870 <__fp_nan>:
 870:	9f ef       	ldi	r25, 0xFF	; 255
 872:	80 ec       	ldi	r24, 0xC0	; 192
 874:	08 95       	ret

00000876 <__fp_pscA>:
 876:	00 24       	eor	r0, r0
 878:	0a 94       	dec	r0
 87a:	16 16       	cp	r1, r22
 87c:	17 06       	cpc	r1, r23
 87e:	18 06       	cpc	r1, r24
 880:	09 06       	cpc	r0, r25
 882:	08 95       	ret

00000884 <__fp_pscB>:
 884:	00 24       	eor	r0, r0
 886:	0a 94       	dec	r0
 888:	12 16       	cp	r1, r18
 88a:	13 06       	cpc	r1, r19
 88c:	14 06       	cpc	r1, r20
 88e:	05 06       	cpc	r0, r21
 890:	08 95       	ret

00000892 <__fp_round>:
 892:	09 2e       	mov	r0, r25
 894:	03 94       	inc	r0
 896:	00 0c       	add	r0, r0
 898:	11 f4       	brne	.+4      	; 0x89e <__fp_round+0xc>
 89a:	88 23       	and	r24, r24
 89c:	52 f0       	brmi	.+20     	; 0x8b2 <__fp_round+0x20>
 89e:	bb 0f       	add	r27, r27
 8a0:	40 f4       	brcc	.+16     	; 0x8b2 <__fp_round+0x20>
 8a2:	bf 2b       	or	r27, r31
 8a4:	11 f4       	brne	.+4      	; 0x8aa <__fp_round+0x18>
 8a6:	60 ff       	sbrs	r22, 0
 8a8:	04 c0       	rjmp	.+8      	; 0x8b2 <__fp_round+0x20>
 8aa:	6f 5f       	subi	r22, 0xFF	; 255
 8ac:	7f 4f       	sbci	r23, 0xFF	; 255
 8ae:	8f 4f       	sbci	r24, 0xFF	; 255
 8b0:	9f 4f       	sbci	r25, 0xFF	; 255
 8b2:	08 95       	ret

000008b4 <__fp_split3>:
 8b4:	57 fd       	sbrc	r21, 7
 8b6:	90 58       	subi	r25, 0x80	; 128
 8b8:	44 0f       	add	r20, r20
 8ba:	55 1f       	adc	r21, r21
 8bc:	59 f0       	breq	.+22     	; 0x8d4 <__fp_splitA+0x10>
 8be:	5f 3f       	cpi	r21, 0xFF	; 255
 8c0:	71 f0       	breq	.+28     	; 0x8de <__fp_splitA+0x1a>
 8c2:	47 95       	ror	r20

000008c4 <__fp_splitA>:
 8c4:	88 0f       	add	r24, r24
 8c6:	97 fb       	bst	r25, 7
 8c8:	99 1f       	adc	r25, r25
 8ca:	61 f0       	breq	.+24     	; 0x8e4 <__fp_splitA+0x20>
 8cc:	9f 3f       	cpi	r25, 0xFF	; 255
 8ce:	79 f0       	breq	.+30     	; 0x8ee <__fp_splitA+0x2a>
 8d0:	87 95       	ror	r24
 8d2:	08 95       	ret
 8d4:	12 16       	cp	r1, r18
 8d6:	13 06       	cpc	r1, r19
 8d8:	14 06       	cpc	r1, r20
 8da:	55 1f       	adc	r21, r21
 8dc:	f2 cf       	rjmp	.-28     	; 0x8c2 <__fp_split3+0xe>
 8de:	46 95       	lsr	r20
 8e0:	f1 df       	rcall	.-30     	; 0x8c4 <__fp_splitA>
 8e2:	08 c0       	rjmp	.+16     	; 0x8f4 <__fp_splitA+0x30>
 8e4:	16 16       	cp	r1, r22
 8e6:	17 06       	cpc	r1, r23
 8e8:	18 06       	cpc	r1, r24
 8ea:	99 1f       	adc	r25, r25
 8ec:	f1 cf       	rjmp	.-30     	; 0x8d0 <__fp_splitA+0xc>
 8ee:	86 95       	lsr	r24
 8f0:	71 05       	cpc	r23, r1
 8f2:	61 05       	cpc	r22, r1
 8f4:	08 94       	sec
 8f6:	08 95       	ret

000008f8 <__fp_zero>:
 8f8:	e8 94       	clt

000008fa <__fp_szero>:
 8fa:	bb 27       	eor	r27, r27
 8fc:	66 27       	eor	r22, r22
 8fe:	77 27       	eor	r23, r23
 900:	cb 01       	movw	r24, r22
 902:	97 f9       	bld	r25, 7
 904:	08 95       	ret

00000906 <__gesf2>:
 906:	0e 94 fd 04 	call	0x9fa	; 0x9fa <__fp_cmp>
 90a:	08 f4       	brcc	.+2      	; 0x90e <__gesf2+0x8>
 90c:	8f ef       	ldi	r24, 0xFF	; 255
 90e:	08 95       	ret

00000910 <__mulsf3>:
 910:	0e 94 9b 04 	call	0x936	; 0x936 <__mulsf3x>
 914:	0c 94 49 04 	jmp	0x892	; 0x892 <__fp_round>
 918:	0e 94 3b 04 	call	0x876	; 0x876 <__fp_pscA>
 91c:	38 f0       	brcs	.+14     	; 0x92c <__mulsf3+0x1c>
 91e:	0e 94 42 04 	call	0x884	; 0x884 <__fp_pscB>
 922:	20 f0       	brcs	.+8      	; 0x92c <__mulsf3+0x1c>
 924:	95 23       	and	r25, r21
 926:	11 f0       	breq	.+4      	; 0x92c <__mulsf3+0x1c>
 928:	0c 94 32 04 	jmp	0x864	; 0x864 <__fp_inf>
 92c:	0c 94 38 04 	jmp	0x870	; 0x870 <__fp_nan>
 930:	11 24       	eor	r1, r1
 932:	0c 94 7d 04 	jmp	0x8fa	; 0x8fa <__fp_szero>

00000936 <__mulsf3x>:
 936:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <__fp_split3>
 93a:	70 f3       	brcs	.-36     	; 0x918 <__mulsf3+0x8>

0000093c <__mulsf3_pse>:
 93c:	95 9f       	mul	r25, r21
 93e:	c1 f3       	breq	.-16     	; 0x930 <__mulsf3+0x20>
 940:	95 0f       	add	r25, r21
 942:	50 e0       	ldi	r21, 0x00	; 0
 944:	55 1f       	adc	r21, r21
 946:	62 9f       	mul	r22, r18
 948:	f0 01       	movw	r30, r0
 94a:	72 9f       	mul	r23, r18
 94c:	bb 27       	eor	r27, r27
 94e:	f0 0d       	add	r31, r0
 950:	b1 1d       	adc	r27, r1
 952:	63 9f       	mul	r22, r19
 954:	aa 27       	eor	r26, r26
 956:	f0 0d       	add	r31, r0
 958:	b1 1d       	adc	r27, r1
 95a:	aa 1f       	adc	r26, r26
 95c:	64 9f       	mul	r22, r20
 95e:	66 27       	eor	r22, r22
 960:	b0 0d       	add	r27, r0
 962:	a1 1d       	adc	r26, r1
 964:	66 1f       	adc	r22, r22
 966:	82 9f       	mul	r24, r18
 968:	22 27       	eor	r18, r18
 96a:	b0 0d       	add	r27, r0
 96c:	a1 1d       	adc	r26, r1
 96e:	62 1f       	adc	r22, r18
 970:	73 9f       	mul	r23, r19
 972:	b0 0d       	add	r27, r0
 974:	a1 1d       	adc	r26, r1
 976:	62 1f       	adc	r22, r18
 978:	83 9f       	mul	r24, r19
 97a:	a0 0d       	add	r26, r0
 97c:	61 1d       	adc	r22, r1
 97e:	22 1f       	adc	r18, r18
 980:	74 9f       	mul	r23, r20
 982:	33 27       	eor	r19, r19
 984:	a0 0d       	add	r26, r0
 986:	61 1d       	adc	r22, r1
 988:	23 1f       	adc	r18, r19
 98a:	84 9f       	mul	r24, r20
 98c:	60 0d       	add	r22, r0
 98e:	21 1d       	adc	r18, r1
 990:	82 2f       	mov	r24, r18
 992:	76 2f       	mov	r23, r22
 994:	6a 2f       	mov	r22, r26
 996:	11 24       	eor	r1, r1
 998:	9f 57       	subi	r25, 0x7F	; 127
 99a:	50 40       	sbci	r21, 0x00	; 0
 99c:	9a f0       	brmi	.+38     	; 0x9c4 <__mulsf3_pse+0x88>
 99e:	f1 f0       	breq	.+60     	; 0x9dc <__mulsf3_pse+0xa0>
 9a0:	88 23       	and	r24, r24
 9a2:	4a f0       	brmi	.+18     	; 0x9b6 <__mulsf3_pse+0x7a>
 9a4:	ee 0f       	add	r30, r30
 9a6:	ff 1f       	adc	r31, r31
 9a8:	bb 1f       	adc	r27, r27
 9aa:	66 1f       	adc	r22, r22
 9ac:	77 1f       	adc	r23, r23
 9ae:	88 1f       	adc	r24, r24
 9b0:	91 50       	subi	r25, 0x01	; 1
 9b2:	50 40       	sbci	r21, 0x00	; 0
 9b4:	a9 f7       	brne	.-22     	; 0x9a0 <__mulsf3_pse+0x64>
 9b6:	9e 3f       	cpi	r25, 0xFE	; 254
 9b8:	51 05       	cpc	r21, r1
 9ba:	80 f0       	brcs	.+32     	; 0x9dc <__mulsf3_pse+0xa0>
 9bc:	0c 94 32 04 	jmp	0x864	; 0x864 <__fp_inf>
 9c0:	0c 94 7d 04 	jmp	0x8fa	; 0x8fa <__fp_szero>
 9c4:	5f 3f       	cpi	r21, 0xFF	; 255
 9c6:	e4 f3       	brlt	.-8      	; 0x9c0 <__mulsf3_pse+0x84>
 9c8:	98 3e       	cpi	r25, 0xE8	; 232
 9ca:	d4 f3       	brlt	.-12     	; 0x9c0 <__mulsf3_pse+0x84>
 9cc:	86 95       	lsr	r24
 9ce:	77 95       	ror	r23
 9d0:	67 95       	ror	r22
 9d2:	b7 95       	ror	r27
 9d4:	f7 95       	ror	r31
 9d6:	e7 95       	ror	r30
 9d8:	9f 5f       	subi	r25, 0xFF	; 255
 9da:	c1 f7       	brne	.-16     	; 0x9cc <__mulsf3_pse+0x90>
 9dc:	fe 2b       	or	r31, r30
 9de:	88 0f       	add	r24, r24
 9e0:	91 1d       	adc	r25, r1
 9e2:	96 95       	lsr	r25
 9e4:	87 95       	ror	r24
 9e6:	97 f9       	bld	r25, 7
 9e8:	08 95       	ret

000009ea <sin>:
 9ea:	9f 93       	push	r25
 9ec:	0e 94 23 05 	call	0xa46	; 0xa46 <__fp_rempio2>
 9f0:	0f 90       	pop	r0
 9f2:	07 fc       	sbrc	r0, 7
 9f4:	ee 5f       	subi	r30, 0xFE	; 254
 9f6:	0c 94 4c 05 	jmp	0xa98	; 0xa98 <__fp_sinus>

000009fa <__fp_cmp>:
 9fa:	99 0f       	add	r25, r25
 9fc:	00 08       	sbc	r0, r0
 9fe:	55 0f       	add	r21, r21
 a00:	aa 0b       	sbc	r26, r26
 a02:	e0 e8       	ldi	r30, 0x80	; 128
 a04:	fe ef       	ldi	r31, 0xFE	; 254
 a06:	16 16       	cp	r1, r22
 a08:	17 06       	cpc	r1, r23
 a0a:	e8 07       	cpc	r30, r24
 a0c:	f9 07       	cpc	r31, r25
 a0e:	c0 f0       	brcs	.+48     	; 0xa40 <__fp_cmp+0x46>
 a10:	12 16       	cp	r1, r18
 a12:	13 06       	cpc	r1, r19
 a14:	e4 07       	cpc	r30, r20
 a16:	f5 07       	cpc	r31, r21
 a18:	98 f0       	brcs	.+38     	; 0xa40 <__fp_cmp+0x46>
 a1a:	62 1b       	sub	r22, r18
 a1c:	73 0b       	sbc	r23, r19
 a1e:	84 0b       	sbc	r24, r20
 a20:	95 0b       	sbc	r25, r21
 a22:	39 f4       	brne	.+14     	; 0xa32 <__fp_cmp+0x38>
 a24:	0a 26       	eor	r0, r26
 a26:	61 f0       	breq	.+24     	; 0xa40 <__fp_cmp+0x46>
 a28:	23 2b       	or	r18, r19
 a2a:	24 2b       	or	r18, r20
 a2c:	25 2b       	or	r18, r21
 a2e:	21 f4       	brne	.+8      	; 0xa38 <__fp_cmp+0x3e>
 a30:	08 95       	ret
 a32:	0a 26       	eor	r0, r26
 a34:	09 f4       	brne	.+2      	; 0xa38 <__fp_cmp+0x3e>
 a36:	a1 40       	sbci	r26, 0x01	; 1
 a38:	a6 95       	lsr	r26
 a3a:	8f ef       	ldi	r24, 0xFF	; 255
 a3c:	81 1d       	adc	r24, r1
 a3e:	81 1d       	adc	r24, r1
 a40:	08 95       	ret
 a42:	0c 94 38 04 	jmp	0x870	; 0x870 <__fp_nan>

00000a46 <__fp_rempio2>:
 a46:	0e 94 62 04 	call	0x8c4	; 0x8c4 <__fp_splitA>
 a4a:	d8 f3       	brcs	.-10     	; 0xa42 <__fp_cmp+0x48>
 a4c:	e8 94       	clt
 a4e:	e0 e0       	ldi	r30, 0x00	; 0
 a50:	bb 27       	eor	r27, r27
 a52:	9f 57       	subi	r25, 0x7F	; 127
 a54:	f0 f0       	brcs	.+60     	; 0xa92 <__fp_rempio2+0x4c>
 a56:	2a ed       	ldi	r18, 0xDA	; 218
 a58:	3f e0       	ldi	r19, 0x0F	; 15
 a5a:	49 ec       	ldi	r20, 0xC9	; 201
 a5c:	06 c0       	rjmp	.+12     	; 0xa6a <__fp_rempio2+0x24>
 a5e:	ee 0f       	add	r30, r30
 a60:	bb 0f       	add	r27, r27
 a62:	66 1f       	adc	r22, r22
 a64:	77 1f       	adc	r23, r23
 a66:	88 1f       	adc	r24, r24
 a68:	28 f0       	brcs	.+10     	; 0xa74 <__fp_rempio2+0x2e>
 a6a:	b2 3a       	cpi	r27, 0xA2	; 162
 a6c:	62 07       	cpc	r22, r18
 a6e:	73 07       	cpc	r23, r19
 a70:	84 07       	cpc	r24, r20
 a72:	28 f0       	brcs	.+10     	; 0xa7e <__fp_rempio2+0x38>
 a74:	b2 5a       	subi	r27, 0xA2	; 162
 a76:	62 0b       	sbc	r22, r18
 a78:	73 0b       	sbc	r23, r19
 a7a:	84 0b       	sbc	r24, r20
 a7c:	e3 95       	inc	r30
 a7e:	9a 95       	dec	r25
 a80:	72 f7       	brpl	.-36     	; 0xa5e <__fp_rempio2+0x18>
 a82:	80 38       	cpi	r24, 0x80	; 128
 a84:	30 f4       	brcc	.+12     	; 0xa92 <__fp_rempio2+0x4c>
 a86:	9a 95       	dec	r25
 a88:	bb 0f       	add	r27, r27
 a8a:	66 1f       	adc	r22, r22
 a8c:	77 1f       	adc	r23, r23
 a8e:	88 1f       	adc	r24, r24
 a90:	d2 f7       	brpl	.-12     	; 0xa86 <__fp_rempio2+0x40>
 a92:	90 48       	sbci	r25, 0x80	; 128
 a94:	0c 94 62 05 	jmp	0xac4	; 0xac4 <__fp_mpack_finite>

00000a98 <__fp_sinus>:
 a98:	ef 93       	push	r30
 a9a:	e0 ff       	sbrs	r30, 0
 a9c:	07 c0       	rjmp	.+14     	; 0xaac <__fp_sinus+0x14>
 a9e:	a2 ea       	ldi	r26, 0xA2	; 162
 aa0:	2a ed       	ldi	r18, 0xDA	; 218
 aa2:	3f e0       	ldi	r19, 0x0F	; 15
 aa4:	49 ec       	ldi	r20, 0xC9	; 201
 aa6:	5f eb       	ldi	r21, 0xBF	; 191
 aa8:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <__addsf3x>
 aac:	0e 94 49 04 	call	0x892	; 0x892 <__fp_round>
 ab0:	0f 90       	pop	r0
 ab2:	03 94       	inc	r0
 ab4:	01 fc       	sbrc	r0, 1
 ab6:	90 58       	subi	r25, 0x80	; 128
 ab8:	e8 e6       	ldi	r30, 0x68	; 104
 aba:	f0 e0       	ldi	r31, 0x00	; 0
 abc:	0c 94 6e 05 	jmp	0xadc	; 0xadc <__fp_powsodd>

00000ac0 <__fp_mpack>:
 ac0:	9f 3f       	cpi	r25, 0xFF	; 255
 ac2:	31 f0       	breq	.+12     	; 0xad0 <__fp_mpack_finite+0xc>

00000ac4 <__fp_mpack_finite>:
 ac4:	91 50       	subi	r25, 0x01	; 1
 ac6:	20 f4       	brcc	.+8      	; 0xad0 <__fp_mpack_finite+0xc>
 ac8:	87 95       	ror	r24
 aca:	77 95       	ror	r23
 acc:	67 95       	ror	r22
 ace:	b7 95       	ror	r27
 ad0:	88 0f       	add	r24, r24
 ad2:	91 1d       	adc	r25, r1
 ad4:	96 95       	lsr	r25
 ad6:	87 95       	ror	r24
 ad8:	97 f9       	bld	r25, 7
 ada:	08 95       	ret

00000adc <__fp_powsodd>:
 adc:	9f 93       	push	r25
 ade:	8f 93       	push	r24
 ae0:	7f 93       	push	r23
 ae2:	6f 93       	push	r22
 ae4:	ff 93       	push	r31
 ae6:	ef 93       	push	r30
 ae8:	9b 01       	movw	r18, r22
 aea:	ac 01       	movw	r20, r24
 aec:	0e 94 88 04 	call	0x910	; 0x910 <__mulsf3>
 af0:	ef 91       	pop	r30
 af2:	ff 91       	pop	r31
 af4:	0e 94 82 05 	call	0xb04	; 0xb04 <__fp_powser>
 af8:	2f 91       	pop	r18
 afa:	3f 91       	pop	r19
 afc:	4f 91       	pop	r20
 afe:	5f 91       	pop	r21
 b00:	0c 94 88 04 	jmp	0x910	; 0x910 <__mulsf3>

00000b04 <__fp_powser>:
 b04:	df 93       	push	r29
 b06:	cf 93       	push	r28
 b08:	1f 93       	push	r17
 b0a:	0f 93       	push	r16
 b0c:	ff 92       	push	r15
 b0e:	ef 92       	push	r14
 b10:	df 92       	push	r13
 b12:	7b 01       	movw	r14, r22
 b14:	8c 01       	movw	r16, r24
 b16:	68 94       	set
 b18:	06 c0       	rjmp	.+12     	; 0xb26 <__fp_powser+0x22>
 b1a:	da 2e       	mov	r13, r26
 b1c:	ef 01       	movw	r28, r30
 b1e:	0e 94 9b 04 	call	0x936	; 0x936 <__mulsf3x>
 b22:	fe 01       	movw	r30, r28
 b24:	e8 94       	clt
 b26:	a5 91       	lpm	r26, Z+
 b28:	25 91       	lpm	r18, Z+
 b2a:	35 91       	lpm	r19, Z+
 b2c:	45 91       	lpm	r20, Z+
 b2e:	55 91       	lpm	r21, Z+
 b30:	a6 f3       	brts	.-24     	; 0xb1a <__fp_powser+0x16>
 b32:	ef 01       	movw	r28, r30
 b34:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <__addsf3x>
 b38:	fe 01       	movw	r30, r28
 b3a:	97 01       	movw	r18, r14
 b3c:	a8 01       	movw	r20, r16
 b3e:	da 94       	dec	r13
 b40:	69 f7       	brne	.-38     	; 0xb1c <__fp_powser+0x18>
 b42:	df 90       	pop	r13
 b44:	ef 90       	pop	r14
 b46:	ff 90       	pop	r15
 b48:	0f 91       	pop	r16
 b4a:	1f 91       	pop	r17
 b4c:	cf 91       	pop	r28
 b4e:	df 91       	pop	r29
 b50:	08 95       	ret

00000b52 <__divmodhi4>:
 b52:	97 fb       	bst	r25, 7
 b54:	07 2e       	mov	r0, r23
 b56:	16 f4       	brtc	.+4      	; 0xb5c <__divmodhi4+0xa>
 b58:	00 94       	com	r0
 b5a:	07 d0       	rcall	.+14     	; 0xb6a <__divmodhi4_neg1>
 b5c:	77 fd       	sbrc	r23, 7
 b5e:	09 d0       	rcall	.+18     	; 0xb72 <__divmodhi4_neg2>
 b60:	0e 94 bd 05 	call	0xb7a	; 0xb7a <__udivmodhi4>
 b64:	07 fc       	sbrc	r0, 7
 b66:	05 d0       	rcall	.+10     	; 0xb72 <__divmodhi4_neg2>
 b68:	3e f4       	brtc	.+14     	; 0xb78 <__divmodhi4_exit>

00000b6a <__divmodhi4_neg1>:
 b6a:	90 95       	com	r25
 b6c:	81 95       	neg	r24
 b6e:	9f 4f       	sbci	r25, 0xFF	; 255
 b70:	08 95       	ret

00000b72 <__divmodhi4_neg2>:
 b72:	70 95       	com	r23
 b74:	61 95       	neg	r22
 b76:	7f 4f       	sbci	r23, 0xFF	; 255

00000b78 <__divmodhi4_exit>:
 b78:	08 95       	ret

00000b7a <__udivmodhi4>:
 b7a:	aa 1b       	sub	r26, r26
 b7c:	bb 1b       	sub	r27, r27
 b7e:	51 e1       	ldi	r21, 0x11	; 17
 b80:	07 c0       	rjmp	.+14     	; 0xb90 <__udivmodhi4_ep>

00000b82 <__udivmodhi4_loop>:
 b82:	aa 1f       	adc	r26, r26
 b84:	bb 1f       	adc	r27, r27
 b86:	a6 17       	cp	r26, r22
 b88:	b7 07       	cpc	r27, r23
 b8a:	10 f0       	brcs	.+4      	; 0xb90 <__udivmodhi4_ep>
 b8c:	a6 1b       	sub	r26, r22
 b8e:	b7 0b       	sbc	r27, r23

00000b90 <__udivmodhi4_ep>:
 b90:	88 1f       	adc	r24, r24
 b92:	99 1f       	adc	r25, r25
 b94:	5a 95       	dec	r21
 b96:	a9 f7       	brne	.-22     	; 0xb82 <__udivmodhi4_loop>
 b98:	80 95       	com	r24
 b9a:	90 95       	com	r25
 b9c:	bc 01       	movw	r22, r24
 b9e:	cd 01       	movw	r24, r26
 ba0:	08 95       	ret

00000ba2 <_exit>:
 ba2:	f8 94       	cli

00000ba4 <__stop_program>:
 ba4:	ff cf       	rjmp	.-2      	; 0xba4 <__stop_program>
