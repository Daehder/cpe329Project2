
Project2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000d4c  00000de0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d4c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000004c2  00800110  00800110  00000df0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000df0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e20  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  00000e60  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a6c  00000000  00000000  00000f58  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000043d  00000000  00000000  000019c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004af  00000000  00000000  00001e01  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000328  00000000  00000000  000022b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003e2  00000000  00000000  000025d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000085f  00000000  00000000  000029ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  00003219  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 43 00 	jmp	0x86	; 0x86 <__ctors_end>
   4:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
   8:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
   c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  10:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  14:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  18:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  1c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__vector_7>
  20:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  24:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  28:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  2c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  30:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  34:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  38:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__vector_14>
  3c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  40:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  44:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  48:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  4c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  50:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  54:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  58:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  5c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  60:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  64:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  68:	05 a8       	ldd	r0, Z+53	; 0x35
  6a:	4c cd       	rjmp	.-1384   	; 0xfffffb04 <__eeprom_end+0xff7efb04>
  6c:	b2 d4       	rcall	.+2404   	; 0x9d2 <__floatsisf+0x3e>
  6e:	4e b9       	out	0x0e, r20	; 14
  70:	38 36       	cpi	r19, 0x68	; 104
  72:	a9 02       	muls	r26, r25
  74:	0c 50       	subi	r16, 0x0C	; 12
  76:	b9 91       	ld	r27, Y+
  78:	86 88       	ldd	r8, Z+22	; 0x16
  7a:	08 3c       	cpi	r16, 0xC8	; 200
  7c:	a6 aa       	std	Z+54, r10	; 0x36
  7e:	aa 2a       	or	r10, r26
  80:	be 00       	.word	0x00be	; ????
  82:	00 00       	nop
  84:	80 3f       	cpi	r24, 0xF0	; 240

00000086 <__ctors_end>:
  86:	11 24       	eor	r1, r1
  88:	1f be       	out	0x3f, r1	; 63
  8a:	cf ef       	ldi	r28, 0xFF	; 255
  8c:	d8 e0       	ldi	r29, 0x08	; 8
  8e:	de bf       	out	0x3e, r29	; 62
  90:	cd bf       	out	0x3d, r28	; 61

00000092 <__do_copy_data>:
  92:	11 e0       	ldi	r17, 0x01	; 1
  94:	a0 e0       	ldi	r26, 0x00	; 0
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	ec e4       	ldi	r30, 0x4C	; 76
  9a:	fd e0       	ldi	r31, 0x0D	; 13
  9c:	02 c0       	rjmp	.+4      	; 0xa2 <__do_copy_data+0x10>
  9e:	05 90       	lpm	r0, Z+
  a0:	0d 92       	st	X+, r0
  a2:	a0 31       	cpi	r26, 0x10	; 16
  a4:	b1 07       	cpc	r27, r17
  a6:	d9 f7       	brne	.-10     	; 0x9e <__do_copy_data+0xc>

000000a8 <__do_clear_bss>:
  a8:	25 e0       	ldi	r18, 0x05	; 5
  aa:	a0 e1       	ldi	r26, 0x10	; 16
  ac:	b1 e0       	ldi	r27, 0x01	; 1
  ae:	01 c0       	rjmp	.+2      	; 0xb2 <.do_clear_bss_start>

000000b0 <.do_clear_bss_loop>:
  b0:	1d 92       	st	X+, r1

000000b2 <.do_clear_bss_start>:
  b2:	a2 3d       	cpi	r26, 0xD2	; 210
  b4:	b2 07       	cpc	r27, r18
  b6:	e1 f7       	brne	.-8      	; 0xb0 <.do_clear_bss_loop>
  b8:	0e 94 d5 00 	call	0x1aa	; 0x1aa <main>
  bc:	0c 94 a4 06 	jmp	0xd48	; 0xd48 <_exit>

000000c0 <__bad_interrupt>:
  c0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c4 <Initialize_SPI_Master>:

int sampleDivider = 1;

// sets up SPI system between ATmega328P and slave device(s)
void Initialize_SPI_Master(){
   SPCR = (0<<SPIE) |               // No interrupts
  c4:	80 e5       	ldi	r24, 0x50	; 80
  c6:	8c bd       	out	0x2c, r24	; 44
   (1<<SPE) |                       // SPI enabled
   (1<<MSTR) ;                      // master
   SPSR = 0x00;                     // clear flags
  c8:	1d bc       	out	0x2d, r1	; 45
   PORTB = 1 << SS;                 // make sure SS is high
  ca:	84 e0       	ldi	r24, 0x04	; 4
  cc:	85 b9       	out	0x05, r24	; 5
  ce:	08 95       	ret

000000d0 <initTimer0>:
}

// Initializing timer 0 (change OCR0A for freq change!!!!!)
void initTimer0(){
   TCCR0A = 0x02;                   // timer CTC mode
  d0:	82 e0       	ldi	r24, 0x02	; 2
  d2:	84 bd       	out	0x24, r24	; 36
   OCR0A = overflow1;          // sets counter overflow
  d4:	90 91 03 01 	lds	r25, 0x0103
  d8:	97 bd       	out	0x27, r25	; 39
   TCCR0B = 0x02;                   // timer clk = system clk / 8 (2MHz)
  da:	85 bd       	out	0x25, r24	; 37
   TIFR0 = 0x02;                    // Interrupt occurs at OCRF0A overflow
  dc:	85 bb       	out	0x15, r24	; 21
   TIMSK0 = 0x02;                   // OCRF0A overflow interrupt enabled
  de:	80 93 6e 00 	sts	0x006E, r24
  e2:	08 95       	ret

000000e4 <initTimer2>:
}

void initTimer2(){
	TCCR2A = 0x02;                   // timer CTC mode
  e4:	82 e0       	ldi	r24, 0x02	; 2
  e6:	80 93 b0 00 	sts	0x00B0, r24
	OCR2A = overflow2;		        // sets counter overflow
  ea:	90 91 02 01 	lds	r25, 0x0102
  ee:	90 93 b3 00 	sts	0x00B3, r25
	TCCR2B = 0x04;                   // timer clk = system clk / 256 (2MHz)
  f2:	94 e0       	ldi	r25, 0x04	; 4
  f4:	90 93 b1 00 	sts	0x00B1, r25
	TIFR2 = 0x02;                    // Interrupt occurs at OCRF2A overflow
  f8:	87 bb       	out	0x17, r24	; 23
	TIMSK2 = 0x02;                   // OCRF0A overflow interrupt enabled
  fa:	80 93 70 00 	sts	0x0070, r24
  fe:	08 95       	ret

00000100 <GPIO_Initialization>:
}


// initializes GPIO I/O, SPI interface, and interrupts
void GPIO_Initialization(){
   DDRB |= (1<<MOSI) | (1<<SCK) | (1<<SS);	// make MOSI, SCK and SS outputs
 100:	84 b1       	in	r24, 0x04	; 4
 102:	8c 62       	ori	r24, 0x2C	; 44
 104:	84 b9       	out	0x04, r24	; 4
   DDRD &= ~(1<<BTN1) | ~(1<<BTN1) | ~(1<<BTN2);	// set buttons as inputs
 106:	8a b1       	in	r24, 0x0a	; 10
 108:	8a b9       	out	0x0a, r24	; 10
   DDRD |= (1<<LED2) | (1<<LED3);				// debug LEDs are output
 10a:	8a b1       	in	r24, 0x0a	; 10
 10c:	8c 60       	ori	r24, 0x0C	; 12
 10e:	8a b9       	out	0x0a, r24	; 10
   PORTD |= (1<<BTN0) | (1<<BTN1) | (1<<BTN2);	// set internal pull-ups
 110:	8b b1       	in	r24, 0x0b	; 11
 112:	80 6e       	ori	r24, 0xE0	; 224
 114:	8b b9       	out	0x0b, r24	; 11
   Initialize_SPI_Master();			// initialize SPI to DAC
 116:	0e 94 62 00 	call	0xc4	; 0xc4 <Initialize_SPI_Master>
   initTimer0();							// initialize timer0
 11a:	0e 94 68 00 	call	0xd0	; 0xd0 <initTimer0>
   initTimer2();
 11e:	0e 94 72 00 	call	0xe4	; 0xe4 <initTimer2>
   sei();									// enable interrupts
 122:	78 94       	sei
 124:	08 95       	ret

00000126 <Transmit_SPI_Master>:
   return btnPressed;
}

// sends data to DAC over SPI data port
void Transmit_SPI_Master(int Data) {
   PORTB &= ~(1 << SS);					//Assert slave select (active low)
 126:	2a 98       	cbi	0x05, 2	; 5
   SPDR = ((Data >> 8) & 0xF) | 0x70;		//Attach configuration Bits onto MSB
 128:	9f 70       	andi	r25, 0x0F	; 15
 12a:	90 67       	ori	r25, 0x70	; 112
 12c:	9e bd       	out	0x2e, r25	; 46
   while (!(SPSR & (1<<SPIF)));
 12e:	0d b4       	in	r0, 0x2d	; 45
 130:	07 fe       	sbrs	r0, 7
 132:	fd cf       	rjmp	.-6      	; 0x12e <Transmit_SPI_Master+0x8>
   SPDR = 0xFF & Data;
 134:	8e bd       	out	0x2e, r24	; 46
   while (!(SPSR & (1<<SPIF)));
 136:	0d b4       	in	r0, 0x2d	; 45
 138:	07 fe       	sbrs	r0, 7
 13a:	fd cf       	rjmp	.-6      	; 0x136 <Transmit_SPI_Master+0x10>
   PORTB |= 1 << SS;						//Turn off slave select
 13c:	2a 9a       	sbi	0x05, 2	; 5
 13e:	08 95       	ret

00000140 <volts_to_bits>:
      _delay_ms(1);

}

// converts input voltage between 0-5V to 12bit number for DAC
uint16_t volts_to_bits(double voltage){
 140:	cf 92       	push	r12
 142:	df 92       	push	r13
 144:	ef 92       	push	r14
 146:	ff 92       	push	r15
   double bits = ((voltage/5.0)*4095);
 148:	20 e0       	ldi	r18, 0x00	; 0
 14a:	30 e0       	ldi	r19, 0x00	; 0
 14c:	40 ea       	ldi	r20, 0xA0	; 160
 14e:	50 e4       	ldi	r21, 0x40	; 64
 150:	0e 94 20 04 	call	0x840	; 0x840 <__divsf3>
 154:	20 e0       	ldi	r18, 0x00	; 0
 156:	30 ef       	ldi	r19, 0xF0	; 240
 158:	4f e7       	ldi	r20, 0x7F	; 127
 15a:	55 e4       	ldi	r21, 0x45	; 69
 15c:	0e 94 5b 05 	call	0xab6	; 0xab6 <__mulsf3>
 160:	6b 01       	movw	r12, r22
 162:	7c 01       	movw	r14, r24
   if(bits>4095)
 164:	20 e0       	ldi	r18, 0x00	; 0
 166:	30 ef       	ldi	r19, 0xF0	; 240
 168:	4f e7       	ldi	r20, 0x7F	; 127
 16a:	55 e4       	ldi	r21, 0x45	; 69
 16c:	0e 94 56 05 	call	0xaac	; 0xaac <__gesf2>
 170:	18 16       	cp	r1, r24
 172:	34 f0       	brlt	.+12     	; 0x180 <volts_to_bits+0x40>
		return 4095;
	else
	 return bits;                  // return 12bit equivalent for DAC
 174:	c7 01       	movw	r24, r14
 176:	b6 01       	movw	r22, r12
 178:	0e 94 99 04 	call	0x932	; 0x932 <__fixunssfsi>
 17c:	cb 01       	movw	r24, r22
 17e:	02 c0       	rjmp	.+4      	; 0x184 <volts_to_bits+0x44>

// converts input voltage between 0-5V to 12bit number for DAC
uint16_t volts_to_bits(double voltage){
   double bits = ((voltage/5.0)*4095);
   if(bits>4095)
		return 4095;
 180:	8f ef       	ldi	r24, 0xFF	; 255
 182:	9f e0       	ldi	r25, 0x0F	; 15
	else
	 return bits;                  // return 12bit equivalent for DAC
}
 184:	ff 90       	pop	r15
 186:	ef 90       	pop	r14
 188:	df 90       	pop	r13
 18a:	cf 90       	pop	r12
 18c:	08 95       	ret

0000018e <change_freq>:
//	overflow -= 50;
//	if(overflow<50)
//		overflow = 200;
//		
//	OCR0A = overflow;          // sets counter overflow to 250
   sampleDivider++;
 18e:	80 91 00 01 	lds	r24, 0x0100
 192:	90 91 01 01 	lds	r25, 0x0101
 196:	01 96       	adiw	r24, 0x01	; 1
   sampleDivider %= 3;
 198:	63 e0       	ldi	r22, 0x03	; 3
 19a:	70 e0       	ldi	r23, 0x00	; 0
 19c:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <__divmodhi4>
 1a0:	90 93 01 01 	sts	0x0101, r25
 1a4:	80 93 00 01 	sts	0x0100, r24
 1a8:	08 95       	ret

000001aa <main>:
uint8_t overflow1 = 1;	// set overflow value frequency change
uint8_t overflow2 = 63;	// set overflow value for button checking

int main(void)
{
	num_samples = NUM_SAMPS;
 1aa:	86 e9       	ldi	r24, 0x96	; 150
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	90 93 1f 01 	sts	0x011F, r25
 1b2:	80 93 1e 01 	sts	0x011E, r24
	
   // initialize GPIO, interrupts, and timers
   GPIO_Initialization();
 1b6:	0e 94 80 00 	call	0x100	; 0x100 <GPIO_Initialization>
   
   // fill square, sawtooth, triangle, and sine wave LUTs
   initWaves();
 1ba:	0e 94 a4 03 	call	0x748	; 0x748 <initWaves>
   while (1){
	  // if(check_buttons()==1)
			//nextWave();
		//else if(check_buttons()==2)
		//	change_freq();
   }
 1be:	ff cf       	rjmp	.-2      	; 0x1be <main+0x14>

000001c0 <__vector_14>:
}

///////////////////////////////////ISR/////////////////////////////////////////

// ISR to increment through wave function LUTs and set frequency
ISR(TIMER0_COMPA_vect){
 1c0:	1f 92       	push	r1
 1c2:	0f 92       	push	r0
 1c4:	0f b6       	in	r0, 0x3f	; 63
 1c6:	0f 92       	push	r0
 1c8:	11 24       	eor	r1, r1
 1ca:	2f 93       	push	r18
 1cc:	3f 93       	push	r19
 1ce:	4f 93       	push	r20
 1d0:	5f 93       	push	r21
 1d2:	6f 93       	push	r22
 1d4:	7f 93       	push	r23
 1d6:	8f 93       	push	r24
 1d8:	9f 93       	push	r25
 1da:	af 93       	push	r26
 1dc:	bf 93       	push	r27
 1de:	ef 93       	push	r30
 1e0:	ff 93       	push	r31
   Transmit_SPI_Master(nextWavePoint());
 1e2:	0e 94 cc 01 	call	0x398	; 0x398 <nextWavePoint>
 1e6:	0e 94 93 00 	call	0x126	; 0x126 <Transmit_SPI_Master>
   PORTD |= (1<<LED2);
 1ea:	5a 9a       	sbi	0x0b, 2	; 11
 
}
 1ec:	ff 91       	pop	r31
 1ee:	ef 91       	pop	r30
 1f0:	bf 91       	pop	r27
 1f2:	af 91       	pop	r26
 1f4:	9f 91       	pop	r25
 1f6:	8f 91       	pop	r24
 1f8:	7f 91       	pop	r23
 1fa:	6f 91       	pop	r22
 1fc:	5f 91       	pop	r21
 1fe:	4f 91       	pop	r20
 200:	3f 91       	pop	r19
 202:	2f 91       	pop	r18
 204:	0f 90       	pop	r0
 206:	0f be       	out	0x3f, r0	; 63
 208:	0f 90       	pop	r0
 20a:	1f 90       	pop	r1
 20c:	18 95       	reti

0000020e <__vector_7>:

ISR(TIMER2_COMPA_vect){
 20e:	1f 92       	push	r1
 210:	0f 92       	push	r0
 212:	0f b6       	in	r0, 0x3f	; 63
 214:	0f 92       	push	r0
 216:	11 24       	eor	r1, r1
 218:	2f 93       	push	r18
 21a:	3f 93       	push	r19
 21c:	4f 93       	push	r20
 21e:	5f 93       	push	r21
 220:	6f 93       	push	r22
 222:	7f 93       	push	r23
 224:	8f 93       	push	r24
 226:	9f 93       	push	r25
 228:	af 93       	push	r26
 22a:	bf 93       	push	r27
 22c:	ef 93       	push	r30
 22e:	ff 93       	push	r31
   if (!(PIND & 1 << BTN0))
 230:	4f 99       	sbic	0x09, 7	; 9
 232:	0a c0       	rjmp	.+20     	; 0x248 <__vector_7+0x3a>
      btn0++;
 234:	80 91 1a 01 	lds	r24, 0x011A
 238:	90 91 1b 01 	lds	r25, 0x011B
 23c:	01 96       	adiw	r24, 0x01	; 1
 23e:	90 93 1b 01 	sts	0x011B, r25
 242:	80 93 1a 01 	sts	0x011A, r24
 246:	08 c0       	rjmp	.+16     	; 0x258 <__vector_7+0x4a>
   else
      btn0 = was0Pressed = 0;
 248:	10 92 15 01 	sts	0x0115, r1
 24c:	10 92 14 01 	sts	0x0114, r1
 250:	10 92 1b 01 	sts	0x011B, r1
 254:	10 92 1a 01 	sts	0x011A, r1
   
   if (!(PIND & 1 << BTN1))
 258:	4e 99       	sbic	0x09, 6	; 9
 25a:	0a c0       	rjmp	.+20     	; 0x270 <__vector_7+0x62>
      btn1++;
 25c:	80 91 18 01 	lds	r24, 0x0118
 260:	90 91 19 01 	lds	r25, 0x0119
 264:	01 96       	adiw	r24, 0x01	; 1
 266:	90 93 19 01 	sts	0x0119, r25
 26a:	80 93 18 01 	sts	0x0118, r24
 26e:	08 c0       	rjmp	.+16     	; 0x280 <__vector_7+0x72>
   else
      btn1 = was1Pressed = 0;
 270:	10 92 13 01 	sts	0x0113, r1
 274:	10 92 12 01 	sts	0x0112, r1
 278:	10 92 19 01 	sts	0x0119, r1
 27c:	10 92 18 01 	sts	0x0118, r1
   
   if (!(PIND & 1 << BTN2))
 280:	4d 99       	sbic	0x09, 5	; 9
 282:	0a c0       	rjmp	.+20     	; 0x298 <__vector_7+0x8a>
      btn2++;
 284:	80 91 16 01 	lds	r24, 0x0116
 288:	90 91 17 01 	lds	r25, 0x0117
 28c:	01 96       	adiw	r24, 0x01	; 1
 28e:	90 93 17 01 	sts	0x0117, r25
 292:	80 93 16 01 	sts	0x0116, r24
 296:	08 c0       	rjmp	.+16     	; 0x2a8 <__vector_7+0x9a>
   else
      btn2 = was2Pressed = 0;
 298:	10 92 11 01 	sts	0x0111, r1
 29c:	10 92 10 01 	sts	0x0110, r1
 2a0:	10 92 17 01 	sts	0x0117, r1
 2a4:	10 92 16 01 	sts	0x0116, r1
   
   if(btn0 >= DEBOUNCE) {
 2a8:	80 91 1a 01 	lds	r24, 0x011A
 2ac:	90 91 1b 01 	lds	r25, 0x011B
 2b0:	0a 97       	sbiw	r24, 0x0a	; 10
 2b2:	94 f0       	brlt	.+36     	; 0x2d8 <__vector_7+0xca>
      if (!was0Pressed)
 2b4:	80 91 14 01 	lds	r24, 0x0114
 2b8:	90 91 15 01 	lds	r25, 0x0115
 2bc:	89 2b       	or	r24, r25
 2be:	11 f4       	brne	.+4      	; 0x2c4 <__vector_7+0xb6>
         nextWave();
 2c0:	0e 94 af 01 	call	0x35e	; 0x35e <nextWave>
      btn0 = 0;
 2c4:	10 92 1b 01 	sts	0x011B, r1
 2c8:	10 92 1a 01 	sts	0x011A, r1
      was0Pressed = 1;
 2cc:	81 e0       	ldi	r24, 0x01	; 1
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	90 93 15 01 	sts	0x0115, r25
 2d4:	80 93 14 01 	sts	0x0114, r24
   }
   
   if(btn1 >= DEBOUNCE) {
 2d8:	80 91 18 01 	lds	r24, 0x0118
 2dc:	90 91 19 01 	lds	r25, 0x0119
 2e0:	0a 97       	sbiw	r24, 0x0a	; 10
 2e2:	9c f0       	brlt	.+38     	; 0x30a <__vector_7+0xfc>
      if (!was1Pressed) {
 2e4:	80 91 12 01 	lds	r24, 0x0112
 2e8:	90 91 13 01 	lds	r25, 0x0113
 2ec:	89 2b       	or	r24, r25
 2ee:	19 f4       	brne	.+6      	; 0x2f6 <__vector_7+0xe8>
         PORTD &= ~(1<<LED3);
 2f0:	5b 98       	cbi	0x0b, 3	; 11
         change_freq();
 2f2:	0e 94 c7 00 	call	0x18e	; 0x18e <change_freq>
      }
      btn1 = 0;
 2f6:	10 92 19 01 	sts	0x0119, r1
 2fa:	10 92 18 01 	sts	0x0118, r1
      was1Pressed = 1;
 2fe:	81 e0       	ldi	r24, 0x01	; 1
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	90 93 13 01 	sts	0x0113, r25
 306:	80 93 12 01 	sts	0x0112, r24
   }
   
   if(btn2 >= DEBOUNCE) {
 30a:	80 91 16 01 	lds	r24, 0x0116
 30e:	90 91 17 01 	lds	r25, 0x0117
 312:	0a 97       	sbiw	r24, 0x0a	; 10
 314:	9c f0       	brlt	.+38     	; 0x33c <__vector_7+0x12e>
      if (!was2Pressed) {
 316:	80 91 10 01 	lds	r24, 0x0110
 31a:	90 91 11 01 	lds	r25, 0x0111
 31e:	89 2b       	or	r24, r25
 320:	11 f4       	brne	.+4      	; 0x326 <__vector_7+0x118>
         cycleDuty();
 322:	0e 94 57 02 	call	0x4ae	; 0x4ae <cycleDuty>
      }
	  PORTD |= (1<<LED3);
 326:	5b 9a       	sbi	0x0b, 3	; 11
      btn2 = 0;
 328:	10 92 17 01 	sts	0x0117, r1
 32c:	10 92 16 01 	sts	0x0116, r1
      was2Pressed = 1;
 330:	81 e0       	ldi	r24, 0x01	; 1
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	90 93 11 01 	sts	0x0111, r25
 338:	80 93 10 01 	sts	0x0110, r24
   }
  
}
 33c:	ff 91       	pop	r31
 33e:	ef 91       	pop	r30
 340:	bf 91       	pop	r27
 342:	af 91       	pop	r26
 344:	9f 91       	pop	r25
 346:	8f 91       	pop	r24
 348:	7f 91       	pop	r23
 34a:	6f 91       	pop	r22
 34c:	5f 91       	pop	r21
 34e:	4f 91       	pop	r20
 350:	3f 91       	pop	r19
 352:	2f 91       	pop	r18
 354:	0f 90       	pop	r0
 356:	0f be       	out	0x3f, r0	; 63
 358:	0f 90       	pop	r0
 35a:	1f 90       	pop	r1
 35c:	18 95       	reti

0000035e <nextWave>:

void nextWave() {
   static int waveNdx = 0;
   static uint16_t* waves[NUM_WAVES] = {SquareWave, TriWave, SawWave, SinWave};
   
   waveNdx++;
 35e:	80 91 1c 01 	lds	r24, 0x011C
 362:	90 91 1d 01 	lds	r25, 0x011D
 366:	01 96       	adiw	r24, 0x01	; 1
   waveNdx %= NUM_WAVES;
 368:	83 70       	andi	r24, 0x03	; 3
 36a:	90 78       	andi	r25, 0x80	; 128
 36c:	99 23       	and	r25, r25
 36e:	24 f4       	brge	.+8      	; 0x378 <nextWave+0x1a>
 370:	01 97       	sbiw	r24, 0x01	; 1
 372:	8c 6f       	ori	r24, 0xFC	; 252
 374:	9f 6f       	ori	r25, 0xFF	; 255
 376:	01 96       	adiw	r24, 0x01	; 1
 378:	90 93 1d 01 	sts	0x011D, r25
 37c:	80 93 1c 01 	sts	0x011C, r24
   
   Wave = waves[waveNdx];
 380:	88 0f       	add	r24, r24
 382:	99 1f       	adc	r25, r25
 384:	fc 01       	movw	r30, r24
 386:	e8 5f       	subi	r30, 0xF8	; 248
 388:	fe 4f       	sbci	r31, 0xFE	; 254
 38a:	80 81       	ld	r24, Z
 38c:	91 81       	ldd	r25, Z+1	; 0x01
 38e:	90 93 d1 05 	sts	0x05D1, r25
 392:	80 93 d0 05 	sts	0x05D0, r24
 396:	08 95       	ret

00000398 <nextWavePoint>:
}

uint16_t nextWavePoint() {
   static int ndx = -1;
   
   ndx += sampleDivider;
 398:	20 91 04 01 	lds	r18, 0x0104
 39c:	30 91 05 01 	lds	r19, 0x0105
 3a0:	80 91 00 01 	lds	r24, 0x0100
 3a4:	90 91 01 01 	lds	r25, 0x0101
 3a8:	82 0f       	add	r24, r18
 3aa:	93 1f       	adc	r25, r19
   ndx %= NUM_SAMPS;
 3ac:	66 e9       	ldi	r22, 0x96	; 150
 3ae:	70 e0       	ldi	r23, 0x00	; 0
 3b0:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <__divmodhi4>
 3b4:	90 93 05 01 	sts	0x0105, r25
 3b8:	80 93 04 01 	sts	0x0104, r24
   
   return Wave[ndx];
 3bc:	88 0f       	add	r24, r24
 3be:	99 1f       	adc	r25, r25
 3c0:	e0 91 d0 05 	lds	r30, 0x05D0
 3c4:	f0 91 d1 05 	lds	r31, 0x05D1
 3c8:	e8 0f       	add	r30, r24
 3ca:	f9 1f       	adc	r31, r25
}
 3cc:	80 81       	ld	r24, Z
 3ce:	91 81       	ldd	r25, Z+1	; 0x01
 3d0:	08 95       	ret

000003d2 <make_square_LUT>:
   dutyCycle += 10;
   dutyCycle %= 110;
   make_square_LUT();
}

void make_square_LUT(){
 3d2:	cf 92       	push	r12
 3d4:	df 92       	push	r13
 3d6:	ef 92       	push	r14
 3d8:	ff 92       	push	r15
 3da:	0f 93       	push	r16
 3dc:	1f 93       	push	r17
 3de:	cf 93       	push	r28
 3e0:	df 93       	push	r29
   int i;
   int duty = num_samples * (double) dutyCycle/100;
 3e2:	60 91 1e 01 	lds	r22, 0x011E
 3e6:	70 91 1f 01 	lds	r23, 0x011F
 3ea:	07 2e       	mov	r0, r23
 3ec:	00 0c       	add	r0, r0
 3ee:	88 0b       	sbc	r24, r24
 3f0:	99 0b       	sbc	r25, r25
 3f2:	0e 94 ca 04 	call	0x994	; 0x994 <__floatsisf>
 3f6:	6b 01       	movw	r12, r22
 3f8:	7c 01       	movw	r14, r24
 3fa:	80 91 06 01 	lds	r24, 0x0106
 3fe:	90 91 07 01 	lds	r25, 0x0107
 402:	bc 01       	movw	r22, r24
 404:	99 0f       	add	r25, r25
 406:	88 0b       	sbc	r24, r24
 408:	99 0b       	sbc	r25, r25
 40a:	0e 94 ca 04 	call	0x994	; 0x994 <__floatsisf>
 40e:	9b 01       	movw	r18, r22
 410:	ac 01       	movw	r20, r24
 412:	c7 01       	movw	r24, r14
 414:	b6 01       	movw	r22, r12
 416:	0e 94 5b 05 	call	0xab6	; 0xab6 <__mulsf3>
 41a:	20 e0       	ldi	r18, 0x00	; 0
 41c:	30 e0       	ldi	r19, 0x00	; 0
 41e:	48 ec       	ldi	r20, 0xC8	; 200
 420:	52 e4       	ldi	r21, 0x42	; 66
 422:	0e 94 20 04 	call	0x840	; 0x840 <__divsf3>
 426:	0e 94 92 04 	call	0x924	; 0x924 <__fixsfsi>
 42a:	eb 01       	movw	r28, r22
   
   for (i = 0; i < duty; i++)
 42c:	1c 16       	cp	r1, r28
 42e:	1d 06       	cpc	r1, r29
 430:	b4 f4       	brge	.+44     	; 0x45e <make_square_LUT+0x8c>
 432:	04 ea       	ldi	r16, 0xA4	; 164
 434:	14 e0       	ldi	r17, 0x04	; 4
 436:	66 0f       	add	r22, r22
 438:	77 1f       	adc	r23, r23
 43a:	cb 01       	movw	r24, r22
 43c:	8c 55       	subi	r24, 0x5C	; 92
 43e:	9b 4f       	sbci	r25, 0xFB	; 251
 440:	7c 01       	movw	r14, r24
      SquareWave[i] = volts_to_bits(MAX_VOLTAGE);
 442:	60 e0       	ldi	r22, 0x00	; 0
 444:	70 e0       	ldi	r23, 0x00	; 0
 446:	80 ea       	ldi	r24, 0xA0	; 160
 448:	90 e4       	ldi	r25, 0x40	; 64
 44a:	0e 94 a0 00 	call	0x140	; 0x140 <volts_to_bits>
 44e:	f8 01       	movw	r30, r16
 450:	81 93       	st	Z+, r24
 452:	91 93       	st	Z+, r25
 454:	8f 01       	movw	r16, r30

void make_square_LUT(){
   int i;
   int duty = num_samples * (double) dutyCycle/100;
   
   for (i = 0; i < duty; i++)
 456:	ee 15       	cp	r30, r14
 458:	ff 05       	cpc	r31, r15
 45a:	99 f7       	brne	.-26     	; 0x442 <make_square_LUT+0x70>
 45c:	02 c0       	rjmp	.+4      	; 0x462 <make_square_LUT+0x90>
 45e:	c0 e0       	ldi	r28, 0x00	; 0
 460:	d0 e0       	ldi	r29, 0x00	; 0
      SquareWave[i] = volts_to_bits(MAX_VOLTAGE);
   
   for ( ; i < num_samples ; i++)
 462:	80 91 1e 01 	lds	r24, 0x011E
 466:	90 91 1f 01 	lds	r25, 0x011F
 46a:	c8 17       	cp	r28, r24
 46c:	d9 07       	cpc	r29, r25
 46e:	b4 f4       	brge	.+44     	; 0x49c <make_square_LUT+0xca>
 470:	8e 01       	movw	r16, r28
 472:	00 0f       	add	r16, r16
 474:	11 1f       	adc	r17, r17
 476:	0c 55       	subi	r16, 0x5C	; 92
 478:	1b 4f       	sbci	r17, 0xFB	; 251
      SquareWave[i] = volts_to_bits(MIN_VOLTAGE);
 47a:	60 e0       	ldi	r22, 0x00	; 0
 47c:	70 e0       	ldi	r23, 0x00	; 0
 47e:	cb 01       	movw	r24, r22
 480:	0e 94 a0 00 	call	0x140	; 0x140 <volts_to_bits>
 484:	f8 01       	movw	r30, r16
 486:	81 93       	st	Z+, r24
 488:	91 93       	st	Z+, r25
 48a:	8f 01       	movw	r16, r30
   int duty = num_samples * (double) dutyCycle/100;
   
   for (i = 0; i < duty; i++)
      SquareWave[i] = volts_to_bits(MAX_VOLTAGE);
   
   for ( ; i < num_samples ; i++)
 48c:	21 96       	adiw	r28, 0x01	; 1
 48e:	80 91 1e 01 	lds	r24, 0x011E
 492:	90 91 1f 01 	lds	r25, 0x011F
 496:	c8 17       	cp	r28, r24
 498:	d9 07       	cpc	r29, r25
 49a:	7c f3       	brlt	.-34     	; 0x47a <make_square_LUT+0xa8>
      SquareWave[i] = volts_to_bits(MIN_VOLTAGE);
}
 49c:	df 91       	pop	r29
 49e:	cf 91       	pop	r28
 4a0:	1f 91       	pop	r17
 4a2:	0f 91       	pop	r16
 4a4:	ff 90       	pop	r15
 4a6:	ef 90       	pop	r14
 4a8:	df 90       	pop	r13
 4aa:	cf 90       	pop	r12
 4ac:	08 95       	ret

000004ae <cycleDuty>:
   
   return Wave[ndx];
}

void cycleDuty() {
   dutyCycle += 10;
 4ae:	80 91 06 01 	lds	r24, 0x0106
 4b2:	90 91 07 01 	lds	r25, 0x0107
 4b6:	0a 96       	adiw	r24, 0x0a	; 10
   dutyCycle %= 110;
 4b8:	6e e6       	ldi	r22, 0x6E	; 110
 4ba:	70 e0       	ldi	r23, 0x00	; 0
 4bc:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <__divmodhi4>
 4c0:	90 93 07 01 	sts	0x0107, r25
 4c4:	80 93 06 01 	sts	0x0106, r24
   make_square_LUT();
 4c8:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <make_square_LUT>
 4cc:	08 95       	ret

000004ce <make_triangle_LUT>:
   
   for ( ; i < num_samples ; i++)
      SquareWave[i] = volts_to_bits(MIN_VOLTAGE);
}

void make_triangle_LUT(){
 4ce:	4f 92       	push	r4
 4d0:	5f 92       	push	r5
 4d2:	6f 92       	push	r6
 4d4:	7f 92       	push	r7
 4d6:	af 92       	push	r10
 4d8:	bf 92       	push	r11
 4da:	cf 92       	push	r12
 4dc:	df 92       	push	r13
 4de:	ef 92       	push	r14
 4e0:	ff 92       	push	r15
 4e2:	0f 93       	push	r16
 4e4:	1f 93       	push	r17
 4e6:	cf 93       	push	r28
 4e8:	df 93       	push	r29
   int i;
   int peak = num_samples / 2;
 4ea:	a0 90 1e 01 	lds	r10, 0x011E
 4ee:	b0 90 1f 01 	lds	r11, 0x011F
 4f2:	bb 20       	and	r11, r11
 4f4:	1c f4       	brge	.+6      	; 0x4fc <make_triangle_LUT+0x2e>
 4f6:	2f ef       	ldi	r18, 0xFF	; 255
 4f8:	a2 1a       	sub	r10, r18
 4fa:	b2 0a       	sbc	r11, r18
 4fc:	b5 94       	asr	r11
 4fe:	a7 94       	ror	r10
   double increment = ((double) MAX_VOLTAGE - MIN_VOLTAGE) / peak;
 500:	b5 01       	movw	r22, r10
 502:	0b 2c       	mov	r0, r11
 504:	00 0c       	add	r0, r0
 506:	88 0b       	sbc	r24, r24
 508:	99 0b       	sbc	r25, r25
 50a:	0e 94 ca 04 	call	0x994	; 0x994 <__floatsisf>
 50e:	9b 01       	movw	r18, r22
 510:	ac 01       	movw	r20, r24
 512:	60 e0       	ldi	r22, 0x00	; 0
 514:	70 e0       	ldi	r23, 0x00	; 0
 516:	80 ea       	ldi	r24, 0xA0	; 160
 518:	90 e4       	ldi	r25, 0x40	; 64
 51a:	0e 94 20 04 	call	0x840	; 0x840 <__divsf3>
 51e:	2b 01       	movw	r4, r22
 520:	3c 01       	movw	r6, r24
   double voltage = MIN_VOLTAGE - increment;
 522:	9b 01       	movw	r18, r22
 524:	ac 01       	movw	r20, r24
 526:	60 e0       	ldi	r22, 0x00	; 0
 528:	70 e0       	ldi	r23, 0x00	; 0
 52a:	cb 01       	movw	r24, r22
 52c:	0e 94 b3 03 	call	0x766	; 0x766 <__subsf3>
 530:	6b 01       	movw	r12, r22
 532:	7c 01       	movw	r14, r24
   
   for (i = 0; i < (peak + 1); i++)
 534:	e5 01       	movw	r28, r10
 536:	21 96       	adiw	r28, 0x01	; 1
 538:	1c 16       	cp	r1, r28
 53a:	1d 06       	cpc	r1, r29
 53c:	dc f4       	brge	.+54     	; 0x574 <make_triangle_LUT+0xa6>
 53e:	08 e7       	ldi	r16, 0x78	; 120
 540:	13 e0       	ldi	r17, 0x03	; 3
 542:	c5 01       	movw	r24, r10
 544:	88 0f       	add	r24, r24
 546:	99 1f       	adc	r25, r25
 548:	fc 01       	movw	r30, r24
 54a:	e6 58       	subi	r30, 0x86	; 134
 54c:	fc 4f       	sbci	r31, 0xFC	; 252
 54e:	5f 01       	movw	r10, r30
      TriWave[i] = volts_to_bits(voltage += increment);
 550:	a3 01       	movw	r20, r6
 552:	92 01       	movw	r18, r4
 554:	c7 01       	movw	r24, r14
 556:	b6 01       	movw	r22, r12
 558:	0e 94 b4 03 	call	0x768	; 0x768 <__addsf3>
 55c:	6b 01       	movw	r12, r22
 55e:	7c 01       	movw	r14, r24
 560:	0e 94 a0 00 	call	0x140	; 0x140 <volts_to_bits>
 564:	f8 01       	movw	r30, r16
 566:	81 93       	st	Z+, r24
 568:	91 93       	st	Z+, r25
 56a:	8f 01       	movw	r16, r30
   int i;
   int peak = num_samples / 2;
   double increment = ((double) MAX_VOLTAGE - MIN_VOLTAGE) / peak;
   double voltage = MIN_VOLTAGE - increment;
   
   for (i = 0; i < (peak + 1); i++)
 56c:	ea 15       	cp	r30, r10
 56e:	fb 05       	cpc	r31, r11
 570:	79 f7       	brne	.-34     	; 0x550 <make_triangle_LUT+0x82>
 572:	02 c0       	rjmp	.+4      	; 0x578 <make_triangle_LUT+0xaa>
 574:	c0 e0       	ldi	r28, 0x00	; 0
 576:	d0 e0       	ldi	r29, 0x00	; 0
      TriWave[i] = volts_to_bits(voltage += increment);
   
   for ( ; i < (num_samples - 1); i++)
 578:	80 91 1e 01 	lds	r24, 0x011E
 57c:	90 91 1f 01 	lds	r25, 0x011F
 580:	01 97       	sbiw	r24, 0x01	; 1
 582:	c8 17       	cp	r28, r24
 584:	d9 07       	cpc	r29, r25
 586:	e4 f4       	brge	.+56     	; 0x5c0 <make_triangle_LUT+0xf2>
 588:	8e 01       	movw	r16, r28
 58a:	00 0f       	add	r16, r16
 58c:	11 1f       	adc	r17, r17
 58e:	08 58       	subi	r16, 0x88	; 136
 590:	1c 4f       	sbci	r17, 0xFC	; 252
      TriWave[i] = volts_to_bits(voltage -= increment);
 592:	a3 01       	movw	r20, r6
 594:	92 01       	movw	r18, r4
 596:	c7 01       	movw	r24, r14
 598:	b6 01       	movw	r22, r12
 59a:	0e 94 b3 03 	call	0x766	; 0x766 <__subsf3>
 59e:	6b 01       	movw	r12, r22
 5a0:	7c 01       	movw	r14, r24
 5a2:	0e 94 a0 00 	call	0x140	; 0x140 <volts_to_bits>
 5a6:	f8 01       	movw	r30, r16
 5a8:	81 93       	st	Z+, r24
 5aa:	91 93       	st	Z+, r25
 5ac:	8f 01       	movw	r16, r30
   double voltage = MIN_VOLTAGE - increment;
   
   for (i = 0; i < (peak + 1); i++)
      TriWave[i] = volts_to_bits(voltage += increment);
   
   for ( ; i < (num_samples - 1); i++)
 5ae:	21 96       	adiw	r28, 0x01	; 1
 5b0:	80 91 1e 01 	lds	r24, 0x011E
 5b4:	90 91 1f 01 	lds	r25, 0x011F
 5b8:	01 97       	sbiw	r24, 0x01	; 1
 5ba:	c8 17       	cp	r28, r24
 5bc:	d9 07       	cpc	r29, r25
 5be:	4c f3       	brlt	.-46     	; 0x592 <make_triangle_LUT+0xc4>
      TriWave[i] = volts_to_bits(voltage -= increment);
}
 5c0:	df 91       	pop	r29
 5c2:	cf 91       	pop	r28
 5c4:	1f 91       	pop	r17
 5c6:	0f 91       	pop	r16
 5c8:	ff 90       	pop	r15
 5ca:	ef 90       	pop	r14
 5cc:	df 90       	pop	r13
 5ce:	cf 90       	pop	r12
 5d0:	bf 90       	pop	r11
 5d2:	af 90       	pop	r10
 5d4:	7f 90       	pop	r7
 5d6:	6f 90       	pop	r6
 5d8:	5f 90       	pop	r5
 5da:	4f 90       	pop	r4
 5dc:	08 95       	ret

000005de <make_sawtooth_LUT>:

void make_sawtooth_LUT(){
 5de:	8f 92       	push	r8
 5e0:	9f 92       	push	r9
 5e2:	af 92       	push	r10
 5e4:	bf 92       	push	r11
 5e6:	cf 92       	push	r12
 5e8:	df 92       	push	r13
 5ea:	ef 92       	push	r14
 5ec:	ff 92       	push	r15
 5ee:	0f 93       	push	r16
 5f0:	1f 93       	push	r17
 5f2:	cf 93       	push	r28
 5f4:	df 93       	push	r29
   int ndx;
   double increment = ((double) MAX_VOLTAGE - MIN_VOLTAGE) / (num_samples - 1);
 5f6:	c0 91 1e 01 	lds	r28, 0x011E
 5fa:	d0 91 1f 01 	lds	r29, 0x011F
 5fe:	be 01       	movw	r22, r28
 600:	61 50       	subi	r22, 0x01	; 1
 602:	71 09       	sbc	r23, r1
 604:	07 2e       	mov	r0, r23
 606:	00 0c       	add	r0, r0
 608:	88 0b       	sbc	r24, r24
 60a:	99 0b       	sbc	r25, r25
 60c:	0e 94 ca 04 	call	0x994	; 0x994 <__floatsisf>
 610:	9b 01       	movw	r18, r22
 612:	ac 01       	movw	r20, r24
 614:	60 e0       	ldi	r22, 0x00	; 0
 616:	70 e0       	ldi	r23, 0x00	; 0
 618:	80 ea       	ldi	r24, 0xA0	; 160
 61a:	90 e4       	ldi	r25, 0x40	; 64
 61c:	0e 94 20 04 	call	0x840	; 0x840 <__divsf3>
 620:	4b 01       	movw	r8, r22
 622:	5c 01       	movw	r10, r24
   double voltage = MIN_VOLTAGE -increment;
 624:	9b 01       	movw	r18, r22
 626:	ac 01       	movw	r20, r24
 628:	60 e0       	ldi	r22, 0x00	; 0
 62a:	70 e0       	ldi	r23, 0x00	; 0
 62c:	cb 01       	movw	r24, r22
 62e:	0e 94 b3 03 	call	0x766	; 0x766 <__subsf3>
 632:	6b 01       	movw	r12, r22
 634:	7c 01       	movw	r14, r24
   
   for (ndx = 0; ndx < num_samples; ndx++)
 636:	1c 16       	cp	r1, r28
 638:	1d 06       	cpc	r1, r29
 63a:	d4 f4       	brge	.+52     	; 0x670 <make_sawtooth_LUT+0x92>
 63c:	0c e4       	ldi	r16, 0x4C	; 76
 63e:	12 e0       	ldi	r17, 0x02	; 2
 640:	c0 e0       	ldi	r28, 0x00	; 0
 642:	d0 e0       	ldi	r29, 0x00	; 0
      SawWave[ndx] = volts_to_bits(voltage += increment);
 644:	a5 01       	movw	r20, r10
 646:	94 01       	movw	r18, r8
 648:	c7 01       	movw	r24, r14
 64a:	b6 01       	movw	r22, r12
 64c:	0e 94 b4 03 	call	0x768	; 0x768 <__addsf3>
 650:	6b 01       	movw	r12, r22
 652:	7c 01       	movw	r14, r24
 654:	0e 94 a0 00 	call	0x140	; 0x140 <volts_to_bits>
 658:	f8 01       	movw	r30, r16
 65a:	81 93       	st	Z+, r24
 65c:	91 93       	st	Z+, r25
 65e:	8f 01       	movw	r16, r30
void make_sawtooth_LUT(){
   int ndx;
   double increment = ((double) MAX_VOLTAGE - MIN_VOLTAGE) / (num_samples - 1);
   double voltage = MIN_VOLTAGE -increment;
   
   for (ndx = 0; ndx < num_samples; ndx++)
 660:	21 96       	adiw	r28, 0x01	; 1
 662:	80 91 1e 01 	lds	r24, 0x011E
 666:	90 91 1f 01 	lds	r25, 0x011F
 66a:	c8 17       	cp	r28, r24
 66c:	d9 07       	cpc	r29, r25
 66e:	54 f3       	brlt	.-44     	; 0x644 <make_sawtooth_LUT+0x66>
      SawWave[ndx] = volts_to_bits(voltage += increment);
}
 670:	df 91       	pop	r29
 672:	cf 91       	pop	r28
 674:	1f 91       	pop	r17
 676:	0f 91       	pop	r16
 678:	ff 90       	pop	r15
 67a:	ef 90       	pop	r14
 67c:	df 90       	pop	r13
 67e:	cf 90       	pop	r12
 680:	bf 90       	pop	r11
 682:	af 90       	pop	r10
 684:	9f 90       	pop	r9
 686:	8f 90       	pop	r8
 688:	08 95       	ret

0000068a <make_sin_LUT>:

void make_sin_LUT(){
 68a:	8f 92       	push	r8
 68c:	9f 92       	push	r9
 68e:	af 92       	push	r10
 690:	bf 92       	push	r11
 692:	cf 92       	push	r12
 694:	df 92       	push	r13
 696:	ef 92       	push	r14
 698:	ff 92       	push	r15
 69a:	0f 93       	push	r16
 69c:	1f 93       	push	r17
 69e:	cf 93       	push	r28
 6a0:	df 93       	push	r29
   int ndx;
   double increment = 2 * M_PI / num_samples;
 6a2:	c0 91 1e 01 	lds	r28, 0x011E
 6a6:	d0 91 1f 01 	lds	r29, 0x011F
 6aa:	be 01       	movw	r22, r28
 6ac:	0d 2e       	mov	r0, r29
 6ae:	00 0c       	add	r0, r0
 6b0:	88 0b       	sbc	r24, r24
 6b2:	99 0b       	sbc	r25, r25
 6b4:	0e 94 ca 04 	call	0x994	; 0x994 <__floatsisf>
 6b8:	9b 01       	movw	r18, r22
 6ba:	ac 01       	movw	r20, r24
 6bc:	6b ed       	ldi	r22, 0xDB	; 219
 6be:	7f e0       	ldi	r23, 0x0F	; 15
 6c0:	89 ec       	ldi	r24, 0xC9	; 201
 6c2:	90 e4       	ldi	r25, 0x40	; 64
 6c4:	0e 94 20 04 	call	0x840	; 0x840 <__divsf3>
 6c8:	4b 01       	movw	r8, r22
 6ca:	5c 01       	movw	r10, r24
   double rad = -increment;
 6cc:	6b 01       	movw	r12, r22
 6ce:	7c 01       	movw	r14, r24
 6d0:	f7 fa       	bst	r15, 7
 6d2:	f0 94       	com	r15
 6d4:	f7 f8       	bld	r15, 7
 6d6:	f0 94       	com	r15
   double ampli = ((double) MAX_VOLTAGE - MIN_VOLTAGE) / 2;
   // The amplitude/2 is neccessary to compensate for sin()'s amplitude of 2
   double offset = MIN_VOLTAGE + ampli;
   
   for (ndx = 0; ndx < num_samples; ndx++)
 6d8:	1c 16       	cp	r1, r28
 6da:	1d 06       	cpc	r1, r29
 6dc:	44 f5       	brge	.+80     	; 0x72e <make_sin_LUT+0xa4>
 6de:	00 e2       	ldi	r16, 0x20	; 32
 6e0:	11 e0       	ldi	r17, 0x01	; 1
 6e2:	c0 e0       	ldi	r28, 0x00	; 0
 6e4:	d0 e0       	ldi	r29, 0x00	; 0
      SinWave[ndx] = volts_to_bits(ampli * sin(rad += increment) + offset);
 6e6:	a5 01       	movw	r20, r10
 6e8:	94 01       	movw	r18, r8
 6ea:	c7 01       	movw	r24, r14
 6ec:	b6 01       	movw	r22, r12
 6ee:	0e 94 b4 03 	call	0x768	; 0x768 <__addsf3>
 6f2:	6b 01       	movw	r12, r22
 6f4:	7c 01       	movw	r14, r24
 6f6:	0e 94 c8 05 	call	0xb90	; 0xb90 <sin>
 6fa:	20 e0       	ldi	r18, 0x00	; 0
 6fc:	30 e0       	ldi	r19, 0x00	; 0
 6fe:	40 e2       	ldi	r20, 0x20	; 32
 700:	50 e4       	ldi	r21, 0x40	; 64
 702:	0e 94 5b 05 	call	0xab6	; 0xab6 <__mulsf3>
 706:	20 e0       	ldi	r18, 0x00	; 0
 708:	30 e0       	ldi	r19, 0x00	; 0
 70a:	40 e2       	ldi	r20, 0x20	; 32
 70c:	50 e4       	ldi	r21, 0x40	; 64
 70e:	0e 94 b4 03 	call	0x768	; 0x768 <__addsf3>
 712:	0e 94 a0 00 	call	0x140	; 0x140 <volts_to_bits>
 716:	f8 01       	movw	r30, r16
 718:	81 93       	st	Z+, r24
 71a:	91 93       	st	Z+, r25
 71c:	8f 01       	movw	r16, r30
   double rad = -increment;
   double ampli = ((double) MAX_VOLTAGE - MIN_VOLTAGE) / 2;
   // The amplitude/2 is neccessary to compensate for sin()'s amplitude of 2
   double offset = MIN_VOLTAGE + ampli;
   
   for (ndx = 0; ndx < num_samples; ndx++)
 71e:	21 96       	adiw	r28, 0x01	; 1
 720:	80 91 1e 01 	lds	r24, 0x011E
 724:	90 91 1f 01 	lds	r25, 0x011F
 728:	c8 17       	cp	r28, r24
 72a:	d9 07       	cpc	r29, r25
 72c:	e4 f2       	brlt	.-72     	; 0x6e6 <make_sin_LUT+0x5c>
      SinWave[ndx] = volts_to_bits(ampli * sin(rad += increment) + offset);
 72e:	df 91       	pop	r29
 730:	cf 91       	pop	r28
 732:	1f 91       	pop	r17
 734:	0f 91       	pop	r16
 736:	ff 90       	pop	r15
 738:	ef 90       	pop	r14
 73a:	df 90       	pop	r13
 73c:	cf 90       	pop	r12
 73e:	bf 90       	pop	r11
 740:	af 90       	pop	r10
 742:	9f 90       	pop	r9
 744:	8f 90       	pop	r8
 746:	08 95       	ret

00000748 <initWaves>:
//   else
//      return bits;                  // return 12bit equivalent for DAC
//}

void initWaves() {
   make_square_LUT();
 748:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <make_square_LUT>
   make_triangle_LUT();
 74c:	0e 94 67 02 	call	0x4ce	; 0x4ce <make_triangle_LUT>
   make_sawtooth_LUT();
 750:	0e 94 ef 02 	call	0x5de	; 0x5de <make_sawtooth_LUT>
   make_sin_LUT();
 754:	0e 94 45 03 	call	0x68a	; 0x68a <make_sin_LUT>
   
   Wave = SquareWave;
 758:	84 ea       	ldi	r24, 0xA4	; 164
 75a:	94 e0       	ldi	r25, 0x04	; 4
 75c:	90 93 d1 05 	sts	0x05D1, r25
 760:	80 93 d0 05 	sts	0x05D0, r24
 764:	08 95       	ret

00000766 <__subsf3>:
 766:	50 58       	subi	r21, 0x80	; 128

00000768 <__addsf3>:
 768:	bb 27       	eor	r27, r27
 76a:	aa 27       	eor	r26, r26
 76c:	0e 94 cb 03 	call	0x796	; 0x796 <__addsf3x>
 770:	0c 94 1c 05 	jmp	0xa38	; 0xa38 <__fp_round>
 774:	0e 94 0e 05 	call	0xa1c	; 0xa1c <__fp_pscA>
 778:	38 f0       	brcs	.+14     	; 0x788 <__addsf3+0x20>
 77a:	0e 94 15 05 	call	0xa2a	; 0xa2a <__fp_pscB>
 77e:	20 f0       	brcs	.+8      	; 0x788 <__addsf3+0x20>
 780:	39 f4       	brne	.+14     	; 0x790 <__addsf3+0x28>
 782:	9f 3f       	cpi	r25, 0xFF	; 255
 784:	19 f4       	brne	.+6      	; 0x78c <__addsf3+0x24>
 786:	26 f4       	brtc	.+8      	; 0x790 <__addsf3+0x28>
 788:	0c 94 0b 05 	jmp	0xa16	; 0xa16 <__fp_nan>
 78c:	0e f4       	brtc	.+2      	; 0x790 <__addsf3+0x28>
 78e:	e0 95       	com	r30
 790:	e7 fb       	bst	r30, 7
 792:	0c 94 05 05 	jmp	0xa0a	; 0xa0a <__fp_inf>

00000796 <__addsf3x>:
 796:	e9 2f       	mov	r30, r25
 798:	0e 94 2d 05 	call	0xa5a	; 0xa5a <__fp_split3>
 79c:	58 f3       	brcs	.-42     	; 0x774 <__addsf3+0xc>
 79e:	ba 17       	cp	r27, r26
 7a0:	62 07       	cpc	r22, r18
 7a2:	73 07       	cpc	r23, r19
 7a4:	84 07       	cpc	r24, r20
 7a6:	95 07       	cpc	r25, r21
 7a8:	20 f0       	brcs	.+8      	; 0x7b2 <__addsf3x+0x1c>
 7aa:	79 f4       	brne	.+30     	; 0x7ca <__addsf3x+0x34>
 7ac:	a6 f5       	brtc	.+104    	; 0x816 <__addsf3x+0x80>
 7ae:	0c 94 4f 05 	jmp	0xa9e	; 0xa9e <__fp_zero>
 7b2:	0e f4       	brtc	.+2      	; 0x7b6 <__addsf3x+0x20>
 7b4:	e0 95       	com	r30
 7b6:	0b 2e       	mov	r0, r27
 7b8:	ba 2f       	mov	r27, r26
 7ba:	a0 2d       	mov	r26, r0
 7bc:	0b 01       	movw	r0, r22
 7be:	b9 01       	movw	r22, r18
 7c0:	90 01       	movw	r18, r0
 7c2:	0c 01       	movw	r0, r24
 7c4:	ca 01       	movw	r24, r20
 7c6:	a0 01       	movw	r20, r0
 7c8:	11 24       	eor	r1, r1
 7ca:	ff 27       	eor	r31, r31
 7cc:	59 1b       	sub	r21, r25
 7ce:	99 f0       	breq	.+38     	; 0x7f6 <__addsf3x+0x60>
 7d0:	59 3f       	cpi	r21, 0xF9	; 249
 7d2:	50 f4       	brcc	.+20     	; 0x7e8 <__addsf3x+0x52>
 7d4:	50 3e       	cpi	r21, 0xE0	; 224
 7d6:	68 f1       	brcs	.+90     	; 0x832 <__addsf3x+0x9c>
 7d8:	1a 16       	cp	r1, r26
 7da:	f0 40       	sbci	r31, 0x00	; 0
 7dc:	a2 2f       	mov	r26, r18
 7de:	23 2f       	mov	r18, r19
 7e0:	34 2f       	mov	r19, r20
 7e2:	44 27       	eor	r20, r20
 7e4:	58 5f       	subi	r21, 0xF8	; 248
 7e6:	f3 cf       	rjmp	.-26     	; 0x7ce <__addsf3x+0x38>
 7e8:	46 95       	lsr	r20
 7ea:	37 95       	ror	r19
 7ec:	27 95       	ror	r18
 7ee:	a7 95       	ror	r26
 7f0:	f0 40       	sbci	r31, 0x00	; 0
 7f2:	53 95       	inc	r21
 7f4:	c9 f7       	brne	.-14     	; 0x7e8 <__addsf3x+0x52>
 7f6:	7e f4       	brtc	.+30     	; 0x816 <__addsf3x+0x80>
 7f8:	1f 16       	cp	r1, r31
 7fa:	ba 0b       	sbc	r27, r26
 7fc:	62 0b       	sbc	r22, r18
 7fe:	73 0b       	sbc	r23, r19
 800:	84 0b       	sbc	r24, r20
 802:	ba f0       	brmi	.+46     	; 0x832 <__addsf3x+0x9c>
 804:	91 50       	subi	r25, 0x01	; 1
 806:	a1 f0       	breq	.+40     	; 0x830 <__addsf3x+0x9a>
 808:	ff 0f       	add	r31, r31
 80a:	bb 1f       	adc	r27, r27
 80c:	66 1f       	adc	r22, r22
 80e:	77 1f       	adc	r23, r23
 810:	88 1f       	adc	r24, r24
 812:	c2 f7       	brpl	.-16     	; 0x804 <__addsf3x+0x6e>
 814:	0e c0       	rjmp	.+28     	; 0x832 <__addsf3x+0x9c>
 816:	ba 0f       	add	r27, r26
 818:	62 1f       	adc	r22, r18
 81a:	73 1f       	adc	r23, r19
 81c:	84 1f       	adc	r24, r20
 81e:	48 f4       	brcc	.+18     	; 0x832 <__addsf3x+0x9c>
 820:	87 95       	ror	r24
 822:	77 95       	ror	r23
 824:	67 95       	ror	r22
 826:	b7 95       	ror	r27
 828:	f7 95       	ror	r31
 82a:	9e 3f       	cpi	r25, 0xFE	; 254
 82c:	08 f0       	brcs	.+2      	; 0x830 <__addsf3x+0x9a>
 82e:	b0 cf       	rjmp	.-160    	; 0x790 <__addsf3+0x28>
 830:	93 95       	inc	r25
 832:	88 0f       	add	r24, r24
 834:	08 f0       	brcs	.+2      	; 0x838 <__addsf3x+0xa2>
 836:	99 27       	eor	r25, r25
 838:	ee 0f       	add	r30, r30
 83a:	97 95       	ror	r25
 83c:	87 95       	ror	r24
 83e:	08 95       	ret

00000840 <__divsf3>:
 840:	0e 94 34 04 	call	0x868	; 0x868 <__divsf3x>
 844:	0c 94 1c 05 	jmp	0xa38	; 0xa38 <__fp_round>
 848:	0e 94 15 05 	call	0xa2a	; 0xa2a <__fp_pscB>
 84c:	58 f0       	brcs	.+22     	; 0x864 <__divsf3+0x24>
 84e:	0e 94 0e 05 	call	0xa1c	; 0xa1c <__fp_pscA>
 852:	40 f0       	brcs	.+16     	; 0x864 <__divsf3+0x24>
 854:	29 f4       	brne	.+10     	; 0x860 <__divsf3+0x20>
 856:	5f 3f       	cpi	r21, 0xFF	; 255
 858:	29 f0       	breq	.+10     	; 0x864 <__divsf3+0x24>
 85a:	0c 94 05 05 	jmp	0xa0a	; 0xa0a <__fp_inf>
 85e:	51 11       	cpse	r21, r1
 860:	0c 94 50 05 	jmp	0xaa0	; 0xaa0 <__fp_szero>
 864:	0c 94 0b 05 	jmp	0xa16	; 0xa16 <__fp_nan>

00000868 <__divsf3x>:
 868:	0e 94 2d 05 	call	0xa5a	; 0xa5a <__fp_split3>
 86c:	68 f3       	brcs	.-38     	; 0x848 <__divsf3+0x8>

0000086e <__divsf3_pse>:
 86e:	99 23       	and	r25, r25
 870:	b1 f3       	breq	.-20     	; 0x85e <__divsf3+0x1e>
 872:	55 23       	and	r21, r21
 874:	91 f3       	breq	.-28     	; 0x85a <__divsf3+0x1a>
 876:	95 1b       	sub	r25, r21
 878:	55 0b       	sbc	r21, r21
 87a:	bb 27       	eor	r27, r27
 87c:	aa 27       	eor	r26, r26
 87e:	62 17       	cp	r22, r18
 880:	73 07       	cpc	r23, r19
 882:	84 07       	cpc	r24, r20
 884:	38 f0       	brcs	.+14     	; 0x894 <__divsf3_pse+0x26>
 886:	9f 5f       	subi	r25, 0xFF	; 255
 888:	5f 4f       	sbci	r21, 0xFF	; 255
 88a:	22 0f       	add	r18, r18
 88c:	33 1f       	adc	r19, r19
 88e:	44 1f       	adc	r20, r20
 890:	aa 1f       	adc	r26, r26
 892:	a9 f3       	breq	.-22     	; 0x87e <__divsf3_pse+0x10>
 894:	35 d0       	rcall	.+106    	; 0x900 <__stack+0x1>
 896:	0e 2e       	mov	r0, r30
 898:	3a f0       	brmi	.+14     	; 0x8a8 <__divsf3_pse+0x3a>
 89a:	e0 e8       	ldi	r30, 0x80	; 128
 89c:	32 d0       	rcall	.+100    	; 0x902 <__stack+0x3>
 89e:	91 50       	subi	r25, 0x01	; 1
 8a0:	50 40       	sbci	r21, 0x00	; 0
 8a2:	e6 95       	lsr	r30
 8a4:	00 1c       	adc	r0, r0
 8a6:	ca f7       	brpl	.-14     	; 0x89a <__divsf3_pse+0x2c>
 8a8:	2b d0       	rcall	.+86     	; 0x900 <__stack+0x1>
 8aa:	fe 2f       	mov	r31, r30
 8ac:	29 d0       	rcall	.+82     	; 0x900 <__stack+0x1>
 8ae:	66 0f       	add	r22, r22
 8b0:	77 1f       	adc	r23, r23
 8b2:	88 1f       	adc	r24, r24
 8b4:	bb 1f       	adc	r27, r27
 8b6:	26 17       	cp	r18, r22
 8b8:	37 07       	cpc	r19, r23
 8ba:	48 07       	cpc	r20, r24
 8bc:	ab 07       	cpc	r26, r27
 8be:	b0 e8       	ldi	r27, 0x80	; 128
 8c0:	09 f0       	breq	.+2      	; 0x8c4 <__divsf3_pse+0x56>
 8c2:	bb 0b       	sbc	r27, r27
 8c4:	80 2d       	mov	r24, r0
 8c6:	bf 01       	movw	r22, r30
 8c8:	ff 27       	eor	r31, r31
 8ca:	93 58       	subi	r25, 0x83	; 131
 8cc:	5f 4f       	sbci	r21, 0xFF	; 255
 8ce:	3a f0       	brmi	.+14     	; 0x8de <__divsf3_pse+0x70>
 8d0:	9e 3f       	cpi	r25, 0xFE	; 254
 8d2:	51 05       	cpc	r21, r1
 8d4:	78 f0       	brcs	.+30     	; 0x8f4 <__divsf3_pse+0x86>
 8d6:	0c 94 05 05 	jmp	0xa0a	; 0xa0a <__fp_inf>
 8da:	0c 94 50 05 	jmp	0xaa0	; 0xaa0 <__fp_szero>
 8de:	5f 3f       	cpi	r21, 0xFF	; 255
 8e0:	e4 f3       	brlt	.-8      	; 0x8da <__divsf3_pse+0x6c>
 8e2:	98 3e       	cpi	r25, 0xE8	; 232
 8e4:	d4 f3       	brlt	.-12     	; 0x8da <__divsf3_pse+0x6c>
 8e6:	86 95       	lsr	r24
 8e8:	77 95       	ror	r23
 8ea:	67 95       	ror	r22
 8ec:	b7 95       	ror	r27
 8ee:	f7 95       	ror	r31
 8f0:	9f 5f       	subi	r25, 0xFF	; 255
 8f2:	c9 f7       	brne	.-14     	; 0x8e6 <__divsf3_pse+0x78>
 8f4:	88 0f       	add	r24, r24
 8f6:	91 1d       	adc	r25, r1
 8f8:	96 95       	lsr	r25
 8fa:	87 95       	ror	r24
 8fc:	97 f9       	bld	r25, 7
 8fe:	08 95       	ret
 900:	e1 e0       	ldi	r30, 0x01	; 1
 902:	66 0f       	add	r22, r22
 904:	77 1f       	adc	r23, r23
 906:	88 1f       	adc	r24, r24
 908:	bb 1f       	adc	r27, r27
 90a:	62 17       	cp	r22, r18
 90c:	73 07       	cpc	r23, r19
 90e:	84 07       	cpc	r24, r20
 910:	ba 07       	cpc	r27, r26
 912:	20 f0       	brcs	.+8      	; 0x91c <__stack+0x1d>
 914:	62 1b       	sub	r22, r18
 916:	73 0b       	sbc	r23, r19
 918:	84 0b       	sbc	r24, r20
 91a:	ba 0b       	sbc	r27, r26
 91c:	ee 1f       	adc	r30, r30
 91e:	88 f7       	brcc	.-30     	; 0x902 <__stack+0x3>
 920:	e0 95       	com	r30
 922:	08 95       	ret

00000924 <__fixsfsi>:
 924:	0e 94 99 04 	call	0x932	; 0x932 <__fixunssfsi>
 928:	68 94       	set
 92a:	b1 11       	cpse	r27, r1
 92c:	0c 94 50 05 	jmp	0xaa0	; 0xaa0 <__fp_szero>
 930:	08 95       	ret

00000932 <__fixunssfsi>:
 932:	0e 94 35 05 	call	0xa6a	; 0xa6a <__fp_splitA>
 936:	88 f0       	brcs	.+34     	; 0x95a <__fixunssfsi+0x28>
 938:	9f 57       	subi	r25, 0x7F	; 127
 93a:	98 f0       	brcs	.+38     	; 0x962 <__fixunssfsi+0x30>
 93c:	b9 2f       	mov	r27, r25
 93e:	99 27       	eor	r25, r25
 940:	b7 51       	subi	r27, 0x17	; 23
 942:	b0 f0       	brcs	.+44     	; 0x970 <__fixunssfsi+0x3e>
 944:	e1 f0       	breq	.+56     	; 0x97e <__fixunssfsi+0x4c>
 946:	66 0f       	add	r22, r22
 948:	77 1f       	adc	r23, r23
 94a:	88 1f       	adc	r24, r24
 94c:	99 1f       	adc	r25, r25
 94e:	1a f0       	brmi	.+6      	; 0x956 <__fixunssfsi+0x24>
 950:	ba 95       	dec	r27
 952:	c9 f7       	brne	.-14     	; 0x946 <__fixunssfsi+0x14>
 954:	14 c0       	rjmp	.+40     	; 0x97e <__fixunssfsi+0x4c>
 956:	b1 30       	cpi	r27, 0x01	; 1
 958:	91 f0       	breq	.+36     	; 0x97e <__fixunssfsi+0x4c>
 95a:	0e 94 4f 05 	call	0xa9e	; 0xa9e <__fp_zero>
 95e:	b1 e0       	ldi	r27, 0x01	; 1
 960:	08 95       	ret
 962:	0c 94 4f 05 	jmp	0xa9e	; 0xa9e <__fp_zero>
 966:	67 2f       	mov	r22, r23
 968:	78 2f       	mov	r23, r24
 96a:	88 27       	eor	r24, r24
 96c:	b8 5f       	subi	r27, 0xF8	; 248
 96e:	39 f0       	breq	.+14     	; 0x97e <__fixunssfsi+0x4c>
 970:	b9 3f       	cpi	r27, 0xF9	; 249
 972:	cc f3       	brlt	.-14     	; 0x966 <__fixunssfsi+0x34>
 974:	86 95       	lsr	r24
 976:	77 95       	ror	r23
 978:	67 95       	ror	r22
 97a:	b3 95       	inc	r27
 97c:	d9 f7       	brne	.-10     	; 0x974 <__fixunssfsi+0x42>
 97e:	3e f4       	brtc	.+14     	; 0x98e <__fixunssfsi+0x5c>
 980:	90 95       	com	r25
 982:	80 95       	com	r24
 984:	70 95       	com	r23
 986:	61 95       	neg	r22
 988:	7f 4f       	sbci	r23, 0xFF	; 255
 98a:	8f 4f       	sbci	r24, 0xFF	; 255
 98c:	9f 4f       	sbci	r25, 0xFF	; 255
 98e:	08 95       	ret

00000990 <__floatunsisf>:
 990:	e8 94       	clt
 992:	09 c0       	rjmp	.+18     	; 0x9a6 <__floatsisf+0x12>

00000994 <__floatsisf>:
 994:	97 fb       	bst	r25, 7
 996:	3e f4       	brtc	.+14     	; 0x9a6 <__floatsisf+0x12>
 998:	90 95       	com	r25
 99a:	80 95       	com	r24
 99c:	70 95       	com	r23
 99e:	61 95       	neg	r22
 9a0:	7f 4f       	sbci	r23, 0xFF	; 255
 9a2:	8f 4f       	sbci	r24, 0xFF	; 255
 9a4:	9f 4f       	sbci	r25, 0xFF	; 255
 9a6:	99 23       	and	r25, r25
 9a8:	a9 f0       	breq	.+42     	; 0x9d4 <__floatsisf+0x40>
 9aa:	f9 2f       	mov	r31, r25
 9ac:	96 e9       	ldi	r25, 0x96	; 150
 9ae:	bb 27       	eor	r27, r27
 9b0:	93 95       	inc	r25
 9b2:	f6 95       	lsr	r31
 9b4:	87 95       	ror	r24
 9b6:	77 95       	ror	r23
 9b8:	67 95       	ror	r22
 9ba:	b7 95       	ror	r27
 9bc:	f1 11       	cpse	r31, r1
 9be:	f8 cf       	rjmp	.-16     	; 0x9b0 <__floatsisf+0x1c>
 9c0:	fa f4       	brpl	.+62     	; 0xa00 <__floatsisf+0x6c>
 9c2:	bb 0f       	add	r27, r27
 9c4:	11 f4       	brne	.+4      	; 0x9ca <__floatsisf+0x36>
 9c6:	60 ff       	sbrs	r22, 0
 9c8:	1b c0       	rjmp	.+54     	; 0xa00 <__floatsisf+0x6c>
 9ca:	6f 5f       	subi	r22, 0xFF	; 255
 9cc:	7f 4f       	sbci	r23, 0xFF	; 255
 9ce:	8f 4f       	sbci	r24, 0xFF	; 255
 9d0:	9f 4f       	sbci	r25, 0xFF	; 255
 9d2:	16 c0       	rjmp	.+44     	; 0xa00 <__floatsisf+0x6c>
 9d4:	88 23       	and	r24, r24
 9d6:	11 f0       	breq	.+4      	; 0x9dc <__floatsisf+0x48>
 9d8:	96 e9       	ldi	r25, 0x96	; 150
 9da:	11 c0       	rjmp	.+34     	; 0x9fe <__floatsisf+0x6a>
 9dc:	77 23       	and	r23, r23
 9de:	21 f0       	breq	.+8      	; 0x9e8 <__floatsisf+0x54>
 9e0:	9e e8       	ldi	r25, 0x8E	; 142
 9e2:	87 2f       	mov	r24, r23
 9e4:	76 2f       	mov	r23, r22
 9e6:	05 c0       	rjmp	.+10     	; 0x9f2 <__floatsisf+0x5e>
 9e8:	66 23       	and	r22, r22
 9ea:	71 f0       	breq	.+28     	; 0xa08 <__floatsisf+0x74>
 9ec:	96 e8       	ldi	r25, 0x86	; 134
 9ee:	86 2f       	mov	r24, r22
 9f0:	70 e0       	ldi	r23, 0x00	; 0
 9f2:	60 e0       	ldi	r22, 0x00	; 0
 9f4:	2a f0       	brmi	.+10     	; 0xa00 <__floatsisf+0x6c>
 9f6:	9a 95       	dec	r25
 9f8:	66 0f       	add	r22, r22
 9fa:	77 1f       	adc	r23, r23
 9fc:	88 1f       	adc	r24, r24
 9fe:	da f7       	brpl	.-10     	; 0x9f6 <__floatsisf+0x62>
 a00:	88 0f       	add	r24, r24
 a02:	96 95       	lsr	r25
 a04:	87 95       	ror	r24
 a06:	97 f9       	bld	r25, 7
 a08:	08 95       	ret

00000a0a <__fp_inf>:
 a0a:	97 f9       	bld	r25, 7
 a0c:	9f 67       	ori	r25, 0x7F	; 127
 a0e:	80 e8       	ldi	r24, 0x80	; 128
 a10:	70 e0       	ldi	r23, 0x00	; 0
 a12:	60 e0       	ldi	r22, 0x00	; 0
 a14:	08 95       	ret

00000a16 <__fp_nan>:
 a16:	9f ef       	ldi	r25, 0xFF	; 255
 a18:	80 ec       	ldi	r24, 0xC0	; 192
 a1a:	08 95       	ret

00000a1c <__fp_pscA>:
 a1c:	00 24       	eor	r0, r0
 a1e:	0a 94       	dec	r0
 a20:	16 16       	cp	r1, r22
 a22:	17 06       	cpc	r1, r23
 a24:	18 06       	cpc	r1, r24
 a26:	09 06       	cpc	r0, r25
 a28:	08 95       	ret

00000a2a <__fp_pscB>:
 a2a:	00 24       	eor	r0, r0
 a2c:	0a 94       	dec	r0
 a2e:	12 16       	cp	r1, r18
 a30:	13 06       	cpc	r1, r19
 a32:	14 06       	cpc	r1, r20
 a34:	05 06       	cpc	r0, r21
 a36:	08 95       	ret

00000a38 <__fp_round>:
 a38:	09 2e       	mov	r0, r25
 a3a:	03 94       	inc	r0
 a3c:	00 0c       	add	r0, r0
 a3e:	11 f4       	brne	.+4      	; 0xa44 <__fp_round+0xc>
 a40:	88 23       	and	r24, r24
 a42:	52 f0       	brmi	.+20     	; 0xa58 <__fp_round+0x20>
 a44:	bb 0f       	add	r27, r27
 a46:	40 f4       	brcc	.+16     	; 0xa58 <__fp_round+0x20>
 a48:	bf 2b       	or	r27, r31
 a4a:	11 f4       	brne	.+4      	; 0xa50 <__fp_round+0x18>
 a4c:	60 ff       	sbrs	r22, 0
 a4e:	04 c0       	rjmp	.+8      	; 0xa58 <__fp_round+0x20>
 a50:	6f 5f       	subi	r22, 0xFF	; 255
 a52:	7f 4f       	sbci	r23, 0xFF	; 255
 a54:	8f 4f       	sbci	r24, 0xFF	; 255
 a56:	9f 4f       	sbci	r25, 0xFF	; 255
 a58:	08 95       	ret

00000a5a <__fp_split3>:
 a5a:	57 fd       	sbrc	r21, 7
 a5c:	90 58       	subi	r25, 0x80	; 128
 a5e:	44 0f       	add	r20, r20
 a60:	55 1f       	adc	r21, r21
 a62:	59 f0       	breq	.+22     	; 0xa7a <__fp_splitA+0x10>
 a64:	5f 3f       	cpi	r21, 0xFF	; 255
 a66:	71 f0       	breq	.+28     	; 0xa84 <__fp_splitA+0x1a>
 a68:	47 95       	ror	r20

00000a6a <__fp_splitA>:
 a6a:	88 0f       	add	r24, r24
 a6c:	97 fb       	bst	r25, 7
 a6e:	99 1f       	adc	r25, r25
 a70:	61 f0       	breq	.+24     	; 0xa8a <__fp_splitA+0x20>
 a72:	9f 3f       	cpi	r25, 0xFF	; 255
 a74:	79 f0       	breq	.+30     	; 0xa94 <__fp_splitA+0x2a>
 a76:	87 95       	ror	r24
 a78:	08 95       	ret
 a7a:	12 16       	cp	r1, r18
 a7c:	13 06       	cpc	r1, r19
 a7e:	14 06       	cpc	r1, r20
 a80:	55 1f       	adc	r21, r21
 a82:	f2 cf       	rjmp	.-28     	; 0xa68 <__fp_split3+0xe>
 a84:	46 95       	lsr	r20
 a86:	f1 df       	rcall	.-30     	; 0xa6a <__fp_splitA>
 a88:	08 c0       	rjmp	.+16     	; 0xa9a <__fp_splitA+0x30>
 a8a:	16 16       	cp	r1, r22
 a8c:	17 06       	cpc	r1, r23
 a8e:	18 06       	cpc	r1, r24
 a90:	99 1f       	adc	r25, r25
 a92:	f1 cf       	rjmp	.-30     	; 0xa76 <__fp_splitA+0xc>
 a94:	86 95       	lsr	r24
 a96:	71 05       	cpc	r23, r1
 a98:	61 05       	cpc	r22, r1
 a9a:	08 94       	sec
 a9c:	08 95       	ret

00000a9e <__fp_zero>:
 a9e:	e8 94       	clt

00000aa0 <__fp_szero>:
 aa0:	bb 27       	eor	r27, r27
 aa2:	66 27       	eor	r22, r22
 aa4:	77 27       	eor	r23, r23
 aa6:	cb 01       	movw	r24, r22
 aa8:	97 f9       	bld	r25, 7
 aaa:	08 95       	ret

00000aac <__gesf2>:
 aac:	0e 94 d0 05 	call	0xba0	; 0xba0 <__fp_cmp>
 ab0:	08 f4       	brcc	.+2      	; 0xab4 <__gesf2+0x8>
 ab2:	8f ef       	ldi	r24, 0xFF	; 255
 ab4:	08 95       	ret

00000ab6 <__mulsf3>:
 ab6:	0e 94 6e 05 	call	0xadc	; 0xadc <__mulsf3x>
 aba:	0c 94 1c 05 	jmp	0xa38	; 0xa38 <__fp_round>
 abe:	0e 94 0e 05 	call	0xa1c	; 0xa1c <__fp_pscA>
 ac2:	38 f0       	brcs	.+14     	; 0xad2 <__mulsf3+0x1c>
 ac4:	0e 94 15 05 	call	0xa2a	; 0xa2a <__fp_pscB>
 ac8:	20 f0       	brcs	.+8      	; 0xad2 <__mulsf3+0x1c>
 aca:	95 23       	and	r25, r21
 acc:	11 f0       	breq	.+4      	; 0xad2 <__mulsf3+0x1c>
 ace:	0c 94 05 05 	jmp	0xa0a	; 0xa0a <__fp_inf>
 ad2:	0c 94 0b 05 	jmp	0xa16	; 0xa16 <__fp_nan>
 ad6:	11 24       	eor	r1, r1
 ad8:	0c 94 50 05 	jmp	0xaa0	; 0xaa0 <__fp_szero>

00000adc <__mulsf3x>:
 adc:	0e 94 2d 05 	call	0xa5a	; 0xa5a <__fp_split3>
 ae0:	70 f3       	brcs	.-36     	; 0xabe <__mulsf3+0x8>

00000ae2 <__mulsf3_pse>:
 ae2:	95 9f       	mul	r25, r21
 ae4:	c1 f3       	breq	.-16     	; 0xad6 <__mulsf3+0x20>
 ae6:	95 0f       	add	r25, r21
 ae8:	50 e0       	ldi	r21, 0x00	; 0
 aea:	55 1f       	adc	r21, r21
 aec:	62 9f       	mul	r22, r18
 aee:	f0 01       	movw	r30, r0
 af0:	72 9f       	mul	r23, r18
 af2:	bb 27       	eor	r27, r27
 af4:	f0 0d       	add	r31, r0
 af6:	b1 1d       	adc	r27, r1
 af8:	63 9f       	mul	r22, r19
 afa:	aa 27       	eor	r26, r26
 afc:	f0 0d       	add	r31, r0
 afe:	b1 1d       	adc	r27, r1
 b00:	aa 1f       	adc	r26, r26
 b02:	64 9f       	mul	r22, r20
 b04:	66 27       	eor	r22, r22
 b06:	b0 0d       	add	r27, r0
 b08:	a1 1d       	adc	r26, r1
 b0a:	66 1f       	adc	r22, r22
 b0c:	82 9f       	mul	r24, r18
 b0e:	22 27       	eor	r18, r18
 b10:	b0 0d       	add	r27, r0
 b12:	a1 1d       	adc	r26, r1
 b14:	62 1f       	adc	r22, r18
 b16:	73 9f       	mul	r23, r19
 b18:	b0 0d       	add	r27, r0
 b1a:	a1 1d       	adc	r26, r1
 b1c:	62 1f       	adc	r22, r18
 b1e:	83 9f       	mul	r24, r19
 b20:	a0 0d       	add	r26, r0
 b22:	61 1d       	adc	r22, r1
 b24:	22 1f       	adc	r18, r18
 b26:	74 9f       	mul	r23, r20
 b28:	33 27       	eor	r19, r19
 b2a:	a0 0d       	add	r26, r0
 b2c:	61 1d       	adc	r22, r1
 b2e:	23 1f       	adc	r18, r19
 b30:	84 9f       	mul	r24, r20
 b32:	60 0d       	add	r22, r0
 b34:	21 1d       	adc	r18, r1
 b36:	82 2f       	mov	r24, r18
 b38:	76 2f       	mov	r23, r22
 b3a:	6a 2f       	mov	r22, r26
 b3c:	11 24       	eor	r1, r1
 b3e:	9f 57       	subi	r25, 0x7F	; 127
 b40:	50 40       	sbci	r21, 0x00	; 0
 b42:	9a f0       	brmi	.+38     	; 0xb6a <__mulsf3_pse+0x88>
 b44:	f1 f0       	breq	.+60     	; 0xb82 <__mulsf3_pse+0xa0>
 b46:	88 23       	and	r24, r24
 b48:	4a f0       	brmi	.+18     	; 0xb5c <__mulsf3_pse+0x7a>
 b4a:	ee 0f       	add	r30, r30
 b4c:	ff 1f       	adc	r31, r31
 b4e:	bb 1f       	adc	r27, r27
 b50:	66 1f       	adc	r22, r22
 b52:	77 1f       	adc	r23, r23
 b54:	88 1f       	adc	r24, r24
 b56:	91 50       	subi	r25, 0x01	; 1
 b58:	50 40       	sbci	r21, 0x00	; 0
 b5a:	a9 f7       	brne	.-22     	; 0xb46 <__mulsf3_pse+0x64>
 b5c:	9e 3f       	cpi	r25, 0xFE	; 254
 b5e:	51 05       	cpc	r21, r1
 b60:	80 f0       	brcs	.+32     	; 0xb82 <__mulsf3_pse+0xa0>
 b62:	0c 94 05 05 	jmp	0xa0a	; 0xa0a <__fp_inf>
 b66:	0c 94 50 05 	jmp	0xaa0	; 0xaa0 <__fp_szero>
 b6a:	5f 3f       	cpi	r21, 0xFF	; 255
 b6c:	e4 f3       	brlt	.-8      	; 0xb66 <__mulsf3_pse+0x84>
 b6e:	98 3e       	cpi	r25, 0xE8	; 232
 b70:	d4 f3       	brlt	.-12     	; 0xb66 <__mulsf3_pse+0x84>
 b72:	86 95       	lsr	r24
 b74:	77 95       	ror	r23
 b76:	67 95       	ror	r22
 b78:	b7 95       	ror	r27
 b7a:	f7 95       	ror	r31
 b7c:	e7 95       	ror	r30
 b7e:	9f 5f       	subi	r25, 0xFF	; 255
 b80:	c1 f7       	brne	.-16     	; 0xb72 <__mulsf3_pse+0x90>
 b82:	fe 2b       	or	r31, r30
 b84:	88 0f       	add	r24, r24
 b86:	91 1d       	adc	r25, r1
 b88:	96 95       	lsr	r25
 b8a:	87 95       	ror	r24
 b8c:	97 f9       	bld	r25, 7
 b8e:	08 95       	ret

00000b90 <sin>:
 b90:	9f 93       	push	r25
 b92:	0e 94 f6 05 	call	0xbec	; 0xbec <__fp_rempio2>
 b96:	0f 90       	pop	r0
 b98:	07 fc       	sbrc	r0, 7
 b9a:	ee 5f       	subi	r30, 0xFE	; 254
 b9c:	0c 94 1f 06 	jmp	0xc3e	; 0xc3e <__fp_sinus>

00000ba0 <__fp_cmp>:
 ba0:	99 0f       	add	r25, r25
 ba2:	00 08       	sbc	r0, r0
 ba4:	55 0f       	add	r21, r21
 ba6:	aa 0b       	sbc	r26, r26
 ba8:	e0 e8       	ldi	r30, 0x80	; 128
 baa:	fe ef       	ldi	r31, 0xFE	; 254
 bac:	16 16       	cp	r1, r22
 bae:	17 06       	cpc	r1, r23
 bb0:	e8 07       	cpc	r30, r24
 bb2:	f9 07       	cpc	r31, r25
 bb4:	c0 f0       	brcs	.+48     	; 0xbe6 <__fp_cmp+0x46>
 bb6:	12 16       	cp	r1, r18
 bb8:	13 06       	cpc	r1, r19
 bba:	e4 07       	cpc	r30, r20
 bbc:	f5 07       	cpc	r31, r21
 bbe:	98 f0       	brcs	.+38     	; 0xbe6 <__fp_cmp+0x46>
 bc0:	62 1b       	sub	r22, r18
 bc2:	73 0b       	sbc	r23, r19
 bc4:	84 0b       	sbc	r24, r20
 bc6:	95 0b       	sbc	r25, r21
 bc8:	39 f4       	brne	.+14     	; 0xbd8 <__fp_cmp+0x38>
 bca:	0a 26       	eor	r0, r26
 bcc:	61 f0       	breq	.+24     	; 0xbe6 <__fp_cmp+0x46>
 bce:	23 2b       	or	r18, r19
 bd0:	24 2b       	or	r18, r20
 bd2:	25 2b       	or	r18, r21
 bd4:	21 f4       	brne	.+8      	; 0xbde <__fp_cmp+0x3e>
 bd6:	08 95       	ret
 bd8:	0a 26       	eor	r0, r26
 bda:	09 f4       	brne	.+2      	; 0xbde <__fp_cmp+0x3e>
 bdc:	a1 40       	sbci	r26, 0x01	; 1
 bde:	a6 95       	lsr	r26
 be0:	8f ef       	ldi	r24, 0xFF	; 255
 be2:	81 1d       	adc	r24, r1
 be4:	81 1d       	adc	r24, r1
 be6:	08 95       	ret
 be8:	0c 94 0b 05 	jmp	0xa16	; 0xa16 <__fp_nan>

00000bec <__fp_rempio2>:
 bec:	0e 94 35 05 	call	0xa6a	; 0xa6a <__fp_splitA>
 bf0:	d8 f3       	brcs	.-10     	; 0xbe8 <__fp_cmp+0x48>
 bf2:	e8 94       	clt
 bf4:	e0 e0       	ldi	r30, 0x00	; 0
 bf6:	bb 27       	eor	r27, r27
 bf8:	9f 57       	subi	r25, 0x7F	; 127
 bfa:	f0 f0       	brcs	.+60     	; 0xc38 <__fp_rempio2+0x4c>
 bfc:	2a ed       	ldi	r18, 0xDA	; 218
 bfe:	3f e0       	ldi	r19, 0x0F	; 15
 c00:	49 ec       	ldi	r20, 0xC9	; 201
 c02:	06 c0       	rjmp	.+12     	; 0xc10 <__fp_rempio2+0x24>
 c04:	ee 0f       	add	r30, r30
 c06:	bb 0f       	add	r27, r27
 c08:	66 1f       	adc	r22, r22
 c0a:	77 1f       	adc	r23, r23
 c0c:	88 1f       	adc	r24, r24
 c0e:	28 f0       	brcs	.+10     	; 0xc1a <__fp_rempio2+0x2e>
 c10:	b2 3a       	cpi	r27, 0xA2	; 162
 c12:	62 07       	cpc	r22, r18
 c14:	73 07       	cpc	r23, r19
 c16:	84 07       	cpc	r24, r20
 c18:	28 f0       	brcs	.+10     	; 0xc24 <__fp_rempio2+0x38>
 c1a:	b2 5a       	subi	r27, 0xA2	; 162
 c1c:	62 0b       	sbc	r22, r18
 c1e:	73 0b       	sbc	r23, r19
 c20:	84 0b       	sbc	r24, r20
 c22:	e3 95       	inc	r30
 c24:	9a 95       	dec	r25
 c26:	72 f7       	brpl	.-36     	; 0xc04 <__fp_rempio2+0x18>
 c28:	80 38       	cpi	r24, 0x80	; 128
 c2a:	30 f4       	brcc	.+12     	; 0xc38 <__fp_rempio2+0x4c>
 c2c:	9a 95       	dec	r25
 c2e:	bb 0f       	add	r27, r27
 c30:	66 1f       	adc	r22, r22
 c32:	77 1f       	adc	r23, r23
 c34:	88 1f       	adc	r24, r24
 c36:	d2 f7       	brpl	.-12     	; 0xc2c <__fp_rempio2+0x40>
 c38:	90 48       	sbci	r25, 0x80	; 128
 c3a:	0c 94 35 06 	jmp	0xc6a	; 0xc6a <__fp_mpack_finite>

00000c3e <__fp_sinus>:
 c3e:	ef 93       	push	r30
 c40:	e0 ff       	sbrs	r30, 0
 c42:	07 c0       	rjmp	.+14     	; 0xc52 <__fp_sinus+0x14>
 c44:	a2 ea       	ldi	r26, 0xA2	; 162
 c46:	2a ed       	ldi	r18, 0xDA	; 218
 c48:	3f e0       	ldi	r19, 0x0F	; 15
 c4a:	49 ec       	ldi	r20, 0xC9	; 201
 c4c:	5f eb       	ldi	r21, 0xBF	; 191
 c4e:	0e 94 cb 03 	call	0x796	; 0x796 <__addsf3x>
 c52:	0e 94 1c 05 	call	0xa38	; 0xa38 <__fp_round>
 c56:	0f 90       	pop	r0
 c58:	03 94       	inc	r0
 c5a:	01 fc       	sbrc	r0, 1
 c5c:	90 58       	subi	r25, 0x80	; 128
 c5e:	e8 e6       	ldi	r30, 0x68	; 104
 c60:	f0 e0       	ldi	r31, 0x00	; 0
 c62:	0c 94 41 06 	jmp	0xc82	; 0xc82 <__fp_powsodd>

00000c66 <__fp_mpack>:
 c66:	9f 3f       	cpi	r25, 0xFF	; 255
 c68:	31 f0       	breq	.+12     	; 0xc76 <__fp_mpack_finite+0xc>

00000c6a <__fp_mpack_finite>:
 c6a:	91 50       	subi	r25, 0x01	; 1
 c6c:	20 f4       	brcc	.+8      	; 0xc76 <__fp_mpack_finite+0xc>
 c6e:	87 95       	ror	r24
 c70:	77 95       	ror	r23
 c72:	67 95       	ror	r22
 c74:	b7 95       	ror	r27
 c76:	88 0f       	add	r24, r24
 c78:	91 1d       	adc	r25, r1
 c7a:	96 95       	lsr	r25
 c7c:	87 95       	ror	r24
 c7e:	97 f9       	bld	r25, 7
 c80:	08 95       	ret

00000c82 <__fp_powsodd>:
 c82:	9f 93       	push	r25
 c84:	8f 93       	push	r24
 c86:	7f 93       	push	r23
 c88:	6f 93       	push	r22
 c8a:	ff 93       	push	r31
 c8c:	ef 93       	push	r30
 c8e:	9b 01       	movw	r18, r22
 c90:	ac 01       	movw	r20, r24
 c92:	0e 94 5b 05 	call	0xab6	; 0xab6 <__mulsf3>
 c96:	ef 91       	pop	r30
 c98:	ff 91       	pop	r31
 c9a:	0e 94 55 06 	call	0xcaa	; 0xcaa <__fp_powser>
 c9e:	2f 91       	pop	r18
 ca0:	3f 91       	pop	r19
 ca2:	4f 91       	pop	r20
 ca4:	5f 91       	pop	r21
 ca6:	0c 94 5b 05 	jmp	0xab6	; 0xab6 <__mulsf3>

00000caa <__fp_powser>:
 caa:	df 93       	push	r29
 cac:	cf 93       	push	r28
 cae:	1f 93       	push	r17
 cb0:	0f 93       	push	r16
 cb2:	ff 92       	push	r15
 cb4:	ef 92       	push	r14
 cb6:	df 92       	push	r13
 cb8:	7b 01       	movw	r14, r22
 cba:	8c 01       	movw	r16, r24
 cbc:	68 94       	set
 cbe:	06 c0       	rjmp	.+12     	; 0xccc <__fp_powser+0x22>
 cc0:	da 2e       	mov	r13, r26
 cc2:	ef 01       	movw	r28, r30
 cc4:	0e 94 6e 05 	call	0xadc	; 0xadc <__mulsf3x>
 cc8:	fe 01       	movw	r30, r28
 cca:	e8 94       	clt
 ccc:	a5 91       	lpm	r26, Z+
 cce:	25 91       	lpm	r18, Z+
 cd0:	35 91       	lpm	r19, Z+
 cd2:	45 91       	lpm	r20, Z+
 cd4:	55 91       	lpm	r21, Z+
 cd6:	a6 f3       	brts	.-24     	; 0xcc0 <__fp_powser+0x16>
 cd8:	ef 01       	movw	r28, r30
 cda:	0e 94 cb 03 	call	0x796	; 0x796 <__addsf3x>
 cde:	fe 01       	movw	r30, r28
 ce0:	97 01       	movw	r18, r14
 ce2:	a8 01       	movw	r20, r16
 ce4:	da 94       	dec	r13
 ce6:	69 f7       	brne	.-38     	; 0xcc2 <__fp_powser+0x18>
 ce8:	df 90       	pop	r13
 cea:	ef 90       	pop	r14
 cec:	ff 90       	pop	r15
 cee:	0f 91       	pop	r16
 cf0:	1f 91       	pop	r17
 cf2:	cf 91       	pop	r28
 cf4:	df 91       	pop	r29
 cf6:	08 95       	ret

00000cf8 <__divmodhi4>:
 cf8:	97 fb       	bst	r25, 7
 cfa:	07 2e       	mov	r0, r23
 cfc:	16 f4       	brtc	.+4      	; 0xd02 <__divmodhi4+0xa>
 cfe:	00 94       	com	r0
 d00:	07 d0       	rcall	.+14     	; 0xd10 <__divmodhi4_neg1>
 d02:	77 fd       	sbrc	r23, 7
 d04:	09 d0       	rcall	.+18     	; 0xd18 <__divmodhi4_neg2>
 d06:	0e 94 90 06 	call	0xd20	; 0xd20 <__udivmodhi4>
 d0a:	07 fc       	sbrc	r0, 7
 d0c:	05 d0       	rcall	.+10     	; 0xd18 <__divmodhi4_neg2>
 d0e:	3e f4       	brtc	.+14     	; 0xd1e <__divmodhi4_exit>

00000d10 <__divmodhi4_neg1>:
 d10:	90 95       	com	r25
 d12:	81 95       	neg	r24
 d14:	9f 4f       	sbci	r25, 0xFF	; 255
 d16:	08 95       	ret

00000d18 <__divmodhi4_neg2>:
 d18:	70 95       	com	r23
 d1a:	61 95       	neg	r22
 d1c:	7f 4f       	sbci	r23, 0xFF	; 255

00000d1e <__divmodhi4_exit>:
 d1e:	08 95       	ret

00000d20 <__udivmodhi4>:
 d20:	aa 1b       	sub	r26, r26
 d22:	bb 1b       	sub	r27, r27
 d24:	51 e1       	ldi	r21, 0x11	; 17
 d26:	07 c0       	rjmp	.+14     	; 0xd36 <__udivmodhi4_ep>

00000d28 <__udivmodhi4_loop>:
 d28:	aa 1f       	adc	r26, r26
 d2a:	bb 1f       	adc	r27, r27
 d2c:	a6 17       	cp	r26, r22
 d2e:	b7 07       	cpc	r27, r23
 d30:	10 f0       	brcs	.+4      	; 0xd36 <__udivmodhi4_ep>
 d32:	a6 1b       	sub	r26, r22
 d34:	b7 0b       	sbc	r27, r23

00000d36 <__udivmodhi4_ep>:
 d36:	88 1f       	adc	r24, r24
 d38:	99 1f       	adc	r25, r25
 d3a:	5a 95       	dec	r21
 d3c:	a9 f7       	brne	.-22     	; 0xd28 <__udivmodhi4_loop>
 d3e:	80 95       	com	r24
 d40:	90 95       	com	r25
 d42:	bc 01       	movw	r22, r24
 d44:	cd 01       	movw	r24, r26
 d46:	08 95       	ret

00000d48 <_exit>:
 d48:	f8 94       	cli

00000d4a <__stop_program>:
 d4a:	ff cf       	rjmp	.-2      	; 0xd4a <__stop_program>
