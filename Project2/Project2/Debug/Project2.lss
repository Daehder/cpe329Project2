
Project2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  00000bda  00000c6e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000bda  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000025e  0080010e  0080010e  00000c7c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c7c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000cac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  00000cec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000091a  00000000  00000000  00000dcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000003cd  00000000  00000000  000016e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000458  00000000  00000000  00001ab3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002b0  00000000  00000000  00001f0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000369  00000000  00000000  000021bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000075b  00000000  00000000  00002525  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00002c80  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 43 00 	jmp	0x86	; 0x86 <__ctors_end>
   4:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
   8:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
   c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  10:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  14:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  18:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  1c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  20:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  24:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  28:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  2c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  30:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  34:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  38:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__vector_14>
  3c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  40:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  44:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  48:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  4c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  50:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  54:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  58:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  5c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  60:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  64:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  68:	05 a8       	ldd	r0, Z+53	; 0x35
  6a:	4c cd       	rjmp	.-1384   	; 0xfffffb04 <__eeprom_end+0xff7efb04>
  6c:	b2 d4       	rcall	.+2404   	; 0x9d2 <__mulsf3_pse+0x62>
  6e:	4e b9       	out	0x0e, r20	; 14
  70:	38 36       	cpi	r19, 0x68	; 104
  72:	a9 02       	muls	r26, r25
  74:	0c 50       	subi	r16, 0x0C	; 12
  76:	b9 91       	ld	r27, Y+
  78:	86 88       	ldd	r8, Z+22	; 0x16
  7a:	08 3c       	cpi	r16, 0xC8	; 200
  7c:	a6 aa       	std	Z+54, r10	; 0x36
  7e:	aa 2a       	or	r10, r26
  80:	be 00       	.word	0x00be	; ????
  82:	00 00       	nop
  84:	80 3f       	cpi	r24, 0xF0	; 240

00000086 <__ctors_end>:
  86:	11 24       	eor	r1, r1
  88:	1f be       	out	0x3f, r1	; 63
  8a:	cf ef       	ldi	r28, 0xFF	; 255
  8c:	d8 e0       	ldi	r29, 0x08	; 8
  8e:	de bf       	out	0x3e, r29	; 62
  90:	cd bf       	out	0x3d, r28	; 61

00000092 <__do_copy_data>:
  92:	11 e0       	ldi	r17, 0x01	; 1
  94:	a0 e0       	ldi	r26, 0x00	; 0
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	ea ed       	ldi	r30, 0xDA	; 218
  9a:	fb e0       	ldi	r31, 0x0B	; 11
  9c:	02 c0       	rjmp	.+4      	; 0xa2 <__do_copy_data+0x10>
  9e:	05 90       	lpm	r0, Z+
  a0:	0d 92       	st	X+, r0
  a2:	ae 30       	cpi	r26, 0x0E	; 14
  a4:	b1 07       	cpc	r27, r17
  a6:	d9 f7       	brne	.-10     	; 0x9e <__do_copy_data+0xc>

000000a8 <__do_clear_bss>:
  a8:	23 e0       	ldi	r18, 0x03	; 3
  aa:	ae e0       	ldi	r26, 0x0E	; 14
  ac:	b1 e0       	ldi	r27, 0x01	; 1
  ae:	01 c0       	rjmp	.+2      	; 0xb2 <.do_clear_bss_start>

000000b0 <.do_clear_bss_loop>:
  b0:	1d 92       	st	X+, r1

000000b2 <.do_clear_bss_start>:
  b2:	ac 36       	cpi	r26, 0x6C	; 108
  b4:	b2 07       	cpc	r27, r18
  b6:	e1 f7       	brne	.-8      	; 0xb0 <.do_clear_bss_loop>
  b8:	0e 94 d5 00 	call	0x1aa	; 0x1aa <main>
  bc:	0c 94 eb 05 	jmp	0xbd6	; 0xbd6 <_exit>

000000c0 <__bad_interrupt>:
  c0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c4 <Initialize_SPI_Master>:
#define LED2 2						// Debug LED at PD2
#define DEBOUNCE 100

// sets up SPI system between ATmega328P and slave device(s)
void Initialize_SPI_Master(){
   SPCR = (0<<SPIE) |               // No interrupts
  c4:	80 e5       	ldi	r24, 0x50	; 80
  c6:	8c bd       	out	0x2c, r24	; 44
   (1<<SPE) |                       // SPI enabled
   (1<<MSTR) ;                      // master
   SPSR = 0x00;                     // clear flags
  c8:	1d bc       	out	0x2d, r1	; 45
   PORTB = 1 << SS;                 // make sure SS is high
  ca:	84 e0       	ldi	r24, 0x04	; 4
  cc:	85 b9       	out	0x05, r24	; 5
  ce:	08 95       	ret

000000d0 <initTimer0>:
}

// Initializing timer 0 (change OCR0A for freq change!!!!!)
void initTimer0(){
   TCCR0A = 0x02;                   // timer CTC mode
  d0:	82 e0       	ldi	r24, 0x02	; 2
  d2:	84 bd       	out	0x24, r24	; 36
   OCR0A = overflow;          // sets counter overflow to 250
  d4:	90 91 00 01 	lds	r25, 0x0100
  d8:	97 bd       	out	0x27, r25	; 39
   TCCR0B = 0x02;                   // timer clk = system clk / 8 (2MHz)
  da:	85 bd       	out	0x25, r24	; 37
   TIFR0 = 0x02;                    // Interrupt occurs at OCRF0A overflow
  dc:	85 bb       	out	0x15, r24	; 21
   TIMSK0 = 0x02;                   // OCRF0A overflow interrupt enabled
  de:	80 93 6e 00 	sts	0x006E, r24
  e2:	08 95       	ret

000000e4 <GPIO_Initialization>:
}


// initializes GPIO I/O, SPI interface, and interrupts
void GPIO_Initialization(){
   DDRB |= (1<<MOSI) | (1<<SCK) | (1<<SS);	// make MOSI, SCK and SS outputs
  e4:	84 b1       	in	r24, 0x04	; 4
  e6:	8c 62       	ori	r24, 0x2C	; 44
  e8:	84 b9       	out	0x04, r24	; 4
   DDRD &= ~(1<<BTN1) | ~(1<<BTN1) | ~(1<<BTN2);	// set buttons as inputs
  ea:	8a b1       	in	r24, 0x0a	; 10
  ec:	8a b9       	out	0x0a, r24	; 10
   DDRD |= (1<<LED2);				// degub LED is output
  ee:	52 9a       	sbi	0x0a, 2	; 10
   PORTD |= (1<<BTN0) | (1<<BTN1) | (1<<BTN2);	// set internal pull-ups
  f0:	8b b1       	in	r24, 0x0b	; 11
  f2:	80 6e       	ori	r24, 0xE0	; 224
  f4:	8b b9       	out	0x0b, r24	; 11
   Initialize_SPI_Master();			// initialize SPI to DAC
  f6:	0e 94 62 00 	call	0xc4	; 0xc4 <Initialize_SPI_Master>
   initTimer0();							// initialize timer0
  fa:	0e 94 68 00 	call	0xd0	; 0xd0 <initTimer0>
   sei();									// enable interrupts
  fe:	78 94       	sei
 100:	08 95       	ret

00000102 <check_buttons>:
}

// returns a true bool if a buttons is pressed
uint8_t check_buttons(){
   if (!(PIND & (1<<BTN0))){          // return 1 if button at pin7 is pressed
 102:	4f 99       	sbic	0x09, 7	; 9
 104:	0b c0       	rjmp	.+22     	; 0x11c <check_buttons+0x1a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 106:	2f ef       	ldi	r18, 0xFF	; 255
 108:	81 ee       	ldi	r24, 0xE1	; 225
 10a:	94 e0       	ldi	r25, 0x04	; 4
 10c:	21 50       	subi	r18, 0x01	; 1
 10e:	80 40       	sbci	r24, 0x00	; 0
 110:	90 40       	sbci	r25, 0x00	; 0
 112:	e1 f7       	brne	.-8      	; 0x10c <check_buttons+0xa>
 114:	00 c0       	rjmp	.+0      	; 0x116 <check_buttons+0x14>
 116:	00 00       	nop
		_delay_ms(DEBOUNCE);
      return 1;
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	08 95       	ret
   }
   else if(!(PIND & (1<<BTN1))){    // return 2 if button at pin6 is pressed
 11c:	4e 99       	sbic	0x09, 6	; 9
 11e:	0b c0       	rjmp	.+22     	; 0x136 <check_buttons+0x34>
 120:	2f ef       	ldi	r18, 0xFF	; 255
 122:	81 ee       	ldi	r24, 0xE1	; 225
 124:	94 e0       	ldi	r25, 0x04	; 4
 126:	21 50       	subi	r18, 0x01	; 1
 128:	80 40       	sbci	r24, 0x00	; 0
 12a:	90 40       	sbci	r25, 0x00	; 0
 12c:	e1 f7       	brne	.-8      	; 0x126 <check_buttons+0x24>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <check_buttons+0x2e>
 130:	00 00       	nop
		_delay_ms(DEBOUNCE);
      return 2;
 132:	82 e0       	ldi	r24, 0x02	; 2
 134:	08 95       	ret
   }
	else if(!(PIND & (1<<BTN2))){ 
 136:	4d 9b       	sbis	0x09, 5	; 9
 138:	02 c0       	rjmp	.+4      	; 0x13e <check_buttons+0x3c>
      return 3;                     // return 3 if buttons at pin5 pressed
	  _delay_ms(DEBOUNCE);
	}
	else
		return 0;
 13a:	80 e0       	ldi	r24, 0x00	; 0
 13c:	08 95       	ret
   else if(!(PIND & (1<<BTN1))){    // return 2 if button at pin6 is pressed
		_delay_ms(DEBOUNCE);
      return 2;
   }
	else if(!(PIND & (1<<BTN2))){ 
      return 3;                     // return 3 if buttons at pin5 pressed
 13e:	83 e0       	ldi	r24, 0x03	; 3
	  _delay_ms(DEBOUNCE);
	}
	else
		return 0;
}
 140:	08 95       	ret

00000142 <Transmit_SPI_Master>:

// sends data to DAC over SPI data port
void Transmit_SPI_Master(int Data) {
   PORTB &= ~(1 << SS);					//Assert slave select (active low)
 142:	2a 98       	cbi	0x05, 2	; 5
   SPDR = ((Data >> 8) & 0xF) | 0x70;		//Attach configuration Bits onto MSB
 144:	9f 70       	andi	r25, 0x0F	; 15
 146:	90 67       	ori	r25, 0x70	; 112
 148:	9e bd       	out	0x2e, r25	; 46
   while (!(SPSR & (1<<SPIF)))
 14a:	0d b4       	in	r0, 0x2d	; 45
 14c:	07 fe       	sbrs	r0, 7
 14e:	fd cf       	rjmp	.-6      	; 0x14a <Transmit_SPI_Master+0x8>
      ;
   SPDR = 0xFF & Data;
 150:	8e bd       	out	0x2e, r24	; 46
   while (!(SPSR & (1<<SPIF)))
 152:	0d b4       	in	r0, 0x2d	; 45
 154:	07 fe       	sbrs	r0, 7
 156:	fd cf       	rjmp	.-6      	; 0x152 <Transmit_SPI_Master+0x10>
      ;
   PORTB |= 1 << SS;						//Turn off slave select
 158:	2a 9a       	sbi	0x05, 2	; 5
 15a:	08 95       	ret

0000015c <volts_to_bits>:
      _delay_ms(1);

}

// converts input voltage between 0-5V to 12bit number for DAC
uint16_t volts_to_bits(double voltage){
 15c:	cf 92       	push	r12
 15e:	df 92       	push	r13
 160:	ef 92       	push	r14
 162:	ff 92       	push	r15
   double bits = ((voltage/5.0)*4095);
 164:	20 e0       	ldi	r18, 0x00	; 0
 166:	30 e0       	ldi	r19, 0x00	; 0
 168:	40 ea       	ldi	r20, 0xA0	; 160
 16a:	50 e4       	ldi	r21, 0x40	; 64
 16c:	0e 94 67 03 	call	0x6ce	; 0x6ce <__divsf3>
 170:	20 e0       	ldi	r18, 0x00	; 0
 172:	30 ef       	ldi	r19, 0xF0	; 240
 174:	4f e7       	ldi	r20, 0x7F	; 127
 176:	55 e4       	ldi	r21, 0x45	; 69
 178:	0e 94 a2 04 	call	0x944	; 0x944 <__mulsf3>
 17c:	6b 01       	movw	r12, r22
 17e:	7c 01       	movw	r14, r24
   if(bits>4095)
 180:	20 e0       	ldi	r18, 0x00	; 0
 182:	30 ef       	ldi	r19, 0xF0	; 240
 184:	4f e7       	ldi	r20, 0x7F	; 127
 186:	55 e4       	ldi	r21, 0x45	; 69
 188:	0e 94 9d 04 	call	0x93a	; 0x93a <__gesf2>
 18c:	18 16       	cp	r1, r24
 18e:	34 f0       	brlt	.+12     	; 0x19c <volts_to_bits+0x40>
		return 4095;
	else
	 return bits;                  // return 12bit equivalent for DAC
 190:	c7 01       	movw	r24, r14
 192:	b6 01       	movw	r22, r12
 194:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <__fixunssfsi>
 198:	cb 01       	movw	r24, r22
 19a:	02 c0       	rjmp	.+4      	; 0x1a0 <volts_to_bits+0x44>

// converts input voltage between 0-5V to 12bit number for DAC
uint16_t volts_to_bits(double voltage){
   double bits = ((voltage/5.0)*4095);
   if(bits>4095)
		return 4095;
 19c:	8f ef       	ldi	r24, 0xFF	; 255
 19e:	9f e0       	ldi	r25, 0x0F	; 15
	else
	 return bits;                  // return 12bit equivalent for DAC
}
 1a0:	ff 90       	pop	r15
 1a2:	ef 90       	pop	r14
 1a4:	df 90       	pop	r13
 1a6:	cf 90       	pop	r12
 1a8:	08 95       	ret

000001aa <main>:
int num_samples;	// sets global number of samples
uint8_t overflow = 255;	// set overflow value for 100Hz

int main(void)
{
	num_samples = NUM_SAMPS;
 1aa:	8b e4       	ldi	r24, 0x4B	; 75
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	90 93 11 01 	sts	0x0111, r25
 1b2:	80 93 10 01 	sts	0x0110, r24
	
   // initialize GPIO, interrupts, and timers
   GPIO_Initialization();
 1b6:	0e 94 72 00 	call	0xe4	; 0xe4 <GPIO_Initialization>
   
   // fill square, sawtooth, triangle, and sine wave LUTs
   initWaves();
 1ba:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <initWaves>
   
   while (1){
	   if(check_buttons())
 1be:	0e 94 81 00 	call	0x102	; 0x102 <check_buttons>
 1c2:	88 23       	and	r24, r24
 1c4:	e1 f3       	breq	.-8      	; 0x1be <main+0x14>
			nextWave();
 1c6:	0e 94 23 01 	call	0x246	; 0x246 <nextWave>
 1ca:	f9 cf       	rjmp	.-14     	; 0x1be <main+0x14>

000001cc <__vector_14>:
}

///////////////////////////////////ISR/////////////////////////////////////////

// ISR to increment through wave function LUTs and set frequency
ISR(TIMER0_COMPA_vect){
 1cc:	1f 92       	push	r1
 1ce:	0f 92       	push	r0
 1d0:	0f b6       	in	r0, 0x3f	; 63
 1d2:	0f 92       	push	r0
 1d4:	11 24       	eor	r1, r1
 1d6:	2f 93       	push	r18
 1d8:	3f 93       	push	r19
 1da:	4f 93       	push	r20
 1dc:	5f 93       	push	r21
 1de:	6f 93       	push	r22
 1e0:	7f 93       	push	r23
 1e2:	8f 93       	push	r24
 1e4:	9f 93       	push	r25
 1e6:	af 93       	push	r26
 1e8:	bf 93       	push	r27
 1ea:	ef 93       	push	r30
 1ec:	ff 93       	push	r31
   Transmit_SPI_Master(nextWavePointMacro());
 1ee:	e0 91 6a 03 	lds	r30, 0x036A
 1f2:	f0 91 6b 03 	lds	r31, 0x036B
 1f6:	80 91 01 01 	lds	r24, 0x0101
 1fa:	90 91 02 01 	lds	r25, 0x0102
 1fe:	01 96       	adiw	r24, 0x01	; 1
 200:	60 91 10 01 	lds	r22, 0x0110
 204:	70 91 11 01 	lds	r23, 0x0111
 208:	0e 94 c3 05 	call	0xb86	; 0xb86 <__divmodhi4>
 20c:	90 93 02 01 	sts	0x0102, r25
 210:	80 93 01 01 	sts	0x0101, r24
 214:	88 0f       	add	r24, r24
 216:	99 1f       	adc	r25, r25
 218:	e8 0f       	add	r30, r24
 21a:	f9 1f       	adc	r31, r25
 21c:	80 81       	ld	r24, Z
 21e:	91 81       	ldd	r25, Z+1	; 0x01
 220:	0e 94 a1 00 	call	0x142	; 0x142 <Transmit_SPI_Master>
}
 224:	ff 91       	pop	r31
 226:	ef 91       	pop	r30
 228:	bf 91       	pop	r27
 22a:	af 91       	pop	r26
 22c:	9f 91       	pop	r25
 22e:	8f 91       	pop	r24
 230:	7f 91       	pop	r23
 232:	6f 91       	pop	r22
 234:	5f 91       	pop	r21
 236:	4f 91       	pop	r20
 238:	3f 91       	pop	r19
 23a:	2f 91       	pop	r18
 23c:	0f 90       	pop	r0
 23e:	0f be       	out	0x3f, r0	; 63
 240:	0f 90       	pop	r0
 242:	1f 90       	pop	r1
 244:	18 95       	reti

00000246 <nextWave>:

void nextWave() {
   static int waveNdx = 0;
   static uint16_t* waves[NUM_WAVES] = {SquareWave, TriWave, SawWave, SinWave};
   
   waveNdx++;
 246:	80 91 0e 01 	lds	r24, 0x010E
 24a:	90 91 0f 01 	lds	r25, 0x010F
 24e:	01 96       	adiw	r24, 0x01	; 1
   waveNdx %= NUM_WAVES;
 250:	83 70       	andi	r24, 0x03	; 3
 252:	90 78       	andi	r25, 0x80	; 128
 254:	99 23       	and	r25, r25
 256:	24 f4       	brge	.+8      	; 0x260 <nextWave+0x1a>
 258:	01 97       	sbiw	r24, 0x01	; 1
 25a:	8c 6f       	ori	r24, 0xFC	; 252
 25c:	9f 6f       	ori	r25, 0xFF	; 255
 25e:	01 96       	adiw	r24, 0x01	; 1
 260:	90 93 0f 01 	sts	0x010F, r25
 264:	80 93 0e 01 	sts	0x010E, r24
   
   Wave = waves[waveNdx];
 268:	88 0f       	add	r24, r24
 26a:	99 1f       	adc	r25, r25
 26c:	fc 01       	movw	r30, r24
 26e:	eb 5f       	subi	r30, 0xFB	; 251
 270:	fe 4f       	sbci	r31, 0xFE	; 254
 272:	80 81       	ld	r24, Z
 274:	91 81       	ldd	r25, Z+1	; 0x01
 276:	90 93 6b 03 	sts	0x036B, r25
 27a:	80 93 6a 03 	sts	0x036A, r24
 27e:	08 95       	ret

00000280 <make_square_LUT>:
   dutyCycle += 10;
   dutyCycle %= 110;
   make_square_LUT();
}

void make_square_LUT(){
 280:	cf 92       	push	r12
 282:	df 92       	push	r13
 284:	ef 92       	push	r14
 286:	ff 92       	push	r15
 288:	0f 93       	push	r16
 28a:	1f 93       	push	r17
 28c:	cf 93       	push	r28
 28e:	df 93       	push	r29
   int i;
   int duty = num_samples * (double) dutyCycle/100;
 290:	60 91 10 01 	lds	r22, 0x0110
 294:	70 91 11 01 	lds	r23, 0x0111
 298:	07 2e       	mov	r0, r23
 29a:	00 0c       	add	r0, r0
 29c:	88 0b       	sbc	r24, r24
 29e:	99 0b       	sbc	r25, r25
 2a0:	0e 94 11 04 	call	0x822	; 0x822 <__floatsisf>
 2a4:	6b 01       	movw	r12, r22
 2a6:	7c 01       	movw	r14, r24
 2a8:	80 91 03 01 	lds	r24, 0x0103
 2ac:	90 91 04 01 	lds	r25, 0x0104
 2b0:	bc 01       	movw	r22, r24
 2b2:	99 0f       	add	r25, r25
 2b4:	88 0b       	sbc	r24, r24
 2b6:	99 0b       	sbc	r25, r25
 2b8:	0e 94 11 04 	call	0x822	; 0x822 <__floatsisf>
 2bc:	9b 01       	movw	r18, r22
 2be:	ac 01       	movw	r20, r24
 2c0:	c7 01       	movw	r24, r14
 2c2:	b6 01       	movw	r22, r12
 2c4:	0e 94 a2 04 	call	0x944	; 0x944 <__mulsf3>
 2c8:	20 e0       	ldi	r18, 0x00	; 0
 2ca:	30 e0       	ldi	r19, 0x00	; 0
 2cc:	48 ec       	ldi	r20, 0xC8	; 200
 2ce:	52 e4       	ldi	r21, 0x42	; 66
 2d0:	0e 94 67 03 	call	0x6ce	; 0x6ce <__divsf3>
 2d4:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <__fixsfsi>
 2d8:	eb 01       	movw	r28, r22
   
   for (i = 0; i < duty; i++)
 2da:	1c 16       	cp	r1, r28
 2dc:	1d 06       	cpc	r1, r29
 2de:	b4 f4       	brge	.+44     	; 0x30c <make_square_LUT+0x8c>
 2e0:	04 ed       	ldi	r16, 0xD4	; 212
 2e2:	12 e0       	ldi	r17, 0x02	; 2
 2e4:	66 0f       	add	r22, r22
 2e6:	77 1f       	adc	r23, r23
 2e8:	cb 01       	movw	r24, r22
 2ea:	8c 52       	subi	r24, 0x2C	; 44
 2ec:	9d 4f       	sbci	r25, 0xFD	; 253
 2ee:	7c 01       	movw	r14, r24
      SquareWave[i] = volts_to_bits(MAX_VOLTAGE);
 2f0:	60 e0       	ldi	r22, 0x00	; 0
 2f2:	70 e0       	ldi	r23, 0x00	; 0
 2f4:	80 ea       	ldi	r24, 0xA0	; 160
 2f6:	90 e4       	ldi	r25, 0x40	; 64
 2f8:	0e 94 ae 00 	call	0x15c	; 0x15c <volts_to_bits>
 2fc:	f8 01       	movw	r30, r16
 2fe:	81 93       	st	Z+, r24
 300:	91 93       	st	Z+, r25
 302:	8f 01       	movw	r16, r30

void make_square_LUT(){
   int i;
   int duty = num_samples * (double) dutyCycle/100;
   
   for (i = 0; i < duty; i++)
 304:	ee 15       	cp	r30, r14
 306:	ff 05       	cpc	r31, r15
 308:	99 f7       	brne	.-26     	; 0x2f0 <make_square_LUT+0x70>
 30a:	02 c0       	rjmp	.+4      	; 0x310 <make_square_LUT+0x90>
 30c:	c0 e0       	ldi	r28, 0x00	; 0
 30e:	d0 e0       	ldi	r29, 0x00	; 0
      SquareWave[i] = volts_to_bits(MAX_VOLTAGE);
   
   for ( ; i < num_samples ; i++)
 310:	80 91 10 01 	lds	r24, 0x0110
 314:	90 91 11 01 	lds	r25, 0x0111
 318:	c8 17       	cp	r28, r24
 31a:	d9 07       	cpc	r29, r25
 31c:	b4 f4       	brge	.+44     	; 0x34a <make_square_LUT+0xca>
 31e:	8e 01       	movw	r16, r28
 320:	00 0f       	add	r16, r16
 322:	11 1f       	adc	r17, r17
 324:	0c 52       	subi	r16, 0x2C	; 44
 326:	1d 4f       	sbci	r17, 0xFD	; 253
      SquareWave[i] = volts_to_bits(MIN_VOLTAGE);
 328:	60 e0       	ldi	r22, 0x00	; 0
 32a:	70 e0       	ldi	r23, 0x00	; 0
 32c:	cb 01       	movw	r24, r22
 32e:	0e 94 ae 00 	call	0x15c	; 0x15c <volts_to_bits>
 332:	f8 01       	movw	r30, r16
 334:	81 93       	st	Z+, r24
 336:	91 93       	st	Z+, r25
 338:	8f 01       	movw	r16, r30
   int duty = num_samples * (double) dutyCycle/100;
   
   for (i = 0; i < duty; i++)
      SquareWave[i] = volts_to_bits(MAX_VOLTAGE);
   
   for ( ; i < num_samples ; i++)
 33a:	21 96       	adiw	r28, 0x01	; 1
 33c:	80 91 10 01 	lds	r24, 0x0110
 340:	90 91 11 01 	lds	r25, 0x0111
 344:	c8 17       	cp	r28, r24
 346:	d9 07       	cpc	r29, r25
 348:	7c f3       	brlt	.-34     	; 0x328 <make_square_LUT+0xa8>
      SquareWave[i] = volts_to_bits(MIN_VOLTAGE);
}
 34a:	df 91       	pop	r29
 34c:	cf 91       	pop	r28
 34e:	1f 91       	pop	r17
 350:	0f 91       	pop	r16
 352:	ff 90       	pop	r15
 354:	ef 90       	pop	r14
 356:	df 90       	pop	r13
 358:	cf 90       	pop	r12
 35a:	08 95       	ret

0000035c <make_triangle_LUT>:

void make_triangle_LUT(){
 35c:	4f 92       	push	r4
 35e:	5f 92       	push	r5
 360:	6f 92       	push	r6
 362:	7f 92       	push	r7
 364:	af 92       	push	r10
 366:	bf 92       	push	r11
 368:	cf 92       	push	r12
 36a:	df 92       	push	r13
 36c:	ef 92       	push	r14
 36e:	ff 92       	push	r15
 370:	0f 93       	push	r16
 372:	1f 93       	push	r17
 374:	cf 93       	push	r28
 376:	df 93       	push	r29
   int i;
   int peak = num_samples / 2;
 378:	a0 90 10 01 	lds	r10, 0x0110
 37c:	b0 90 11 01 	lds	r11, 0x0111
 380:	bb 20       	and	r11, r11
 382:	1c f4       	brge	.+6      	; 0x38a <make_triangle_LUT+0x2e>
 384:	2f ef       	ldi	r18, 0xFF	; 255
 386:	a2 1a       	sub	r10, r18
 388:	b2 0a       	sbc	r11, r18
 38a:	b5 94       	asr	r11
 38c:	a7 94       	ror	r10
   double increment = ((double) MAX_VOLTAGE - MIN_VOLTAGE) / peak;
 38e:	b5 01       	movw	r22, r10
 390:	0b 2c       	mov	r0, r11
 392:	00 0c       	add	r0, r0
 394:	88 0b       	sbc	r24, r24
 396:	99 0b       	sbc	r25, r25
 398:	0e 94 11 04 	call	0x822	; 0x822 <__floatsisf>
 39c:	9b 01       	movw	r18, r22
 39e:	ac 01       	movw	r20, r24
 3a0:	60 e0       	ldi	r22, 0x00	; 0
 3a2:	70 e0       	ldi	r23, 0x00	; 0
 3a4:	80 ea       	ldi	r24, 0xA0	; 160
 3a6:	90 e4       	ldi	r25, 0x40	; 64
 3a8:	0e 94 67 03 	call	0x6ce	; 0x6ce <__divsf3>
 3ac:	2b 01       	movw	r4, r22
 3ae:	3c 01       	movw	r6, r24
   double voltage = MIN_VOLTAGE - increment;
 3b0:	9b 01       	movw	r18, r22
 3b2:	ac 01       	movw	r20, r24
 3b4:	60 e0       	ldi	r22, 0x00	; 0
 3b6:	70 e0       	ldi	r23, 0x00	; 0
 3b8:	cb 01       	movw	r24, r22
 3ba:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <__subsf3>
 3be:	6b 01       	movw	r12, r22
 3c0:	7c 01       	movw	r14, r24
   
   for (i = 0; i < (peak + 1); i++)
 3c2:	e5 01       	movw	r28, r10
 3c4:	21 96       	adiw	r28, 0x01	; 1
 3c6:	1c 16       	cp	r1, r28
 3c8:	1d 06       	cpc	r1, r29
 3ca:	dc f4       	brge	.+54     	; 0x402 <make_triangle_LUT+0xa6>
 3cc:	0e e3       	ldi	r16, 0x3E	; 62
 3ce:	12 e0       	ldi	r17, 0x02	; 2
 3d0:	c5 01       	movw	r24, r10
 3d2:	88 0f       	add	r24, r24
 3d4:	99 1f       	adc	r25, r25
 3d6:	fc 01       	movw	r30, r24
 3d8:	e0 5c       	subi	r30, 0xC0	; 192
 3da:	fd 4f       	sbci	r31, 0xFD	; 253
 3dc:	5f 01       	movw	r10, r30
      TriWave[i] = volts_to_bits(voltage += increment);
 3de:	a3 01       	movw	r20, r6
 3e0:	92 01       	movw	r18, r4
 3e2:	c7 01       	movw	r24, r14
 3e4:	b6 01       	movw	r22, r12
 3e6:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__addsf3>
 3ea:	6b 01       	movw	r12, r22
 3ec:	7c 01       	movw	r14, r24
 3ee:	0e 94 ae 00 	call	0x15c	; 0x15c <volts_to_bits>
 3f2:	f8 01       	movw	r30, r16
 3f4:	81 93       	st	Z+, r24
 3f6:	91 93       	st	Z+, r25
 3f8:	8f 01       	movw	r16, r30
   int i;
   int peak = num_samples / 2;
   double increment = ((double) MAX_VOLTAGE - MIN_VOLTAGE) / peak;
   double voltage = MIN_VOLTAGE - increment;
   
   for (i = 0; i < (peak + 1); i++)
 3fa:	ea 15       	cp	r30, r10
 3fc:	fb 05       	cpc	r31, r11
 3fe:	79 f7       	brne	.-34     	; 0x3de <make_triangle_LUT+0x82>
 400:	02 c0       	rjmp	.+4      	; 0x406 <make_triangle_LUT+0xaa>
 402:	c0 e0       	ldi	r28, 0x00	; 0
 404:	d0 e0       	ldi	r29, 0x00	; 0
      TriWave[i] = volts_to_bits(voltage += increment);
   
   for ( ; i < (num_samples - 1); i++)
 406:	80 91 10 01 	lds	r24, 0x0110
 40a:	90 91 11 01 	lds	r25, 0x0111
 40e:	01 97       	sbiw	r24, 0x01	; 1
 410:	c8 17       	cp	r28, r24
 412:	d9 07       	cpc	r29, r25
 414:	e4 f4       	brge	.+56     	; 0x44e <make_triangle_LUT+0xf2>
 416:	8e 01       	movw	r16, r28
 418:	00 0f       	add	r16, r16
 41a:	11 1f       	adc	r17, r17
 41c:	02 5c       	subi	r16, 0xC2	; 194
 41e:	1d 4f       	sbci	r17, 0xFD	; 253
      TriWave[i] = volts_to_bits(voltage -= increment);
 420:	a3 01       	movw	r20, r6
 422:	92 01       	movw	r18, r4
 424:	c7 01       	movw	r24, r14
 426:	b6 01       	movw	r22, r12
 428:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <__subsf3>
 42c:	6b 01       	movw	r12, r22
 42e:	7c 01       	movw	r14, r24
 430:	0e 94 ae 00 	call	0x15c	; 0x15c <volts_to_bits>
 434:	f8 01       	movw	r30, r16
 436:	81 93       	st	Z+, r24
 438:	91 93       	st	Z+, r25
 43a:	8f 01       	movw	r16, r30
   double voltage = MIN_VOLTAGE - increment;
   
   for (i = 0; i < (peak + 1); i++)
      TriWave[i] = volts_to_bits(voltage += increment);
   
   for ( ; i < (num_samples - 1); i++)
 43c:	21 96       	adiw	r28, 0x01	; 1
 43e:	80 91 10 01 	lds	r24, 0x0110
 442:	90 91 11 01 	lds	r25, 0x0111
 446:	01 97       	sbiw	r24, 0x01	; 1
 448:	c8 17       	cp	r28, r24
 44a:	d9 07       	cpc	r29, r25
 44c:	4c f3       	brlt	.-46     	; 0x420 <make_triangle_LUT+0xc4>
      TriWave[i] = volts_to_bits(voltage -= increment);
}
 44e:	df 91       	pop	r29
 450:	cf 91       	pop	r28
 452:	1f 91       	pop	r17
 454:	0f 91       	pop	r16
 456:	ff 90       	pop	r15
 458:	ef 90       	pop	r14
 45a:	df 90       	pop	r13
 45c:	cf 90       	pop	r12
 45e:	bf 90       	pop	r11
 460:	af 90       	pop	r10
 462:	7f 90       	pop	r7
 464:	6f 90       	pop	r6
 466:	5f 90       	pop	r5
 468:	4f 90       	pop	r4
 46a:	08 95       	ret

0000046c <make_sawtooth_LUT>:

void make_sawtooth_LUT(){
 46c:	8f 92       	push	r8
 46e:	9f 92       	push	r9
 470:	af 92       	push	r10
 472:	bf 92       	push	r11
 474:	cf 92       	push	r12
 476:	df 92       	push	r13
 478:	ef 92       	push	r14
 47a:	ff 92       	push	r15
 47c:	0f 93       	push	r16
 47e:	1f 93       	push	r17
 480:	cf 93       	push	r28
 482:	df 93       	push	r29
   int ndx;
   double increment = ((double) MAX_VOLTAGE - MIN_VOLTAGE) / (num_samples - 1);
 484:	c0 91 10 01 	lds	r28, 0x0110
 488:	d0 91 11 01 	lds	r29, 0x0111
 48c:	be 01       	movw	r22, r28
 48e:	61 50       	subi	r22, 0x01	; 1
 490:	71 09       	sbc	r23, r1
 492:	07 2e       	mov	r0, r23
 494:	00 0c       	add	r0, r0
 496:	88 0b       	sbc	r24, r24
 498:	99 0b       	sbc	r25, r25
 49a:	0e 94 11 04 	call	0x822	; 0x822 <__floatsisf>
 49e:	9b 01       	movw	r18, r22
 4a0:	ac 01       	movw	r20, r24
 4a2:	60 e0       	ldi	r22, 0x00	; 0
 4a4:	70 e0       	ldi	r23, 0x00	; 0
 4a6:	80 ea       	ldi	r24, 0xA0	; 160
 4a8:	90 e4       	ldi	r25, 0x40	; 64
 4aa:	0e 94 67 03 	call	0x6ce	; 0x6ce <__divsf3>
 4ae:	4b 01       	movw	r8, r22
 4b0:	5c 01       	movw	r10, r24
   double voltage = MIN_VOLTAGE -increment;
 4b2:	9b 01       	movw	r18, r22
 4b4:	ac 01       	movw	r20, r24
 4b6:	60 e0       	ldi	r22, 0x00	; 0
 4b8:	70 e0       	ldi	r23, 0x00	; 0
 4ba:	cb 01       	movw	r24, r22
 4bc:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <__subsf3>
 4c0:	6b 01       	movw	r12, r22
 4c2:	7c 01       	movw	r14, r24
   
   for (ndx = 0; ndx < num_samples; ndx++)
 4c4:	1c 16       	cp	r1, r28
 4c6:	1d 06       	cpc	r1, r29
 4c8:	d4 f4       	brge	.+52     	; 0x4fe <make_sawtooth_LUT+0x92>
 4ca:	08 ea       	ldi	r16, 0xA8	; 168
 4cc:	11 e0       	ldi	r17, 0x01	; 1
 4ce:	c0 e0       	ldi	r28, 0x00	; 0
 4d0:	d0 e0       	ldi	r29, 0x00	; 0
      SawWave[ndx] = volts_to_bits(voltage += increment);
 4d2:	a5 01       	movw	r20, r10
 4d4:	94 01       	movw	r18, r8
 4d6:	c7 01       	movw	r24, r14
 4d8:	b6 01       	movw	r22, r12
 4da:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__addsf3>
 4de:	6b 01       	movw	r12, r22
 4e0:	7c 01       	movw	r14, r24
 4e2:	0e 94 ae 00 	call	0x15c	; 0x15c <volts_to_bits>
 4e6:	f8 01       	movw	r30, r16
 4e8:	81 93       	st	Z+, r24
 4ea:	91 93       	st	Z+, r25
 4ec:	8f 01       	movw	r16, r30
void make_sawtooth_LUT(){
   int ndx;
   double increment = ((double) MAX_VOLTAGE - MIN_VOLTAGE) / (num_samples - 1);
   double voltage = MIN_VOLTAGE -increment;
   
   for (ndx = 0; ndx < num_samples; ndx++)
 4ee:	21 96       	adiw	r28, 0x01	; 1
 4f0:	80 91 10 01 	lds	r24, 0x0110
 4f4:	90 91 11 01 	lds	r25, 0x0111
 4f8:	c8 17       	cp	r28, r24
 4fa:	d9 07       	cpc	r29, r25
 4fc:	54 f3       	brlt	.-44     	; 0x4d2 <make_sawtooth_LUT+0x66>
      SawWave[ndx] = volts_to_bits(voltage += increment);
}
 4fe:	df 91       	pop	r29
 500:	cf 91       	pop	r28
 502:	1f 91       	pop	r17
 504:	0f 91       	pop	r16
 506:	ff 90       	pop	r15
 508:	ef 90       	pop	r14
 50a:	df 90       	pop	r13
 50c:	cf 90       	pop	r12
 50e:	bf 90       	pop	r11
 510:	af 90       	pop	r10
 512:	9f 90       	pop	r9
 514:	8f 90       	pop	r8
 516:	08 95       	ret

00000518 <make_sin_LUT>:

void make_sin_LUT(){
 518:	8f 92       	push	r8
 51a:	9f 92       	push	r9
 51c:	af 92       	push	r10
 51e:	bf 92       	push	r11
 520:	cf 92       	push	r12
 522:	df 92       	push	r13
 524:	ef 92       	push	r14
 526:	ff 92       	push	r15
 528:	0f 93       	push	r16
 52a:	1f 93       	push	r17
 52c:	cf 93       	push	r28
 52e:	df 93       	push	r29
   int ndx;
   double increment = 2 * M_PI / num_samples;
 530:	c0 91 10 01 	lds	r28, 0x0110
 534:	d0 91 11 01 	lds	r29, 0x0111
 538:	be 01       	movw	r22, r28
 53a:	0d 2e       	mov	r0, r29
 53c:	00 0c       	add	r0, r0
 53e:	88 0b       	sbc	r24, r24
 540:	99 0b       	sbc	r25, r25
 542:	0e 94 11 04 	call	0x822	; 0x822 <__floatsisf>
 546:	9b 01       	movw	r18, r22
 548:	ac 01       	movw	r20, r24
 54a:	6b ed       	ldi	r22, 0xDB	; 219
 54c:	7f e0       	ldi	r23, 0x0F	; 15
 54e:	89 ec       	ldi	r24, 0xC9	; 201
 550:	90 e4       	ldi	r25, 0x40	; 64
 552:	0e 94 67 03 	call	0x6ce	; 0x6ce <__divsf3>
 556:	4b 01       	movw	r8, r22
 558:	5c 01       	movw	r10, r24
   double rad = -increment;
 55a:	6b 01       	movw	r12, r22
 55c:	7c 01       	movw	r14, r24
 55e:	f7 fa       	bst	r15, 7
 560:	f0 94       	com	r15
 562:	f7 f8       	bld	r15, 7
 564:	f0 94       	com	r15
   double ampli = ((double) MAX_VOLTAGE - MIN_VOLTAGE) / 2;
   // The amplitude/2 is neccessary to compensate for sin()'s amplitude of 2
   double offset = MIN_VOLTAGE + ampli;
   
   for (ndx = 0; ndx < num_samples; ndx++)
 566:	1c 16       	cp	r1, r28
 568:	1d 06       	cpc	r1, r29
 56a:	44 f5       	brge	.+80     	; 0x5bc <make_sin_LUT+0xa4>
 56c:	02 e1       	ldi	r16, 0x12	; 18
 56e:	11 e0       	ldi	r17, 0x01	; 1
 570:	c0 e0       	ldi	r28, 0x00	; 0
 572:	d0 e0       	ldi	r29, 0x00	; 0
      SinWave[ndx] = volts_to_bits(ampli * sin(rad += increment) + offset);
 574:	a5 01       	movw	r20, r10
 576:	94 01       	movw	r18, r8
 578:	c7 01       	movw	r24, r14
 57a:	b6 01       	movw	r22, r12
 57c:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__addsf3>
 580:	6b 01       	movw	r12, r22
 582:	7c 01       	movw	r14, r24
 584:	0e 94 0f 05 	call	0xa1e	; 0xa1e <sin>
 588:	20 e0       	ldi	r18, 0x00	; 0
 58a:	30 e0       	ldi	r19, 0x00	; 0
 58c:	40 e2       	ldi	r20, 0x20	; 32
 58e:	50 e4       	ldi	r21, 0x40	; 64
 590:	0e 94 a2 04 	call	0x944	; 0x944 <__mulsf3>
 594:	20 e0       	ldi	r18, 0x00	; 0
 596:	30 e0       	ldi	r19, 0x00	; 0
 598:	40 e2       	ldi	r20, 0x20	; 32
 59a:	50 e4       	ldi	r21, 0x40	; 64
 59c:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__addsf3>
 5a0:	0e 94 ae 00 	call	0x15c	; 0x15c <volts_to_bits>
 5a4:	f8 01       	movw	r30, r16
 5a6:	81 93       	st	Z+, r24
 5a8:	91 93       	st	Z+, r25
 5aa:	8f 01       	movw	r16, r30
   double rad = -increment;
   double ampli = ((double) MAX_VOLTAGE - MIN_VOLTAGE) / 2;
   // The amplitude/2 is neccessary to compensate for sin()'s amplitude of 2
   double offset = MIN_VOLTAGE + ampli;
   
   for (ndx = 0; ndx < num_samples; ndx++)
 5ac:	21 96       	adiw	r28, 0x01	; 1
 5ae:	80 91 10 01 	lds	r24, 0x0110
 5b2:	90 91 11 01 	lds	r25, 0x0111
 5b6:	c8 17       	cp	r28, r24
 5b8:	d9 07       	cpc	r29, r25
 5ba:	e4 f2       	brlt	.-72     	; 0x574 <make_sin_LUT+0x5c>
      SinWave[ndx] = volts_to_bits(ampli * sin(rad += increment) + offset);
 5bc:	df 91       	pop	r29
 5be:	cf 91       	pop	r28
 5c0:	1f 91       	pop	r17
 5c2:	0f 91       	pop	r16
 5c4:	ff 90       	pop	r15
 5c6:	ef 90       	pop	r14
 5c8:	df 90       	pop	r13
 5ca:	cf 90       	pop	r12
 5cc:	bf 90       	pop	r11
 5ce:	af 90       	pop	r10
 5d0:	9f 90       	pop	r9
 5d2:	8f 90       	pop	r8
 5d4:	08 95       	ret

000005d6 <initWaves>:
//   else
//      return bits;                  // return 12bit equivalent for DAC
//}

void initWaves() {
   make_square_LUT();
 5d6:	0e 94 40 01 	call	0x280	; 0x280 <make_square_LUT>
   make_triangle_LUT();
 5da:	0e 94 ae 01 	call	0x35c	; 0x35c <make_triangle_LUT>
   make_sawtooth_LUT();
 5de:	0e 94 36 02 	call	0x46c	; 0x46c <make_sawtooth_LUT>
   make_sin_LUT();
 5e2:	0e 94 8c 02 	call	0x518	; 0x518 <make_sin_LUT>
   
   Wave = SquareWave;
 5e6:	84 ed       	ldi	r24, 0xD4	; 212
 5e8:	92 e0       	ldi	r25, 0x02	; 2
 5ea:	90 93 6b 03 	sts	0x036B, r25
 5ee:	80 93 6a 03 	sts	0x036A, r24
 5f2:	08 95       	ret

000005f4 <__subsf3>:
 5f4:	50 58       	subi	r21, 0x80	; 128

000005f6 <__addsf3>:
 5f6:	bb 27       	eor	r27, r27
 5f8:	aa 27       	eor	r26, r26
 5fa:	0e 94 12 03 	call	0x624	; 0x624 <__addsf3x>
 5fe:	0c 94 63 04 	jmp	0x8c6	; 0x8c6 <__fp_round>
 602:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fp_pscA>
 606:	38 f0       	brcs	.+14     	; 0x616 <__addsf3+0x20>
 608:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <__fp_pscB>
 60c:	20 f0       	brcs	.+8      	; 0x616 <__addsf3+0x20>
 60e:	39 f4       	brne	.+14     	; 0x61e <__addsf3+0x28>
 610:	9f 3f       	cpi	r25, 0xFF	; 255
 612:	19 f4       	brne	.+6      	; 0x61a <__addsf3+0x24>
 614:	26 f4       	brtc	.+8      	; 0x61e <__addsf3+0x28>
 616:	0c 94 52 04 	jmp	0x8a4	; 0x8a4 <__fp_nan>
 61a:	0e f4       	brtc	.+2      	; 0x61e <__addsf3+0x28>
 61c:	e0 95       	com	r30
 61e:	e7 fb       	bst	r30, 7
 620:	0c 94 4c 04 	jmp	0x898	; 0x898 <__fp_inf>

00000624 <__addsf3x>:
 624:	e9 2f       	mov	r30, r25
 626:	0e 94 74 04 	call	0x8e8	; 0x8e8 <__fp_split3>
 62a:	58 f3       	brcs	.-42     	; 0x602 <__addsf3+0xc>
 62c:	ba 17       	cp	r27, r26
 62e:	62 07       	cpc	r22, r18
 630:	73 07       	cpc	r23, r19
 632:	84 07       	cpc	r24, r20
 634:	95 07       	cpc	r25, r21
 636:	20 f0       	brcs	.+8      	; 0x640 <__addsf3x+0x1c>
 638:	79 f4       	brne	.+30     	; 0x658 <__addsf3x+0x34>
 63a:	a6 f5       	brtc	.+104    	; 0x6a4 <__addsf3x+0x80>
 63c:	0c 94 96 04 	jmp	0x92c	; 0x92c <__fp_zero>
 640:	0e f4       	brtc	.+2      	; 0x644 <__addsf3x+0x20>
 642:	e0 95       	com	r30
 644:	0b 2e       	mov	r0, r27
 646:	ba 2f       	mov	r27, r26
 648:	a0 2d       	mov	r26, r0
 64a:	0b 01       	movw	r0, r22
 64c:	b9 01       	movw	r22, r18
 64e:	90 01       	movw	r18, r0
 650:	0c 01       	movw	r0, r24
 652:	ca 01       	movw	r24, r20
 654:	a0 01       	movw	r20, r0
 656:	11 24       	eor	r1, r1
 658:	ff 27       	eor	r31, r31
 65a:	59 1b       	sub	r21, r25
 65c:	99 f0       	breq	.+38     	; 0x684 <__addsf3x+0x60>
 65e:	59 3f       	cpi	r21, 0xF9	; 249
 660:	50 f4       	brcc	.+20     	; 0x676 <__addsf3x+0x52>
 662:	50 3e       	cpi	r21, 0xE0	; 224
 664:	68 f1       	brcs	.+90     	; 0x6c0 <__addsf3x+0x9c>
 666:	1a 16       	cp	r1, r26
 668:	f0 40       	sbci	r31, 0x00	; 0
 66a:	a2 2f       	mov	r26, r18
 66c:	23 2f       	mov	r18, r19
 66e:	34 2f       	mov	r19, r20
 670:	44 27       	eor	r20, r20
 672:	58 5f       	subi	r21, 0xF8	; 248
 674:	f3 cf       	rjmp	.-26     	; 0x65c <__addsf3x+0x38>
 676:	46 95       	lsr	r20
 678:	37 95       	ror	r19
 67a:	27 95       	ror	r18
 67c:	a7 95       	ror	r26
 67e:	f0 40       	sbci	r31, 0x00	; 0
 680:	53 95       	inc	r21
 682:	c9 f7       	brne	.-14     	; 0x676 <__addsf3x+0x52>
 684:	7e f4       	brtc	.+30     	; 0x6a4 <__addsf3x+0x80>
 686:	1f 16       	cp	r1, r31
 688:	ba 0b       	sbc	r27, r26
 68a:	62 0b       	sbc	r22, r18
 68c:	73 0b       	sbc	r23, r19
 68e:	84 0b       	sbc	r24, r20
 690:	ba f0       	brmi	.+46     	; 0x6c0 <__addsf3x+0x9c>
 692:	91 50       	subi	r25, 0x01	; 1
 694:	a1 f0       	breq	.+40     	; 0x6be <__addsf3x+0x9a>
 696:	ff 0f       	add	r31, r31
 698:	bb 1f       	adc	r27, r27
 69a:	66 1f       	adc	r22, r22
 69c:	77 1f       	adc	r23, r23
 69e:	88 1f       	adc	r24, r24
 6a0:	c2 f7       	brpl	.-16     	; 0x692 <__addsf3x+0x6e>
 6a2:	0e c0       	rjmp	.+28     	; 0x6c0 <__addsf3x+0x9c>
 6a4:	ba 0f       	add	r27, r26
 6a6:	62 1f       	adc	r22, r18
 6a8:	73 1f       	adc	r23, r19
 6aa:	84 1f       	adc	r24, r20
 6ac:	48 f4       	brcc	.+18     	; 0x6c0 <__addsf3x+0x9c>
 6ae:	87 95       	ror	r24
 6b0:	77 95       	ror	r23
 6b2:	67 95       	ror	r22
 6b4:	b7 95       	ror	r27
 6b6:	f7 95       	ror	r31
 6b8:	9e 3f       	cpi	r25, 0xFE	; 254
 6ba:	08 f0       	brcs	.+2      	; 0x6be <__addsf3x+0x9a>
 6bc:	b0 cf       	rjmp	.-160    	; 0x61e <__addsf3+0x28>
 6be:	93 95       	inc	r25
 6c0:	88 0f       	add	r24, r24
 6c2:	08 f0       	brcs	.+2      	; 0x6c6 <__addsf3x+0xa2>
 6c4:	99 27       	eor	r25, r25
 6c6:	ee 0f       	add	r30, r30
 6c8:	97 95       	ror	r25
 6ca:	87 95       	ror	r24
 6cc:	08 95       	ret

000006ce <__divsf3>:
 6ce:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <__divsf3x>
 6d2:	0c 94 63 04 	jmp	0x8c6	; 0x8c6 <__fp_round>
 6d6:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <__fp_pscB>
 6da:	58 f0       	brcs	.+22     	; 0x6f2 <__divsf3+0x24>
 6dc:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fp_pscA>
 6e0:	40 f0       	brcs	.+16     	; 0x6f2 <__divsf3+0x24>
 6e2:	29 f4       	brne	.+10     	; 0x6ee <__divsf3+0x20>
 6e4:	5f 3f       	cpi	r21, 0xFF	; 255
 6e6:	29 f0       	breq	.+10     	; 0x6f2 <__divsf3+0x24>
 6e8:	0c 94 4c 04 	jmp	0x898	; 0x898 <__fp_inf>
 6ec:	51 11       	cpse	r21, r1
 6ee:	0c 94 97 04 	jmp	0x92e	; 0x92e <__fp_szero>
 6f2:	0c 94 52 04 	jmp	0x8a4	; 0x8a4 <__fp_nan>

000006f6 <__divsf3x>:
 6f6:	0e 94 74 04 	call	0x8e8	; 0x8e8 <__fp_split3>
 6fa:	68 f3       	brcs	.-38     	; 0x6d6 <__divsf3+0x8>

000006fc <__divsf3_pse>:
 6fc:	99 23       	and	r25, r25
 6fe:	b1 f3       	breq	.-20     	; 0x6ec <__divsf3+0x1e>
 700:	55 23       	and	r21, r21
 702:	91 f3       	breq	.-28     	; 0x6e8 <__divsf3+0x1a>
 704:	95 1b       	sub	r25, r21
 706:	55 0b       	sbc	r21, r21
 708:	bb 27       	eor	r27, r27
 70a:	aa 27       	eor	r26, r26
 70c:	62 17       	cp	r22, r18
 70e:	73 07       	cpc	r23, r19
 710:	84 07       	cpc	r24, r20
 712:	38 f0       	brcs	.+14     	; 0x722 <__divsf3_pse+0x26>
 714:	9f 5f       	subi	r25, 0xFF	; 255
 716:	5f 4f       	sbci	r21, 0xFF	; 255
 718:	22 0f       	add	r18, r18
 71a:	33 1f       	adc	r19, r19
 71c:	44 1f       	adc	r20, r20
 71e:	aa 1f       	adc	r26, r26
 720:	a9 f3       	breq	.-22     	; 0x70c <__divsf3_pse+0x10>
 722:	35 d0       	rcall	.+106    	; 0x78e <__divsf3_pse+0x92>
 724:	0e 2e       	mov	r0, r30
 726:	3a f0       	brmi	.+14     	; 0x736 <__divsf3_pse+0x3a>
 728:	e0 e8       	ldi	r30, 0x80	; 128
 72a:	32 d0       	rcall	.+100    	; 0x790 <__divsf3_pse+0x94>
 72c:	91 50       	subi	r25, 0x01	; 1
 72e:	50 40       	sbci	r21, 0x00	; 0
 730:	e6 95       	lsr	r30
 732:	00 1c       	adc	r0, r0
 734:	ca f7       	brpl	.-14     	; 0x728 <__divsf3_pse+0x2c>
 736:	2b d0       	rcall	.+86     	; 0x78e <__divsf3_pse+0x92>
 738:	fe 2f       	mov	r31, r30
 73a:	29 d0       	rcall	.+82     	; 0x78e <__divsf3_pse+0x92>
 73c:	66 0f       	add	r22, r22
 73e:	77 1f       	adc	r23, r23
 740:	88 1f       	adc	r24, r24
 742:	bb 1f       	adc	r27, r27
 744:	26 17       	cp	r18, r22
 746:	37 07       	cpc	r19, r23
 748:	48 07       	cpc	r20, r24
 74a:	ab 07       	cpc	r26, r27
 74c:	b0 e8       	ldi	r27, 0x80	; 128
 74e:	09 f0       	breq	.+2      	; 0x752 <__divsf3_pse+0x56>
 750:	bb 0b       	sbc	r27, r27
 752:	80 2d       	mov	r24, r0
 754:	bf 01       	movw	r22, r30
 756:	ff 27       	eor	r31, r31
 758:	93 58       	subi	r25, 0x83	; 131
 75a:	5f 4f       	sbci	r21, 0xFF	; 255
 75c:	3a f0       	brmi	.+14     	; 0x76c <__divsf3_pse+0x70>
 75e:	9e 3f       	cpi	r25, 0xFE	; 254
 760:	51 05       	cpc	r21, r1
 762:	78 f0       	brcs	.+30     	; 0x782 <__divsf3_pse+0x86>
 764:	0c 94 4c 04 	jmp	0x898	; 0x898 <__fp_inf>
 768:	0c 94 97 04 	jmp	0x92e	; 0x92e <__fp_szero>
 76c:	5f 3f       	cpi	r21, 0xFF	; 255
 76e:	e4 f3       	brlt	.-8      	; 0x768 <__divsf3_pse+0x6c>
 770:	98 3e       	cpi	r25, 0xE8	; 232
 772:	d4 f3       	brlt	.-12     	; 0x768 <__divsf3_pse+0x6c>
 774:	86 95       	lsr	r24
 776:	77 95       	ror	r23
 778:	67 95       	ror	r22
 77a:	b7 95       	ror	r27
 77c:	f7 95       	ror	r31
 77e:	9f 5f       	subi	r25, 0xFF	; 255
 780:	c9 f7       	brne	.-14     	; 0x774 <__divsf3_pse+0x78>
 782:	88 0f       	add	r24, r24
 784:	91 1d       	adc	r25, r1
 786:	96 95       	lsr	r25
 788:	87 95       	ror	r24
 78a:	97 f9       	bld	r25, 7
 78c:	08 95       	ret
 78e:	e1 e0       	ldi	r30, 0x01	; 1
 790:	66 0f       	add	r22, r22
 792:	77 1f       	adc	r23, r23
 794:	88 1f       	adc	r24, r24
 796:	bb 1f       	adc	r27, r27
 798:	62 17       	cp	r22, r18
 79a:	73 07       	cpc	r23, r19
 79c:	84 07       	cpc	r24, r20
 79e:	ba 07       	cpc	r27, r26
 7a0:	20 f0       	brcs	.+8      	; 0x7aa <__divsf3_pse+0xae>
 7a2:	62 1b       	sub	r22, r18
 7a4:	73 0b       	sbc	r23, r19
 7a6:	84 0b       	sbc	r24, r20
 7a8:	ba 0b       	sbc	r27, r26
 7aa:	ee 1f       	adc	r30, r30
 7ac:	88 f7       	brcc	.-30     	; 0x790 <__divsf3_pse+0x94>
 7ae:	e0 95       	com	r30
 7b0:	08 95       	ret

000007b2 <__fixsfsi>:
 7b2:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <__fixunssfsi>
 7b6:	68 94       	set
 7b8:	b1 11       	cpse	r27, r1
 7ba:	0c 94 97 04 	jmp	0x92e	; 0x92e <__fp_szero>
 7be:	08 95       	ret

000007c0 <__fixunssfsi>:
 7c0:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <__fp_splitA>
 7c4:	88 f0       	brcs	.+34     	; 0x7e8 <__fixunssfsi+0x28>
 7c6:	9f 57       	subi	r25, 0x7F	; 127
 7c8:	98 f0       	brcs	.+38     	; 0x7f0 <__fixunssfsi+0x30>
 7ca:	b9 2f       	mov	r27, r25
 7cc:	99 27       	eor	r25, r25
 7ce:	b7 51       	subi	r27, 0x17	; 23
 7d0:	b0 f0       	brcs	.+44     	; 0x7fe <__fixunssfsi+0x3e>
 7d2:	e1 f0       	breq	.+56     	; 0x80c <__fixunssfsi+0x4c>
 7d4:	66 0f       	add	r22, r22
 7d6:	77 1f       	adc	r23, r23
 7d8:	88 1f       	adc	r24, r24
 7da:	99 1f       	adc	r25, r25
 7dc:	1a f0       	brmi	.+6      	; 0x7e4 <__fixunssfsi+0x24>
 7de:	ba 95       	dec	r27
 7e0:	c9 f7       	brne	.-14     	; 0x7d4 <__fixunssfsi+0x14>
 7e2:	14 c0       	rjmp	.+40     	; 0x80c <__fixunssfsi+0x4c>
 7e4:	b1 30       	cpi	r27, 0x01	; 1
 7e6:	91 f0       	breq	.+36     	; 0x80c <__fixunssfsi+0x4c>
 7e8:	0e 94 96 04 	call	0x92c	; 0x92c <__fp_zero>
 7ec:	b1 e0       	ldi	r27, 0x01	; 1
 7ee:	08 95       	ret
 7f0:	0c 94 96 04 	jmp	0x92c	; 0x92c <__fp_zero>
 7f4:	67 2f       	mov	r22, r23
 7f6:	78 2f       	mov	r23, r24
 7f8:	88 27       	eor	r24, r24
 7fa:	b8 5f       	subi	r27, 0xF8	; 248
 7fc:	39 f0       	breq	.+14     	; 0x80c <__fixunssfsi+0x4c>
 7fe:	b9 3f       	cpi	r27, 0xF9	; 249
 800:	cc f3       	brlt	.-14     	; 0x7f4 <__fixunssfsi+0x34>
 802:	86 95       	lsr	r24
 804:	77 95       	ror	r23
 806:	67 95       	ror	r22
 808:	b3 95       	inc	r27
 80a:	d9 f7       	brne	.-10     	; 0x802 <__fixunssfsi+0x42>
 80c:	3e f4       	brtc	.+14     	; 0x81c <__fixunssfsi+0x5c>
 80e:	90 95       	com	r25
 810:	80 95       	com	r24
 812:	70 95       	com	r23
 814:	61 95       	neg	r22
 816:	7f 4f       	sbci	r23, 0xFF	; 255
 818:	8f 4f       	sbci	r24, 0xFF	; 255
 81a:	9f 4f       	sbci	r25, 0xFF	; 255
 81c:	08 95       	ret

0000081e <__floatunsisf>:
 81e:	e8 94       	clt
 820:	09 c0       	rjmp	.+18     	; 0x834 <__floatsisf+0x12>

00000822 <__floatsisf>:
 822:	97 fb       	bst	r25, 7
 824:	3e f4       	brtc	.+14     	; 0x834 <__floatsisf+0x12>
 826:	90 95       	com	r25
 828:	80 95       	com	r24
 82a:	70 95       	com	r23
 82c:	61 95       	neg	r22
 82e:	7f 4f       	sbci	r23, 0xFF	; 255
 830:	8f 4f       	sbci	r24, 0xFF	; 255
 832:	9f 4f       	sbci	r25, 0xFF	; 255
 834:	99 23       	and	r25, r25
 836:	a9 f0       	breq	.+42     	; 0x862 <__floatsisf+0x40>
 838:	f9 2f       	mov	r31, r25
 83a:	96 e9       	ldi	r25, 0x96	; 150
 83c:	bb 27       	eor	r27, r27
 83e:	93 95       	inc	r25
 840:	f6 95       	lsr	r31
 842:	87 95       	ror	r24
 844:	77 95       	ror	r23
 846:	67 95       	ror	r22
 848:	b7 95       	ror	r27
 84a:	f1 11       	cpse	r31, r1
 84c:	f8 cf       	rjmp	.-16     	; 0x83e <__floatsisf+0x1c>
 84e:	fa f4       	brpl	.+62     	; 0x88e <__floatsisf+0x6c>
 850:	bb 0f       	add	r27, r27
 852:	11 f4       	brne	.+4      	; 0x858 <__floatsisf+0x36>
 854:	60 ff       	sbrs	r22, 0
 856:	1b c0       	rjmp	.+54     	; 0x88e <__floatsisf+0x6c>
 858:	6f 5f       	subi	r22, 0xFF	; 255
 85a:	7f 4f       	sbci	r23, 0xFF	; 255
 85c:	8f 4f       	sbci	r24, 0xFF	; 255
 85e:	9f 4f       	sbci	r25, 0xFF	; 255
 860:	16 c0       	rjmp	.+44     	; 0x88e <__floatsisf+0x6c>
 862:	88 23       	and	r24, r24
 864:	11 f0       	breq	.+4      	; 0x86a <__floatsisf+0x48>
 866:	96 e9       	ldi	r25, 0x96	; 150
 868:	11 c0       	rjmp	.+34     	; 0x88c <__floatsisf+0x6a>
 86a:	77 23       	and	r23, r23
 86c:	21 f0       	breq	.+8      	; 0x876 <__floatsisf+0x54>
 86e:	9e e8       	ldi	r25, 0x8E	; 142
 870:	87 2f       	mov	r24, r23
 872:	76 2f       	mov	r23, r22
 874:	05 c0       	rjmp	.+10     	; 0x880 <__floatsisf+0x5e>
 876:	66 23       	and	r22, r22
 878:	71 f0       	breq	.+28     	; 0x896 <__floatsisf+0x74>
 87a:	96 e8       	ldi	r25, 0x86	; 134
 87c:	86 2f       	mov	r24, r22
 87e:	70 e0       	ldi	r23, 0x00	; 0
 880:	60 e0       	ldi	r22, 0x00	; 0
 882:	2a f0       	brmi	.+10     	; 0x88e <__floatsisf+0x6c>
 884:	9a 95       	dec	r25
 886:	66 0f       	add	r22, r22
 888:	77 1f       	adc	r23, r23
 88a:	88 1f       	adc	r24, r24
 88c:	da f7       	brpl	.-10     	; 0x884 <__floatsisf+0x62>
 88e:	88 0f       	add	r24, r24
 890:	96 95       	lsr	r25
 892:	87 95       	ror	r24
 894:	97 f9       	bld	r25, 7
 896:	08 95       	ret

00000898 <__fp_inf>:
 898:	97 f9       	bld	r25, 7
 89a:	9f 67       	ori	r25, 0x7F	; 127
 89c:	80 e8       	ldi	r24, 0x80	; 128
 89e:	70 e0       	ldi	r23, 0x00	; 0
 8a0:	60 e0       	ldi	r22, 0x00	; 0
 8a2:	08 95       	ret

000008a4 <__fp_nan>:
 8a4:	9f ef       	ldi	r25, 0xFF	; 255
 8a6:	80 ec       	ldi	r24, 0xC0	; 192
 8a8:	08 95       	ret

000008aa <__fp_pscA>:
 8aa:	00 24       	eor	r0, r0
 8ac:	0a 94       	dec	r0
 8ae:	16 16       	cp	r1, r22
 8b0:	17 06       	cpc	r1, r23
 8b2:	18 06       	cpc	r1, r24
 8b4:	09 06       	cpc	r0, r25
 8b6:	08 95       	ret

000008b8 <__fp_pscB>:
 8b8:	00 24       	eor	r0, r0
 8ba:	0a 94       	dec	r0
 8bc:	12 16       	cp	r1, r18
 8be:	13 06       	cpc	r1, r19
 8c0:	14 06       	cpc	r1, r20
 8c2:	05 06       	cpc	r0, r21
 8c4:	08 95       	ret

000008c6 <__fp_round>:
 8c6:	09 2e       	mov	r0, r25
 8c8:	03 94       	inc	r0
 8ca:	00 0c       	add	r0, r0
 8cc:	11 f4       	brne	.+4      	; 0x8d2 <__fp_round+0xc>
 8ce:	88 23       	and	r24, r24
 8d0:	52 f0       	brmi	.+20     	; 0x8e6 <__fp_round+0x20>
 8d2:	bb 0f       	add	r27, r27
 8d4:	40 f4       	brcc	.+16     	; 0x8e6 <__fp_round+0x20>
 8d6:	bf 2b       	or	r27, r31
 8d8:	11 f4       	brne	.+4      	; 0x8de <__fp_round+0x18>
 8da:	60 ff       	sbrs	r22, 0
 8dc:	04 c0       	rjmp	.+8      	; 0x8e6 <__fp_round+0x20>
 8de:	6f 5f       	subi	r22, 0xFF	; 255
 8e0:	7f 4f       	sbci	r23, 0xFF	; 255
 8e2:	8f 4f       	sbci	r24, 0xFF	; 255
 8e4:	9f 4f       	sbci	r25, 0xFF	; 255
 8e6:	08 95       	ret

000008e8 <__fp_split3>:
 8e8:	57 fd       	sbrc	r21, 7
 8ea:	90 58       	subi	r25, 0x80	; 128
 8ec:	44 0f       	add	r20, r20
 8ee:	55 1f       	adc	r21, r21
 8f0:	59 f0       	breq	.+22     	; 0x908 <__stack+0x9>
 8f2:	5f 3f       	cpi	r21, 0xFF	; 255
 8f4:	71 f0       	breq	.+28     	; 0x912 <__stack+0x13>
 8f6:	47 95       	ror	r20

000008f8 <__fp_splitA>:
 8f8:	88 0f       	add	r24, r24
 8fa:	97 fb       	bst	r25, 7
 8fc:	99 1f       	adc	r25, r25
 8fe:	61 f0       	breq	.+24     	; 0x918 <__stack+0x19>
 900:	9f 3f       	cpi	r25, 0xFF	; 255
 902:	79 f0       	breq	.+30     	; 0x922 <__stack+0x23>
 904:	87 95       	ror	r24
 906:	08 95       	ret
 908:	12 16       	cp	r1, r18
 90a:	13 06       	cpc	r1, r19
 90c:	14 06       	cpc	r1, r20
 90e:	55 1f       	adc	r21, r21
 910:	f2 cf       	rjmp	.-28     	; 0x8f6 <__fp_split3+0xe>
 912:	46 95       	lsr	r20
 914:	f1 df       	rcall	.-30     	; 0x8f8 <__fp_splitA>
 916:	08 c0       	rjmp	.+16     	; 0x928 <__stack+0x29>
 918:	16 16       	cp	r1, r22
 91a:	17 06       	cpc	r1, r23
 91c:	18 06       	cpc	r1, r24
 91e:	99 1f       	adc	r25, r25
 920:	f1 cf       	rjmp	.-30     	; 0x904 <__stack+0x5>
 922:	86 95       	lsr	r24
 924:	71 05       	cpc	r23, r1
 926:	61 05       	cpc	r22, r1
 928:	08 94       	sec
 92a:	08 95       	ret

0000092c <__fp_zero>:
 92c:	e8 94       	clt

0000092e <__fp_szero>:
 92e:	bb 27       	eor	r27, r27
 930:	66 27       	eor	r22, r22
 932:	77 27       	eor	r23, r23
 934:	cb 01       	movw	r24, r22
 936:	97 f9       	bld	r25, 7
 938:	08 95       	ret

0000093a <__gesf2>:
 93a:	0e 94 17 05 	call	0xa2e	; 0xa2e <__fp_cmp>
 93e:	08 f4       	brcc	.+2      	; 0x942 <__gesf2+0x8>
 940:	8f ef       	ldi	r24, 0xFF	; 255
 942:	08 95       	ret

00000944 <__mulsf3>:
 944:	0e 94 b5 04 	call	0x96a	; 0x96a <__mulsf3x>
 948:	0c 94 63 04 	jmp	0x8c6	; 0x8c6 <__fp_round>
 94c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fp_pscA>
 950:	38 f0       	brcs	.+14     	; 0x960 <__mulsf3+0x1c>
 952:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <__fp_pscB>
 956:	20 f0       	brcs	.+8      	; 0x960 <__mulsf3+0x1c>
 958:	95 23       	and	r25, r21
 95a:	11 f0       	breq	.+4      	; 0x960 <__mulsf3+0x1c>
 95c:	0c 94 4c 04 	jmp	0x898	; 0x898 <__fp_inf>
 960:	0c 94 52 04 	jmp	0x8a4	; 0x8a4 <__fp_nan>
 964:	11 24       	eor	r1, r1
 966:	0c 94 97 04 	jmp	0x92e	; 0x92e <__fp_szero>

0000096a <__mulsf3x>:
 96a:	0e 94 74 04 	call	0x8e8	; 0x8e8 <__fp_split3>
 96e:	70 f3       	brcs	.-36     	; 0x94c <__mulsf3+0x8>

00000970 <__mulsf3_pse>:
 970:	95 9f       	mul	r25, r21
 972:	c1 f3       	breq	.-16     	; 0x964 <__mulsf3+0x20>
 974:	95 0f       	add	r25, r21
 976:	50 e0       	ldi	r21, 0x00	; 0
 978:	55 1f       	adc	r21, r21
 97a:	62 9f       	mul	r22, r18
 97c:	f0 01       	movw	r30, r0
 97e:	72 9f       	mul	r23, r18
 980:	bb 27       	eor	r27, r27
 982:	f0 0d       	add	r31, r0
 984:	b1 1d       	adc	r27, r1
 986:	63 9f       	mul	r22, r19
 988:	aa 27       	eor	r26, r26
 98a:	f0 0d       	add	r31, r0
 98c:	b1 1d       	adc	r27, r1
 98e:	aa 1f       	adc	r26, r26
 990:	64 9f       	mul	r22, r20
 992:	66 27       	eor	r22, r22
 994:	b0 0d       	add	r27, r0
 996:	a1 1d       	adc	r26, r1
 998:	66 1f       	adc	r22, r22
 99a:	82 9f       	mul	r24, r18
 99c:	22 27       	eor	r18, r18
 99e:	b0 0d       	add	r27, r0
 9a0:	a1 1d       	adc	r26, r1
 9a2:	62 1f       	adc	r22, r18
 9a4:	73 9f       	mul	r23, r19
 9a6:	b0 0d       	add	r27, r0
 9a8:	a1 1d       	adc	r26, r1
 9aa:	62 1f       	adc	r22, r18
 9ac:	83 9f       	mul	r24, r19
 9ae:	a0 0d       	add	r26, r0
 9b0:	61 1d       	adc	r22, r1
 9b2:	22 1f       	adc	r18, r18
 9b4:	74 9f       	mul	r23, r20
 9b6:	33 27       	eor	r19, r19
 9b8:	a0 0d       	add	r26, r0
 9ba:	61 1d       	adc	r22, r1
 9bc:	23 1f       	adc	r18, r19
 9be:	84 9f       	mul	r24, r20
 9c0:	60 0d       	add	r22, r0
 9c2:	21 1d       	adc	r18, r1
 9c4:	82 2f       	mov	r24, r18
 9c6:	76 2f       	mov	r23, r22
 9c8:	6a 2f       	mov	r22, r26
 9ca:	11 24       	eor	r1, r1
 9cc:	9f 57       	subi	r25, 0x7F	; 127
 9ce:	50 40       	sbci	r21, 0x00	; 0
 9d0:	9a f0       	brmi	.+38     	; 0x9f8 <__mulsf3_pse+0x88>
 9d2:	f1 f0       	breq	.+60     	; 0xa10 <__mulsf3_pse+0xa0>
 9d4:	88 23       	and	r24, r24
 9d6:	4a f0       	brmi	.+18     	; 0x9ea <__mulsf3_pse+0x7a>
 9d8:	ee 0f       	add	r30, r30
 9da:	ff 1f       	adc	r31, r31
 9dc:	bb 1f       	adc	r27, r27
 9de:	66 1f       	adc	r22, r22
 9e0:	77 1f       	adc	r23, r23
 9e2:	88 1f       	adc	r24, r24
 9e4:	91 50       	subi	r25, 0x01	; 1
 9e6:	50 40       	sbci	r21, 0x00	; 0
 9e8:	a9 f7       	brne	.-22     	; 0x9d4 <__mulsf3_pse+0x64>
 9ea:	9e 3f       	cpi	r25, 0xFE	; 254
 9ec:	51 05       	cpc	r21, r1
 9ee:	80 f0       	brcs	.+32     	; 0xa10 <__mulsf3_pse+0xa0>
 9f0:	0c 94 4c 04 	jmp	0x898	; 0x898 <__fp_inf>
 9f4:	0c 94 97 04 	jmp	0x92e	; 0x92e <__fp_szero>
 9f8:	5f 3f       	cpi	r21, 0xFF	; 255
 9fa:	e4 f3       	brlt	.-8      	; 0x9f4 <__mulsf3_pse+0x84>
 9fc:	98 3e       	cpi	r25, 0xE8	; 232
 9fe:	d4 f3       	brlt	.-12     	; 0x9f4 <__mulsf3_pse+0x84>
 a00:	86 95       	lsr	r24
 a02:	77 95       	ror	r23
 a04:	67 95       	ror	r22
 a06:	b7 95       	ror	r27
 a08:	f7 95       	ror	r31
 a0a:	e7 95       	ror	r30
 a0c:	9f 5f       	subi	r25, 0xFF	; 255
 a0e:	c1 f7       	brne	.-16     	; 0xa00 <__mulsf3_pse+0x90>
 a10:	fe 2b       	or	r31, r30
 a12:	88 0f       	add	r24, r24
 a14:	91 1d       	adc	r25, r1
 a16:	96 95       	lsr	r25
 a18:	87 95       	ror	r24
 a1a:	97 f9       	bld	r25, 7
 a1c:	08 95       	ret

00000a1e <sin>:
 a1e:	9f 93       	push	r25
 a20:	0e 94 3d 05 	call	0xa7a	; 0xa7a <__fp_rempio2>
 a24:	0f 90       	pop	r0
 a26:	07 fc       	sbrc	r0, 7
 a28:	ee 5f       	subi	r30, 0xFE	; 254
 a2a:	0c 94 66 05 	jmp	0xacc	; 0xacc <__fp_sinus>

00000a2e <__fp_cmp>:
 a2e:	99 0f       	add	r25, r25
 a30:	00 08       	sbc	r0, r0
 a32:	55 0f       	add	r21, r21
 a34:	aa 0b       	sbc	r26, r26
 a36:	e0 e8       	ldi	r30, 0x80	; 128
 a38:	fe ef       	ldi	r31, 0xFE	; 254
 a3a:	16 16       	cp	r1, r22
 a3c:	17 06       	cpc	r1, r23
 a3e:	e8 07       	cpc	r30, r24
 a40:	f9 07       	cpc	r31, r25
 a42:	c0 f0       	brcs	.+48     	; 0xa74 <__fp_cmp+0x46>
 a44:	12 16       	cp	r1, r18
 a46:	13 06       	cpc	r1, r19
 a48:	e4 07       	cpc	r30, r20
 a4a:	f5 07       	cpc	r31, r21
 a4c:	98 f0       	brcs	.+38     	; 0xa74 <__fp_cmp+0x46>
 a4e:	62 1b       	sub	r22, r18
 a50:	73 0b       	sbc	r23, r19
 a52:	84 0b       	sbc	r24, r20
 a54:	95 0b       	sbc	r25, r21
 a56:	39 f4       	brne	.+14     	; 0xa66 <__fp_cmp+0x38>
 a58:	0a 26       	eor	r0, r26
 a5a:	61 f0       	breq	.+24     	; 0xa74 <__fp_cmp+0x46>
 a5c:	23 2b       	or	r18, r19
 a5e:	24 2b       	or	r18, r20
 a60:	25 2b       	or	r18, r21
 a62:	21 f4       	brne	.+8      	; 0xa6c <__fp_cmp+0x3e>
 a64:	08 95       	ret
 a66:	0a 26       	eor	r0, r26
 a68:	09 f4       	brne	.+2      	; 0xa6c <__fp_cmp+0x3e>
 a6a:	a1 40       	sbci	r26, 0x01	; 1
 a6c:	a6 95       	lsr	r26
 a6e:	8f ef       	ldi	r24, 0xFF	; 255
 a70:	81 1d       	adc	r24, r1
 a72:	81 1d       	adc	r24, r1
 a74:	08 95       	ret
 a76:	0c 94 52 04 	jmp	0x8a4	; 0x8a4 <__fp_nan>

00000a7a <__fp_rempio2>:
 a7a:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <__fp_splitA>
 a7e:	d8 f3       	brcs	.-10     	; 0xa76 <__fp_cmp+0x48>
 a80:	e8 94       	clt
 a82:	e0 e0       	ldi	r30, 0x00	; 0
 a84:	bb 27       	eor	r27, r27
 a86:	9f 57       	subi	r25, 0x7F	; 127
 a88:	f0 f0       	brcs	.+60     	; 0xac6 <__fp_rempio2+0x4c>
 a8a:	2a ed       	ldi	r18, 0xDA	; 218
 a8c:	3f e0       	ldi	r19, 0x0F	; 15
 a8e:	49 ec       	ldi	r20, 0xC9	; 201
 a90:	06 c0       	rjmp	.+12     	; 0xa9e <__fp_rempio2+0x24>
 a92:	ee 0f       	add	r30, r30
 a94:	bb 0f       	add	r27, r27
 a96:	66 1f       	adc	r22, r22
 a98:	77 1f       	adc	r23, r23
 a9a:	88 1f       	adc	r24, r24
 a9c:	28 f0       	brcs	.+10     	; 0xaa8 <__fp_rempio2+0x2e>
 a9e:	b2 3a       	cpi	r27, 0xA2	; 162
 aa0:	62 07       	cpc	r22, r18
 aa2:	73 07       	cpc	r23, r19
 aa4:	84 07       	cpc	r24, r20
 aa6:	28 f0       	brcs	.+10     	; 0xab2 <__fp_rempio2+0x38>
 aa8:	b2 5a       	subi	r27, 0xA2	; 162
 aaa:	62 0b       	sbc	r22, r18
 aac:	73 0b       	sbc	r23, r19
 aae:	84 0b       	sbc	r24, r20
 ab0:	e3 95       	inc	r30
 ab2:	9a 95       	dec	r25
 ab4:	72 f7       	brpl	.-36     	; 0xa92 <__fp_rempio2+0x18>
 ab6:	80 38       	cpi	r24, 0x80	; 128
 ab8:	30 f4       	brcc	.+12     	; 0xac6 <__fp_rempio2+0x4c>
 aba:	9a 95       	dec	r25
 abc:	bb 0f       	add	r27, r27
 abe:	66 1f       	adc	r22, r22
 ac0:	77 1f       	adc	r23, r23
 ac2:	88 1f       	adc	r24, r24
 ac4:	d2 f7       	brpl	.-12     	; 0xaba <__fp_rempio2+0x40>
 ac6:	90 48       	sbci	r25, 0x80	; 128
 ac8:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <__fp_mpack_finite>

00000acc <__fp_sinus>:
 acc:	ef 93       	push	r30
 ace:	e0 ff       	sbrs	r30, 0
 ad0:	07 c0       	rjmp	.+14     	; 0xae0 <__fp_sinus+0x14>
 ad2:	a2 ea       	ldi	r26, 0xA2	; 162
 ad4:	2a ed       	ldi	r18, 0xDA	; 218
 ad6:	3f e0       	ldi	r19, 0x0F	; 15
 ad8:	49 ec       	ldi	r20, 0xC9	; 201
 ada:	5f eb       	ldi	r21, 0xBF	; 191
 adc:	0e 94 12 03 	call	0x624	; 0x624 <__addsf3x>
 ae0:	0e 94 63 04 	call	0x8c6	; 0x8c6 <__fp_round>
 ae4:	0f 90       	pop	r0
 ae6:	03 94       	inc	r0
 ae8:	01 fc       	sbrc	r0, 1
 aea:	90 58       	subi	r25, 0x80	; 128
 aec:	e8 e6       	ldi	r30, 0x68	; 104
 aee:	f0 e0       	ldi	r31, 0x00	; 0
 af0:	0c 94 88 05 	jmp	0xb10	; 0xb10 <__fp_powsodd>

00000af4 <__fp_mpack>:
 af4:	9f 3f       	cpi	r25, 0xFF	; 255
 af6:	31 f0       	breq	.+12     	; 0xb04 <__fp_mpack_finite+0xc>

00000af8 <__fp_mpack_finite>:
 af8:	91 50       	subi	r25, 0x01	; 1
 afa:	20 f4       	brcc	.+8      	; 0xb04 <__fp_mpack_finite+0xc>
 afc:	87 95       	ror	r24
 afe:	77 95       	ror	r23
 b00:	67 95       	ror	r22
 b02:	b7 95       	ror	r27
 b04:	88 0f       	add	r24, r24
 b06:	91 1d       	adc	r25, r1
 b08:	96 95       	lsr	r25
 b0a:	87 95       	ror	r24
 b0c:	97 f9       	bld	r25, 7
 b0e:	08 95       	ret

00000b10 <__fp_powsodd>:
 b10:	9f 93       	push	r25
 b12:	8f 93       	push	r24
 b14:	7f 93       	push	r23
 b16:	6f 93       	push	r22
 b18:	ff 93       	push	r31
 b1a:	ef 93       	push	r30
 b1c:	9b 01       	movw	r18, r22
 b1e:	ac 01       	movw	r20, r24
 b20:	0e 94 a2 04 	call	0x944	; 0x944 <__mulsf3>
 b24:	ef 91       	pop	r30
 b26:	ff 91       	pop	r31
 b28:	0e 94 9c 05 	call	0xb38	; 0xb38 <__fp_powser>
 b2c:	2f 91       	pop	r18
 b2e:	3f 91       	pop	r19
 b30:	4f 91       	pop	r20
 b32:	5f 91       	pop	r21
 b34:	0c 94 a2 04 	jmp	0x944	; 0x944 <__mulsf3>

00000b38 <__fp_powser>:
 b38:	df 93       	push	r29
 b3a:	cf 93       	push	r28
 b3c:	1f 93       	push	r17
 b3e:	0f 93       	push	r16
 b40:	ff 92       	push	r15
 b42:	ef 92       	push	r14
 b44:	df 92       	push	r13
 b46:	7b 01       	movw	r14, r22
 b48:	8c 01       	movw	r16, r24
 b4a:	68 94       	set
 b4c:	06 c0       	rjmp	.+12     	; 0xb5a <__fp_powser+0x22>
 b4e:	da 2e       	mov	r13, r26
 b50:	ef 01       	movw	r28, r30
 b52:	0e 94 b5 04 	call	0x96a	; 0x96a <__mulsf3x>
 b56:	fe 01       	movw	r30, r28
 b58:	e8 94       	clt
 b5a:	a5 91       	lpm	r26, Z+
 b5c:	25 91       	lpm	r18, Z+
 b5e:	35 91       	lpm	r19, Z+
 b60:	45 91       	lpm	r20, Z+
 b62:	55 91       	lpm	r21, Z+
 b64:	a6 f3       	brts	.-24     	; 0xb4e <__fp_powser+0x16>
 b66:	ef 01       	movw	r28, r30
 b68:	0e 94 12 03 	call	0x624	; 0x624 <__addsf3x>
 b6c:	fe 01       	movw	r30, r28
 b6e:	97 01       	movw	r18, r14
 b70:	a8 01       	movw	r20, r16
 b72:	da 94       	dec	r13
 b74:	69 f7       	brne	.-38     	; 0xb50 <__fp_powser+0x18>
 b76:	df 90       	pop	r13
 b78:	ef 90       	pop	r14
 b7a:	ff 90       	pop	r15
 b7c:	0f 91       	pop	r16
 b7e:	1f 91       	pop	r17
 b80:	cf 91       	pop	r28
 b82:	df 91       	pop	r29
 b84:	08 95       	ret

00000b86 <__divmodhi4>:
 b86:	97 fb       	bst	r25, 7
 b88:	07 2e       	mov	r0, r23
 b8a:	16 f4       	brtc	.+4      	; 0xb90 <__divmodhi4+0xa>
 b8c:	00 94       	com	r0
 b8e:	07 d0       	rcall	.+14     	; 0xb9e <__divmodhi4_neg1>
 b90:	77 fd       	sbrc	r23, 7
 b92:	09 d0       	rcall	.+18     	; 0xba6 <__divmodhi4_neg2>
 b94:	0e 94 d7 05 	call	0xbae	; 0xbae <__udivmodhi4>
 b98:	07 fc       	sbrc	r0, 7
 b9a:	05 d0       	rcall	.+10     	; 0xba6 <__divmodhi4_neg2>
 b9c:	3e f4       	brtc	.+14     	; 0xbac <__divmodhi4_exit>

00000b9e <__divmodhi4_neg1>:
 b9e:	90 95       	com	r25
 ba0:	81 95       	neg	r24
 ba2:	9f 4f       	sbci	r25, 0xFF	; 255
 ba4:	08 95       	ret

00000ba6 <__divmodhi4_neg2>:
 ba6:	70 95       	com	r23
 ba8:	61 95       	neg	r22
 baa:	7f 4f       	sbci	r23, 0xFF	; 255

00000bac <__divmodhi4_exit>:
 bac:	08 95       	ret

00000bae <__udivmodhi4>:
 bae:	aa 1b       	sub	r26, r26
 bb0:	bb 1b       	sub	r27, r27
 bb2:	51 e1       	ldi	r21, 0x11	; 17
 bb4:	07 c0       	rjmp	.+14     	; 0xbc4 <__udivmodhi4_ep>

00000bb6 <__udivmodhi4_loop>:
 bb6:	aa 1f       	adc	r26, r26
 bb8:	bb 1f       	adc	r27, r27
 bba:	a6 17       	cp	r26, r22
 bbc:	b7 07       	cpc	r27, r23
 bbe:	10 f0       	brcs	.+4      	; 0xbc4 <__udivmodhi4_ep>
 bc0:	a6 1b       	sub	r26, r22
 bc2:	b7 0b       	sbc	r27, r23

00000bc4 <__udivmodhi4_ep>:
 bc4:	88 1f       	adc	r24, r24
 bc6:	99 1f       	adc	r25, r25
 bc8:	5a 95       	dec	r21
 bca:	a9 f7       	brne	.-22     	; 0xbb6 <__udivmodhi4_loop>
 bcc:	80 95       	com	r24
 bce:	90 95       	com	r25
 bd0:	bc 01       	movw	r22, r24
 bd2:	cd 01       	movw	r24, r26
 bd4:	08 95       	ret

00000bd6 <_exit>:
 bd6:	f8 94       	cli

00000bd8 <__stop_program>:
 bd8:	ff cf       	rjmp	.-2      	; 0xbd8 <__stop_program>
