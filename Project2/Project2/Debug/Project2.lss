
Project2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000d96  00000e2a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d96  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000004a2  00800110  00800110  00000e3a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e3a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e6c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  00000eac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a81  00000000  00000000  00000fac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000043d  00000000  00000000  00001a2d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004cc  00000000  00000000  00001e6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000338  00000000  00000000  00002338  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003ec  00000000  00000000  00002670  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000085f  00000000  00000000  00002a5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  000032bb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 43 00 	jmp	0x86	; 0x86 <__ctors_end>
   4:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
   8:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
   c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  10:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  14:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  18:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  1c:	0c 94 2c 01 	jmp	0x258	; 0x258 <__vector_7>
  20:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  24:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  28:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  2c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  30:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  34:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  38:	0c 94 05 01 	jmp	0x20a	; 0x20a <__vector_14>
  3c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  40:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  44:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  48:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  4c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  50:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  54:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  58:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  5c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  60:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  64:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  68:	05 a8       	ldd	r0, Z+53	; 0x35
  6a:	4c cd       	rjmp	.-1384   	; 0xfffffb04 <__eeprom_end+0xff7efb04>
  6c:	b2 d4       	rcall	.+2404   	; 0x9d2 <__fixunssfsi+0x56>
  6e:	4e b9       	out	0x0e, r20	; 14
  70:	38 36       	cpi	r19, 0x68	; 104
  72:	a9 02       	muls	r26, r25
  74:	0c 50       	subi	r16, 0x0C	; 12
  76:	b9 91       	ld	r27, Y+
  78:	86 88       	ldd	r8, Z+22	; 0x16
  7a:	08 3c       	cpi	r16, 0xC8	; 200
  7c:	a6 aa       	std	Z+54, r10	; 0x36
  7e:	aa 2a       	or	r10, r26
  80:	be 00       	.word	0x00be	; ????
  82:	00 00       	nop
  84:	80 3f       	cpi	r24, 0xF0	; 240

00000086 <__ctors_end>:
  86:	11 24       	eor	r1, r1
  88:	1f be       	out	0x3f, r1	; 63
  8a:	cf ef       	ldi	r28, 0xFF	; 255
  8c:	d8 e0       	ldi	r29, 0x08	; 8
  8e:	de bf       	out	0x3e, r29	; 62
  90:	cd bf       	out	0x3d, r28	; 61

00000092 <__do_copy_data>:
  92:	11 e0       	ldi	r17, 0x01	; 1
  94:	a0 e0       	ldi	r26, 0x00	; 0
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	e6 e9       	ldi	r30, 0x96	; 150
  9a:	fd e0       	ldi	r31, 0x0D	; 13
  9c:	02 c0       	rjmp	.+4      	; 0xa2 <__do_copy_data+0x10>
  9e:	05 90       	lpm	r0, Z+
  a0:	0d 92       	st	X+, r0
  a2:	a0 31       	cpi	r26, 0x10	; 16
  a4:	b1 07       	cpc	r27, r17
  a6:	d9 f7       	brne	.-10     	; 0x9e <__do_copy_data+0xc>

000000a8 <__do_clear_bss>:
  a8:	25 e0       	ldi	r18, 0x05	; 5
  aa:	a0 e1       	ldi	r26, 0x10	; 16
  ac:	b1 e0       	ldi	r27, 0x01	; 1
  ae:	01 c0       	rjmp	.+2      	; 0xb2 <.do_clear_bss_start>

000000b0 <.do_clear_bss_loop>:
  b0:	1d 92       	st	X+, r1

000000b2 <.do_clear_bss_start>:
  b2:	a2 3b       	cpi	r26, 0xB2	; 178
  b4:	b2 07       	cpc	r27, r18
  b6:	e1 f7       	brne	.-8      	; 0xb0 <.do_clear_bss_loop>
  b8:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <main>
  bc:	0c 94 c9 06 	jmp	0xd92	; 0xd92 <_exit>

000000c0 <__bad_interrupt>:
  c0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c4 <Initialize_SPI_Master>:

int sampleDivider = 1;

// sets up SPI system between ATmega328P and slave device(s)
void Initialize_SPI_Master(){
   SPCR = (0<<SPIE) |               // No interrupts
  c4:	80 e5       	ldi	r24, 0x50	; 80
  c6:	8c bd       	out	0x2c, r24	; 44
   (1<<SPE) |                       // SPI enabled
   (1<<MSTR) ;                      // master
   SPSR = 0x00;                     // clear flags
  c8:	1d bc       	out	0x2d, r1	; 45
   PORTB = 1 << SS;                 // make sure SS is high
  ca:	84 e0       	ldi	r24, 0x04	; 4
  cc:	85 b9       	out	0x05, r24	; 5
  ce:	08 95       	ret

000000d0 <initTimer0>:
}

// Initializing timer 0 (change OCR0A for freq change!!!!!)
void initTimer0(){
   TCCR0A = 0x02;                   // timer CTC mode
  d0:	82 e0       	ldi	r24, 0x02	; 2
  d2:	84 bd       	out	0x24, r24	; 36
   OCR0A = overflow0;          // sets counter overflow
  d4:	90 91 03 01 	lds	r25, 0x0103
  d8:	97 bd       	out	0x27, r25	; 39
   TCCR0B = 0x02;                   // timer clk = system clk / 8 (2MHz)
  da:	85 bd       	out	0x25, r24	; 37
   TIFR0 = 0x02;                    // Interrupt occurs at OCRF0A overflow
  dc:	85 bb       	out	0x15, r24	; 21
   TIMSK0 = 0x02;                   // OCRF0A overflow interrupt enabled
  de:	80 93 6e 00 	sts	0x006E, r24
  e2:	08 95       	ret

000000e4 <initTimer2>:
}

void initTimer2(){
	TCCR2A = 0x02;                   // timer CTC mode
  e4:	82 e0       	ldi	r24, 0x02	; 2
  e6:	80 93 b0 00 	sts	0x00B0, r24
	OCR2A = overflow2;		        // sets counter overflow
  ea:	90 91 02 01 	lds	r25, 0x0102
  ee:	90 93 b3 00 	sts	0x00B3, r25
	TCCR2B = 0x04;                   // timer clk = system clk / 256 (2MHz)
  f2:	94 e0       	ldi	r25, 0x04	; 4
  f4:	90 93 b1 00 	sts	0x00B1, r25
	TIFR2 = 0x02;                    // Interrupt occurs at OCRF2A overflow
  f8:	87 bb       	out	0x17, r24	; 23
	TIMSK2 = 0x02;                   // OCRF0A overflow interrupt enabled
  fa:	80 93 70 00 	sts	0x0070, r24
  fe:	08 95       	ret

00000100 <GPIO_Initialization>:
}


// initializes GPIO I/O, SPI interface, and interrupts
void GPIO_Initialization(){
   DDRB |= (1<<MOSI) | (1<<SCK) | (1<<SS);	// make MOSI, SCK and SS outputs
 100:	84 b1       	in	r24, 0x04	; 4
 102:	8c 62       	ori	r24, 0x2C	; 44
 104:	84 b9       	out	0x04, r24	; 4
   DDRD &= ~(1<<BTN1) | ~(1<<BTN1) | ~(1<<BTN2);	// set buttons as inputs
 106:	8a b1       	in	r24, 0x0a	; 10
 108:	8a b9       	out	0x0a, r24	; 10
   DDRD |= (1<<LED2) | (1<<LED3);				// debug LEDs are output
 10a:	8a b1       	in	r24, 0x0a	; 10
 10c:	8c 60       	ori	r24, 0x0C	; 12
 10e:	8a b9       	out	0x0a, r24	; 10
   PORTD |= (1<<BTN0) | (1<<BTN1) | (1<<BTN2);	// set internal pull-ups
 110:	8b b1       	in	r24, 0x0b	; 11
 112:	80 6e       	ori	r24, 0xE0	; 224
 114:	8b b9       	out	0x0b, r24	; 11
   Initialize_SPI_Master();			// initialize SPI to DAC
 116:	0e 94 62 00 	call	0xc4	; 0xc4 <Initialize_SPI_Master>
   initTimer0();							// initialize timer0
 11a:	0e 94 68 00 	call	0xd0	; 0xd0 <initTimer0>
   initTimer2();
 11e:	0e 94 72 00 	call	0xe4	; 0xe4 <initTimer2>
   sei();									// enable interrupts
 122:	78 94       	sei
 124:	08 95       	ret

00000126 <Transmit_SPI_Master>:
   return btnPressed;
}

// sends data to DAC over SPI data port
void Transmit_SPI_Master(int Data) {
   PORTB &= ~(1 << SS);					//Assert slave select (active low)
 126:	2a 98       	cbi	0x05, 2	; 5
   SPDR = ((Data >> 8) & 0xF) | 0x70;		//Attach configuration Bits onto MSB
 128:	9f 70       	andi	r25, 0x0F	; 15
 12a:	90 67       	ori	r25, 0x70	; 112
 12c:	9e bd       	out	0x2e, r25	; 46
   while (!(SPSR & (1<<SPIF)));
 12e:	0d b4       	in	r0, 0x2d	; 45
 130:	07 fe       	sbrs	r0, 7
 132:	fd cf       	rjmp	.-6      	; 0x12e <Transmit_SPI_Master+0x8>
   SPDR = 0xFF & Data;
 134:	8e bd       	out	0x2e, r24	; 46
   while (!(SPSR & (1<<SPIF)));
 136:	0d b4       	in	r0, 0x2d	; 45
 138:	07 fe       	sbrs	r0, 7
 13a:	fd cf       	rjmp	.-6      	; 0x136 <Transmit_SPI_Master+0x10>
   PORTB |= 1 << SS;						//Turn off slave select
 13c:	2a 9a       	sbi	0x05, 2	; 5
 13e:	08 95       	ret

00000140 <volts_to_bits>:
      _delay_ms(1);

}

// converts input voltage between 0-5V to 12bit number for DAC
uint16_t volts_to_bits(double voltage){
 140:	cf 92       	push	r12
 142:	df 92       	push	r13
 144:	ef 92       	push	r14
 146:	ff 92       	push	r15
   double bits = ((voltage/5.0)*4095);
 148:	20 e0       	ldi	r18, 0x00	; 0
 14a:	30 e0       	ldi	r19, 0x00	; 0
 14c:	40 ea       	ldi	r20, 0xA0	; 160
 14e:	50 e4       	ldi	r21, 0x40	; 64
 150:	0e 94 45 04 	call	0x88a	; 0x88a <__divsf3>
 154:	20 e0       	ldi	r18, 0x00	; 0
 156:	30 ef       	ldi	r19, 0xF0	; 240
 158:	4f e7       	ldi	r20, 0x7F	; 127
 15a:	55 e4       	ldi	r21, 0x45	; 69
 15c:	0e 94 80 05 	call	0xb00	; 0xb00 <__mulsf3>
 160:	6b 01       	movw	r12, r22
 162:	7c 01       	movw	r14, r24
   if(bits>4095)
 164:	20 e0       	ldi	r18, 0x00	; 0
 166:	30 ef       	ldi	r19, 0xF0	; 240
 168:	4f e7       	ldi	r20, 0x7F	; 127
 16a:	55 e4       	ldi	r21, 0x45	; 69
 16c:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <__gesf2>
 170:	18 16       	cp	r1, r24
 172:	34 f0       	brlt	.+12     	; 0x180 <volts_to_bits+0x40>
		return 4095;
	else
	 return bits;                  // return 12bit equivalent for DAC
 174:	c7 01       	movw	r24, r14
 176:	b6 01       	movw	r22, r12
 178:	0e 94 be 04 	call	0x97c	; 0x97c <__fixunssfsi>
 17c:	cb 01       	movw	r24, r22
 17e:	02 c0       	rjmp	.+4      	; 0x184 <volts_to_bits+0x44>

// converts input voltage between 0-5V to 12bit number for DAC
uint16_t volts_to_bits(double voltage){
   double bits = ((voltage/5.0)*4095);
   if(bits>4095)
		return 4095;
 180:	8f ef       	ldi	r24, 0xFF	; 255
 182:	9f e0       	ldi	r25, 0x0F	; 15
	else
	 return bits;                  // return 12bit equivalent for DAC
}
 184:	ff 90       	pop	r15
 186:	ef 90       	pop	r14
 188:	df 90       	pop	r13
 18a:	cf 90       	pop	r12
 18c:	08 95       	ret

0000018e <cycleFreq>:
   sampleDivider++;
   sampleDivider %= 3;
}

void cycleFreq() {
   if (overflow0 == OVERFLOW_100HZ){
 18e:	80 91 03 01 	lds	r24, 0x0103
 192:	87 38       	cpi	r24, 0x87	; 135
 194:	51 f4       	brne	.+20     	; 0x1aa <cycleFreq+0x1c>
      sampleDivider = 1;
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	90 93 01 01 	sts	0x0101, r25
 19e:	80 93 00 01 	sts	0x0100, r24
      overflow0 = OVERFLOW_200HZ;
 1a2:	83 e4       	ldi	r24, 0x43	; 67
 1a4:	80 93 03 01 	sts	0x0103, r24
 1a8:	21 c0       	rjmp	.+66     	; 0x1ec <cycleFreq+0x5e>
   }
   else if (overflow0 == OVERFLOW_200HZ) {
 1aa:	83 34       	cpi	r24, 0x43	; 67
 1ac:	51 f4       	brne	.+20     	; 0x1c2 <cycleFreq+0x34>
      sampleDivider = 2;
 1ae:	82 e0       	ldi	r24, 0x02	; 2
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	90 93 01 01 	sts	0x0101, r25
 1b6:	80 93 00 01 	sts	0x0100, r24
      overflow0 = OVERFLOW_300HZ;
 1ba:	8a e5       	ldi	r24, 0x5A	; 90
 1bc:	80 93 03 01 	sts	0x0103, r24
 1c0:	15 c0       	rjmp	.+42     	; 0x1ec <cycleFreq+0x5e>
   }
   else if (overflow0 == OVERFLOW_300HZ) {
 1c2:	8a 35       	cpi	r24, 0x5A	; 90
 1c4:	51 f4       	brne	.+20     	; 0x1da <cycleFreq+0x4c>
      sampleDivider = 2;
 1c6:	82 e0       	ldi	r24, 0x02	; 2
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	90 93 01 01 	sts	0x0101, r25
 1ce:	80 93 00 01 	sts	0x0100, r24
      overflow0 = OVERFLOW_400HZ;
 1d2:	83 e4       	ldi	r24, 0x43	; 67
 1d4:	80 93 03 01 	sts	0x0103, r24
 1d8:	09 c0       	rjmp	.+18     	; 0x1ec <cycleFreq+0x5e>
   else if (overflow0 == OVERFLOW_400HZ) {
      sampleDivider = 2;
      overflow0 = OVERFLOW_500HZ;
   }
   else{
      sampleDivider = 1;
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	90 93 01 01 	sts	0x0101, r25
 1e2:	80 93 00 01 	sts	0x0100, r24
      overflow0 = OVERFLOW_100HZ;
 1e6:	87 e8       	ldi	r24, 0x87	; 135
 1e8:	80 93 03 01 	sts	0x0103, r24
   }
   OCR0A = overflow0;
 1ec:	80 91 03 01 	lds	r24, 0x0103
 1f0:	87 bd       	out	0x27, r24	; 39
 1f2:	08 95       	ret

000001f4 <main>:
uint8_t overflow0 = 1;	// set overflow value frequency change
uint8_t overflow2 = 63;	// set overflow value for button checking

int main(void)
{
	num_samples = NUM_SAMPS;
 1f4:	82 e9       	ldi	r24, 0x92	; 146
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	90 93 1f 01 	sts	0x011F, r25
 1fc:	80 93 1e 01 	sts	0x011E, r24
	
   // initialize GPIO, interrupts, and timers
   GPIO_Initialization();
 200:	0e 94 80 00 	call	0x100	; 0x100 <GPIO_Initialization>
   
   // fill square, sawtooth, triangle, and sine wave LUTs
   initWaves();
 204:	0e 94 c9 03 	call	0x792	; 0x792 <initWaves>
   while (1){
	  // if(check_buttons()==1)
			//nextWave();
		//else if(check_buttons()==2)
		//	change_freq();
   }
 208:	ff cf       	rjmp	.-2      	; 0x208 <main+0x14>

0000020a <__vector_14>:
}

///////////////////////////////////ISR/////////////////////////////////////////

// ISR to increment through wave function LUTs and set frequency
ISR(TIMER0_COMPA_vect){
 20a:	1f 92       	push	r1
 20c:	0f 92       	push	r0
 20e:	0f b6       	in	r0, 0x3f	; 63
 210:	0f 92       	push	r0
 212:	11 24       	eor	r1, r1
 214:	2f 93       	push	r18
 216:	3f 93       	push	r19
 218:	4f 93       	push	r20
 21a:	5f 93       	push	r21
 21c:	6f 93       	push	r22
 21e:	7f 93       	push	r23
 220:	8f 93       	push	r24
 222:	9f 93       	push	r25
 224:	af 93       	push	r26
 226:	bf 93       	push	r27
 228:	ef 93       	push	r30
 22a:	ff 93       	push	r31
   Transmit_SPI_Master(nextWavePoint());
 22c:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <nextWavePoint>
 230:	0e 94 93 00 	call	0x126	; 0x126 <Transmit_SPI_Master>
   PORTD |= (1<<LED2);
 234:	5a 9a       	sbi	0x0b, 2	; 11
 
}
 236:	ff 91       	pop	r31
 238:	ef 91       	pop	r30
 23a:	bf 91       	pop	r27
 23c:	af 91       	pop	r26
 23e:	9f 91       	pop	r25
 240:	8f 91       	pop	r24
 242:	7f 91       	pop	r23
 244:	6f 91       	pop	r22
 246:	5f 91       	pop	r21
 248:	4f 91       	pop	r20
 24a:	3f 91       	pop	r19
 24c:	2f 91       	pop	r18
 24e:	0f 90       	pop	r0
 250:	0f be       	out	0x3f, r0	; 63
 252:	0f 90       	pop	r0
 254:	1f 90       	pop	r1
 256:	18 95       	reti

00000258 <__vector_7>:

ISR(TIMER2_COMPA_vect){
 258:	1f 92       	push	r1
 25a:	0f 92       	push	r0
 25c:	0f b6       	in	r0, 0x3f	; 63
 25e:	0f 92       	push	r0
 260:	11 24       	eor	r1, r1
 262:	2f 93       	push	r18
 264:	3f 93       	push	r19
 266:	4f 93       	push	r20
 268:	5f 93       	push	r21
 26a:	6f 93       	push	r22
 26c:	7f 93       	push	r23
 26e:	8f 93       	push	r24
 270:	9f 93       	push	r25
 272:	af 93       	push	r26
 274:	bf 93       	push	r27
 276:	ef 93       	push	r30
 278:	ff 93       	push	r31
   if (!(PIND & 1 << BTN0))
 27a:	4f 99       	sbic	0x09, 7	; 9
 27c:	0a c0       	rjmp	.+20     	; 0x292 <__vector_7+0x3a>
      btn0++;
 27e:	80 91 1a 01 	lds	r24, 0x011A
 282:	90 91 1b 01 	lds	r25, 0x011B
 286:	01 96       	adiw	r24, 0x01	; 1
 288:	90 93 1b 01 	sts	0x011B, r25
 28c:	80 93 1a 01 	sts	0x011A, r24
 290:	08 c0       	rjmp	.+16     	; 0x2a2 <__vector_7+0x4a>
   else
      btn0 = was0Pressed = 0;
 292:	10 92 15 01 	sts	0x0115, r1
 296:	10 92 14 01 	sts	0x0114, r1
 29a:	10 92 1b 01 	sts	0x011B, r1
 29e:	10 92 1a 01 	sts	0x011A, r1
   
   if (!(PIND & 1 << BTN1))
 2a2:	4e 99       	sbic	0x09, 6	; 9
 2a4:	0a c0       	rjmp	.+20     	; 0x2ba <__vector_7+0x62>
      btn1++;
 2a6:	80 91 18 01 	lds	r24, 0x0118
 2aa:	90 91 19 01 	lds	r25, 0x0119
 2ae:	01 96       	adiw	r24, 0x01	; 1
 2b0:	90 93 19 01 	sts	0x0119, r25
 2b4:	80 93 18 01 	sts	0x0118, r24
 2b8:	08 c0       	rjmp	.+16     	; 0x2ca <__vector_7+0x72>
   else
      btn1 = was1Pressed = 0;
 2ba:	10 92 13 01 	sts	0x0113, r1
 2be:	10 92 12 01 	sts	0x0112, r1
 2c2:	10 92 19 01 	sts	0x0119, r1
 2c6:	10 92 18 01 	sts	0x0118, r1
   
   if (!(PIND & 1 << BTN2))
 2ca:	4d 99       	sbic	0x09, 5	; 9
 2cc:	0a c0       	rjmp	.+20     	; 0x2e2 <__vector_7+0x8a>
      btn2++;
 2ce:	80 91 16 01 	lds	r24, 0x0116
 2d2:	90 91 17 01 	lds	r25, 0x0117
 2d6:	01 96       	adiw	r24, 0x01	; 1
 2d8:	90 93 17 01 	sts	0x0117, r25
 2dc:	80 93 16 01 	sts	0x0116, r24
 2e0:	08 c0       	rjmp	.+16     	; 0x2f2 <__vector_7+0x9a>
   else
      btn2 = was2Pressed = 0;
 2e2:	10 92 11 01 	sts	0x0111, r1
 2e6:	10 92 10 01 	sts	0x0110, r1
 2ea:	10 92 17 01 	sts	0x0117, r1
 2ee:	10 92 16 01 	sts	0x0116, r1
   
   if(btn0 >= DEBOUNCE) {
 2f2:	80 91 1a 01 	lds	r24, 0x011A
 2f6:	90 91 1b 01 	lds	r25, 0x011B
 2fa:	0a 97       	sbiw	r24, 0x0a	; 10
 2fc:	94 f0       	brlt	.+36     	; 0x322 <__vector_7+0xca>
      if (!was0Pressed)
 2fe:	80 91 14 01 	lds	r24, 0x0114
 302:	90 91 15 01 	lds	r25, 0x0115
 306:	89 2b       	or	r24, r25
 308:	11 f4       	brne	.+4      	; 0x30e <__vector_7+0xb6>
         nextWave();
 30a:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <nextWave>
      btn0 = 0;
 30e:	10 92 1b 01 	sts	0x011B, r1
 312:	10 92 1a 01 	sts	0x011A, r1
      was0Pressed = 1;
 316:	81 e0       	ldi	r24, 0x01	; 1
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	90 93 15 01 	sts	0x0115, r25
 31e:	80 93 14 01 	sts	0x0114, r24
   }
   
   if(btn1 >= DEBOUNCE) {
 322:	80 91 18 01 	lds	r24, 0x0118
 326:	90 91 19 01 	lds	r25, 0x0119
 32a:	0a 97       	sbiw	r24, 0x0a	; 10
 32c:	9c f0       	brlt	.+38     	; 0x354 <__vector_7+0xfc>
      if (!was1Pressed) {
 32e:	80 91 12 01 	lds	r24, 0x0112
 332:	90 91 13 01 	lds	r25, 0x0113
 336:	89 2b       	or	r24, r25
 338:	19 f4       	brne	.+6      	; 0x340 <__vector_7+0xe8>
         PORTD &= ~(1<<LED3);
 33a:	5b 98       	cbi	0x0b, 3	; 11
         cycleFreq();
 33c:	0e 94 c7 00 	call	0x18e	; 0x18e <cycleFreq>
      }
      btn1 = 0;
 340:	10 92 19 01 	sts	0x0119, r1
 344:	10 92 18 01 	sts	0x0118, r1
      was1Pressed = 1;
 348:	81 e0       	ldi	r24, 0x01	; 1
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	90 93 13 01 	sts	0x0113, r25
 350:	80 93 12 01 	sts	0x0112, r24
   }
   
   if(btn2 >= DEBOUNCE) {
 354:	80 91 16 01 	lds	r24, 0x0116
 358:	90 91 17 01 	lds	r25, 0x0117
 35c:	0a 97       	sbiw	r24, 0x0a	; 10
 35e:	9c f0       	brlt	.+38     	; 0x386 <__vector_7+0x12e>
      if (!was2Pressed) {
 360:	80 91 10 01 	lds	r24, 0x0110
 364:	90 91 11 01 	lds	r25, 0x0111
 368:	89 2b       	or	r24, r25
 36a:	11 f4       	brne	.+4      	; 0x370 <__vector_7+0x118>
         cycleDuty();
 36c:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <cycleDuty>
      }
	  PORTD |= (1<<LED3);
 370:	5b 9a       	sbi	0x0b, 3	; 11
      btn2 = 0;
 372:	10 92 17 01 	sts	0x0117, r1
 376:	10 92 16 01 	sts	0x0116, r1
      was2Pressed = 1;
 37a:	81 e0       	ldi	r24, 0x01	; 1
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	90 93 11 01 	sts	0x0111, r25
 382:	80 93 10 01 	sts	0x0110, r24
   }
  
}
 386:	ff 91       	pop	r31
 388:	ef 91       	pop	r30
 38a:	bf 91       	pop	r27
 38c:	af 91       	pop	r26
 38e:	9f 91       	pop	r25
 390:	8f 91       	pop	r24
 392:	7f 91       	pop	r23
 394:	6f 91       	pop	r22
 396:	5f 91       	pop	r21
 398:	4f 91       	pop	r20
 39a:	3f 91       	pop	r19
 39c:	2f 91       	pop	r18
 39e:	0f 90       	pop	r0
 3a0:	0f be       	out	0x3f, r0	; 63
 3a2:	0f 90       	pop	r0
 3a4:	1f 90       	pop	r1
 3a6:	18 95       	reti

000003a8 <nextWave>:

void nextWave() {
   static int waveNdx = 0;
   static uint16_t* waves[NUM_WAVES] = {SquareWave, TriWave, SawWave, SinWave};
   
   waveNdx++;
 3a8:	80 91 1c 01 	lds	r24, 0x011C
 3ac:	90 91 1d 01 	lds	r25, 0x011D
 3b0:	01 96       	adiw	r24, 0x01	; 1
   waveNdx %= NUM_WAVES;
 3b2:	83 70       	andi	r24, 0x03	; 3
 3b4:	90 78       	andi	r25, 0x80	; 128
 3b6:	99 23       	and	r25, r25
 3b8:	24 f4       	brge	.+8      	; 0x3c2 <nextWave+0x1a>
 3ba:	01 97       	sbiw	r24, 0x01	; 1
 3bc:	8c 6f       	ori	r24, 0xFC	; 252
 3be:	9f 6f       	ori	r25, 0xFF	; 255
 3c0:	01 96       	adiw	r24, 0x01	; 1
 3c2:	90 93 1d 01 	sts	0x011D, r25
 3c6:	80 93 1c 01 	sts	0x011C, r24
   
   Wave = waves[waveNdx];
 3ca:	88 0f       	add	r24, r24
 3cc:	99 1f       	adc	r25, r25
 3ce:	fc 01       	movw	r30, r24
 3d0:	e8 5f       	subi	r30, 0xF8	; 248
 3d2:	fe 4f       	sbci	r31, 0xFE	; 254
 3d4:	80 81       	ld	r24, Z
 3d6:	91 81       	ldd	r25, Z+1	; 0x01
 3d8:	90 93 b1 05 	sts	0x05B1, r25
 3dc:	80 93 b0 05 	sts	0x05B0, r24
 3e0:	08 95       	ret

000003e2 <nextWavePoint>:
}

uint16_t nextWavePoint() {
   static int ndx = -1;
   
   ndx += sampleDivider;
 3e2:	20 91 04 01 	lds	r18, 0x0104
 3e6:	30 91 05 01 	lds	r19, 0x0105
 3ea:	80 91 00 01 	lds	r24, 0x0100
 3ee:	90 91 01 01 	lds	r25, 0x0101
 3f2:	82 0f       	add	r24, r18
 3f4:	93 1f       	adc	r25, r19
   ndx %= NUM_SAMPS;
 3f6:	62 e9       	ldi	r22, 0x92	; 146
 3f8:	70 e0       	ldi	r23, 0x00	; 0
 3fa:	0e 94 a1 06 	call	0xd42	; 0xd42 <__divmodhi4>
 3fe:	90 93 05 01 	sts	0x0105, r25
 402:	80 93 04 01 	sts	0x0104, r24
   
   return Wave[ndx];
 406:	88 0f       	add	r24, r24
 408:	99 1f       	adc	r25, r25
 40a:	e0 91 b0 05 	lds	r30, 0x05B0
 40e:	f0 91 b1 05 	lds	r31, 0x05B1
 412:	e8 0f       	add	r30, r24
 414:	f9 1f       	adc	r31, r25
}
 416:	80 81       	ld	r24, Z
 418:	91 81       	ldd	r25, Z+1	; 0x01
 41a:	08 95       	ret

0000041c <make_square_LUT>:
   dutyCycle += 10;
   dutyCycle %= 110;
   make_square_LUT();
}

void make_square_LUT(){
 41c:	cf 92       	push	r12
 41e:	df 92       	push	r13
 420:	ef 92       	push	r14
 422:	ff 92       	push	r15
 424:	0f 93       	push	r16
 426:	1f 93       	push	r17
 428:	cf 93       	push	r28
 42a:	df 93       	push	r29
   int i;
   int duty = num_samples * (double) dutyCycle/100;
 42c:	60 91 1e 01 	lds	r22, 0x011E
 430:	70 91 1f 01 	lds	r23, 0x011F
 434:	07 2e       	mov	r0, r23
 436:	00 0c       	add	r0, r0
 438:	88 0b       	sbc	r24, r24
 43a:	99 0b       	sbc	r25, r25
 43c:	0e 94 ef 04 	call	0x9de	; 0x9de <__floatsisf>
 440:	6b 01       	movw	r12, r22
 442:	7c 01       	movw	r14, r24
 444:	80 91 06 01 	lds	r24, 0x0106
 448:	90 91 07 01 	lds	r25, 0x0107
 44c:	bc 01       	movw	r22, r24
 44e:	99 0f       	add	r25, r25
 450:	88 0b       	sbc	r24, r24
 452:	99 0b       	sbc	r25, r25
 454:	0e 94 ef 04 	call	0x9de	; 0x9de <__floatsisf>
 458:	9b 01       	movw	r18, r22
 45a:	ac 01       	movw	r20, r24
 45c:	c7 01       	movw	r24, r14
 45e:	b6 01       	movw	r22, r12
 460:	0e 94 80 05 	call	0xb00	; 0xb00 <__mulsf3>
 464:	20 e0       	ldi	r18, 0x00	; 0
 466:	30 e0       	ldi	r19, 0x00	; 0
 468:	48 ec       	ldi	r20, 0xC8	; 200
 46a:	52 e4       	ldi	r21, 0x42	; 66
 46c:	0e 94 45 04 	call	0x88a	; 0x88a <__divsf3>
 470:	0e 94 b7 04 	call	0x96e	; 0x96e <__fixsfsi>
 474:	eb 01       	movw	r28, r22
   
   for (i = 0; i < duty; i++)
 476:	1c 16       	cp	r1, r28
 478:	1d 06       	cpc	r1, r29
 47a:	b4 f4       	brge	.+44     	; 0x4a8 <make_square_LUT+0x8c>
 47c:	0c e8       	ldi	r16, 0x8C	; 140
 47e:	14 e0       	ldi	r17, 0x04	; 4
 480:	66 0f       	add	r22, r22
 482:	77 1f       	adc	r23, r23
 484:	cb 01       	movw	r24, r22
 486:	84 57       	subi	r24, 0x74	; 116
 488:	9b 4f       	sbci	r25, 0xFB	; 251
 48a:	7c 01       	movw	r14, r24
      SquareWave[i] = volts_to_bits(MAX_VOLTAGE);
 48c:	60 e0       	ldi	r22, 0x00	; 0
 48e:	70 e0       	ldi	r23, 0x00	; 0
 490:	80 ea       	ldi	r24, 0xA0	; 160
 492:	90 e4       	ldi	r25, 0x40	; 64
 494:	0e 94 a0 00 	call	0x140	; 0x140 <volts_to_bits>
 498:	f8 01       	movw	r30, r16
 49a:	81 93       	st	Z+, r24
 49c:	91 93       	st	Z+, r25
 49e:	8f 01       	movw	r16, r30

void make_square_LUT(){
   int i;
   int duty = num_samples * (double) dutyCycle/100;
   
   for (i = 0; i < duty; i++)
 4a0:	ee 15       	cp	r30, r14
 4a2:	ff 05       	cpc	r31, r15
 4a4:	99 f7       	brne	.-26     	; 0x48c <make_square_LUT+0x70>
 4a6:	02 c0       	rjmp	.+4      	; 0x4ac <make_square_LUT+0x90>
 4a8:	c0 e0       	ldi	r28, 0x00	; 0
 4aa:	d0 e0       	ldi	r29, 0x00	; 0
      SquareWave[i] = volts_to_bits(MAX_VOLTAGE);
   
   for ( ; i < num_samples ; i++)
 4ac:	80 91 1e 01 	lds	r24, 0x011E
 4b0:	90 91 1f 01 	lds	r25, 0x011F
 4b4:	c8 17       	cp	r28, r24
 4b6:	d9 07       	cpc	r29, r25
 4b8:	b4 f4       	brge	.+44     	; 0x4e6 <make_square_LUT+0xca>
 4ba:	8e 01       	movw	r16, r28
 4bc:	00 0f       	add	r16, r16
 4be:	11 1f       	adc	r17, r17
 4c0:	04 57       	subi	r16, 0x74	; 116
 4c2:	1b 4f       	sbci	r17, 0xFB	; 251
      SquareWave[i] = volts_to_bits(MIN_VOLTAGE);
 4c4:	60 e0       	ldi	r22, 0x00	; 0
 4c6:	70 e0       	ldi	r23, 0x00	; 0
 4c8:	cb 01       	movw	r24, r22
 4ca:	0e 94 a0 00 	call	0x140	; 0x140 <volts_to_bits>
 4ce:	f8 01       	movw	r30, r16
 4d0:	81 93       	st	Z+, r24
 4d2:	91 93       	st	Z+, r25
 4d4:	8f 01       	movw	r16, r30
   int duty = num_samples * (double) dutyCycle/100;
   
   for (i = 0; i < duty; i++)
      SquareWave[i] = volts_to_bits(MAX_VOLTAGE);
   
   for ( ; i < num_samples ; i++)
 4d6:	21 96       	adiw	r28, 0x01	; 1
 4d8:	80 91 1e 01 	lds	r24, 0x011E
 4dc:	90 91 1f 01 	lds	r25, 0x011F
 4e0:	c8 17       	cp	r28, r24
 4e2:	d9 07       	cpc	r29, r25
 4e4:	7c f3       	brlt	.-34     	; 0x4c4 <make_square_LUT+0xa8>
      SquareWave[i] = volts_to_bits(MIN_VOLTAGE);
}
 4e6:	df 91       	pop	r29
 4e8:	cf 91       	pop	r28
 4ea:	1f 91       	pop	r17
 4ec:	0f 91       	pop	r16
 4ee:	ff 90       	pop	r15
 4f0:	ef 90       	pop	r14
 4f2:	df 90       	pop	r13
 4f4:	cf 90       	pop	r12
 4f6:	08 95       	ret

000004f8 <cycleDuty>:
   
   return Wave[ndx];
}

void cycleDuty() {
   dutyCycle += 10;
 4f8:	80 91 06 01 	lds	r24, 0x0106
 4fc:	90 91 07 01 	lds	r25, 0x0107
 500:	0a 96       	adiw	r24, 0x0a	; 10
   dutyCycle %= 110;
 502:	6e e6       	ldi	r22, 0x6E	; 110
 504:	70 e0       	ldi	r23, 0x00	; 0
 506:	0e 94 a1 06 	call	0xd42	; 0xd42 <__divmodhi4>
 50a:	90 93 07 01 	sts	0x0107, r25
 50e:	80 93 06 01 	sts	0x0106, r24
   make_square_LUT();
 512:	0e 94 0e 02 	call	0x41c	; 0x41c <make_square_LUT>
 516:	08 95       	ret

00000518 <make_triangle_LUT>:
   
   for ( ; i < num_samples ; i++)
      SquareWave[i] = volts_to_bits(MIN_VOLTAGE);
}

void make_triangle_LUT(){
 518:	4f 92       	push	r4
 51a:	5f 92       	push	r5
 51c:	6f 92       	push	r6
 51e:	7f 92       	push	r7
 520:	af 92       	push	r10
 522:	bf 92       	push	r11
 524:	cf 92       	push	r12
 526:	df 92       	push	r13
 528:	ef 92       	push	r14
 52a:	ff 92       	push	r15
 52c:	0f 93       	push	r16
 52e:	1f 93       	push	r17
 530:	cf 93       	push	r28
 532:	df 93       	push	r29
   int i;
   int peak = num_samples / 2;
 534:	a0 90 1e 01 	lds	r10, 0x011E
 538:	b0 90 1f 01 	lds	r11, 0x011F
 53c:	bb 20       	and	r11, r11
 53e:	1c f4       	brge	.+6      	; 0x546 <make_triangle_LUT+0x2e>
 540:	2f ef       	ldi	r18, 0xFF	; 255
 542:	a2 1a       	sub	r10, r18
 544:	b2 0a       	sbc	r11, r18
 546:	b5 94       	asr	r11
 548:	a7 94       	ror	r10
   double increment = ((double) MAX_VOLTAGE - MIN_VOLTAGE) / peak;
 54a:	b5 01       	movw	r22, r10
 54c:	0b 2c       	mov	r0, r11
 54e:	00 0c       	add	r0, r0
 550:	88 0b       	sbc	r24, r24
 552:	99 0b       	sbc	r25, r25
 554:	0e 94 ef 04 	call	0x9de	; 0x9de <__floatsisf>
 558:	9b 01       	movw	r18, r22
 55a:	ac 01       	movw	r20, r24
 55c:	60 e0       	ldi	r22, 0x00	; 0
 55e:	70 e0       	ldi	r23, 0x00	; 0
 560:	80 ea       	ldi	r24, 0xA0	; 160
 562:	90 e4       	ldi	r25, 0x40	; 64
 564:	0e 94 45 04 	call	0x88a	; 0x88a <__divsf3>
 568:	2b 01       	movw	r4, r22
 56a:	3c 01       	movw	r6, r24
   double voltage = MIN_VOLTAGE - increment;
 56c:	9b 01       	movw	r18, r22
 56e:	ac 01       	movw	r20, r24
 570:	60 e0       	ldi	r22, 0x00	; 0
 572:	70 e0       	ldi	r23, 0x00	; 0
 574:	cb 01       	movw	r24, r22
 576:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <__subsf3>
 57a:	6b 01       	movw	r12, r22
 57c:	7c 01       	movw	r14, r24
   
   for (i = 0; i < (peak + 1); i++)
 57e:	e5 01       	movw	r28, r10
 580:	21 96       	adiw	r28, 0x01	; 1
 582:	1c 16       	cp	r1, r28
 584:	1d 06       	cpc	r1, r29
 586:	dc f4       	brge	.+54     	; 0x5be <make_triangle_LUT+0xa6>
 588:	08 e6       	ldi	r16, 0x68	; 104
 58a:	13 e0       	ldi	r17, 0x03	; 3
 58c:	c5 01       	movw	r24, r10
 58e:	88 0f       	add	r24, r24
 590:	99 1f       	adc	r25, r25
 592:	fc 01       	movw	r30, r24
 594:	e6 59       	subi	r30, 0x96	; 150
 596:	fc 4f       	sbci	r31, 0xFC	; 252
 598:	5f 01       	movw	r10, r30
      TriWave[i] = volts_to_bits(voltage += increment);
 59a:	a3 01       	movw	r20, r6
 59c:	92 01       	movw	r18, r4
 59e:	c7 01       	movw	r24, r14
 5a0:	b6 01       	movw	r22, r12
 5a2:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <__addsf3>
 5a6:	6b 01       	movw	r12, r22
 5a8:	7c 01       	movw	r14, r24
 5aa:	0e 94 a0 00 	call	0x140	; 0x140 <volts_to_bits>
 5ae:	f8 01       	movw	r30, r16
 5b0:	81 93       	st	Z+, r24
 5b2:	91 93       	st	Z+, r25
 5b4:	8f 01       	movw	r16, r30
   int i;
   int peak = num_samples / 2;
   double increment = ((double) MAX_VOLTAGE - MIN_VOLTAGE) / peak;
   double voltage = MIN_VOLTAGE - increment;
   
   for (i = 0; i < (peak + 1); i++)
 5b6:	ea 15       	cp	r30, r10
 5b8:	fb 05       	cpc	r31, r11
 5ba:	79 f7       	brne	.-34     	; 0x59a <make_triangle_LUT+0x82>
 5bc:	02 c0       	rjmp	.+4      	; 0x5c2 <make_triangle_LUT+0xaa>
 5be:	c0 e0       	ldi	r28, 0x00	; 0
 5c0:	d0 e0       	ldi	r29, 0x00	; 0
      TriWave[i] = volts_to_bits(voltage += increment);
   
   for ( ; i < (num_samples - 1); i++)
 5c2:	80 91 1e 01 	lds	r24, 0x011E
 5c6:	90 91 1f 01 	lds	r25, 0x011F
 5ca:	01 97       	sbiw	r24, 0x01	; 1
 5cc:	c8 17       	cp	r28, r24
 5ce:	d9 07       	cpc	r29, r25
 5d0:	e4 f4       	brge	.+56     	; 0x60a <make_triangle_LUT+0xf2>
 5d2:	8e 01       	movw	r16, r28
 5d4:	00 0f       	add	r16, r16
 5d6:	11 1f       	adc	r17, r17
 5d8:	08 59       	subi	r16, 0x98	; 152
 5da:	1c 4f       	sbci	r17, 0xFC	; 252
      TriWave[i] = volts_to_bits(voltage -= increment);
 5dc:	a3 01       	movw	r20, r6
 5de:	92 01       	movw	r18, r4
 5e0:	c7 01       	movw	r24, r14
 5e2:	b6 01       	movw	r22, r12
 5e4:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <__subsf3>
 5e8:	6b 01       	movw	r12, r22
 5ea:	7c 01       	movw	r14, r24
 5ec:	0e 94 a0 00 	call	0x140	; 0x140 <volts_to_bits>
 5f0:	f8 01       	movw	r30, r16
 5f2:	81 93       	st	Z+, r24
 5f4:	91 93       	st	Z+, r25
 5f6:	8f 01       	movw	r16, r30
   double voltage = MIN_VOLTAGE - increment;
   
   for (i = 0; i < (peak + 1); i++)
      TriWave[i] = volts_to_bits(voltage += increment);
   
   for ( ; i < (num_samples - 1); i++)
 5f8:	21 96       	adiw	r28, 0x01	; 1
 5fa:	80 91 1e 01 	lds	r24, 0x011E
 5fe:	90 91 1f 01 	lds	r25, 0x011F
 602:	01 97       	sbiw	r24, 0x01	; 1
 604:	c8 17       	cp	r28, r24
 606:	d9 07       	cpc	r29, r25
 608:	4c f3       	brlt	.-46     	; 0x5dc <make_triangle_LUT+0xc4>
      TriWave[i] = volts_to_bits(voltage -= increment);
}
 60a:	df 91       	pop	r29
 60c:	cf 91       	pop	r28
 60e:	1f 91       	pop	r17
 610:	0f 91       	pop	r16
 612:	ff 90       	pop	r15
 614:	ef 90       	pop	r14
 616:	df 90       	pop	r13
 618:	cf 90       	pop	r12
 61a:	bf 90       	pop	r11
 61c:	af 90       	pop	r10
 61e:	7f 90       	pop	r7
 620:	6f 90       	pop	r6
 622:	5f 90       	pop	r5
 624:	4f 90       	pop	r4
 626:	08 95       	ret

00000628 <make_sawtooth_LUT>:

void make_sawtooth_LUT(){
 628:	8f 92       	push	r8
 62a:	9f 92       	push	r9
 62c:	af 92       	push	r10
 62e:	bf 92       	push	r11
 630:	cf 92       	push	r12
 632:	df 92       	push	r13
 634:	ef 92       	push	r14
 636:	ff 92       	push	r15
 638:	0f 93       	push	r16
 63a:	1f 93       	push	r17
 63c:	cf 93       	push	r28
 63e:	df 93       	push	r29
   int ndx;
   double increment = ((double) MAX_VOLTAGE - MIN_VOLTAGE) / (num_samples - 1);
 640:	c0 91 1e 01 	lds	r28, 0x011E
 644:	d0 91 1f 01 	lds	r29, 0x011F
 648:	be 01       	movw	r22, r28
 64a:	61 50       	subi	r22, 0x01	; 1
 64c:	71 09       	sbc	r23, r1
 64e:	07 2e       	mov	r0, r23
 650:	00 0c       	add	r0, r0
 652:	88 0b       	sbc	r24, r24
 654:	99 0b       	sbc	r25, r25
 656:	0e 94 ef 04 	call	0x9de	; 0x9de <__floatsisf>
 65a:	9b 01       	movw	r18, r22
 65c:	ac 01       	movw	r20, r24
 65e:	60 e0       	ldi	r22, 0x00	; 0
 660:	70 e0       	ldi	r23, 0x00	; 0
 662:	80 ea       	ldi	r24, 0xA0	; 160
 664:	90 e4       	ldi	r25, 0x40	; 64
 666:	0e 94 45 04 	call	0x88a	; 0x88a <__divsf3>
 66a:	4b 01       	movw	r8, r22
 66c:	5c 01       	movw	r10, r24
   double voltage = MIN_VOLTAGE -increment;
 66e:	9b 01       	movw	r18, r22
 670:	ac 01       	movw	r20, r24
 672:	60 e0       	ldi	r22, 0x00	; 0
 674:	70 e0       	ldi	r23, 0x00	; 0
 676:	cb 01       	movw	r24, r22
 678:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <__subsf3>
 67c:	6b 01       	movw	r12, r22
 67e:	7c 01       	movw	r14, r24
   
   for (ndx = 0; ndx < num_samples; ndx++)
 680:	1c 16       	cp	r1, r28
 682:	1d 06       	cpc	r1, r29
 684:	d4 f4       	brge	.+52     	; 0x6ba <make_sawtooth_LUT+0x92>
 686:	04 e4       	ldi	r16, 0x44	; 68
 688:	12 e0       	ldi	r17, 0x02	; 2
 68a:	c0 e0       	ldi	r28, 0x00	; 0
 68c:	d0 e0       	ldi	r29, 0x00	; 0
      SawWave[ndx] = volts_to_bits(voltage += increment);
 68e:	a5 01       	movw	r20, r10
 690:	94 01       	movw	r18, r8
 692:	c7 01       	movw	r24, r14
 694:	b6 01       	movw	r22, r12
 696:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <__addsf3>
 69a:	6b 01       	movw	r12, r22
 69c:	7c 01       	movw	r14, r24
 69e:	0e 94 a0 00 	call	0x140	; 0x140 <volts_to_bits>
 6a2:	f8 01       	movw	r30, r16
 6a4:	81 93       	st	Z+, r24
 6a6:	91 93       	st	Z+, r25
 6a8:	8f 01       	movw	r16, r30
void make_sawtooth_LUT(){
   int ndx;
   double increment = ((double) MAX_VOLTAGE - MIN_VOLTAGE) / (num_samples - 1);
   double voltage = MIN_VOLTAGE -increment;
   
   for (ndx = 0; ndx < num_samples; ndx++)
 6aa:	21 96       	adiw	r28, 0x01	; 1
 6ac:	80 91 1e 01 	lds	r24, 0x011E
 6b0:	90 91 1f 01 	lds	r25, 0x011F
 6b4:	c8 17       	cp	r28, r24
 6b6:	d9 07       	cpc	r29, r25
 6b8:	54 f3       	brlt	.-44     	; 0x68e <make_sawtooth_LUT+0x66>
      SawWave[ndx] = volts_to_bits(voltage += increment);
}
 6ba:	df 91       	pop	r29
 6bc:	cf 91       	pop	r28
 6be:	1f 91       	pop	r17
 6c0:	0f 91       	pop	r16
 6c2:	ff 90       	pop	r15
 6c4:	ef 90       	pop	r14
 6c6:	df 90       	pop	r13
 6c8:	cf 90       	pop	r12
 6ca:	bf 90       	pop	r11
 6cc:	af 90       	pop	r10
 6ce:	9f 90       	pop	r9
 6d0:	8f 90       	pop	r8
 6d2:	08 95       	ret

000006d4 <make_sin_LUT>:

void make_sin_LUT(){
 6d4:	8f 92       	push	r8
 6d6:	9f 92       	push	r9
 6d8:	af 92       	push	r10
 6da:	bf 92       	push	r11
 6dc:	cf 92       	push	r12
 6de:	df 92       	push	r13
 6e0:	ef 92       	push	r14
 6e2:	ff 92       	push	r15
 6e4:	0f 93       	push	r16
 6e6:	1f 93       	push	r17
 6e8:	cf 93       	push	r28
 6ea:	df 93       	push	r29
   int ndx;
   double increment = 2 * M_PI / num_samples;
 6ec:	c0 91 1e 01 	lds	r28, 0x011E
 6f0:	d0 91 1f 01 	lds	r29, 0x011F
 6f4:	be 01       	movw	r22, r28
 6f6:	0d 2e       	mov	r0, r29
 6f8:	00 0c       	add	r0, r0
 6fa:	88 0b       	sbc	r24, r24
 6fc:	99 0b       	sbc	r25, r25
 6fe:	0e 94 ef 04 	call	0x9de	; 0x9de <__floatsisf>
 702:	9b 01       	movw	r18, r22
 704:	ac 01       	movw	r20, r24
 706:	6b ed       	ldi	r22, 0xDB	; 219
 708:	7f e0       	ldi	r23, 0x0F	; 15
 70a:	89 ec       	ldi	r24, 0xC9	; 201
 70c:	90 e4       	ldi	r25, 0x40	; 64
 70e:	0e 94 45 04 	call	0x88a	; 0x88a <__divsf3>
 712:	4b 01       	movw	r8, r22
 714:	5c 01       	movw	r10, r24
   double rad = -increment;
 716:	6b 01       	movw	r12, r22
 718:	7c 01       	movw	r14, r24
 71a:	f7 fa       	bst	r15, 7
 71c:	f0 94       	com	r15
 71e:	f7 f8       	bld	r15, 7
 720:	f0 94       	com	r15
   double ampli = ((double) MAX_VOLTAGE - MIN_VOLTAGE) / 2;
   // The amplitude/2 is neccessary to compensate for sin()'s amplitude of 2
   double offset = MIN_VOLTAGE + ampli;
   
   for (ndx = 0; ndx < num_samples; ndx++)
 722:	1c 16       	cp	r1, r28
 724:	1d 06       	cpc	r1, r29
 726:	44 f5       	brge	.+80     	; 0x778 <make_sin_LUT+0xa4>
 728:	00 e2       	ldi	r16, 0x20	; 32
 72a:	11 e0       	ldi	r17, 0x01	; 1
 72c:	c0 e0       	ldi	r28, 0x00	; 0
 72e:	d0 e0       	ldi	r29, 0x00	; 0
      SinWave[ndx] = volts_to_bits(ampli * sin(rad += increment) + offset);
 730:	a5 01       	movw	r20, r10
 732:	94 01       	movw	r18, r8
 734:	c7 01       	movw	r24, r14
 736:	b6 01       	movw	r22, r12
 738:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <__addsf3>
 73c:	6b 01       	movw	r12, r22
 73e:	7c 01       	movw	r14, r24
 740:	0e 94 ed 05 	call	0xbda	; 0xbda <sin>
 744:	20 e0       	ldi	r18, 0x00	; 0
 746:	30 e0       	ldi	r19, 0x00	; 0
 748:	40 e2       	ldi	r20, 0x20	; 32
 74a:	50 e4       	ldi	r21, 0x40	; 64
 74c:	0e 94 80 05 	call	0xb00	; 0xb00 <__mulsf3>
 750:	20 e0       	ldi	r18, 0x00	; 0
 752:	30 e0       	ldi	r19, 0x00	; 0
 754:	40 e2       	ldi	r20, 0x20	; 32
 756:	50 e4       	ldi	r21, 0x40	; 64
 758:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <__addsf3>
 75c:	0e 94 a0 00 	call	0x140	; 0x140 <volts_to_bits>
 760:	f8 01       	movw	r30, r16
 762:	81 93       	st	Z+, r24
 764:	91 93       	st	Z+, r25
 766:	8f 01       	movw	r16, r30
   double rad = -increment;
   double ampli = ((double) MAX_VOLTAGE - MIN_VOLTAGE) / 2;
   // The amplitude/2 is neccessary to compensate for sin()'s amplitude of 2
   double offset = MIN_VOLTAGE + ampli;
   
   for (ndx = 0; ndx < num_samples; ndx++)
 768:	21 96       	adiw	r28, 0x01	; 1
 76a:	80 91 1e 01 	lds	r24, 0x011E
 76e:	90 91 1f 01 	lds	r25, 0x011F
 772:	c8 17       	cp	r28, r24
 774:	d9 07       	cpc	r29, r25
 776:	e4 f2       	brlt	.-72     	; 0x730 <make_sin_LUT+0x5c>
      SinWave[ndx] = volts_to_bits(ampli * sin(rad += increment) + offset);
 778:	df 91       	pop	r29
 77a:	cf 91       	pop	r28
 77c:	1f 91       	pop	r17
 77e:	0f 91       	pop	r16
 780:	ff 90       	pop	r15
 782:	ef 90       	pop	r14
 784:	df 90       	pop	r13
 786:	cf 90       	pop	r12
 788:	bf 90       	pop	r11
 78a:	af 90       	pop	r10
 78c:	9f 90       	pop	r9
 78e:	8f 90       	pop	r8
 790:	08 95       	ret

00000792 <initWaves>:
//   else
//      return bits;                  // return 12bit equivalent for DAC
//}

void initWaves() {
   make_square_LUT();
 792:	0e 94 0e 02 	call	0x41c	; 0x41c <make_square_LUT>
   make_triangle_LUT();
 796:	0e 94 8c 02 	call	0x518	; 0x518 <make_triangle_LUT>
   make_sawtooth_LUT();
 79a:	0e 94 14 03 	call	0x628	; 0x628 <make_sawtooth_LUT>
   make_sin_LUT();
 79e:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <make_sin_LUT>
   
   Wave = SquareWave;
 7a2:	8c e8       	ldi	r24, 0x8C	; 140
 7a4:	94 e0       	ldi	r25, 0x04	; 4
 7a6:	90 93 b1 05 	sts	0x05B1, r25
 7aa:	80 93 b0 05 	sts	0x05B0, r24
 7ae:	08 95       	ret

000007b0 <__subsf3>:
 7b0:	50 58       	subi	r21, 0x80	; 128

000007b2 <__addsf3>:
 7b2:	bb 27       	eor	r27, r27
 7b4:	aa 27       	eor	r26, r26
 7b6:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <__addsf3x>
 7ba:	0c 94 41 05 	jmp	0xa82	; 0xa82 <__fp_round>
 7be:	0e 94 33 05 	call	0xa66	; 0xa66 <__fp_pscA>
 7c2:	38 f0       	brcs	.+14     	; 0x7d2 <__addsf3+0x20>
 7c4:	0e 94 3a 05 	call	0xa74	; 0xa74 <__fp_pscB>
 7c8:	20 f0       	brcs	.+8      	; 0x7d2 <__addsf3+0x20>
 7ca:	39 f4       	brne	.+14     	; 0x7da <__addsf3+0x28>
 7cc:	9f 3f       	cpi	r25, 0xFF	; 255
 7ce:	19 f4       	brne	.+6      	; 0x7d6 <__addsf3+0x24>
 7d0:	26 f4       	brtc	.+8      	; 0x7da <__addsf3+0x28>
 7d2:	0c 94 30 05 	jmp	0xa60	; 0xa60 <__fp_nan>
 7d6:	0e f4       	brtc	.+2      	; 0x7da <__addsf3+0x28>
 7d8:	e0 95       	com	r30
 7da:	e7 fb       	bst	r30, 7
 7dc:	0c 94 2a 05 	jmp	0xa54	; 0xa54 <__fp_inf>

000007e0 <__addsf3x>:
 7e0:	e9 2f       	mov	r30, r25
 7e2:	0e 94 52 05 	call	0xaa4	; 0xaa4 <__fp_split3>
 7e6:	58 f3       	brcs	.-42     	; 0x7be <__addsf3+0xc>
 7e8:	ba 17       	cp	r27, r26
 7ea:	62 07       	cpc	r22, r18
 7ec:	73 07       	cpc	r23, r19
 7ee:	84 07       	cpc	r24, r20
 7f0:	95 07       	cpc	r25, r21
 7f2:	20 f0       	brcs	.+8      	; 0x7fc <__addsf3x+0x1c>
 7f4:	79 f4       	brne	.+30     	; 0x814 <__addsf3x+0x34>
 7f6:	a6 f5       	brtc	.+104    	; 0x860 <__addsf3x+0x80>
 7f8:	0c 94 74 05 	jmp	0xae8	; 0xae8 <__fp_zero>
 7fc:	0e f4       	brtc	.+2      	; 0x800 <__addsf3x+0x20>
 7fe:	e0 95       	com	r30
 800:	0b 2e       	mov	r0, r27
 802:	ba 2f       	mov	r27, r26
 804:	a0 2d       	mov	r26, r0
 806:	0b 01       	movw	r0, r22
 808:	b9 01       	movw	r22, r18
 80a:	90 01       	movw	r18, r0
 80c:	0c 01       	movw	r0, r24
 80e:	ca 01       	movw	r24, r20
 810:	a0 01       	movw	r20, r0
 812:	11 24       	eor	r1, r1
 814:	ff 27       	eor	r31, r31
 816:	59 1b       	sub	r21, r25
 818:	99 f0       	breq	.+38     	; 0x840 <__addsf3x+0x60>
 81a:	59 3f       	cpi	r21, 0xF9	; 249
 81c:	50 f4       	brcc	.+20     	; 0x832 <__addsf3x+0x52>
 81e:	50 3e       	cpi	r21, 0xE0	; 224
 820:	68 f1       	brcs	.+90     	; 0x87c <__addsf3x+0x9c>
 822:	1a 16       	cp	r1, r26
 824:	f0 40       	sbci	r31, 0x00	; 0
 826:	a2 2f       	mov	r26, r18
 828:	23 2f       	mov	r18, r19
 82a:	34 2f       	mov	r19, r20
 82c:	44 27       	eor	r20, r20
 82e:	58 5f       	subi	r21, 0xF8	; 248
 830:	f3 cf       	rjmp	.-26     	; 0x818 <__addsf3x+0x38>
 832:	46 95       	lsr	r20
 834:	37 95       	ror	r19
 836:	27 95       	ror	r18
 838:	a7 95       	ror	r26
 83a:	f0 40       	sbci	r31, 0x00	; 0
 83c:	53 95       	inc	r21
 83e:	c9 f7       	brne	.-14     	; 0x832 <__addsf3x+0x52>
 840:	7e f4       	brtc	.+30     	; 0x860 <__addsf3x+0x80>
 842:	1f 16       	cp	r1, r31
 844:	ba 0b       	sbc	r27, r26
 846:	62 0b       	sbc	r22, r18
 848:	73 0b       	sbc	r23, r19
 84a:	84 0b       	sbc	r24, r20
 84c:	ba f0       	brmi	.+46     	; 0x87c <__addsf3x+0x9c>
 84e:	91 50       	subi	r25, 0x01	; 1
 850:	a1 f0       	breq	.+40     	; 0x87a <__addsf3x+0x9a>
 852:	ff 0f       	add	r31, r31
 854:	bb 1f       	adc	r27, r27
 856:	66 1f       	adc	r22, r22
 858:	77 1f       	adc	r23, r23
 85a:	88 1f       	adc	r24, r24
 85c:	c2 f7       	brpl	.-16     	; 0x84e <__addsf3x+0x6e>
 85e:	0e c0       	rjmp	.+28     	; 0x87c <__addsf3x+0x9c>
 860:	ba 0f       	add	r27, r26
 862:	62 1f       	adc	r22, r18
 864:	73 1f       	adc	r23, r19
 866:	84 1f       	adc	r24, r20
 868:	48 f4       	brcc	.+18     	; 0x87c <__addsf3x+0x9c>
 86a:	87 95       	ror	r24
 86c:	77 95       	ror	r23
 86e:	67 95       	ror	r22
 870:	b7 95       	ror	r27
 872:	f7 95       	ror	r31
 874:	9e 3f       	cpi	r25, 0xFE	; 254
 876:	08 f0       	brcs	.+2      	; 0x87a <__addsf3x+0x9a>
 878:	b0 cf       	rjmp	.-160    	; 0x7da <__addsf3+0x28>
 87a:	93 95       	inc	r25
 87c:	88 0f       	add	r24, r24
 87e:	08 f0       	brcs	.+2      	; 0x882 <__addsf3x+0xa2>
 880:	99 27       	eor	r25, r25
 882:	ee 0f       	add	r30, r30
 884:	97 95       	ror	r25
 886:	87 95       	ror	r24
 888:	08 95       	ret

0000088a <__divsf3>:
 88a:	0e 94 59 04 	call	0x8b2	; 0x8b2 <__divsf3x>
 88e:	0c 94 41 05 	jmp	0xa82	; 0xa82 <__fp_round>
 892:	0e 94 3a 05 	call	0xa74	; 0xa74 <__fp_pscB>
 896:	58 f0       	brcs	.+22     	; 0x8ae <__divsf3+0x24>
 898:	0e 94 33 05 	call	0xa66	; 0xa66 <__fp_pscA>
 89c:	40 f0       	brcs	.+16     	; 0x8ae <__divsf3+0x24>
 89e:	29 f4       	brne	.+10     	; 0x8aa <__divsf3+0x20>
 8a0:	5f 3f       	cpi	r21, 0xFF	; 255
 8a2:	29 f0       	breq	.+10     	; 0x8ae <__divsf3+0x24>
 8a4:	0c 94 2a 05 	jmp	0xa54	; 0xa54 <__fp_inf>
 8a8:	51 11       	cpse	r21, r1
 8aa:	0c 94 75 05 	jmp	0xaea	; 0xaea <__fp_szero>
 8ae:	0c 94 30 05 	jmp	0xa60	; 0xa60 <__fp_nan>

000008b2 <__divsf3x>:
 8b2:	0e 94 52 05 	call	0xaa4	; 0xaa4 <__fp_split3>
 8b6:	68 f3       	brcs	.-38     	; 0x892 <__divsf3+0x8>

000008b8 <__divsf3_pse>:
 8b8:	99 23       	and	r25, r25
 8ba:	b1 f3       	breq	.-20     	; 0x8a8 <__divsf3+0x1e>
 8bc:	55 23       	and	r21, r21
 8be:	91 f3       	breq	.-28     	; 0x8a4 <__divsf3+0x1a>
 8c0:	95 1b       	sub	r25, r21
 8c2:	55 0b       	sbc	r21, r21
 8c4:	bb 27       	eor	r27, r27
 8c6:	aa 27       	eor	r26, r26
 8c8:	62 17       	cp	r22, r18
 8ca:	73 07       	cpc	r23, r19
 8cc:	84 07       	cpc	r24, r20
 8ce:	38 f0       	brcs	.+14     	; 0x8de <__divsf3_pse+0x26>
 8d0:	9f 5f       	subi	r25, 0xFF	; 255
 8d2:	5f 4f       	sbci	r21, 0xFF	; 255
 8d4:	22 0f       	add	r18, r18
 8d6:	33 1f       	adc	r19, r19
 8d8:	44 1f       	adc	r20, r20
 8da:	aa 1f       	adc	r26, r26
 8dc:	a9 f3       	breq	.-22     	; 0x8c8 <__divsf3_pse+0x10>
 8de:	35 d0       	rcall	.+106    	; 0x94a <__stack+0x4b>
 8e0:	0e 2e       	mov	r0, r30
 8e2:	3a f0       	brmi	.+14     	; 0x8f2 <__divsf3_pse+0x3a>
 8e4:	e0 e8       	ldi	r30, 0x80	; 128
 8e6:	32 d0       	rcall	.+100    	; 0x94c <__stack+0x4d>
 8e8:	91 50       	subi	r25, 0x01	; 1
 8ea:	50 40       	sbci	r21, 0x00	; 0
 8ec:	e6 95       	lsr	r30
 8ee:	00 1c       	adc	r0, r0
 8f0:	ca f7       	brpl	.-14     	; 0x8e4 <__divsf3_pse+0x2c>
 8f2:	2b d0       	rcall	.+86     	; 0x94a <__stack+0x4b>
 8f4:	fe 2f       	mov	r31, r30
 8f6:	29 d0       	rcall	.+82     	; 0x94a <__stack+0x4b>
 8f8:	66 0f       	add	r22, r22
 8fa:	77 1f       	adc	r23, r23
 8fc:	88 1f       	adc	r24, r24
 8fe:	bb 1f       	adc	r27, r27
 900:	26 17       	cp	r18, r22
 902:	37 07       	cpc	r19, r23
 904:	48 07       	cpc	r20, r24
 906:	ab 07       	cpc	r26, r27
 908:	b0 e8       	ldi	r27, 0x80	; 128
 90a:	09 f0       	breq	.+2      	; 0x90e <__stack+0xf>
 90c:	bb 0b       	sbc	r27, r27
 90e:	80 2d       	mov	r24, r0
 910:	bf 01       	movw	r22, r30
 912:	ff 27       	eor	r31, r31
 914:	93 58       	subi	r25, 0x83	; 131
 916:	5f 4f       	sbci	r21, 0xFF	; 255
 918:	3a f0       	brmi	.+14     	; 0x928 <__stack+0x29>
 91a:	9e 3f       	cpi	r25, 0xFE	; 254
 91c:	51 05       	cpc	r21, r1
 91e:	78 f0       	brcs	.+30     	; 0x93e <__stack+0x3f>
 920:	0c 94 2a 05 	jmp	0xa54	; 0xa54 <__fp_inf>
 924:	0c 94 75 05 	jmp	0xaea	; 0xaea <__fp_szero>
 928:	5f 3f       	cpi	r21, 0xFF	; 255
 92a:	e4 f3       	brlt	.-8      	; 0x924 <__stack+0x25>
 92c:	98 3e       	cpi	r25, 0xE8	; 232
 92e:	d4 f3       	brlt	.-12     	; 0x924 <__stack+0x25>
 930:	86 95       	lsr	r24
 932:	77 95       	ror	r23
 934:	67 95       	ror	r22
 936:	b7 95       	ror	r27
 938:	f7 95       	ror	r31
 93a:	9f 5f       	subi	r25, 0xFF	; 255
 93c:	c9 f7       	brne	.-14     	; 0x930 <__stack+0x31>
 93e:	88 0f       	add	r24, r24
 940:	91 1d       	adc	r25, r1
 942:	96 95       	lsr	r25
 944:	87 95       	ror	r24
 946:	97 f9       	bld	r25, 7
 948:	08 95       	ret
 94a:	e1 e0       	ldi	r30, 0x01	; 1
 94c:	66 0f       	add	r22, r22
 94e:	77 1f       	adc	r23, r23
 950:	88 1f       	adc	r24, r24
 952:	bb 1f       	adc	r27, r27
 954:	62 17       	cp	r22, r18
 956:	73 07       	cpc	r23, r19
 958:	84 07       	cpc	r24, r20
 95a:	ba 07       	cpc	r27, r26
 95c:	20 f0       	brcs	.+8      	; 0x966 <__stack+0x67>
 95e:	62 1b       	sub	r22, r18
 960:	73 0b       	sbc	r23, r19
 962:	84 0b       	sbc	r24, r20
 964:	ba 0b       	sbc	r27, r26
 966:	ee 1f       	adc	r30, r30
 968:	88 f7       	brcc	.-30     	; 0x94c <__stack+0x4d>
 96a:	e0 95       	com	r30
 96c:	08 95       	ret

0000096e <__fixsfsi>:
 96e:	0e 94 be 04 	call	0x97c	; 0x97c <__fixunssfsi>
 972:	68 94       	set
 974:	b1 11       	cpse	r27, r1
 976:	0c 94 75 05 	jmp	0xaea	; 0xaea <__fp_szero>
 97a:	08 95       	ret

0000097c <__fixunssfsi>:
 97c:	0e 94 5a 05 	call	0xab4	; 0xab4 <__fp_splitA>
 980:	88 f0       	brcs	.+34     	; 0x9a4 <__fixunssfsi+0x28>
 982:	9f 57       	subi	r25, 0x7F	; 127
 984:	98 f0       	brcs	.+38     	; 0x9ac <__fixunssfsi+0x30>
 986:	b9 2f       	mov	r27, r25
 988:	99 27       	eor	r25, r25
 98a:	b7 51       	subi	r27, 0x17	; 23
 98c:	b0 f0       	brcs	.+44     	; 0x9ba <__fixunssfsi+0x3e>
 98e:	e1 f0       	breq	.+56     	; 0x9c8 <__fixunssfsi+0x4c>
 990:	66 0f       	add	r22, r22
 992:	77 1f       	adc	r23, r23
 994:	88 1f       	adc	r24, r24
 996:	99 1f       	adc	r25, r25
 998:	1a f0       	brmi	.+6      	; 0x9a0 <__fixunssfsi+0x24>
 99a:	ba 95       	dec	r27
 99c:	c9 f7       	brne	.-14     	; 0x990 <__fixunssfsi+0x14>
 99e:	14 c0       	rjmp	.+40     	; 0x9c8 <__fixunssfsi+0x4c>
 9a0:	b1 30       	cpi	r27, 0x01	; 1
 9a2:	91 f0       	breq	.+36     	; 0x9c8 <__fixunssfsi+0x4c>
 9a4:	0e 94 74 05 	call	0xae8	; 0xae8 <__fp_zero>
 9a8:	b1 e0       	ldi	r27, 0x01	; 1
 9aa:	08 95       	ret
 9ac:	0c 94 74 05 	jmp	0xae8	; 0xae8 <__fp_zero>
 9b0:	67 2f       	mov	r22, r23
 9b2:	78 2f       	mov	r23, r24
 9b4:	88 27       	eor	r24, r24
 9b6:	b8 5f       	subi	r27, 0xF8	; 248
 9b8:	39 f0       	breq	.+14     	; 0x9c8 <__fixunssfsi+0x4c>
 9ba:	b9 3f       	cpi	r27, 0xF9	; 249
 9bc:	cc f3       	brlt	.-14     	; 0x9b0 <__fixunssfsi+0x34>
 9be:	86 95       	lsr	r24
 9c0:	77 95       	ror	r23
 9c2:	67 95       	ror	r22
 9c4:	b3 95       	inc	r27
 9c6:	d9 f7       	brne	.-10     	; 0x9be <__fixunssfsi+0x42>
 9c8:	3e f4       	brtc	.+14     	; 0x9d8 <__fixunssfsi+0x5c>
 9ca:	90 95       	com	r25
 9cc:	80 95       	com	r24
 9ce:	70 95       	com	r23
 9d0:	61 95       	neg	r22
 9d2:	7f 4f       	sbci	r23, 0xFF	; 255
 9d4:	8f 4f       	sbci	r24, 0xFF	; 255
 9d6:	9f 4f       	sbci	r25, 0xFF	; 255
 9d8:	08 95       	ret

000009da <__floatunsisf>:
 9da:	e8 94       	clt
 9dc:	09 c0       	rjmp	.+18     	; 0x9f0 <__floatsisf+0x12>

000009de <__floatsisf>:
 9de:	97 fb       	bst	r25, 7
 9e0:	3e f4       	brtc	.+14     	; 0x9f0 <__floatsisf+0x12>
 9e2:	90 95       	com	r25
 9e4:	80 95       	com	r24
 9e6:	70 95       	com	r23
 9e8:	61 95       	neg	r22
 9ea:	7f 4f       	sbci	r23, 0xFF	; 255
 9ec:	8f 4f       	sbci	r24, 0xFF	; 255
 9ee:	9f 4f       	sbci	r25, 0xFF	; 255
 9f0:	99 23       	and	r25, r25
 9f2:	a9 f0       	breq	.+42     	; 0xa1e <__floatsisf+0x40>
 9f4:	f9 2f       	mov	r31, r25
 9f6:	96 e9       	ldi	r25, 0x96	; 150
 9f8:	bb 27       	eor	r27, r27
 9fa:	93 95       	inc	r25
 9fc:	f6 95       	lsr	r31
 9fe:	87 95       	ror	r24
 a00:	77 95       	ror	r23
 a02:	67 95       	ror	r22
 a04:	b7 95       	ror	r27
 a06:	f1 11       	cpse	r31, r1
 a08:	f8 cf       	rjmp	.-16     	; 0x9fa <__floatsisf+0x1c>
 a0a:	fa f4       	brpl	.+62     	; 0xa4a <__floatsisf+0x6c>
 a0c:	bb 0f       	add	r27, r27
 a0e:	11 f4       	brne	.+4      	; 0xa14 <__floatsisf+0x36>
 a10:	60 ff       	sbrs	r22, 0
 a12:	1b c0       	rjmp	.+54     	; 0xa4a <__floatsisf+0x6c>
 a14:	6f 5f       	subi	r22, 0xFF	; 255
 a16:	7f 4f       	sbci	r23, 0xFF	; 255
 a18:	8f 4f       	sbci	r24, 0xFF	; 255
 a1a:	9f 4f       	sbci	r25, 0xFF	; 255
 a1c:	16 c0       	rjmp	.+44     	; 0xa4a <__floatsisf+0x6c>
 a1e:	88 23       	and	r24, r24
 a20:	11 f0       	breq	.+4      	; 0xa26 <__floatsisf+0x48>
 a22:	96 e9       	ldi	r25, 0x96	; 150
 a24:	11 c0       	rjmp	.+34     	; 0xa48 <__floatsisf+0x6a>
 a26:	77 23       	and	r23, r23
 a28:	21 f0       	breq	.+8      	; 0xa32 <__floatsisf+0x54>
 a2a:	9e e8       	ldi	r25, 0x8E	; 142
 a2c:	87 2f       	mov	r24, r23
 a2e:	76 2f       	mov	r23, r22
 a30:	05 c0       	rjmp	.+10     	; 0xa3c <__floatsisf+0x5e>
 a32:	66 23       	and	r22, r22
 a34:	71 f0       	breq	.+28     	; 0xa52 <__floatsisf+0x74>
 a36:	96 e8       	ldi	r25, 0x86	; 134
 a38:	86 2f       	mov	r24, r22
 a3a:	70 e0       	ldi	r23, 0x00	; 0
 a3c:	60 e0       	ldi	r22, 0x00	; 0
 a3e:	2a f0       	brmi	.+10     	; 0xa4a <__floatsisf+0x6c>
 a40:	9a 95       	dec	r25
 a42:	66 0f       	add	r22, r22
 a44:	77 1f       	adc	r23, r23
 a46:	88 1f       	adc	r24, r24
 a48:	da f7       	brpl	.-10     	; 0xa40 <__floatsisf+0x62>
 a4a:	88 0f       	add	r24, r24
 a4c:	96 95       	lsr	r25
 a4e:	87 95       	ror	r24
 a50:	97 f9       	bld	r25, 7
 a52:	08 95       	ret

00000a54 <__fp_inf>:
 a54:	97 f9       	bld	r25, 7
 a56:	9f 67       	ori	r25, 0x7F	; 127
 a58:	80 e8       	ldi	r24, 0x80	; 128
 a5a:	70 e0       	ldi	r23, 0x00	; 0
 a5c:	60 e0       	ldi	r22, 0x00	; 0
 a5e:	08 95       	ret

00000a60 <__fp_nan>:
 a60:	9f ef       	ldi	r25, 0xFF	; 255
 a62:	80 ec       	ldi	r24, 0xC0	; 192
 a64:	08 95       	ret

00000a66 <__fp_pscA>:
 a66:	00 24       	eor	r0, r0
 a68:	0a 94       	dec	r0
 a6a:	16 16       	cp	r1, r22
 a6c:	17 06       	cpc	r1, r23
 a6e:	18 06       	cpc	r1, r24
 a70:	09 06       	cpc	r0, r25
 a72:	08 95       	ret

00000a74 <__fp_pscB>:
 a74:	00 24       	eor	r0, r0
 a76:	0a 94       	dec	r0
 a78:	12 16       	cp	r1, r18
 a7a:	13 06       	cpc	r1, r19
 a7c:	14 06       	cpc	r1, r20
 a7e:	05 06       	cpc	r0, r21
 a80:	08 95       	ret

00000a82 <__fp_round>:
 a82:	09 2e       	mov	r0, r25
 a84:	03 94       	inc	r0
 a86:	00 0c       	add	r0, r0
 a88:	11 f4       	brne	.+4      	; 0xa8e <__fp_round+0xc>
 a8a:	88 23       	and	r24, r24
 a8c:	52 f0       	brmi	.+20     	; 0xaa2 <__fp_round+0x20>
 a8e:	bb 0f       	add	r27, r27
 a90:	40 f4       	brcc	.+16     	; 0xaa2 <__fp_round+0x20>
 a92:	bf 2b       	or	r27, r31
 a94:	11 f4       	brne	.+4      	; 0xa9a <__fp_round+0x18>
 a96:	60 ff       	sbrs	r22, 0
 a98:	04 c0       	rjmp	.+8      	; 0xaa2 <__fp_round+0x20>
 a9a:	6f 5f       	subi	r22, 0xFF	; 255
 a9c:	7f 4f       	sbci	r23, 0xFF	; 255
 a9e:	8f 4f       	sbci	r24, 0xFF	; 255
 aa0:	9f 4f       	sbci	r25, 0xFF	; 255
 aa2:	08 95       	ret

00000aa4 <__fp_split3>:
 aa4:	57 fd       	sbrc	r21, 7
 aa6:	90 58       	subi	r25, 0x80	; 128
 aa8:	44 0f       	add	r20, r20
 aaa:	55 1f       	adc	r21, r21
 aac:	59 f0       	breq	.+22     	; 0xac4 <__fp_splitA+0x10>
 aae:	5f 3f       	cpi	r21, 0xFF	; 255
 ab0:	71 f0       	breq	.+28     	; 0xace <__fp_splitA+0x1a>
 ab2:	47 95       	ror	r20

00000ab4 <__fp_splitA>:
 ab4:	88 0f       	add	r24, r24
 ab6:	97 fb       	bst	r25, 7
 ab8:	99 1f       	adc	r25, r25
 aba:	61 f0       	breq	.+24     	; 0xad4 <__fp_splitA+0x20>
 abc:	9f 3f       	cpi	r25, 0xFF	; 255
 abe:	79 f0       	breq	.+30     	; 0xade <__fp_splitA+0x2a>
 ac0:	87 95       	ror	r24
 ac2:	08 95       	ret
 ac4:	12 16       	cp	r1, r18
 ac6:	13 06       	cpc	r1, r19
 ac8:	14 06       	cpc	r1, r20
 aca:	55 1f       	adc	r21, r21
 acc:	f2 cf       	rjmp	.-28     	; 0xab2 <__fp_split3+0xe>
 ace:	46 95       	lsr	r20
 ad0:	f1 df       	rcall	.-30     	; 0xab4 <__fp_splitA>
 ad2:	08 c0       	rjmp	.+16     	; 0xae4 <__fp_splitA+0x30>
 ad4:	16 16       	cp	r1, r22
 ad6:	17 06       	cpc	r1, r23
 ad8:	18 06       	cpc	r1, r24
 ada:	99 1f       	adc	r25, r25
 adc:	f1 cf       	rjmp	.-30     	; 0xac0 <__fp_splitA+0xc>
 ade:	86 95       	lsr	r24
 ae0:	71 05       	cpc	r23, r1
 ae2:	61 05       	cpc	r22, r1
 ae4:	08 94       	sec
 ae6:	08 95       	ret

00000ae8 <__fp_zero>:
 ae8:	e8 94       	clt

00000aea <__fp_szero>:
 aea:	bb 27       	eor	r27, r27
 aec:	66 27       	eor	r22, r22
 aee:	77 27       	eor	r23, r23
 af0:	cb 01       	movw	r24, r22
 af2:	97 f9       	bld	r25, 7
 af4:	08 95       	ret

00000af6 <__gesf2>:
 af6:	0e 94 f5 05 	call	0xbea	; 0xbea <__fp_cmp>
 afa:	08 f4       	brcc	.+2      	; 0xafe <__gesf2+0x8>
 afc:	8f ef       	ldi	r24, 0xFF	; 255
 afe:	08 95       	ret

00000b00 <__mulsf3>:
 b00:	0e 94 93 05 	call	0xb26	; 0xb26 <__mulsf3x>
 b04:	0c 94 41 05 	jmp	0xa82	; 0xa82 <__fp_round>
 b08:	0e 94 33 05 	call	0xa66	; 0xa66 <__fp_pscA>
 b0c:	38 f0       	brcs	.+14     	; 0xb1c <__mulsf3+0x1c>
 b0e:	0e 94 3a 05 	call	0xa74	; 0xa74 <__fp_pscB>
 b12:	20 f0       	brcs	.+8      	; 0xb1c <__mulsf3+0x1c>
 b14:	95 23       	and	r25, r21
 b16:	11 f0       	breq	.+4      	; 0xb1c <__mulsf3+0x1c>
 b18:	0c 94 2a 05 	jmp	0xa54	; 0xa54 <__fp_inf>
 b1c:	0c 94 30 05 	jmp	0xa60	; 0xa60 <__fp_nan>
 b20:	11 24       	eor	r1, r1
 b22:	0c 94 75 05 	jmp	0xaea	; 0xaea <__fp_szero>

00000b26 <__mulsf3x>:
 b26:	0e 94 52 05 	call	0xaa4	; 0xaa4 <__fp_split3>
 b2a:	70 f3       	brcs	.-36     	; 0xb08 <__mulsf3+0x8>

00000b2c <__mulsf3_pse>:
 b2c:	95 9f       	mul	r25, r21
 b2e:	c1 f3       	breq	.-16     	; 0xb20 <__mulsf3+0x20>
 b30:	95 0f       	add	r25, r21
 b32:	50 e0       	ldi	r21, 0x00	; 0
 b34:	55 1f       	adc	r21, r21
 b36:	62 9f       	mul	r22, r18
 b38:	f0 01       	movw	r30, r0
 b3a:	72 9f       	mul	r23, r18
 b3c:	bb 27       	eor	r27, r27
 b3e:	f0 0d       	add	r31, r0
 b40:	b1 1d       	adc	r27, r1
 b42:	63 9f       	mul	r22, r19
 b44:	aa 27       	eor	r26, r26
 b46:	f0 0d       	add	r31, r0
 b48:	b1 1d       	adc	r27, r1
 b4a:	aa 1f       	adc	r26, r26
 b4c:	64 9f       	mul	r22, r20
 b4e:	66 27       	eor	r22, r22
 b50:	b0 0d       	add	r27, r0
 b52:	a1 1d       	adc	r26, r1
 b54:	66 1f       	adc	r22, r22
 b56:	82 9f       	mul	r24, r18
 b58:	22 27       	eor	r18, r18
 b5a:	b0 0d       	add	r27, r0
 b5c:	a1 1d       	adc	r26, r1
 b5e:	62 1f       	adc	r22, r18
 b60:	73 9f       	mul	r23, r19
 b62:	b0 0d       	add	r27, r0
 b64:	a1 1d       	adc	r26, r1
 b66:	62 1f       	adc	r22, r18
 b68:	83 9f       	mul	r24, r19
 b6a:	a0 0d       	add	r26, r0
 b6c:	61 1d       	adc	r22, r1
 b6e:	22 1f       	adc	r18, r18
 b70:	74 9f       	mul	r23, r20
 b72:	33 27       	eor	r19, r19
 b74:	a0 0d       	add	r26, r0
 b76:	61 1d       	adc	r22, r1
 b78:	23 1f       	adc	r18, r19
 b7a:	84 9f       	mul	r24, r20
 b7c:	60 0d       	add	r22, r0
 b7e:	21 1d       	adc	r18, r1
 b80:	82 2f       	mov	r24, r18
 b82:	76 2f       	mov	r23, r22
 b84:	6a 2f       	mov	r22, r26
 b86:	11 24       	eor	r1, r1
 b88:	9f 57       	subi	r25, 0x7F	; 127
 b8a:	50 40       	sbci	r21, 0x00	; 0
 b8c:	9a f0       	brmi	.+38     	; 0xbb4 <__mulsf3_pse+0x88>
 b8e:	f1 f0       	breq	.+60     	; 0xbcc <__mulsf3_pse+0xa0>
 b90:	88 23       	and	r24, r24
 b92:	4a f0       	brmi	.+18     	; 0xba6 <__mulsf3_pse+0x7a>
 b94:	ee 0f       	add	r30, r30
 b96:	ff 1f       	adc	r31, r31
 b98:	bb 1f       	adc	r27, r27
 b9a:	66 1f       	adc	r22, r22
 b9c:	77 1f       	adc	r23, r23
 b9e:	88 1f       	adc	r24, r24
 ba0:	91 50       	subi	r25, 0x01	; 1
 ba2:	50 40       	sbci	r21, 0x00	; 0
 ba4:	a9 f7       	brne	.-22     	; 0xb90 <__mulsf3_pse+0x64>
 ba6:	9e 3f       	cpi	r25, 0xFE	; 254
 ba8:	51 05       	cpc	r21, r1
 baa:	80 f0       	brcs	.+32     	; 0xbcc <__mulsf3_pse+0xa0>
 bac:	0c 94 2a 05 	jmp	0xa54	; 0xa54 <__fp_inf>
 bb0:	0c 94 75 05 	jmp	0xaea	; 0xaea <__fp_szero>
 bb4:	5f 3f       	cpi	r21, 0xFF	; 255
 bb6:	e4 f3       	brlt	.-8      	; 0xbb0 <__mulsf3_pse+0x84>
 bb8:	98 3e       	cpi	r25, 0xE8	; 232
 bba:	d4 f3       	brlt	.-12     	; 0xbb0 <__mulsf3_pse+0x84>
 bbc:	86 95       	lsr	r24
 bbe:	77 95       	ror	r23
 bc0:	67 95       	ror	r22
 bc2:	b7 95       	ror	r27
 bc4:	f7 95       	ror	r31
 bc6:	e7 95       	ror	r30
 bc8:	9f 5f       	subi	r25, 0xFF	; 255
 bca:	c1 f7       	brne	.-16     	; 0xbbc <__mulsf3_pse+0x90>
 bcc:	fe 2b       	or	r31, r30
 bce:	88 0f       	add	r24, r24
 bd0:	91 1d       	adc	r25, r1
 bd2:	96 95       	lsr	r25
 bd4:	87 95       	ror	r24
 bd6:	97 f9       	bld	r25, 7
 bd8:	08 95       	ret

00000bda <sin>:
 bda:	9f 93       	push	r25
 bdc:	0e 94 1b 06 	call	0xc36	; 0xc36 <__fp_rempio2>
 be0:	0f 90       	pop	r0
 be2:	07 fc       	sbrc	r0, 7
 be4:	ee 5f       	subi	r30, 0xFE	; 254
 be6:	0c 94 44 06 	jmp	0xc88	; 0xc88 <__fp_sinus>

00000bea <__fp_cmp>:
 bea:	99 0f       	add	r25, r25
 bec:	00 08       	sbc	r0, r0
 bee:	55 0f       	add	r21, r21
 bf0:	aa 0b       	sbc	r26, r26
 bf2:	e0 e8       	ldi	r30, 0x80	; 128
 bf4:	fe ef       	ldi	r31, 0xFE	; 254
 bf6:	16 16       	cp	r1, r22
 bf8:	17 06       	cpc	r1, r23
 bfa:	e8 07       	cpc	r30, r24
 bfc:	f9 07       	cpc	r31, r25
 bfe:	c0 f0       	brcs	.+48     	; 0xc30 <__fp_cmp+0x46>
 c00:	12 16       	cp	r1, r18
 c02:	13 06       	cpc	r1, r19
 c04:	e4 07       	cpc	r30, r20
 c06:	f5 07       	cpc	r31, r21
 c08:	98 f0       	brcs	.+38     	; 0xc30 <__fp_cmp+0x46>
 c0a:	62 1b       	sub	r22, r18
 c0c:	73 0b       	sbc	r23, r19
 c0e:	84 0b       	sbc	r24, r20
 c10:	95 0b       	sbc	r25, r21
 c12:	39 f4       	brne	.+14     	; 0xc22 <__fp_cmp+0x38>
 c14:	0a 26       	eor	r0, r26
 c16:	61 f0       	breq	.+24     	; 0xc30 <__fp_cmp+0x46>
 c18:	23 2b       	or	r18, r19
 c1a:	24 2b       	or	r18, r20
 c1c:	25 2b       	or	r18, r21
 c1e:	21 f4       	brne	.+8      	; 0xc28 <__fp_cmp+0x3e>
 c20:	08 95       	ret
 c22:	0a 26       	eor	r0, r26
 c24:	09 f4       	brne	.+2      	; 0xc28 <__fp_cmp+0x3e>
 c26:	a1 40       	sbci	r26, 0x01	; 1
 c28:	a6 95       	lsr	r26
 c2a:	8f ef       	ldi	r24, 0xFF	; 255
 c2c:	81 1d       	adc	r24, r1
 c2e:	81 1d       	adc	r24, r1
 c30:	08 95       	ret
 c32:	0c 94 30 05 	jmp	0xa60	; 0xa60 <__fp_nan>

00000c36 <__fp_rempio2>:
 c36:	0e 94 5a 05 	call	0xab4	; 0xab4 <__fp_splitA>
 c3a:	d8 f3       	brcs	.-10     	; 0xc32 <__fp_cmp+0x48>
 c3c:	e8 94       	clt
 c3e:	e0 e0       	ldi	r30, 0x00	; 0
 c40:	bb 27       	eor	r27, r27
 c42:	9f 57       	subi	r25, 0x7F	; 127
 c44:	f0 f0       	brcs	.+60     	; 0xc82 <__fp_rempio2+0x4c>
 c46:	2a ed       	ldi	r18, 0xDA	; 218
 c48:	3f e0       	ldi	r19, 0x0F	; 15
 c4a:	49 ec       	ldi	r20, 0xC9	; 201
 c4c:	06 c0       	rjmp	.+12     	; 0xc5a <__fp_rempio2+0x24>
 c4e:	ee 0f       	add	r30, r30
 c50:	bb 0f       	add	r27, r27
 c52:	66 1f       	adc	r22, r22
 c54:	77 1f       	adc	r23, r23
 c56:	88 1f       	adc	r24, r24
 c58:	28 f0       	brcs	.+10     	; 0xc64 <__fp_rempio2+0x2e>
 c5a:	b2 3a       	cpi	r27, 0xA2	; 162
 c5c:	62 07       	cpc	r22, r18
 c5e:	73 07       	cpc	r23, r19
 c60:	84 07       	cpc	r24, r20
 c62:	28 f0       	brcs	.+10     	; 0xc6e <__fp_rempio2+0x38>
 c64:	b2 5a       	subi	r27, 0xA2	; 162
 c66:	62 0b       	sbc	r22, r18
 c68:	73 0b       	sbc	r23, r19
 c6a:	84 0b       	sbc	r24, r20
 c6c:	e3 95       	inc	r30
 c6e:	9a 95       	dec	r25
 c70:	72 f7       	brpl	.-36     	; 0xc4e <__fp_rempio2+0x18>
 c72:	80 38       	cpi	r24, 0x80	; 128
 c74:	30 f4       	brcc	.+12     	; 0xc82 <__fp_rempio2+0x4c>
 c76:	9a 95       	dec	r25
 c78:	bb 0f       	add	r27, r27
 c7a:	66 1f       	adc	r22, r22
 c7c:	77 1f       	adc	r23, r23
 c7e:	88 1f       	adc	r24, r24
 c80:	d2 f7       	brpl	.-12     	; 0xc76 <__fp_rempio2+0x40>
 c82:	90 48       	sbci	r25, 0x80	; 128
 c84:	0c 94 5a 06 	jmp	0xcb4	; 0xcb4 <__fp_mpack_finite>

00000c88 <__fp_sinus>:
 c88:	ef 93       	push	r30
 c8a:	e0 ff       	sbrs	r30, 0
 c8c:	07 c0       	rjmp	.+14     	; 0xc9c <__fp_sinus+0x14>
 c8e:	a2 ea       	ldi	r26, 0xA2	; 162
 c90:	2a ed       	ldi	r18, 0xDA	; 218
 c92:	3f e0       	ldi	r19, 0x0F	; 15
 c94:	49 ec       	ldi	r20, 0xC9	; 201
 c96:	5f eb       	ldi	r21, 0xBF	; 191
 c98:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <__addsf3x>
 c9c:	0e 94 41 05 	call	0xa82	; 0xa82 <__fp_round>
 ca0:	0f 90       	pop	r0
 ca2:	03 94       	inc	r0
 ca4:	01 fc       	sbrc	r0, 1
 ca6:	90 58       	subi	r25, 0x80	; 128
 ca8:	e8 e6       	ldi	r30, 0x68	; 104
 caa:	f0 e0       	ldi	r31, 0x00	; 0
 cac:	0c 94 66 06 	jmp	0xccc	; 0xccc <__fp_powsodd>

00000cb0 <__fp_mpack>:
 cb0:	9f 3f       	cpi	r25, 0xFF	; 255
 cb2:	31 f0       	breq	.+12     	; 0xcc0 <__fp_mpack_finite+0xc>

00000cb4 <__fp_mpack_finite>:
 cb4:	91 50       	subi	r25, 0x01	; 1
 cb6:	20 f4       	brcc	.+8      	; 0xcc0 <__fp_mpack_finite+0xc>
 cb8:	87 95       	ror	r24
 cba:	77 95       	ror	r23
 cbc:	67 95       	ror	r22
 cbe:	b7 95       	ror	r27
 cc0:	88 0f       	add	r24, r24
 cc2:	91 1d       	adc	r25, r1
 cc4:	96 95       	lsr	r25
 cc6:	87 95       	ror	r24
 cc8:	97 f9       	bld	r25, 7
 cca:	08 95       	ret

00000ccc <__fp_powsodd>:
 ccc:	9f 93       	push	r25
 cce:	8f 93       	push	r24
 cd0:	7f 93       	push	r23
 cd2:	6f 93       	push	r22
 cd4:	ff 93       	push	r31
 cd6:	ef 93       	push	r30
 cd8:	9b 01       	movw	r18, r22
 cda:	ac 01       	movw	r20, r24
 cdc:	0e 94 80 05 	call	0xb00	; 0xb00 <__mulsf3>
 ce0:	ef 91       	pop	r30
 ce2:	ff 91       	pop	r31
 ce4:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <__fp_powser>
 ce8:	2f 91       	pop	r18
 cea:	3f 91       	pop	r19
 cec:	4f 91       	pop	r20
 cee:	5f 91       	pop	r21
 cf0:	0c 94 80 05 	jmp	0xb00	; 0xb00 <__mulsf3>

00000cf4 <__fp_powser>:
 cf4:	df 93       	push	r29
 cf6:	cf 93       	push	r28
 cf8:	1f 93       	push	r17
 cfa:	0f 93       	push	r16
 cfc:	ff 92       	push	r15
 cfe:	ef 92       	push	r14
 d00:	df 92       	push	r13
 d02:	7b 01       	movw	r14, r22
 d04:	8c 01       	movw	r16, r24
 d06:	68 94       	set
 d08:	06 c0       	rjmp	.+12     	; 0xd16 <__fp_powser+0x22>
 d0a:	da 2e       	mov	r13, r26
 d0c:	ef 01       	movw	r28, r30
 d0e:	0e 94 93 05 	call	0xb26	; 0xb26 <__mulsf3x>
 d12:	fe 01       	movw	r30, r28
 d14:	e8 94       	clt
 d16:	a5 91       	lpm	r26, Z+
 d18:	25 91       	lpm	r18, Z+
 d1a:	35 91       	lpm	r19, Z+
 d1c:	45 91       	lpm	r20, Z+
 d1e:	55 91       	lpm	r21, Z+
 d20:	a6 f3       	brts	.-24     	; 0xd0a <__fp_powser+0x16>
 d22:	ef 01       	movw	r28, r30
 d24:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <__addsf3x>
 d28:	fe 01       	movw	r30, r28
 d2a:	97 01       	movw	r18, r14
 d2c:	a8 01       	movw	r20, r16
 d2e:	da 94       	dec	r13
 d30:	69 f7       	brne	.-38     	; 0xd0c <__fp_powser+0x18>
 d32:	df 90       	pop	r13
 d34:	ef 90       	pop	r14
 d36:	ff 90       	pop	r15
 d38:	0f 91       	pop	r16
 d3a:	1f 91       	pop	r17
 d3c:	cf 91       	pop	r28
 d3e:	df 91       	pop	r29
 d40:	08 95       	ret

00000d42 <__divmodhi4>:
 d42:	97 fb       	bst	r25, 7
 d44:	07 2e       	mov	r0, r23
 d46:	16 f4       	brtc	.+4      	; 0xd4c <__divmodhi4+0xa>
 d48:	00 94       	com	r0
 d4a:	07 d0       	rcall	.+14     	; 0xd5a <__divmodhi4_neg1>
 d4c:	77 fd       	sbrc	r23, 7
 d4e:	09 d0       	rcall	.+18     	; 0xd62 <__divmodhi4_neg2>
 d50:	0e 94 b5 06 	call	0xd6a	; 0xd6a <__udivmodhi4>
 d54:	07 fc       	sbrc	r0, 7
 d56:	05 d0       	rcall	.+10     	; 0xd62 <__divmodhi4_neg2>
 d58:	3e f4       	brtc	.+14     	; 0xd68 <__divmodhi4_exit>

00000d5a <__divmodhi4_neg1>:
 d5a:	90 95       	com	r25
 d5c:	81 95       	neg	r24
 d5e:	9f 4f       	sbci	r25, 0xFF	; 255
 d60:	08 95       	ret

00000d62 <__divmodhi4_neg2>:
 d62:	70 95       	com	r23
 d64:	61 95       	neg	r22
 d66:	7f 4f       	sbci	r23, 0xFF	; 255

00000d68 <__divmodhi4_exit>:
 d68:	08 95       	ret

00000d6a <__udivmodhi4>:
 d6a:	aa 1b       	sub	r26, r26
 d6c:	bb 1b       	sub	r27, r27
 d6e:	51 e1       	ldi	r21, 0x11	; 17
 d70:	07 c0       	rjmp	.+14     	; 0xd80 <__udivmodhi4_ep>

00000d72 <__udivmodhi4_loop>:
 d72:	aa 1f       	adc	r26, r26
 d74:	bb 1f       	adc	r27, r27
 d76:	a6 17       	cp	r26, r22
 d78:	b7 07       	cpc	r27, r23
 d7a:	10 f0       	brcs	.+4      	; 0xd80 <__udivmodhi4_ep>
 d7c:	a6 1b       	sub	r26, r22
 d7e:	b7 0b       	sbc	r27, r23

00000d80 <__udivmodhi4_ep>:
 d80:	88 1f       	adc	r24, r24
 d82:	99 1f       	adc	r25, r25
 d84:	5a 95       	dec	r21
 d86:	a9 f7       	brne	.-22     	; 0xd72 <__udivmodhi4_loop>
 d88:	80 95       	com	r24
 d8a:	90 95       	com	r25
 d8c:	bc 01       	movw	r22, r24
 d8e:	cd 01       	movw	r24, r26
 d90:	08 95       	ret

00000d92 <_exit>:
 d92:	f8 94       	cli

00000d94 <__stop_program>:
 d94:	ff cf       	rjmp	.-2      	; 0xd94 <__stop_program>
