
Project2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000e58  00000eec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e58  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000004a4  00800110  00800110  00000efc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000efc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000f2c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  00000f6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000bab  00000000  00000000  00001084  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000476  00000000  00000000  00001c2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000531  00000000  00000000  000020a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000368  00000000  00000000  000025d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000040f  00000000  00000000  00002940  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000085f  00000000  00000000  00002d4f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  000035ae  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 43 00 	jmp	0x86	; 0x86 <__ctors_end>
   4:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
   8:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
   c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  10:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  14:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  18:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  1c:	0c 94 8f 01 	jmp	0x31e	; 0x31e <__vector_7>
  20:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  24:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  28:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  2c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  30:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  34:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  38:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__vector_14>
  3c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  40:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  44:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  48:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  4c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  50:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  54:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  58:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  5c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  60:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  64:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  68:	05 a8       	ldd	r0, Z+53	; 0x35
  6a:	4c cd       	rjmp	.-1384   	; 0xfffffb04 <__eeprom_end+0xff7efb04>
  6c:	b2 d4       	rcall	.+2404   	; 0x9d2 <__divsf3_pse+0x58>
  6e:	4e b9       	out	0x0e, r20	; 14
  70:	38 36       	cpi	r19, 0x68	; 104
  72:	a9 02       	muls	r26, r25
  74:	0c 50       	subi	r16, 0x0C	; 12
  76:	b9 91       	ld	r27, Y+
  78:	86 88       	ldd	r8, Z+22	; 0x16
  7a:	08 3c       	cpi	r16, 0xC8	; 200
  7c:	a6 aa       	std	Z+54, r10	; 0x36
  7e:	aa 2a       	or	r10, r26
  80:	be 00       	.word	0x00be	; ????
  82:	00 00       	nop
  84:	80 3f       	cpi	r24, 0xF0	; 240

00000086 <__ctors_end>:
  86:	11 24       	eor	r1, r1
  88:	1f be       	out	0x3f, r1	; 63
  8a:	cf ef       	ldi	r28, 0xFF	; 255
  8c:	d8 e0       	ldi	r29, 0x08	; 8
  8e:	de bf       	out	0x3e, r29	; 62
  90:	cd bf       	out	0x3d, r28	; 61

00000092 <__do_copy_data>:
  92:	11 e0       	ldi	r17, 0x01	; 1
  94:	a0 e0       	ldi	r26, 0x00	; 0
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	e8 e5       	ldi	r30, 0x58	; 88
  9a:	fe e0       	ldi	r31, 0x0E	; 14
  9c:	02 c0       	rjmp	.+4      	; 0xa2 <__do_copy_data+0x10>
  9e:	05 90       	lpm	r0, Z+
  a0:	0d 92       	st	X+, r0
  a2:	a0 31       	cpi	r26, 0x10	; 16
  a4:	b1 07       	cpc	r27, r17
  a6:	d9 f7       	brne	.-10     	; 0x9e <__do_copy_data+0xc>

000000a8 <__do_clear_bss>:
  a8:	25 e0       	ldi	r18, 0x05	; 5
  aa:	a0 e1       	ldi	r26, 0x10	; 16
  ac:	b1 e0       	ldi	r27, 0x01	; 1
  ae:	01 c0       	rjmp	.+2      	; 0xb2 <.do_clear_bss_start>

000000b0 <.do_clear_bss_loop>:
  b0:	1d 92       	st	X+, r1

000000b2 <.do_clear_bss_start>:
  b2:	a4 3b       	cpi	r26, 0xB4	; 180
  b4:	b2 07       	cpc	r27, r18
  b6:	e1 f7       	brne	.-8      	; 0xb0 <.do_clear_bss_loop>
  b8:	0e 94 21 01 	call	0x242	; 0x242 <main>
  bc:	0c 94 2a 07 	jmp	0xe54	; 0xe54 <_exit>

000000c0 <__bad_interrupt>:
  c0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c4 <Initialize_ADC0>:
int sampleDivider = 1;

// sets up SPI system between ATmega328P and slave device(s)
void Initialize_ADC0(void)
{
	ADCSRA = 0x87;	//Turn On ADC and set prescaler (CLK/128)
  c4:	87 e8       	ldi	r24, 0x87	; 135
  c6:	80 93 7a 00 	sts	0x007A, r24
	ADCSRB = 0x00;	//turn off autotrigger
  ca:	10 92 7b 00 	sts	0x007B, r1
	ADMUX = 0x00;    	//Set ADC channel ADC0
  ce:	10 92 7c 00 	sts	0x007C, r1
  d2:	08 95       	ret

000000d4 <Initialize_SPI_Master>:
}

void Initialize_SPI_Master(){
   SPCR = (0<<SPIE) |               // No interrupts
  d4:	80 e5       	ldi	r24, 0x50	; 80
  d6:	8c bd       	out	0x2c, r24	; 44
   (1<<SPE) |                       // SPI enabled
   (1<<MSTR) ;                      // master
   SPSR = 0x00;                     // clear flags
  d8:	1d bc       	out	0x2d, r1	; 45
   PORTB = 1 << SS;                 // make sure SS is high
  da:	84 e0       	ldi	r24, 0x04	; 4
  dc:	85 b9       	out	0x05, r24	; 5
  de:	08 95       	ret

000000e0 <initTimer0>:
}

// Initializing timer 0 (change OCR0A for freq change!!!!!)
void initTimer0(){
   TCCR0A = 0x02;                   // timer CTC mode
  e0:	82 e0       	ldi	r24, 0x02	; 2
  e2:	84 bd       	out	0x24, r24	; 36
   OCR0A = overflow0;          // sets counter overflow
  e4:	90 91 03 01 	lds	r25, 0x0103
  e8:	97 bd       	out	0x27, r25	; 39
   TCCR0B = 0x02;                   // timer clk = system clk / 8 (2MHz)
  ea:	85 bd       	out	0x25, r24	; 37
   TIFR0 = 0x02;                    // Interrupt occurs at OCRF0A overflow
  ec:	85 bb       	out	0x15, r24	; 21
   TIMSK0 = 0x02;                   // OCRF0A overflow interrupt enabled
  ee:	80 93 6e 00 	sts	0x006E, r24
  f2:	08 95       	ret

000000f4 <initTimer2>:
}

void initTimer2(){
	TCCR2A = 0x02;                   // timer CTC mode
  f4:	82 e0       	ldi	r24, 0x02	; 2
  f6:	80 93 b0 00 	sts	0x00B0, r24
	OCR2A = overflow2;		        // sets counter overflow
  fa:	90 91 02 01 	lds	r25, 0x0102
  fe:	90 93 b3 00 	sts	0x00B3, r25
	TCCR2B = 0x04;                   // timer clk = system clk / 256 (2MHz)
 102:	94 e0       	ldi	r25, 0x04	; 4
 104:	90 93 b1 00 	sts	0x00B1, r25
	TIFR2 = 0x02;                    // Interrupt occurs at OCRF2A overflow
 108:	87 bb       	out	0x17, r24	; 23
	TIMSK2 = 0x02;                   // OCRF0A overflow interrupt enabled
 10a:	80 93 70 00 	sts	0x0070, r24
 10e:	08 95       	ret

00000110 <GPIO_Initialization>:
}


// initializes GPIO I/O, SPI interface, and interrupts
void GPIO_Initialization(){
   DDRB |= (1<<MOSI) | (1<<SCK) | (1<<SS);	// make MOSI, SCK and SS outputs
 110:	84 b1       	in	r24, 0x04	; 4
 112:	8c 62       	ori	r24, 0x2C	; 44
 114:	84 b9       	out	0x04, r24	; 4
   DDRD &= ~(1<<BTN1) | ~(1<<BTN1) | ~(1<<BTN2) | ~(1<<SW1);	// set buttons & switches as inputs
 116:	8a b1       	in	r24, 0x0a	; 10
 118:	8a b9       	out	0x0a, r24	; 10
   DDRD |= (1<<LED2) | (1<<LED3);				// debug LEDs are output
 11a:	8a b1       	in	r24, 0x0a	; 10
 11c:	8c 60       	ori	r24, 0x0C	; 12
 11e:	8a b9       	out	0x0a, r24	; 10
   PORTD |= (1<<BTN0) | (1<<BTN1) | (1<<BTN2);	// set internal pull-ups
 120:	8b b1       	in	r24, 0x0b	; 11
 122:	80 6e       	ori	r24, 0xE0	; 224
 124:	8b b9       	out	0x0b, r24	; 11
   Initialize_SPI_Master();			// initialize SPI to DAC
 126:	0e 94 6a 00 	call	0xd4	; 0xd4 <Initialize_SPI_Master>
   initTimer0();							// initialize timer0
 12a:	0e 94 70 00 	call	0xe0	; 0xe0 <initTimer0>
   initTimer2();
 12e:	0e 94 7a 00 	call	0xf4	; 0xf4 <initTimer2>
   Initialize_ADC0();
 132:	0e 94 62 00 	call	0xc4	; 0xc4 <Initialize_ADC0>
 136:	08 95       	ret

00000138 <check_switch>:
   
   return btnPressed;
}

uint8_t check_switch(){
	return (PIND & 1<<SW1);
 138:	89 b1       	in	r24, 0x09	; 9
}
 13a:	80 71       	andi	r24, 0x10	; 16
 13c:	08 95       	ret

0000013e <check_voltage>:

uint16_t check_voltage(){
	ADCSRA = 0xC7;        		// start conversion
 13e:	87 ec       	ldi	r24, 0xC7	; 199
 140:	80 93 7a 00 	sts	0x007A, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 144:	8f e0       	ldi	r24, 0x0F	; 15
 146:	94 e0       	ldi	r25, 0x04	; 4
 148:	01 97       	sbiw	r24, 0x01	; 1
 14a:	f1 f7       	brne	.-4      	; 0x148 <check_voltage+0xa>
 14c:	00 c0       	rjmp	.+0      	; 0x14e <check_voltage+0x10>
 14e:	00 00       	nop
	_delay_us(260);				// ensure max sampling rate not exceeded
	voltage = (ADC & 0x3FF)/4;  // read 10 bit voltage and convert to 8 bit (255)
 150:	80 91 78 00 	lds	r24, 0x0078
 154:	90 91 79 00 	lds	r25, 0x0079
 158:	93 70       	andi	r25, 0x03	; 3
 15a:	96 95       	lsr	r25
 15c:	87 95       	ror	r24
 15e:	96 95       	lsr	r25
 160:	87 95       	ror	r24
 162:	90 93 11 01 	sts	0x0111, r25
 166:	80 93 10 01 	sts	0x0110, r24
 16a:	00 97       	sbiw	r24, 0x00	; 0
 16c:	11 f4       	brne	.+4      	; 0x172 <check_voltage+0x34>
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	90 e0       	ldi	r25, 0x00	; 0
	if(voltage < 2)
		return 1;
	else 
		return voltage;
}
 172:	08 95       	ret

00000174 <Transmit_SPI_Master>:

// sends data to DAC over SPI data port
void Transmit_SPI_Master(int Data) {
   PORTB &= ~(1 << SS);					//Assert slave select (active low)
 174:	2a 98       	cbi	0x05, 2	; 5
   SPDR = ((Data >> 8) & 0xF) | 0x70;		//Attach configuration Bits onto MSB
 176:	9f 70       	andi	r25, 0x0F	; 15
 178:	90 67       	ori	r25, 0x70	; 112
 17a:	9e bd       	out	0x2e, r25	; 46
   while (!(SPSR & (1<<SPIF)));
 17c:	0d b4       	in	r0, 0x2d	; 45
 17e:	07 fe       	sbrs	r0, 7
 180:	fd cf       	rjmp	.-6      	; 0x17c <Transmit_SPI_Master+0x8>
   SPDR = 0xFF & Data;
 182:	8e bd       	out	0x2e, r24	; 46
   while (!(SPSR & (1<<SPIF)));
 184:	0d b4       	in	r0, 0x2d	; 45
 186:	07 fe       	sbrs	r0, 7
 188:	fd cf       	rjmp	.-6      	; 0x184 <Transmit_SPI_Master+0x10>
   PORTB |= 1 << SS;						//Turn off slave select
 18a:	2a 9a       	sbi	0x05, 2	; 5
 18c:	08 95       	ret

0000018e <volts_to_bits>:
      _delay_ms(1);

}

// converts input voltage between 0-5V to 12bit number for DAC
uint16_t volts_to_bits(double voltage){
 18e:	cf 92       	push	r12
 190:	df 92       	push	r13
 192:	ef 92       	push	r14
 194:	ff 92       	push	r15
   double bits = ((voltage/5.0)*4095);
 196:	20 e0       	ldi	r18, 0x00	; 0
 198:	30 e0       	ldi	r19, 0x00	; 0
 19a:	40 ea       	ldi	r20, 0xA0	; 160
 19c:	50 e4       	ldi	r21, 0x40	; 64
 19e:	0e 94 a6 04 	call	0x94c	; 0x94c <__divsf3>
 1a2:	20 e0       	ldi	r18, 0x00	; 0
 1a4:	30 ef       	ldi	r19, 0xF0	; 240
 1a6:	4f e7       	ldi	r20, 0x7F	; 127
 1a8:	55 e4       	ldi	r21, 0x45	; 69
 1aa:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <__mulsf3>
 1ae:	6b 01       	movw	r12, r22
 1b0:	7c 01       	movw	r14, r24
   if(bits>4095)
 1b2:	20 e0       	ldi	r18, 0x00	; 0
 1b4:	30 ef       	ldi	r19, 0xF0	; 240
 1b6:	4f e7       	ldi	r20, 0x7F	; 127
 1b8:	55 e4       	ldi	r21, 0x45	; 69
 1ba:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <__gesf2>
 1be:	18 16       	cp	r1, r24
 1c0:	34 f0       	brlt	.+12     	; 0x1ce <volts_to_bits+0x40>
		return 4095;
	else
	 return bits;                  // return 12bit equivalent for DAC
 1c2:	c7 01       	movw	r24, r14
 1c4:	b6 01       	movw	r22, r12
 1c6:	0e 94 1f 05 	call	0xa3e	; 0xa3e <__fixunssfsi>
 1ca:	cb 01       	movw	r24, r22
 1cc:	02 c0       	rjmp	.+4      	; 0x1d2 <volts_to_bits+0x44>

// converts input voltage between 0-5V to 12bit number for DAC
uint16_t volts_to_bits(double voltage){
   double bits = ((voltage/5.0)*4095);
   if(bits>4095)
		return 4095;
 1ce:	8f ef       	ldi	r24, 0xFF	; 255
 1d0:	9f e0       	ldi	r25, 0x0F	; 15
	else
	 return bits;                  // return 12bit equivalent for DAC
}
 1d2:	ff 90       	pop	r15
 1d4:	ef 90       	pop	r14
 1d6:	df 90       	pop	r13
 1d8:	cf 90       	pop	r12
 1da:	08 95       	ret

000001dc <cycleFreq>:
   sampleDivider++;
   sampleDivider %= 3;
}

void cycleFreq() {
   if (overflow0 == OVERFLOW_100HZ){
 1dc:	80 91 03 01 	lds	r24, 0x0103
 1e0:	87 38       	cpi	r24, 0x87	; 135
 1e2:	51 f4       	brne	.+20     	; 0x1f8 <cycleFreq+0x1c>
      sampleDivider = 1;
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	90 93 01 01 	sts	0x0101, r25
 1ec:	80 93 00 01 	sts	0x0100, r24
      overflow0 = OVERFLOW_200HZ;
 1f0:	83 e4       	ldi	r24, 0x43	; 67
 1f2:	80 93 03 01 	sts	0x0103, r24
 1f6:	21 c0       	rjmp	.+66     	; 0x23a <cycleFreq+0x5e>
   }
   else if (overflow0 == OVERFLOW_200HZ) {
 1f8:	83 34       	cpi	r24, 0x43	; 67
 1fa:	51 f4       	brne	.+20     	; 0x210 <cycleFreq+0x34>
      sampleDivider = 2;
 1fc:	82 e0       	ldi	r24, 0x02	; 2
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	90 93 01 01 	sts	0x0101, r25
 204:	80 93 00 01 	sts	0x0100, r24
      overflow0 = OVERFLOW_300HZ;
 208:	8a e5       	ldi	r24, 0x5A	; 90
 20a:	80 93 03 01 	sts	0x0103, r24
 20e:	15 c0       	rjmp	.+42     	; 0x23a <cycleFreq+0x5e>
   }
   else if (overflow0 == OVERFLOW_300HZ) {
 210:	8a 35       	cpi	r24, 0x5A	; 90
 212:	51 f4       	brne	.+20     	; 0x228 <cycleFreq+0x4c>
      sampleDivider = 2;
 214:	82 e0       	ldi	r24, 0x02	; 2
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	90 93 01 01 	sts	0x0101, r25
 21c:	80 93 00 01 	sts	0x0100, r24
      overflow0 = OVERFLOW_400HZ;
 220:	83 e4       	ldi	r24, 0x43	; 67
 222:	80 93 03 01 	sts	0x0103, r24
 226:	09 c0       	rjmp	.+18     	; 0x23a <cycleFreq+0x5e>
   else if (overflow0 == OVERFLOW_400HZ) {
      sampleDivider = 2;
      overflow0 = OVERFLOW_500HZ;
   }
   else{
      sampleDivider = 1;
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	90 93 01 01 	sts	0x0101, r25
 230:	80 93 00 01 	sts	0x0100, r24
      overflow0 = OVERFLOW_100HZ;
 234:	87 e8       	ldi	r24, 0x87	; 135
 236:	80 93 03 01 	sts	0x0103, r24
   }
   OCR0A = overflow0;
 23a:	80 91 03 01 	lds	r24, 0x0103
 23e:	87 bd       	out	0x27, r24	; 39
 240:	08 95       	ret

00000242 <main>:
uint8_t overflow2 = 63;	// set overflow value for button checking
uint16_t voltage = 0;

int main(void)
{
	num_samples = NUM_SAMPS;
 242:	82 e9       	ldi	r24, 0x92	; 146
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	90 93 21 01 	sts	0x0121, r25
 24a:	80 93 20 01 	sts	0x0120, r24
	
   // initialize GPIO, interrupts, and timers
   GPIO_Initialization();
 24e:	0e 94 88 00 	call	0x110	; 0x110 <GPIO_Initialization>
   
   // fill square, sawtooth, triangle, and sine wave LUTs
   initWaves();
 252:	0e 94 2a 04 	call	0x854	; 0x854 <initWaves>
   
   // enable interrupts
   sei();		
 256:	78 94       	sei
   
   // Stuck here forever
   while (1){
	   if(check_voltage() <= 51)
 258:	0e 94 9f 00 	call	0x13e	; 0x13e <check_voltage>
 25c:	c4 97       	sbiw	r24, 0x34	; 52
 25e:	10 f4       	brcc	.+4      	; 0x264 <main+0x22>
			PORTD |= (1<<LED2);
 260:	5a 9a       	sbi	0x0b, 2	; 11
 262:	2f c0       	rjmp	.+94     	; 0x2c2 <main+0x80>
		else if( check_voltage() > 51 && check_voltage() <= 102)
 264:	0e 94 9f 00 	call	0x13e	; 0x13e <check_voltage>
 268:	c4 97       	sbiw	r24, 0x34	; 52
 26a:	38 f0       	brcs	.+14     	; 0x27a <main+0x38>
 26c:	0e 94 9f 00 	call	0x13e	; 0x13e <check_voltage>
 270:	87 36       	cpi	r24, 0x67	; 103
 272:	91 05       	cpc	r25, r1
 274:	10 f4       	brcc	.+4      	; 0x27a <main+0x38>
			PORTD &= ~(1<<LED2);
 276:	5a 98       	cbi	0x0b, 2	; 11
 278:	24 c0       	rjmp	.+72     	; 0x2c2 <main+0x80>
		else if( check_voltage() > 102 && check_voltage() <= 153)
 27a:	0e 94 9f 00 	call	0x13e	; 0x13e <check_voltage>
 27e:	87 36       	cpi	r24, 0x67	; 103
 280:	91 05       	cpc	r25, r1
 282:	38 f0       	brcs	.+14     	; 0x292 <main+0x50>
 284:	0e 94 9f 00 	call	0x13e	; 0x13e <check_voltage>
 288:	8a 39       	cpi	r24, 0x9A	; 154
 28a:	91 05       	cpc	r25, r1
 28c:	10 f4       	brcc	.+4      	; 0x292 <main+0x50>
			PORTD |= (1<<LED2);
 28e:	5a 9a       	sbi	0x0b, 2	; 11
 290:	18 c0       	rjmp	.+48     	; 0x2c2 <main+0x80>
		else if( check_voltage() > 153 && check_voltage() <= 204)
 292:	0e 94 9f 00 	call	0x13e	; 0x13e <check_voltage>
 296:	8a 39       	cpi	r24, 0x9A	; 154
 298:	91 05       	cpc	r25, r1
 29a:	38 f0       	brcs	.+14     	; 0x2aa <main+0x68>
 29c:	0e 94 9f 00 	call	0x13e	; 0x13e <check_voltage>
 2a0:	8d 3c       	cpi	r24, 0xCD	; 205
 2a2:	91 05       	cpc	r25, r1
 2a4:	10 f4       	brcc	.+4      	; 0x2aa <main+0x68>
			PORTD &= ~(1<<LED2);
 2a6:	5a 98       	cbi	0x0b, 2	; 11
 2a8:	0c c0       	rjmp	.+24     	; 0x2c2 <main+0x80>
		else if( check_voltage() > 204 && check_voltage() <= 255)
 2aa:	0e 94 9f 00 	call	0x13e	; 0x13e <check_voltage>
 2ae:	8d 3c       	cpi	r24, 0xCD	; 205
 2b0:	91 05       	cpc	r25, r1
 2b2:	38 f0       	brcs	.+14     	; 0x2c2 <main+0x80>
 2b4:	0e 94 9f 00 	call	0x13e	; 0x13e <check_voltage>
 2b8:	8f 3f       	cpi	r24, 0xFF	; 255
 2ba:	91 05       	cpc	r25, r1
 2bc:	09 f0       	breq	.+2      	; 0x2c0 <main+0x7e>
 2be:	08 f4       	brcc	.+2      	; 0x2c2 <main+0x80>
			PORTD |= (1<<LED2);
 2c0:	5a 9a       	sbi	0x0b, 2	; 11
			
		if(check_switch())
 2c2:	0e 94 9c 00 	call	0x138	; 0x138 <check_switch>
 2c6:	88 23       	and	r24, r24
 2c8:	11 f0       	breq	.+4      	; 0x2ce <main+0x8c>
			PORTD |= (1<<LED3);
 2ca:	5b 9a       	sbi	0x0b, 3	; 11
 2cc:	c5 cf       	rjmp	.-118    	; 0x258 <main+0x16>
		else 
			PORTD &= ~(1<<LED3);	
 2ce:	5b 98       	cbi	0x0b, 3	; 11
 2d0:	c3 cf       	rjmp	.-122    	; 0x258 <main+0x16>

000002d2 <__vector_14>:
}

///////////////////////////////////ISR/////////////////////////////////////////

// ISR to increment through wave function LUTs and set frequency
ISR(TIMER0_COMPA_vect){
 2d2:	1f 92       	push	r1
 2d4:	0f 92       	push	r0
 2d6:	0f b6       	in	r0, 0x3f	; 63
 2d8:	0f 92       	push	r0
 2da:	11 24       	eor	r1, r1
 2dc:	2f 93       	push	r18
 2de:	3f 93       	push	r19
 2e0:	4f 93       	push	r20
 2e2:	5f 93       	push	r21
 2e4:	6f 93       	push	r22
 2e6:	7f 93       	push	r23
 2e8:	8f 93       	push	r24
 2ea:	9f 93       	push	r25
 2ec:	af 93       	push	r26
 2ee:	bf 93       	push	r27
 2f0:	ef 93       	push	r30
 2f2:	ff 93       	push	r31
   Transmit_SPI_Master(nextWavePoint());
 2f4:	0e 94 52 02 	call	0x4a4	; 0x4a4 <nextWavePoint>
 2f8:	0e 94 ba 00 	call	0x174	; 0x174 <Transmit_SPI_Master>
   //PORTD |= (1<<LED2);
 
}
 2fc:	ff 91       	pop	r31
 2fe:	ef 91       	pop	r30
 300:	bf 91       	pop	r27
 302:	af 91       	pop	r26
 304:	9f 91       	pop	r25
 306:	8f 91       	pop	r24
 308:	7f 91       	pop	r23
 30a:	6f 91       	pop	r22
 30c:	5f 91       	pop	r21
 30e:	4f 91       	pop	r20
 310:	3f 91       	pop	r19
 312:	2f 91       	pop	r18
 314:	0f 90       	pop	r0
 316:	0f be       	out	0x3f, r0	; 63
 318:	0f 90       	pop	r0
 31a:	1f 90       	pop	r1
 31c:	18 95       	reti

0000031e <__vector_7>:

ISR(TIMER2_COMPA_vect){
 31e:	1f 92       	push	r1
 320:	0f 92       	push	r0
 322:	0f b6       	in	r0, 0x3f	; 63
 324:	0f 92       	push	r0
 326:	11 24       	eor	r1, r1
 328:	2f 93       	push	r18
 32a:	3f 93       	push	r19
 32c:	4f 93       	push	r20
 32e:	5f 93       	push	r21
 330:	6f 93       	push	r22
 332:	7f 93       	push	r23
 334:	8f 93       	push	r24
 336:	9f 93       	push	r25
 338:	af 93       	push	r26
 33a:	bf 93       	push	r27
 33c:	ef 93       	push	r30
 33e:	ff 93       	push	r31
   if (!(PIND & 1 << BTN0))
 340:	4f 99       	sbic	0x09, 7	; 9
 342:	0a c0       	rjmp	.+20     	; 0x358 <__vector_7+0x3a>
      btn0++;
 344:	80 91 1c 01 	lds	r24, 0x011C
 348:	90 91 1d 01 	lds	r25, 0x011D
 34c:	01 96       	adiw	r24, 0x01	; 1
 34e:	90 93 1d 01 	sts	0x011D, r25
 352:	80 93 1c 01 	sts	0x011C, r24
 356:	08 c0       	rjmp	.+16     	; 0x368 <__vector_7+0x4a>
   else
      btn0 = was0Pressed = 0;
 358:	10 92 17 01 	sts	0x0117, r1
 35c:	10 92 16 01 	sts	0x0116, r1
 360:	10 92 1d 01 	sts	0x011D, r1
 364:	10 92 1c 01 	sts	0x011C, r1
   
   if (!(PIND & 1 << BTN1))
 368:	4e 99       	sbic	0x09, 6	; 9
 36a:	0a c0       	rjmp	.+20     	; 0x380 <__vector_7+0x62>
      btn1++;
 36c:	80 91 1a 01 	lds	r24, 0x011A
 370:	90 91 1b 01 	lds	r25, 0x011B
 374:	01 96       	adiw	r24, 0x01	; 1
 376:	90 93 1b 01 	sts	0x011B, r25
 37a:	80 93 1a 01 	sts	0x011A, r24
 37e:	08 c0       	rjmp	.+16     	; 0x390 <__vector_7+0x72>
   else
      btn1 = was1Pressed = 0;
 380:	10 92 15 01 	sts	0x0115, r1
 384:	10 92 14 01 	sts	0x0114, r1
 388:	10 92 1b 01 	sts	0x011B, r1
 38c:	10 92 1a 01 	sts	0x011A, r1
   
   if (!(PIND & 1 << BTN2))
 390:	4d 99       	sbic	0x09, 5	; 9
 392:	0a c0       	rjmp	.+20     	; 0x3a8 <__vector_7+0x8a>
      btn2++;
 394:	80 91 18 01 	lds	r24, 0x0118
 398:	90 91 19 01 	lds	r25, 0x0119
 39c:	01 96       	adiw	r24, 0x01	; 1
 39e:	90 93 19 01 	sts	0x0119, r25
 3a2:	80 93 18 01 	sts	0x0118, r24
 3a6:	08 c0       	rjmp	.+16     	; 0x3b8 <__vector_7+0x9a>
   else
      btn2 = was2Pressed = 0;
 3a8:	10 92 13 01 	sts	0x0113, r1
 3ac:	10 92 12 01 	sts	0x0112, r1
 3b0:	10 92 19 01 	sts	0x0119, r1
 3b4:	10 92 18 01 	sts	0x0118, r1
   
   if(btn0 >= DEBOUNCE) {
 3b8:	80 91 1c 01 	lds	r24, 0x011C
 3bc:	90 91 1d 01 	lds	r25, 0x011D
 3c0:	0a 97       	sbiw	r24, 0x0a	; 10
 3c2:	94 f0       	brlt	.+36     	; 0x3e8 <__vector_7+0xca>
      if (!was0Pressed)
 3c4:	80 91 16 01 	lds	r24, 0x0116
 3c8:	90 91 17 01 	lds	r25, 0x0117
 3cc:	89 2b       	or	r24, r25
 3ce:	11 f4       	brne	.+4      	; 0x3d4 <__vector_7+0xb6>
         nextWave();
 3d0:	0e 94 35 02 	call	0x46a	; 0x46a <nextWave>
      btn0 = 0;
 3d4:	10 92 1d 01 	sts	0x011D, r1
 3d8:	10 92 1c 01 	sts	0x011C, r1
      was0Pressed = 1;
 3dc:	81 e0       	ldi	r24, 0x01	; 1
 3de:	90 e0       	ldi	r25, 0x00	; 0
 3e0:	90 93 17 01 	sts	0x0117, r25
 3e4:	80 93 16 01 	sts	0x0116, r24
   }
   
   if(btn1 >= DEBOUNCE) {
 3e8:	80 91 1a 01 	lds	r24, 0x011A
 3ec:	90 91 1b 01 	lds	r25, 0x011B
 3f0:	0a 97       	sbiw	r24, 0x0a	; 10
 3f2:	94 f0       	brlt	.+36     	; 0x418 <__vector_7+0xfa>
      if (!was1Pressed) {
 3f4:	80 91 14 01 	lds	r24, 0x0114
 3f8:	90 91 15 01 	lds	r25, 0x0115
 3fc:	89 2b       	or	r24, r25
 3fe:	11 f4       	brne	.+4      	; 0x404 <__vector_7+0xe6>
         //PORTD &= ~(1<<LED3);
         cycleFreq();
 400:	0e 94 ee 00 	call	0x1dc	; 0x1dc <cycleFreq>
      }
      btn1 = 0;
 404:	10 92 1b 01 	sts	0x011B, r1
 408:	10 92 1a 01 	sts	0x011A, r1
      was1Pressed = 1;
 40c:	81 e0       	ldi	r24, 0x01	; 1
 40e:	90 e0       	ldi	r25, 0x00	; 0
 410:	90 93 15 01 	sts	0x0115, r25
 414:	80 93 14 01 	sts	0x0114, r24
   }
   
   if(btn2 >= DEBOUNCE) {
 418:	80 91 18 01 	lds	r24, 0x0118
 41c:	90 91 19 01 	lds	r25, 0x0119
 420:	0a 97       	sbiw	r24, 0x0a	; 10
 422:	94 f0       	brlt	.+36     	; 0x448 <__vector_7+0x12a>
      if (!was2Pressed) {
 424:	80 91 12 01 	lds	r24, 0x0112
 428:	90 91 13 01 	lds	r25, 0x0113
 42c:	89 2b       	or	r24, r25
 42e:	11 f4       	brne	.+4      	; 0x434 <__vector_7+0x116>
         cycleDuty();
 430:	0e 94 dd 02 	call	0x5ba	; 0x5ba <cycleDuty>
      }
	  //PORTD |= (1<<LED3);
      btn2 = 0;
 434:	10 92 19 01 	sts	0x0119, r1
 438:	10 92 18 01 	sts	0x0118, r1
      was2Pressed = 1;
 43c:	81 e0       	ldi	r24, 0x01	; 1
 43e:	90 e0       	ldi	r25, 0x00	; 0
 440:	90 93 13 01 	sts	0x0113, r25
 444:	80 93 12 01 	sts	0x0112, r24
   }
  
}
 448:	ff 91       	pop	r31
 44a:	ef 91       	pop	r30
 44c:	bf 91       	pop	r27
 44e:	af 91       	pop	r26
 450:	9f 91       	pop	r25
 452:	8f 91       	pop	r24
 454:	7f 91       	pop	r23
 456:	6f 91       	pop	r22
 458:	5f 91       	pop	r21
 45a:	4f 91       	pop	r20
 45c:	3f 91       	pop	r19
 45e:	2f 91       	pop	r18
 460:	0f 90       	pop	r0
 462:	0f be       	out	0x3f, r0	; 63
 464:	0f 90       	pop	r0
 466:	1f 90       	pop	r1
 468:	18 95       	reti

0000046a <nextWave>:

void nextWave() {
   static int waveNdx = 0;
   static uint16_t* waves[NUM_WAVES] = {SquareWave, TriWave, SawWave, SinWave};
   
   waveNdx++;
 46a:	80 91 1e 01 	lds	r24, 0x011E
 46e:	90 91 1f 01 	lds	r25, 0x011F
 472:	01 96       	adiw	r24, 0x01	; 1
   waveNdx %= NUM_WAVES;
 474:	83 70       	andi	r24, 0x03	; 3
 476:	90 78       	andi	r25, 0x80	; 128
 478:	99 23       	and	r25, r25
 47a:	24 f4       	brge	.+8      	; 0x484 <nextWave+0x1a>
 47c:	01 97       	sbiw	r24, 0x01	; 1
 47e:	8c 6f       	ori	r24, 0xFC	; 252
 480:	9f 6f       	ori	r25, 0xFF	; 255
 482:	01 96       	adiw	r24, 0x01	; 1
 484:	90 93 1f 01 	sts	0x011F, r25
 488:	80 93 1e 01 	sts	0x011E, r24
   
   Wave = waves[waveNdx];
 48c:	88 0f       	add	r24, r24
 48e:	99 1f       	adc	r25, r25
 490:	fc 01       	movw	r30, r24
 492:	e8 5f       	subi	r30, 0xF8	; 248
 494:	fe 4f       	sbci	r31, 0xFE	; 254
 496:	80 81       	ld	r24, Z
 498:	91 81       	ldd	r25, Z+1	; 0x01
 49a:	90 93 b3 05 	sts	0x05B3, r25
 49e:	80 93 b2 05 	sts	0x05B2, r24
 4a2:	08 95       	ret

000004a4 <nextWavePoint>:
}

uint16_t nextWavePoint() {
   static int ndx = -1;
   
   ndx += sampleDivider;
 4a4:	20 91 04 01 	lds	r18, 0x0104
 4a8:	30 91 05 01 	lds	r19, 0x0105
 4ac:	80 91 00 01 	lds	r24, 0x0100
 4b0:	90 91 01 01 	lds	r25, 0x0101
 4b4:	82 0f       	add	r24, r18
 4b6:	93 1f       	adc	r25, r19
   ndx %= NUM_SAMPS;
 4b8:	62 e9       	ldi	r22, 0x92	; 146
 4ba:	70 e0       	ldi	r23, 0x00	; 0
 4bc:	0e 94 02 07 	call	0xe04	; 0xe04 <__divmodhi4>
 4c0:	90 93 05 01 	sts	0x0105, r25
 4c4:	80 93 04 01 	sts	0x0104, r24
   
   return Wave[ndx];
 4c8:	88 0f       	add	r24, r24
 4ca:	99 1f       	adc	r25, r25
 4cc:	e0 91 b2 05 	lds	r30, 0x05B2
 4d0:	f0 91 b3 05 	lds	r31, 0x05B3
 4d4:	e8 0f       	add	r30, r24
 4d6:	f9 1f       	adc	r31, r25
}
 4d8:	80 81       	ld	r24, Z
 4da:	91 81       	ldd	r25, Z+1	; 0x01
 4dc:	08 95       	ret

000004de <make_square_LUT>:
   dutyCycle += 10;
   dutyCycle %= 110;
   make_square_LUT();
}

void make_square_LUT(){
 4de:	cf 92       	push	r12
 4e0:	df 92       	push	r13
 4e2:	ef 92       	push	r14
 4e4:	ff 92       	push	r15
 4e6:	0f 93       	push	r16
 4e8:	1f 93       	push	r17
 4ea:	cf 93       	push	r28
 4ec:	df 93       	push	r29
   int i;
   int duty = num_samples * (double) dutyCycle/100;
 4ee:	60 91 20 01 	lds	r22, 0x0120
 4f2:	70 91 21 01 	lds	r23, 0x0121
 4f6:	07 2e       	mov	r0, r23
 4f8:	00 0c       	add	r0, r0
 4fa:	88 0b       	sbc	r24, r24
 4fc:	99 0b       	sbc	r25, r25
 4fe:	0e 94 50 05 	call	0xaa0	; 0xaa0 <__floatsisf>
 502:	6b 01       	movw	r12, r22
 504:	7c 01       	movw	r14, r24
 506:	80 91 06 01 	lds	r24, 0x0106
 50a:	90 91 07 01 	lds	r25, 0x0107
 50e:	bc 01       	movw	r22, r24
 510:	99 0f       	add	r25, r25
 512:	88 0b       	sbc	r24, r24
 514:	99 0b       	sbc	r25, r25
 516:	0e 94 50 05 	call	0xaa0	; 0xaa0 <__floatsisf>
 51a:	9b 01       	movw	r18, r22
 51c:	ac 01       	movw	r20, r24
 51e:	c7 01       	movw	r24, r14
 520:	b6 01       	movw	r22, r12
 522:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <__mulsf3>
 526:	20 e0       	ldi	r18, 0x00	; 0
 528:	30 e0       	ldi	r19, 0x00	; 0
 52a:	48 ec       	ldi	r20, 0xC8	; 200
 52c:	52 e4       	ldi	r21, 0x42	; 66
 52e:	0e 94 a6 04 	call	0x94c	; 0x94c <__divsf3>
 532:	0e 94 18 05 	call	0xa30	; 0xa30 <__fixsfsi>
 536:	eb 01       	movw	r28, r22
   
   for (i = 0; i < duty; i++)
 538:	1c 16       	cp	r1, r28
 53a:	1d 06       	cpc	r1, r29
 53c:	b4 f4       	brge	.+44     	; 0x56a <make_square_LUT+0x8c>
 53e:	0e e8       	ldi	r16, 0x8E	; 142
 540:	14 e0       	ldi	r17, 0x04	; 4
 542:	66 0f       	add	r22, r22
 544:	77 1f       	adc	r23, r23
 546:	cb 01       	movw	r24, r22
 548:	82 57       	subi	r24, 0x72	; 114
 54a:	9b 4f       	sbci	r25, 0xFB	; 251
 54c:	7c 01       	movw	r14, r24
      SquareWave[i] = volts_to_bits(MAX_VOLTAGE);
 54e:	60 e0       	ldi	r22, 0x00	; 0
 550:	70 e0       	ldi	r23, 0x00	; 0
 552:	80 ea       	ldi	r24, 0xA0	; 160
 554:	90 e4       	ldi	r25, 0x40	; 64
 556:	0e 94 c7 00 	call	0x18e	; 0x18e <volts_to_bits>
 55a:	f8 01       	movw	r30, r16
 55c:	81 93       	st	Z+, r24
 55e:	91 93       	st	Z+, r25
 560:	8f 01       	movw	r16, r30

void make_square_LUT(){
   int i;
   int duty = num_samples * (double) dutyCycle/100;
   
   for (i = 0; i < duty; i++)
 562:	ee 15       	cp	r30, r14
 564:	ff 05       	cpc	r31, r15
 566:	99 f7       	brne	.-26     	; 0x54e <make_square_LUT+0x70>
 568:	02 c0       	rjmp	.+4      	; 0x56e <make_square_LUT+0x90>
 56a:	c0 e0       	ldi	r28, 0x00	; 0
 56c:	d0 e0       	ldi	r29, 0x00	; 0
      SquareWave[i] = volts_to_bits(MAX_VOLTAGE);
   
   for ( ; i < num_samples ; i++)
 56e:	80 91 20 01 	lds	r24, 0x0120
 572:	90 91 21 01 	lds	r25, 0x0121
 576:	c8 17       	cp	r28, r24
 578:	d9 07       	cpc	r29, r25
 57a:	b4 f4       	brge	.+44     	; 0x5a8 <make_square_LUT+0xca>
 57c:	8e 01       	movw	r16, r28
 57e:	00 0f       	add	r16, r16
 580:	11 1f       	adc	r17, r17
 582:	02 57       	subi	r16, 0x72	; 114
 584:	1b 4f       	sbci	r17, 0xFB	; 251
      SquareWave[i] = volts_to_bits(MIN_VOLTAGE);
 586:	60 e0       	ldi	r22, 0x00	; 0
 588:	70 e0       	ldi	r23, 0x00	; 0
 58a:	cb 01       	movw	r24, r22
 58c:	0e 94 c7 00 	call	0x18e	; 0x18e <volts_to_bits>
 590:	f8 01       	movw	r30, r16
 592:	81 93       	st	Z+, r24
 594:	91 93       	st	Z+, r25
 596:	8f 01       	movw	r16, r30
   int duty = num_samples * (double) dutyCycle/100;
   
   for (i = 0; i < duty; i++)
      SquareWave[i] = volts_to_bits(MAX_VOLTAGE);
   
   for ( ; i < num_samples ; i++)
 598:	21 96       	adiw	r28, 0x01	; 1
 59a:	80 91 20 01 	lds	r24, 0x0120
 59e:	90 91 21 01 	lds	r25, 0x0121
 5a2:	c8 17       	cp	r28, r24
 5a4:	d9 07       	cpc	r29, r25
 5a6:	7c f3       	brlt	.-34     	; 0x586 <make_square_LUT+0xa8>
      SquareWave[i] = volts_to_bits(MIN_VOLTAGE);
}
 5a8:	df 91       	pop	r29
 5aa:	cf 91       	pop	r28
 5ac:	1f 91       	pop	r17
 5ae:	0f 91       	pop	r16
 5b0:	ff 90       	pop	r15
 5b2:	ef 90       	pop	r14
 5b4:	df 90       	pop	r13
 5b6:	cf 90       	pop	r12
 5b8:	08 95       	ret

000005ba <cycleDuty>:
   
   return Wave[ndx];
}

void cycleDuty() {
   dutyCycle += 10;
 5ba:	80 91 06 01 	lds	r24, 0x0106
 5be:	90 91 07 01 	lds	r25, 0x0107
 5c2:	0a 96       	adiw	r24, 0x0a	; 10
   dutyCycle %= 110;
 5c4:	6e e6       	ldi	r22, 0x6E	; 110
 5c6:	70 e0       	ldi	r23, 0x00	; 0
 5c8:	0e 94 02 07 	call	0xe04	; 0xe04 <__divmodhi4>
 5cc:	90 93 07 01 	sts	0x0107, r25
 5d0:	80 93 06 01 	sts	0x0106, r24
   make_square_LUT();
 5d4:	0e 94 6f 02 	call	0x4de	; 0x4de <make_square_LUT>
 5d8:	08 95       	ret

000005da <make_triangle_LUT>:
   
   for ( ; i < num_samples ; i++)
      SquareWave[i] = volts_to_bits(MIN_VOLTAGE);
}

void make_triangle_LUT(){
 5da:	4f 92       	push	r4
 5dc:	5f 92       	push	r5
 5de:	6f 92       	push	r6
 5e0:	7f 92       	push	r7
 5e2:	af 92       	push	r10
 5e4:	bf 92       	push	r11
 5e6:	cf 92       	push	r12
 5e8:	df 92       	push	r13
 5ea:	ef 92       	push	r14
 5ec:	ff 92       	push	r15
 5ee:	0f 93       	push	r16
 5f0:	1f 93       	push	r17
 5f2:	cf 93       	push	r28
 5f4:	df 93       	push	r29
   int i;
   int peak = num_samples / 2;
 5f6:	a0 90 20 01 	lds	r10, 0x0120
 5fa:	b0 90 21 01 	lds	r11, 0x0121
 5fe:	bb 20       	and	r11, r11
 600:	1c f4       	brge	.+6      	; 0x608 <make_triangle_LUT+0x2e>
 602:	2f ef       	ldi	r18, 0xFF	; 255
 604:	a2 1a       	sub	r10, r18
 606:	b2 0a       	sbc	r11, r18
 608:	b5 94       	asr	r11
 60a:	a7 94       	ror	r10
   double increment = ((double) MAX_VOLTAGE - MIN_VOLTAGE) / peak;
 60c:	b5 01       	movw	r22, r10
 60e:	0b 2c       	mov	r0, r11
 610:	00 0c       	add	r0, r0
 612:	88 0b       	sbc	r24, r24
 614:	99 0b       	sbc	r25, r25
 616:	0e 94 50 05 	call	0xaa0	; 0xaa0 <__floatsisf>
 61a:	9b 01       	movw	r18, r22
 61c:	ac 01       	movw	r20, r24
 61e:	60 e0       	ldi	r22, 0x00	; 0
 620:	70 e0       	ldi	r23, 0x00	; 0
 622:	80 ea       	ldi	r24, 0xA0	; 160
 624:	90 e4       	ldi	r25, 0x40	; 64
 626:	0e 94 a6 04 	call	0x94c	; 0x94c <__divsf3>
 62a:	2b 01       	movw	r4, r22
 62c:	3c 01       	movw	r6, r24
   double voltage = MIN_VOLTAGE - increment;
 62e:	9b 01       	movw	r18, r22
 630:	ac 01       	movw	r20, r24
 632:	60 e0       	ldi	r22, 0x00	; 0
 634:	70 e0       	ldi	r23, 0x00	; 0
 636:	cb 01       	movw	r24, r22
 638:	0e 94 39 04 	call	0x872	; 0x872 <__subsf3>
 63c:	6b 01       	movw	r12, r22
 63e:	7c 01       	movw	r14, r24
   
   for (i = 0; i < (peak + 1); i++)
 640:	e5 01       	movw	r28, r10
 642:	21 96       	adiw	r28, 0x01	; 1
 644:	1c 16       	cp	r1, r28
 646:	1d 06       	cpc	r1, r29
 648:	dc f4       	brge	.+54     	; 0x680 <make_triangle_LUT+0xa6>
 64a:	0a e6       	ldi	r16, 0x6A	; 106
 64c:	13 e0       	ldi	r17, 0x03	; 3
 64e:	c5 01       	movw	r24, r10
 650:	88 0f       	add	r24, r24
 652:	99 1f       	adc	r25, r25
 654:	fc 01       	movw	r30, r24
 656:	e4 59       	subi	r30, 0x94	; 148
 658:	fc 4f       	sbci	r31, 0xFC	; 252
 65a:	5f 01       	movw	r10, r30
      TriWave[i] = volts_to_bits(voltage += increment);
 65c:	a3 01       	movw	r20, r6
 65e:	92 01       	movw	r18, r4
 660:	c7 01       	movw	r24, r14
 662:	b6 01       	movw	r22, r12
 664:	0e 94 3a 04 	call	0x874	; 0x874 <__addsf3>
 668:	6b 01       	movw	r12, r22
 66a:	7c 01       	movw	r14, r24
 66c:	0e 94 c7 00 	call	0x18e	; 0x18e <volts_to_bits>
 670:	f8 01       	movw	r30, r16
 672:	81 93       	st	Z+, r24
 674:	91 93       	st	Z+, r25
 676:	8f 01       	movw	r16, r30
   int i;
   int peak = num_samples / 2;
   double increment = ((double) MAX_VOLTAGE - MIN_VOLTAGE) / peak;
   double voltage = MIN_VOLTAGE - increment;
   
   for (i = 0; i < (peak + 1); i++)
 678:	ea 15       	cp	r30, r10
 67a:	fb 05       	cpc	r31, r11
 67c:	79 f7       	brne	.-34     	; 0x65c <make_triangle_LUT+0x82>
 67e:	02 c0       	rjmp	.+4      	; 0x684 <make_triangle_LUT+0xaa>
 680:	c0 e0       	ldi	r28, 0x00	; 0
 682:	d0 e0       	ldi	r29, 0x00	; 0
      TriWave[i] = volts_to_bits(voltage += increment);
   
   for ( ; i < (num_samples - 1); i++)
 684:	80 91 20 01 	lds	r24, 0x0120
 688:	90 91 21 01 	lds	r25, 0x0121
 68c:	01 97       	sbiw	r24, 0x01	; 1
 68e:	c8 17       	cp	r28, r24
 690:	d9 07       	cpc	r29, r25
 692:	e4 f4       	brge	.+56     	; 0x6cc <make_triangle_LUT+0xf2>
 694:	8e 01       	movw	r16, r28
 696:	00 0f       	add	r16, r16
 698:	11 1f       	adc	r17, r17
 69a:	06 59       	subi	r16, 0x96	; 150
 69c:	1c 4f       	sbci	r17, 0xFC	; 252
      TriWave[i] = volts_to_bits(voltage -= increment);
 69e:	a3 01       	movw	r20, r6
 6a0:	92 01       	movw	r18, r4
 6a2:	c7 01       	movw	r24, r14
 6a4:	b6 01       	movw	r22, r12
 6a6:	0e 94 39 04 	call	0x872	; 0x872 <__subsf3>
 6aa:	6b 01       	movw	r12, r22
 6ac:	7c 01       	movw	r14, r24
 6ae:	0e 94 c7 00 	call	0x18e	; 0x18e <volts_to_bits>
 6b2:	f8 01       	movw	r30, r16
 6b4:	81 93       	st	Z+, r24
 6b6:	91 93       	st	Z+, r25
 6b8:	8f 01       	movw	r16, r30
   double voltage = MIN_VOLTAGE - increment;
   
   for (i = 0; i < (peak + 1); i++)
      TriWave[i] = volts_to_bits(voltage += increment);
   
   for ( ; i < (num_samples - 1); i++)
 6ba:	21 96       	adiw	r28, 0x01	; 1
 6bc:	80 91 20 01 	lds	r24, 0x0120
 6c0:	90 91 21 01 	lds	r25, 0x0121
 6c4:	01 97       	sbiw	r24, 0x01	; 1
 6c6:	c8 17       	cp	r28, r24
 6c8:	d9 07       	cpc	r29, r25
 6ca:	4c f3       	brlt	.-46     	; 0x69e <make_triangle_LUT+0xc4>
      TriWave[i] = volts_to_bits(voltage -= increment);
}
 6cc:	df 91       	pop	r29
 6ce:	cf 91       	pop	r28
 6d0:	1f 91       	pop	r17
 6d2:	0f 91       	pop	r16
 6d4:	ff 90       	pop	r15
 6d6:	ef 90       	pop	r14
 6d8:	df 90       	pop	r13
 6da:	cf 90       	pop	r12
 6dc:	bf 90       	pop	r11
 6de:	af 90       	pop	r10
 6e0:	7f 90       	pop	r7
 6e2:	6f 90       	pop	r6
 6e4:	5f 90       	pop	r5
 6e6:	4f 90       	pop	r4
 6e8:	08 95       	ret

000006ea <make_sawtooth_LUT>:

void make_sawtooth_LUT(){
 6ea:	8f 92       	push	r8
 6ec:	9f 92       	push	r9
 6ee:	af 92       	push	r10
 6f0:	bf 92       	push	r11
 6f2:	cf 92       	push	r12
 6f4:	df 92       	push	r13
 6f6:	ef 92       	push	r14
 6f8:	ff 92       	push	r15
 6fa:	0f 93       	push	r16
 6fc:	1f 93       	push	r17
 6fe:	cf 93       	push	r28
 700:	df 93       	push	r29
   int ndx;
   double increment = ((double) MAX_VOLTAGE - MIN_VOLTAGE) / (num_samples - 1);
 702:	c0 91 20 01 	lds	r28, 0x0120
 706:	d0 91 21 01 	lds	r29, 0x0121
 70a:	be 01       	movw	r22, r28
 70c:	61 50       	subi	r22, 0x01	; 1
 70e:	71 09       	sbc	r23, r1
 710:	07 2e       	mov	r0, r23
 712:	00 0c       	add	r0, r0
 714:	88 0b       	sbc	r24, r24
 716:	99 0b       	sbc	r25, r25
 718:	0e 94 50 05 	call	0xaa0	; 0xaa0 <__floatsisf>
 71c:	9b 01       	movw	r18, r22
 71e:	ac 01       	movw	r20, r24
 720:	60 e0       	ldi	r22, 0x00	; 0
 722:	70 e0       	ldi	r23, 0x00	; 0
 724:	80 ea       	ldi	r24, 0xA0	; 160
 726:	90 e4       	ldi	r25, 0x40	; 64
 728:	0e 94 a6 04 	call	0x94c	; 0x94c <__divsf3>
 72c:	4b 01       	movw	r8, r22
 72e:	5c 01       	movw	r10, r24
   double voltage = MIN_VOLTAGE -increment;
 730:	9b 01       	movw	r18, r22
 732:	ac 01       	movw	r20, r24
 734:	60 e0       	ldi	r22, 0x00	; 0
 736:	70 e0       	ldi	r23, 0x00	; 0
 738:	cb 01       	movw	r24, r22
 73a:	0e 94 39 04 	call	0x872	; 0x872 <__subsf3>
 73e:	6b 01       	movw	r12, r22
 740:	7c 01       	movw	r14, r24
   
   for (ndx = 0; ndx < num_samples; ndx++)
 742:	1c 16       	cp	r1, r28
 744:	1d 06       	cpc	r1, r29
 746:	d4 f4       	brge	.+52     	; 0x77c <make_sawtooth_LUT+0x92>
 748:	06 e4       	ldi	r16, 0x46	; 70
 74a:	12 e0       	ldi	r17, 0x02	; 2
 74c:	c0 e0       	ldi	r28, 0x00	; 0
 74e:	d0 e0       	ldi	r29, 0x00	; 0
      SawWave[ndx] = volts_to_bits(voltage += increment);
 750:	a5 01       	movw	r20, r10
 752:	94 01       	movw	r18, r8
 754:	c7 01       	movw	r24, r14
 756:	b6 01       	movw	r22, r12
 758:	0e 94 3a 04 	call	0x874	; 0x874 <__addsf3>
 75c:	6b 01       	movw	r12, r22
 75e:	7c 01       	movw	r14, r24
 760:	0e 94 c7 00 	call	0x18e	; 0x18e <volts_to_bits>
 764:	f8 01       	movw	r30, r16
 766:	81 93       	st	Z+, r24
 768:	91 93       	st	Z+, r25
 76a:	8f 01       	movw	r16, r30
void make_sawtooth_LUT(){
   int ndx;
   double increment = ((double) MAX_VOLTAGE - MIN_VOLTAGE) / (num_samples - 1);
   double voltage = MIN_VOLTAGE -increment;
   
   for (ndx = 0; ndx < num_samples; ndx++)
 76c:	21 96       	adiw	r28, 0x01	; 1
 76e:	80 91 20 01 	lds	r24, 0x0120
 772:	90 91 21 01 	lds	r25, 0x0121
 776:	c8 17       	cp	r28, r24
 778:	d9 07       	cpc	r29, r25
 77a:	54 f3       	brlt	.-44     	; 0x750 <make_sawtooth_LUT+0x66>
      SawWave[ndx] = volts_to_bits(voltage += increment);
}
 77c:	df 91       	pop	r29
 77e:	cf 91       	pop	r28
 780:	1f 91       	pop	r17
 782:	0f 91       	pop	r16
 784:	ff 90       	pop	r15
 786:	ef 90       	pop	r14
 788:	df 90       	pop	r13
 78a:	cf 90       	pop	r12
 78c:	bf 90       	pop	r11
 78e:	af 90       	pop	r10
 790:	9f 90       	pop	r9
 792:	8f 90       	pop	r8
 794:	08 95       	ret

00000796 <make_sin_LUT>:

void make_sin_LUT(){
 796:	8f 92       	push	r8
 798:	9f 92       	push	r9
 79a:	af 92       	push	r10
 79c:	bf 92       	push	r11
 79e:	cf 92       	push	r12
 7a0:	df 92       	push	r13
 7a2:	ef 92       	push	r14
 7a4:	ff 92       	push	r15
 7a6:	0f 93       	push	r16
 7a8:	1f 93       	push	r17
 7aa:	cf 93       	push	r28
 7ac:	df 93       	push	r29
   int ndx;
   double increment = 2 * M_PI / num_samples;
 7ae:	c0 91 20 01 	lds	r28, 0x0120
 7b2:	d0 91 21 01 	lds	r29, 0x0121
 7b6:	be 01       	movw	r22, r28
 7b8:	0d 2e       	mov	r0, r29
 7ba:	00 0c       	add	r0, r0
 7bc:	88 0b       	sbc	r24, r24
 7be:	99 0b       	sbc	r25, r25
 7c0:	0e 94 50 05 	call	0xaa0	; 0xaa0 <__floatsisf>
 7c4:	9b 01       	movw	r18, r22
 7c6:	ac 01       	movw	r20, r24
 7c8:	6b ed       	ldi	r22, 0xDB	; 219
 7ca:	7f e0       	ldi	r23, 0x0F	; 15
 7cc:	89 ec       	ldi	r24, 0xC9	; 201
 7ce:	90 e4       	ldi	r25, 0x40	; 64
 7d0:	0e 94 a6 04 	call	0x94c	; 0x94c <__divsf3>
 7d4:	4b 01       	movw	r8, r22
 7d6:	5c 01       	movw	r10, r24
   double rad = -increment;
 7d8:	6b 01       	movw	r12, r22
 7da:	7c 01       	movw	r14, r24
 7dc:	f7 fa       	bst	r15, 7
 7de:	f0 94       	com	r15
 7e0:	f7 f8       	bld	r15, 7
 7e2:	f0 94       	com	r15
   double ampli = ((double) MAX_VOLTAGE - MIN_VOLTAGE) / 2;
   // The amplitude/2 is neccessary to compensate for sin()'s amplitude of 2
   double offset = MIN_VOLTAGE + ampli;
   
   for (ndx = 0; ndx < num_samples; ndx++)
 7e4:	1c 16       	cp	r1, r28
 7e6:	1d 06       	cpc	r1, r29
 7e8:	44 f5       	brge	.+80     	; 0x83a <make_sin_LUT+0xa4>
 7ea:	02 e2       	ldi	r16, 0x22	; 34
 7ec:	11 e0       	ldi	r17, 0x01	; 1
 7ee:	c0 e0       	ldi	r28, 0x00	; 0
 7f0:	d0 e0       	ldi	r29, 0x00	; 0
      SinWave[ndx] = volts_to_bits(ampli * sin(rad += increment) + offset);
 7f2:	a5 01       	movw	r20, r10
 7f4:	94 01       	movw	r18, r8
 7f6:	c7 01       	movw	r24, r14
 7f8:	b6 01       	movw	r22, r12
 7fa:	0e 94 3a 04 	call	0x874	; 0x874 <__addsf3>
 7fe:	6b 01       	movw	r12, r22
 800:	7c 01       	movw	r14, r24
 802:	0e 94 4e 06 	call	0xc9c	; 0xc9c <sin>
 806:	20 e0       	ldi	r18, 0x00	; 0
 808:	30 e0       	ldi	r19, 0x00	; 0
 80a:	40 e2       	ldi	r20, 0x20	; 32
 80c:	50 e4       	ldi	r21, 0x40	; 64
 80e:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <__mulsf3>
 812:	20 e0       	ldi	r18, 0x00	; 0
 814:	30 e0       	ldi	r19, 0x00	; 0
 816:	40 e2       	ldi	r20, 0x20	; 32
 818:	50 e4       	ldi	r21, 0x40	; 64
 81a:	0e 94 3a 04 	call	0x874	; 0x874 <__addsf3>
 81e:	0e 94 c7 00 	call	0x18e	; 0x18e <volts_to_bits>
 822:	f8 01       	movw	r30, r16
 824:	81 93       	st	Z+, r24
 826:	91 93       	st	Z+, r25
 828:	8f 01       	movw	r16, r30
   double rad = -increment;
   double ampli = ((double) MAX_VOLTAGE - MIN_VOLTAGE) / 2;
   // The amplitude/2 is neccessary to compensate for sin()'s amplitude of 2
   double offset = MIN_VOLTAGE + ampli;
   
   for (ndx = 0; ndx < num_samples; ndx++)
 82a:	21 96       	adiw	r28, 0x01	; 1
 82c:	80 91 20 01 	lds	r24, 0x0120
 830:	90 91 21 01 	lds	r25, 0x0121
 834:	c8 17       	cp	r28, r24
 836:	d9 07       	cpc	r29, r25
 838:	e4 f2       	brlt	.-72     	; 0x7f2 <make_sin_LUT+0x5c>
      SinWave[ndx] = volts_to_bits(ampli * sin(rad += increment) + offset);
 83a:	df 91       	pop	r29
 83c:	cf 91       	pop	r28
 83e:	1f 91       	pop	r17
 840:	0f 91       	pop	r16
 842:	ff 90       	pop	r15
 844:	ef 90       	pop	r14
 846:	df 90       	pop	r13
 848:	cf 90       	pop	r12
 84a:	bf 90       	pop	r11
 84c:	af 90       	pop	r10
 84e:	9f 90       	pop	r9
 850:	8f 90       	pop	r8
 852:	08 95       	ret

00000854 <initWaves>:
//   else
//      return bits;                  // return 12bit equivalent for DAC
//}

void initWaves() {
   make_square_LUT();
 854:	0e 94 6f 02 	call	0x4de	; 0x4de <make_square_LUT>
   make_triangle_LUT();
 858:	0e 94 ed 02 	call	0x5da	; 0x5da <make_triangle_LUT>
   make_sawtooth_LUT();
 85c:	0e 94 75 03 	call	0x6ea	; 0x6ea <make_sawtooth_LUT>
   make_sin_LUT();
 860:	0e 94 cb 03 	call	0x796	; 0x796 <make_sin_LUT>
   
   Wave = SquareWave;
 864:	8e e8       	ldi	r24, 0x8E	; 142
 866:	94 e0       	ldi	r25, 0x04	; 4
 868:	90 93 b3 05 	sts	0x05B3, r25
 86c:	80 93 b2 05 	sts	0x05B2, r24
 870:	08 95       	ret

00000872 <__subsf3>:
 872:	50 58       	subi	r21, 0x80	; 128

00000874 <__addsf3>:
 874:	bb 27       	eor	r27, r27
 876:	aa 27       	eor	r26, r26
 878:	0e 94 51 04 	call	0x8a2	; 0x8a2 <__addsf3x>
 87c:	0c 94 a2 05 	jmp	0xb44	; 0xb44 <__fp_round>
 880:	0e 94 94 05 	call	0xb28	; 0xb28 <__fp_pscA>
 884:	38 f0       	brcs	.+14     	; 0x894 <__addsf3+0x20>
 886:	0e 94 9b 05 	call	0xb36	; 0xb36 <__fp_pscB>
 88a:	20 f0       	brcs	.+8      	; 0x894 <__addsf3+0x20>
 88c:	39 f4       	brne	.+14     	; 0x89c <__addsf3+0x28>
 88e:	9f 3f       	cpi	r25, 0xFF	; 255
 890:	19 f4       	brne	.+6      	; 0x898 <__addsf3+0x24>
 892:	26 f4       	brtc	.+8      	; 0x89c <__addsf3+0x28>
 894:	0c 94 91 05 	jmp	0xb22	; 0xb22 <__fp_nan>
 898:	0e f4       	brtc	.+2      	; 0x89c <__addsf3+0x28>
 89a:	e0 95       	com	r30
 89c:	e7 fb       	bst	r30, 7
 89e:	0c 94 8b 05 	jmp	0xb16	; 0xb16 <__fp_inf>

000008a2 <__addsf3x>:
 8a2:	e9 2f       	mov	r30, r25
 8a4:	0e 94 b3 05 	call	0xb66	; 0xb66 <__fp_split3>
 8a8:	58 f3       	brcs	.-42     	; 0x880 <__addsf3+0xc>
 8aa:	ba 17       	cp	r27, r26
 8ac:	62 07       	cpc	r22, r18
 8ae:	73 07       	cpc	r23, r19
 8b0:	84 07       	cpc	r24, r20
 8b2:	95 07       	cpc	r25, r21
 8b4:	20 f0       	brcs	.+8      	; 0x8be <__addsf3x+0x1c>
 8b6:	79 f4       	brne	.+30     	; 0x8d6 <__addsf3x+0x34>
 8b8:	a6 f5       	brtc	.+104    	; 0x922 <__stack+0x23>
 8ba:	0c 94 d5 05 	jmp	0xbaa	; 0xbaa <__fp_zero>
 8be:	0e f4       	brtc	.+2      	; 0x8c2 <__addsf3x+0x20>
 8c0:	e0 95       	com	r30
 8c2:	0b 2e       	mov	r0, r27
 8c4:	ba 2f       	mov	r27, r26
 8c6:	a0 2d       	mov	r26, r0
 8c8:	0b 01       	movw	r0, r22
 8ca:	b9 01       	movw	r22, r18
 8cc:	90 01       	movw	r18, r0
 8ce:	0c 01       	movw	r0, r24
 8d0:	ca 01       	movw	r24, r20
 8d2:	a0 01       	movw	r20, r0
 8d4:	11 24       	eor	r1, r1
 8d6:	ff 27       	eor	r31, r31
 8d8:	59 1b       	sub	r21, r25
 8da:	99 f0       	breq	.+38     	; 0x902 <__stack+0x3>
 8dc:	59 3f       	cpi	r21, 0xF9	; 249
 8de:	50 f4       	brcc	.+20     	; 0x8f4 <__addsf3x+0x52>
 8e0:	50 3e       	cpi	r21, 0xE0	; 224
 8e2:	68 f1       	brcs	.+90     	; 0x93e <__stack+0x3f>
 8e4:	1a 16       	cp	r1, r26
 8e6:	f0 40       	sbci	r31, 0x00	; 0
 8e8:	a2 2f       	mov	r26, r18
 8ea:	23 2f       	mov	r18, r19
 8ec:	34 2f       	mov	r19, r20
 8ee:	44 27       	eor	r20, r20
 8f0:	58 5f       	subi	r21, 0xF8	; 248
 8f2:	f3 cf       	rjmp	.-26     	; 0x8da <__addsf3x+0x38>
 8f4:	46 95       	lsr	r20
 8f6:	37 95       	ror	r19
 8f8:	27 95       	ror	r18
 8fa:	a7 95       	ror	r26
 8fc:	f0 40       	sbci	r31, 0x00	; 0
 8fe:	53 95       	inc	r21
 900:	c9 f7       	brne	.-14     	; 0x8f4 <__addsf3x+0x52>
 902:	7e f4       	brtc	.+30     	; 0x922 <__stack+0x23>
 904:	1f 16       	cp	r1, r31
 906:	ba 0b       	sbc	r27, r26
 908:	62 0b       	sbc	r22, r18
 90a:	73 0b       	sbc	r23, r19
 90c:	84 0b       	sbc	r24, r20
 90e:	ba f0       	brmi	.+46     	; 0x93e <__stack+0x3f>
 910:	91 50       	subi	r25, 0x01	; 1
 912:	a1 f0       	breq	.+40     	; 0x93c <__stack+0x3d>
 914:	ff 0f       	add	r31, r31
 916:	bb 1f       	adc	r27, r27
 918:	66 1f       	adc	r22, r22
 91a:	77 1f       	adc	r23, r23
 91c:	88 1f       	adc	r24, r24
 91e:	c2 f7       	brpl	.-16     	; 0x910 <__stack+0x11>
 920:	0e c0       	rjmp	.+28     	; 0x93e <__stack+0x3f>
 922:	ba 0f       	add	r27, r26
 924:	62 1f       	adc	r22, r18
 926:	73 1f       	adc	r23, r19
 928:	84 1f       	adc	r24, r20
 92a:	48 f4       	brcc	.+18     	; 0x93e <__stack+0x3f>
 92c:	87 95       	ror	r24
 92e:	77 95       	ror	r23
 930:	67 95       	ror	r22
 932:	b7 95       	ror	r27
 934:	f7 95       	ror	r31
 936:	9e 3f       	cpi	r25, 0xFE	; 254
 938:	08 f0       	brcs	.+2      	; 0x93c <__stack+0x3d>
 93a:	b0 cf       	rjmp	.-160    	; 0x89c <__addsf3+0x28>
 93c:	93 95       	inc	r25
 93e:	88 0f       	add	r24, r24
 940:	08 f0       	brcs	.+2      	; 0x944 <__stack+0x45>
 942:	99 27       	eor	r25, r25
 944:	ee 0f       	add	r30, r30
 946:	97 95       	ror	r25
 948:	87 95       	ror	r24
 94a:	08 95       	ret

0000094c <__divsf3>:
 94c:	0e 94 ba 04 	call	0x974	; 0x974 <__divsf3x>
 950:	0c 94 a2 05 	jmp	0xb44	; 0xb44 <__fp_round>
 954:	0e 94 9b 05 	call	0xb36	; 0xb36 <__fp_pscB>
 958:	58 f0       	brcs	.+22     	; 0x970 <__divsf3+0x24>
 95a:	0e 94 94 05 	call	0xb28	; 0xb28 <__fp_pscA>
 95e:	40 f0       	brcs	.+16     	; 0x970 <__divsf3+0x24>
 960:	29 f4       	brne	.+10     	; 0x96c <__divsf3+0x20>
 962:	5f 3f       	cpi	r21, 0xFF	; 255
 964:	29 f0       	breq	.+10     	; 0x970 <__divsf3+0x24>
 966:	0c 94 8b 05 	jmp	0xb16	; 0xb16 <__fp_inf>
 96a:	51 11       	cpse	r21, r1
 96c:	0c 94 d6 05 	jmp	0xbac	; 0xbac <__fp_szero>
 970:	0c 94 91 05 	jmp	0xb22	; 0xb22 <__fp_nan>

00000974 <__divsf3x>:
 974:	0e 94 b3 05 	call	0xb66	; 0xb66 <__fp_split3>
 978:	68 f3       	brcs	.-38     	; 0x954 <__divsf3+0x8>

0000097a <__divsf3_pse>:
 97a:	99 23       	and	r25, r25
 97c:	b1 f3       	breq	.-20     	; 0x96a <__divsf3+0x1e>
 97e:	55 23       	and	r21, r21
 980:	91 f3       	breq	.-28     	; 0x966 <__divsf3+0x1a>
 982:	95 1b       	sub	r25, r21
 984:	55 0b       	sbc	r21, r21
 986:	bb 27       	eor	r27, r27
 988:	aa 27       	eor	r26, r26
 98a:	62 17       	cp	r22, r18
 98c:	73 07       	cpc	r23, r19
 98e:	84 07       	cpc	r24, r20
 990:	38 f0       	brcs	.+14     	; 0x9a0 <__divsf3_pse+0x26>
 992:	9f 5f       	subi	r25, 0xFF	; 255
 994:	5f 4f       	sbci	r21, 0xFF	; 255
 996:	22 0f       	add	r18, r18
 998:	33 1f       	adc	r19, r19
 99a:	44 1f       	adc	r20, r20
 99c:	aa 1f       	adc	r26, r26
 99e:	a9 f3       	breq	.-22     	; 0x98a <__divsf3_pse+0x10>
 9a0:	35 d0       	rcall	.+106    	; 0xa0c <__divsf3_pse+0x92>
 9a2:	0e 2e       	mov	r0, r30
 9a4:	3a f0       	brmi	.+14     	; 0x9b4 <__divsf3_pse+0x3a>
 9a6:	e0 e8       	ldi	r30, 0x80	; 128
 9a8:	32 d0       	rcall	.+100    	; 0xa0e <__divsf3_pse+0x94>
 9aa:	91 50       	subi	r25, 0x01	; 1
 9ac:	50 40       	sbci	r21, 0x00	; 0
 9ae:	e6 95       	lsr	r30
 9b0:	00 1c       	adc	r0, r0
 9b2:	ca f7       	brpl	.-14     	; 0x9a6 <__divsf3_pse+0x2c>
 9b4:	2b d0       	rcall	.+86     	; 0xa0c <__divsf3_pse+0x92>
 9b6:	fe 2f       	mov	r31, r30
 9b8:	29 d0       	rcall	.+82     	; 0xa0c <__divsf3_pse+0x92>
 9ba:	66 0f       	add	r22, r22
 9bc:	77 1f       	adc	r23, r23
 9be:	88 1f       	adc	r24, r24
 9c0:	bb 1f       	adc	r27, r27
 9c2:	26 17       	cp	r18, r22
 9c4:	37 07       	cpc	r19, r23
 9c6:	48 07       	cpc	r20, r24
 9c8:	ab 07       	cpc	r26, r27
 9ca:	b0 e8       	ldi	r27, 0x80	; 128
 9cc:	09 f0       	breq	.+2      	; 0x9d0 <__divsf3_pse+0x56>
 9ce:	bb 0b       	sbc	r27, r27
 9d0:	80 2d       	mov	r24, r0
 9d2:	bf 01       	movw	r22, r30
 9d4:	ff 27       	eor	r31, r31
 9d6:	93 58       	subi	r25, 0x83	; 131
 9d8:	5f 4f       	sbci	r21, 0xFF	; 255
 9da:	3a f0       	brmi	.+14     	; 0x9ea <__divsf3_pse+0x70>
 9dc:	9e 3f       	cpi	r25, 0xFE	; 254
 9de:	51 05       	cpc	r21, r1
 9e0:	78 f0       	brcs	.+30     	; 0xa00 <__divsf3_pse+0x86>
 9e2:	0c 94 8b 05 	jmp	0xb16	; 0xb16 <__fp_inf>
 9e6:	0c 94 d6 05 	jmp	0xbac	; 0xbac <__fp_szero>
 9ea:	5f 3f       	cpi	r21, 0xFF	; 255
 9ec:	e4 f3       	brlt	.-8      	; 0x9e6 <__divsf3_pse+0x6c>
 9ee:	98 3e       	cpi	r25, 0xE8	; 232
 9f0:	d4 f3       	brlt	.-12     	; 0x9e6 <__divsf3_pse+0x6c>
 9f2:	86 95       	lsr	r24
 9f4:	77 95       	ror	r23
 9f6:	67 95       	ror	r22
 9f8:	b7 95       	ror	r27
 9fa:	f7 95       	ror	r31
 9fc:	9f 5f       	subi	r25, 0xFF	; 255
 9fe:	c9 f7       	brne	.-14     	; 0x9f2 <__divsf3_pse+0x78>
 a00:	88 0f       	add	r24, r24
 a02:	91 1d       	adc	r25, r1
 a04:	96 95       	lsr	r25
 a06:	87 95       	ror	r24
 a08:	97 f9       	bld	r25, 7
 a0a:	08 95       	ret
 a0c:	e1 e0       	ldi	r30, 0x01	; 1
 a0e:	66 0f       	add	r22, r22
 a10:	77 1f       	adc	r23, r23
 a12:	88 1f       	adc	r24, r24
 a14:	bb 1f       	adc	r27, r27
 a16:	62 17       	cp	r22, r18
 a18:	73 07       	cpc	r23, r19
 a1a:	84 07       	cpc	r24, r20
 a1c:	ba 07       	cpc	r27, r26
 a1e:	20 f0       	brcs	.+8      	; 0xa28 <__divsf3_pse+0xae>
 a20:	62 1b       	sub	r22, r18
 a22:	73 0b       	sbc	r23, r19
 a24:	84 0b       	sbc	r24, r20
 a26:	ba 0b       	sbc	r27, r26
 a28:	ee 1f       	adc	r30, r30
 a2a:	88 f7       	brcc	.-30     	; 0xa0e <__divsf3_pse+0x94>
 a2c:	e0 95       	com	r30
 a2e:	08 95       	ret

00000a30 <__fixsfsi>:
 a30:	0e 94 1f 05 	call	0xa3e	; 0xa3e <__fixunssfsi>
 a34:	68 94       	set
 a36:	b1 11       	cpse	r27, r1
 a38:	0c 94 d6 05 	jmp	0xbac	; 0xbac <__fp_szero>
 a3c:	08 95       	ret

00000a3e <__fixunssfsi>:
 a3e:	0e 94 bb 05 	call	0xb76	; 0xb76 <__fp_splitA>
 a42:	88 f0       	brcs	.+34     	; 0xa66 <__fixunssfsi+0x28>
 a44:	9f 57       	subi	r25, 0x7F	; 127
 a46:	98 f0       	brcs	.+38     	; 0xa6e <__fixunssfsi+0x30>
 a48:	b9 2f       	mov	r27, r25
 a4a:	99 27       	eor	r25, r25
 a4c:	b7 51       	subi	r27, 0x17	; 23
 a4e:	b0 f0       	brcs	.+44     	; 0xa7c <__fixunssfsi+0x3e>
 a50:	e1 f0       	breq	.+56     	; 0xa8a <__fixunssfsi+0x4c>
 a52:	66 0f       	add	r22, r22
 a54:	77 1f       	adc	r23, r23
 a56:	88 1f       	adc	r24, r24
 a58:	99 1f       	adc	r25, r25
 a5a:	1a f0       	brmi	.+6      	; 0xa62 <__fixunssfsi+0x24>
 a5c:	ba 95       	dec	r27
 a5e:	c9 f7       	brne	.-14     	; 0xa52 <__fixunssfsi+0x14>
 a60:	14 c0       	rjmp	.+40     	; 0xa8a <__fixunssfsi+0x4c>
 a62:	b1 30       	cpi	r27, 0x01	; 1
 a64:	91 f0       	breq	.+36     	; 0xa8a <__fixunssfsi+0x4c>
 a66:	0e 94 d5 05 	call	0xbaa	; 0xbaa <__fp_zero>
 a6a:	b1 e0       	ldi	r27, 0x01	; 1
 a6c:	08 95       	ret
 a6e:	0c 94 d5 05 	jmp	0xbaa	; 0xbaa <__fp_zero>
 a72:	67 2f       	mov	r22, r23
 a74:	78 2f       	mov	r23, r24
 a76:	88 27       	eor	r24, r24
 a78:	b8 5f       	subi	r27, 0xF8	; 248
 a7a:	39 f0       	breq	.+14     	; 0xa8a <__fixunssfsi+0x4c>
 a7c:	b9 3f       	cpi	r27, 0xF9	; 249
 a7e:	cc f3       	brlt	.-14     	; 0xa72 <__fixunssfsi+0x34>
 a80:	86 95       	lsr	r24
 a82:	77 95       	ror	r23
 a84:	67 95       	ror	r22
 a86:	b3 95       	inc	r27
 a88:	d9 f7       	brne	.-10     	; 0xa80 <__fixunssfsi+0x42>
 a8a:	3e f4       	brtc	.+14     	; 0xa9a <__fixunssfsi+0x5c>
 a8c:	90 95       	com	r25
 a8e:	80 95       	com	r24
 a90:	70 95       	com	r23
 a92:	61 95       	neg	r22
 a94:	7f 4f       	sbci	r23, 0xFF	; 255
 a96:	8f 4f       	sbci	r24, 0xFF	; 255
 a98:	9f 4f       	sbci	r25, 0xFF	; 255
 a9a:	08 95       	ret

00000a9c <__floatunsisf>:
 a9c:	e8 94       	clt
 a9e:	09 c0       	rjmp	.+18     	; 0xab2 <__floatsisf+0x12>

00000aa0 <__floatsisf>:
 aa0:	97 fb       	bst	r25, 7
 aa2:	3e f4       	brtc	.+14     	; 0xab2 <__floatsisf+0x12>
 aa4:	90 95       	com	r25
 aa6:	80 95       	com	r24
 aa8:	70 95       	com	r23
 aaa:	61 95       	neg	r22
 aac:	7f 4f       	sbci	r23, 0xFF	; 255
 aae:	8f 4f       	sbci	r24, 0xFF	; 255
 ab0:	9f 4f       	sbci	r25, 0xFF	; 255
 ab2:	99 23       	and	r25, r25
 ab4:	a9 f0       	breq	.+42     	; 0xae0 <__floatsisf+0x40>
 ab6:	f9 2f       	mov	r31, r25
 ab8:	96 e9       	ldi	r25, 0x96	; 150
 aba:	bb 27       	eor	r27, r27
 abc:	93 95       	inc	r25
 abe:	f6 95       	lsr	r31
 ac0:	87 95       	ror	r24
 ac2:	77 95       	ror	r23
 ac4:	67 95       	ror	r22
 ac6:	b7 95       	ror	r27
 ac8:	f1 11       	cpse	r31, r1
 aca:	f8 cf       	rjmp	.-16     	; 0xabc <__floatsisf+0x1c>
 acc:	fa f4       	brpl	.+62     	; 0xb0c <__floatsisf+0x6c>
 ace:	bb 0f       	add	r27, r27
 ad0:	11 f4       	brne	.+4      	; 0xad6 <__floatsisf+0x36>
 ad2:	60 ff       	sbrs	r22, 0
 ad4:	1b c0       	rjmp	.+54     	; 0xb0c <__floatsisf+0x6c>
 ad6:	6f 5f       	subi	r22, 0xFF	; 255
 ad8:	7f 4f       	sbci	r23, 0xFF	; 255
 ada:	8f 4f       	sbci	r24, 0xFF	; 255
 adc:	9f 4f       	sbci	r25, 0xFF	; 255
 ade:	16 c0       	rjmp	.+44     	; 0xb0c <__floatsisf+0x6c>
 ae0:	88 23       	and	r24, r24
 ae2:	11 f0       	breq	.+4      	; 0xae8 <__floatsisf+0x48>
 ae4:	96 e9       	ldi	r25, 0x96	; 150
 ae6:	11 c0       	rjmp	.+34     	; 0xb0a <__floatsisf+0x6a>
 ae8:	77 23       	and	r23, r23
 aea:	21 f0       	breq	.+8      	; 0xaf4 <__floatsisf+0x54>
 aec:	9e e8       	ldi	r25, 0x8E	; 142
 aee:	87 2f       	mov	r24, r23
 af0:	76 2f       	mov	r23, r22
 af2:	05 c0       	rjmp	.+10     	; 0xafe <__floatsisf+0x5e>
 af4:	66 23       	and	r22, r22
 af6:	71 f0       	breq	.+28     	; 0xb14 <__floatsisf+0x74>
 af8:	96 e8       	ldi	r25, 0x86	; 134
 afa:	86 2f       	mov	r24, r22
 afc:	70 e0       	ldi	r23, 0x00	; 0
 afe:	60 e0       	ldi	r22, 0x00	; 0
 b00:	2a f0       	brmi	.+10     	; 0xb0c <__floatsisf+0x6c>
 b02:	9a 95       	dec	r25
 b04:	66 0f       	add	r22, r22
 b06:	77 1f       	adc	r23, r23
 b08:	88 1f       	adc	r24, r24
 b0a:	da f7       	brpl	.-10     	; 0xb02 <__floatsisf+0x62>
 b0c:	88 0f       	add	r24, r24
 b0e:	96 95       	lsr	r25
 b10:	87 95       	ror	r24
 b12:	97 f9       	bld	r25, 7
 b14:	08 95       	ret

00000b16 <__fp_inf>:
 b16:	97 f9       	bld	r25, 7
 b18:	9f 67       	ori	r25, 0x7F	; 127
 b1a:	80 e8       	ldi	r24, 0x80	; 128
 b1c:	70 e0       	ldi	r23, 0x00	; 0
 b1e:	60 e0       	ldi	r22, 0x00	; 0
 b20:	08 95       	ret

00000b22 <__fp_nan>:
 b22:	9f ef       	ldi	r25, 0xFF	; 255
 b24:	80 ec       	ldi	r24, 0xC0	; 192
 b26:	08 95       	ret

00000b28 <__fp_pscA>:
 b28:	00 24       	eor	r0, r0
 b2a:	0a 94       	dec	r0
 b2c:	16 16       	cp	r1, r22
 b2e:	17 06       	cpc	r1, r23
 b30:	18 06       	cpc	r1, r24
 b32:	09 06       	cpc	r0, r25
 b34:	08 95       	ret

00000b36 <__fp_pscB>:
 b36:	00 24       	eor	r0, r0
 b38:	0a 94       	dec	r0
 b3a:	12 16       	cp	r1, r18
 b3c:	13 06       	cpc	r1, r19
 b3e:	14 06       	cpc	r1, r20
 b40:	05 06       	cpc	r0, r21
 b42:	08 95       	ret

00000b44 <__fp_round>:
 b44:	09 2e       	mov	r0, r25
 b46:	03 94       	inc	r0
 b48:	00 0c       	add	r0, r0
 b4a:	11 f4       	brne	.+4      	; 0xb50 <__fp_round+0xc>
 b4c:	88 23       	and	r24, r24
 b4e:	52 f0       	brmi	.+20     	; 0xb64 <__fp_round+0x20>
 b50:	bb 0f       	add	r27, r27
 b52:	40 f4       	brcc	.+16     	; 0xb64 <__fp_round+0x20>
 b54:	bf 2b       	or	r27, r31
 b56:	11 f4       	brne	.+4      	; 0xb5c <__fp_round+0x18>
 b58:	60 ff       	sbrs	r22, 0
 b5a:	04 c0       	rjmp	.+8      	; 0xb64 <__fp_round+0x20>
 b5c:	6f 5f       	subi	r22, 0xFF	; 255
 b5e:	7f 4f       	sbci	r23, 0xFF	; 255
 b60:	8f 4f       	sbci	r24, 0xFF	; 255
 b62:	9f 4f       	sbci	r25, 0xFF	; 255
 b64:	08 95       	ret

00000b66 <__fp_split3>:
 b66:	57 fd       	sbrc	r21, 7
 b68:	90 58       	subi	r25, 0x80	; 128
 b6a:	44 0f       	add	r20, r20
 b6c:	55 1f       	adc	r21, r21
 b6e:	59 f0       	breq	.+22     	; 0xb86 <__fp_splitA+0x10>
 b70:	5f 3f       	cpi	r21, 0xFF	; 255
 b72:	71 f0       	breq	.+28     	; 0xb90 <__fp_splitA+0x1a>
 b74:	47 95       	ror	r20

00000b76 <__fp_splitA>:
 b76:	88 0f       	add	r24, r24
 b78:	97 fb       	bst	r25, 7
 b7a:	99 1f       	adc	r25, r25
 b7c:	61 f0       	breq	.+24     	; 0xb96 <__fp_splitA+0x20>
 b7e:	9f 3f       	cpi	r25, 0xFF	; 255
 b80:	79 f0       	breq	.+30     	; 0xba0 <__fp_splitA+0x2a>
 b82:	87 95       	ror	r24
 b84:	08 95       	ret
 b86:	12 16       	cp	r1, r18
 b88:	13 06       	cpc	r1, r19
 b8a:	14 06       	cpc	r1, r20
 b8c:	55 1f       	adc	r21, r21
 b8e:	f2 cf       	rjmp	.-28     	; 0xb74 <__fp_split3+0xe>
 b90:	46 95       	lsr	r20
 b92:	f1 df       	rcall	.-30     	; 0xb76 <__fp_splitA>
 b94:	08 c0       	rjmp	.+16     	; 0xba6 <__fp_splitA+0x30>
 b96:	16 16       	cp	r1, r22
 b98:	17 06       	cpc	r1, r23
 b9a:	18 06       	cpc	r1, r24
 b9c:	99 1f       	adc	r25, r25
 b9e:	f1 cf       	rjmp	.-30     	; 0xb82 <__fp_splitA+0xc>
 ba0:	86 95       	lsr	r24
 ba2:	71 05       	cpc	r23, r1
 ba4:	61 05       	cpc	r22, r1
 ba6:	08 94       	sec
 ba8:	08 95       	ret

00000baa <__fp_zero>:
 baa:	e8 94       	clt

00000bac <__fp_szero>:
 bac:	bb 27       	eor	r27, r27
 bae:	66 27       	eor	r22, r22
 bb0:	77 27       	eor	r23, r23
 bb2:	cb 01       	movw	r24, r22
 bb4:	97 f9       	bld	r25, 7
 bb6:	08 95       	ret

00000bb8 <__gesf2>:
 bb8:	0e 94 56 06 	call	0xcac	; 0xcac <__fp_cmp>
 bbc:	08 f4       	brcc	.+2      	; 0xbc0 <__gesf2+0x8>
 bbe:	8f ef       	ldi	r24, 0xFF	; 255
 bc0:	08 95       	ret

00000bc2 <__mulsf3>:
 bc2:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <__mulsf3x>
 bc6:	0c 94 a2 05 	jmp	0xb44	; 0xb44 <__fp_round>
 bca:	0e 94 94 05 	call	0xb28	; 0xb28 <__fp_pscA>
 bce:	38 f0       	brcs	.+14     	; 0xbde <__mulsf3+0x1c>
 bd0:	0e 94 9b 05 	call	0xb36	; 0xb36 <__fp_pscB>
 bd4:	20 f0       	brcs	.+8      	; 0xbde <__mulsf3+0x1c>
 bd6:	95 23       	and	r25, r21
 bd8:	11 f0       	breq	.+4      	; 0xbde <__mulsf3+0x1c>
 bda:	0c 94 8b 05 	jmp	0xb16	; 0xb16 <__fp_inf>
 bde:	0c 94 91 05 	jmp	0xb22	; 0xb22 <__fp_nan>
 be2:	11 24       	eor	r1, r1
 be4:	0c 94 d6 05 	jmp	0xbac	; 0xbac <__fp_szero>

00000be8 <__mulsf3x>:
 be8:	0e 94 b3 05 	call	0xb66	; 0xb66 <__fp_split3>
 bec:	70 f3       	brcs	.-36     	; 0xbca <__mulsf3+0x8>

00000bee <__mulsf3_pse>:
 bee:	95 9f       	mul	r25, r21
 bf0:	c1 f3       	breq	.-16     	; 0xbe2 <__mulsf3+0x20>
 bf2:	95 0f       	add	r25, r21
 bf4:	50 e0       	ldi	r21, 0x00	; 0
 bf6:	55 1f       	adc	r21, r21
 bf8:	62 9f       	mul	r22, r18
 bfa:	f0 01       	movw	r30, r0
 bfc:	72 9f       	mul	r23, r18
 bfe:	bb 27       	eor	r27, r27
 c00:	f0 0d       	add	r31, r0
 c02:	b1 1d       	adc	r27, r1
 c04:	63 9f       	mul	r22, r19
 c06:	aa 27       	eor	r26, r26
 c08:	f0 0d       	add	r31, r0
 c0a:	b1 1d       	adc	r27, r1
 c0c:	aa 1f       	adc	r26, r26
 c0e:	64 9f       	mul	r22, r20
 c10:	66 27       	eor	r22, r22
 c12:	b0 0d       	add	r27, r0
 c14:	a1 1d       	adc	r26, r1
 c16:	66 1f       	adc	r22, r22
 c18:	82 9f       	mul	r24, r18
 c1a:	22 27       	eor	r18, r18
 c1c:	b0 0d       	add	r27, r0
 c1e:	a1 1d       	adc	r26, r1
 c20:	62 1f       	adc	r22, r18
 c22:	73 9f       	mul	r23, r19
 c24:	b0 0d       	add	r27, r0
 c26:	a1 1d       	adc	r26, r1
 c28:	62 1f       	adc	r22, r18
 c2a:	83 9f       	mul	r24, r19
 c2c:	a0 0d       	add	r26, r0
 c2e:	61 1d       	adc	r22, r1
 c30:	22 1f       	adc	r18, r18
 c32:	74 9f       	mul	r23, r20
 c34:	33 27       	eor	r19, r19
 c36:	a0 0d       	add	r26, r0
 c38:	61 1d       	adc	r22, r1
 c3a:	23 1f       	adc	r18, r19
 c3c:	84 9f       	mul	r24, r20
 c3e:	60 0d       	add	r22, r0
 c40:	21 1d       	adc	r18, r1
 c42:	82 2f       	mov	r24, r18
 c44:	76 2f       	mov	r23, r22
 c46:	6a 2f       	mov	r22, r26
 c48:	11 24       	eor	r1, r1
 c4a:	9f 57       	subi	r25, 0x7F	; 127
 c4c:	50 40       	sbci	r21, 0x00	; 0
 c4e:	9a f0       	brmi	.+38     	; 0xc76 <__mulsf3_pse+0x88>
 c50:	f1 f0       	breq	.+60     	; 0xc8e <__mulsf3_pse+0xa0>
 c52:	88 23       	and	r24, r24
 c54:	4a f0       	brmi	.+18     	; 0xc68 <__mulsf3_pse+0x7a>
 c56:	ee 0f       	add	r30, r30
 c58:	ff 1f       	adc	r31, r31
 c5a:	bb 1f       	adc	r27, r27
 c5c:	66 1f       	adc	r22, r22
 c5e:	77 1f       	adc	r23, r23
 c60:	88 1f       	adc	r24, r24
 c62:	91 50       	subi	r25, 0x01	; 1
 c64:	50 40       	sbci	r21, 0x00	; 0
 c66:	a9 f7       	brne	.-22     	; 0xc52 <__mulsf3_pse+0x64>
 c68:	9e 3f       	cpi	r25, 0xFE	; 254
 c6a:	51 05       	cpc	r21, r1
 c6c:	80 f0       	brcs	.+32     	; 0xc8e <__mulsf3_pse+0xa0>
 c6e:	0c 94 8b 05 	jmp	0xb16	; 0xb16 <__fp_inf>
 c72:	0c 94 d6 05 	jmp	0xbac	; 0xbac <__fp_szero>
 c76:	5f 3f       	cpi	r21, 0xFF	; 255
 c78:	e4 f3       	brlt	.-8      	; 0xc72 <__mulsf3_pse+0x84>
 c7a:	98 3e       	cpi	r25, 0xE8	; 232
 c7c:	d4 f3       	brlt	.-12     	; 0xc72 <__mulsf3_pse+0x84>
 c7e:	86 95       	lsr	r24
 c80:	77 95       	ror	r23
 c82:	67 95       	ror	r22
 c84:	b7 95       	ror	r27
 c86:	f7 95       	ror	r31
 c88:	e7 95       	ror	r30
 c8a:	9f 5f       	subi	r25, 0xFF	; 255
 c8c:	c1 f7       	brne	.-16     	; 0xc7e <__mulsf3_pse+0x90>
 c8e:	fe 2b       	or	r31, r30
 c90:	88 0f       	add	r24, r24
 c92:	91 1d       	adc	r25, r1
 c94:	96 95       	lsr	r25
 c96:	87 95       	ror	r24
 c98:	97 f9       	bld	r25, 7
 c9a:	08 95       	ret

00000c9c <sin>:
 c9c:	9f 93       	push	r25
 c9e:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <__fp_rempio2>
 ca2:	0f 90       	pop	r0
 ca4:	07 fc       	sbrc	r0, 7
 ca6:	ee 5f       	subi	r30, 0xFE	; 254
 ca8:	0c 94 a5 06 	jmp	0xd4a	; 0xd4a <__fp_sinus>

00000cac <__fp_cmp>:
 cac:	99 0f       	add	r25, r25
 cae:	00 08       	sbc	r0, r0
 cb0:	55 0f       	add	r21, r21
 cb2:	aa 0b       	sbc	r26, r26
 cb4:	e0 e8       	ldi	r30, 0x80	; 128
 cb6:	fe ef       	ldi	r31, 0xFE	; 254
 cb8:	16 16       	cp	r1, r22
 cba:	17 06       	cpc	r1, r23
 cbc:	e8 07       	cpc	r30, r24
 cbe:	f9 07       	cpc	r31, r25
 cc0:	c0 f0       	brcs	.+48     	; 0xcf2 <__fp_cmp+0x46>
 cc2:	12 16       	cp	r1, r18
 cc4:	13 06       	cpc	r1, r19
 cc6:	e4 07       	cpc	r30, r20
 cc8:	f5 07       	cpc	r31, r21
 cca:	98 f0       	brcs	.+38     	; 0xcf2 <__fp_cmp+0x46>
 ccc:	62 1b       	sub	r22, r18
 cce:	73 0b       	sbc	r23, r19
 cd0:	84 0b       	sbc	r24, r20
 cd2:	95 0b       	sbc	r25, r21
 cd4:	39 f4       	brne	.+14     	; 0xce4 <__fp_cmp+0x38>
 cd6:	0a 26       	eor	r0, r26
 cd8:	61 f0       	breq	.+24     	; 0xcf2 <__fp_cmp+0x46>
 cda:	23 2b       	or	r18, r19
 cdc:	24 2b       	or	r18, r20
 cde:	25 2b       	or	r18, r21
 ce0:	21 f4       	brne	.+8      	; 0xcea <__fp_cmp+0x3e>
 ce2:	08 95       	ret
 ce4:	0a 26       	eor	r0, r26
 ce6:	09 f4       	brne	.+2      	; 0xcea <__fp_cmp+0x3e>
 ce8:	a1 40       	sbci	r26, 0x01	; 1
 cea:	a6 95       	lsr	r26
 cec:	8f ef       	ldi	r24, 0xFF	; 255
 cee:	81 1d       	adc	r24, r1
 cf0:	81 1d       	adc	r24, r1
 cf2:	08 95       	ret
 cf4:	0c 94 91 05 	jmp	0xb22	; 0xb22 <__fp_nan>

00000cf8 <__fp_rempio2>:
 cf8:	0e 94 bb 05 	call	0xb76	; 0xb76 <__fp_splitA>
 cfc:	d8 f3       	brcs	.-10     	; 0xcf4 <__fp_cmp+0x48>
 cfe:	e8 94       	clt
 d00:	e0 e0       	ldi	r30, 0x00	; 0
 d02:	bb 27       	eor	r27, r27
 d04:	9f 57       	subi	r25, 0x7F	; 127
 d06:	f0 f0       	brcs	.+60     	; 0xd44 <__fp_rempio2+0x4c>
 d08:	2a ed       	ldi	r18, 0xDA	; 218
 d0a:	3f e0       	ldi	r19, 0x0F	; 15
 d0c:	49 ec       	ldi	r20, 0xC9	; 201
 d0e:	06 c0       	rjmp	.+12     	; 0xd1c <__fp_rempio2+0x24>
 d10:	ee 0f       	add	r30, r30
 d12:	bb 0f       	add	r27, r27
 d14:	66 1f       	adc	r22, r22
 d16:	77 1f       	adc	r23, r23
 d18:	88 1f       	adc	r24, r24
 d1a:	28 f0       	brcs	.+10     	; 0xd26 <__fp_rempio2+0x2e>
 d1c:	b2 3a       	cpi	r27, 0xA2	; 162
 d1e:	62 07       	cpc	r22, r18
 d20:	73 07       	cpc	r23, r19
 d22:	84 07       	cpc	r24, r20
 d24:	28 f0       	brcs	.+10     	; 0xd30 <__fp_rempio2+0x38>
 d26:	b2 5a       	subi	r27, 0xA2	; 162
 d28:	62 0b       	sbc	r22, r18
 d2a:	73 0b       	sbc	r23, r19
 d2c:	84 0b       	sbc	r24, r20
 d2e:	e3 95       	inc	r30
 d30:	9a 95       	dec	r25
 d32:	72 f7       	brpl	.-36     	; 0xd10 <__fp_rempio2+0x18>
 d34:	80 38       	cpi	r24, 0x80	; 128
 d36:	30 f4       	brcc	.+12     	; 0xd44 <__fp_rempio2+0x4c>
 d38:	9a 95       	dec	r25
 d3a:	bb 0f       	add	r27, r27
 d3c:	66 1f       	adc	r22, r22
 d3e:	77 1f       	adc	r23, r23
 d40:	88 1f       	adc	r24, r24
 d42:	d2 f7       	brpl	.-12     	; 0xd38 <__fp_rempio2+0x40>
 d44:	90 48       	sbci	r25, 0x80	; 128
 d46:	0c 94 bb 06 	jmp	0xd76	; 0xd76 <__fp_mpack_finite>

00000d4a <__fp_sinus>:
 d4a:	ef 93       	push	r30
 d4c:	e0 ff       	sbrs	r30, 0
 d4e:	07 c0       	rjmp	.+14     	; 0xd5e <__fp_sinus+0x14>
 d50:	a2 ea       	ldi	r26, 0xA2	; 162
 d52:	2a ed       	ldi	r18, 0xDA	; 218
 d54:	3f e0       	ldi	r19, 0x0F	; 15
 d56:	49 ec       	ldi	r20, 0xC9	; 201
 d58:	5f eb       	ldi	r21, 0xBF	; 191
 d5a:	0e 94 51 04 	call	0x8a2	; 0x8a2 <__addsf3x>
 d5e:	0e 94 a2 05 	call	0xb44	; 0xb44 <__fp_round>
 d62:	0f 90       	pop	r0
 d64:	03 94       	inc	r0
 d66:	01 fc       	sbrc	r0, 1
 d68:	90 58       	subi	r25, 0x80	; 128
 d6a:	e8 e6       	ldi	r30, 0x68	; 104
 d6c:	f0 e0       	ldi	r31, 0x00	; 0
 d6e:	0c 94 c7 06 	jmp	0xd8e	; 0xd8e <__fp_powsodd>

00000d72 <__fp_mpack>:
 d72:	9f 3f       	cpi	r25, 0xFF	; 255
 d74:	31 f0       	breq	.+12     	; 0xd82 <__fp_mpack_finite+0xc>

00000d76 <__fp_mpack_finite>:
 d76:	91 50       	subi	r25, 0x01	; 1
 d78:	20 f4       	brcc	.+8      	; 0xd82 <__fp_mpack_finite+0xc>
 d7a:	87 95       	ror	r24
 d7c:	77 95       	ror	r23
 d7e:	67 95       	ror	r22
 d80:	b7 95       	ror	r27
 d82:	88 0f       	add	r24, r24
 d84:	91 1d       	adc	r25, r1
 d86:	96 95       	lsr	r25
 d88:	87 95       	ror	r24
 d8a:	97 f9       	bld	r25, 7
 d8c:	08 95       	ret

00000d8e <__fp_powsodd>:
 d8e:	9f 93       	push	r25
 d90:	8f 93       	push	r24
 d92:	7f 93       	push	r23
 d94:	6f 93       	push	r22
 d96:	ff 93       	push	r31
 d98:	ef 93       	push	r30
 d9a:	9b 01       	movw	r18, r22
 d9c:	ac 01       	movw	r20, r24
 d9e:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <__mulsf3>
 da2:	ef 91       	pop	r30
 da4:	ff 91       	pop	r31
 da6:	0e 94 db 06 	call	0xdb6	; 0xdb6 <__fp_powser>
 daa:	2f 91       	pop	r18
 dac:	3f 91       	pop	r19
 dae:	4f 91       	pop	r20
 db0:	5f 91       	pop	r21
 db2:	0c 94 e1 05 	jmp	0xbc2	; 0xbc2 <__mulsf3>

00000db6 <__fp_powser>:
 db6:	df 93       	push	r29
 db8:	cf 93       	push	r28
 dba:	1f 93       	push	r17
 dbc:	0f 93       	push	r16
 dbe:	ff 92       	push	r15
 dc0:	ef 92       	push	r14
 dc2:	df 92       	push	r13
 dc4:	7b 01       	movw	r14, r22
 dc6:	8c 01       	movw	r16, r24
 dc8:	68 94       	set
 dca:	06 c0       	rjmp	.+12     	; 0xdd8 <__fp_powser+0x22>
 dcc:	da 2e       	mov	r13, r26
 dce:	ef 01       	movw	r28, r30
 dd0:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <__mulsf3x>
 dd4:	fe 01       	movw	r30, r28
 dd6:	e8 94       	clt
 dd8:	a5 91       	lpm	r26, Z+
 dda:	25 91       	lpm	r18, Z+
 ddc:	35 91       	lpm	r19, Z+
 dde:	45 91       	lpm	r20, Z+
 de0:	55 91       	lpm	r21, Z+
 de2:	a6 f3       	brts	.-24     	; 0xdcc <__fp_powser+0x16>
 de4:	ef 01       	movw	r28, r30
 de6:	0e 94 51 04 	call	0x8a2	; 0x8a2 <__addsf3x>
 dea:	fe 01       	movw	r30, r28
 dec:	97 01       	movw	r18, r14
 dee:	a8 01       	movw	r20, r16
 df0:	da 94       	dec	r13
 df2:	69 f7       	brne	.-38     	; 0xdce <__fp_powser+0x18>
 df4:	df 90       	pop	r13
 df6:	ef 90       	pop	r14
 df8:	ff 90       	pop	r15
 dfa:	0f 91       	pop	r16
 dfc:	1f 91       	pop	r17
 dfe:	cf 91       	pop	r28
 e00:	df 91       	pop	r29
 e02:	08 95       	ret

00000e04 <__divmodhi4>:
 e04:	97 fb       	bst	r25, 7
 e06:	07 2e       	mov	r0, r23
 e08:	16 f4       	brtc	.+4      	; 0xe0e <__divmodhi4+0xa>
 e0a:	00 94       	com	r0
 e0c:	07 d0       	rcall	.+14     	; 0xe1c <__divmodhi4_neg1>
 e0e:	77 fd       	sbrc	r23, 7
 e10:	09 d0       	rcall	.+18     	; 0xe24 <__divmodhi4_neg2>
 e12:	0e 94 16 07 	call	0xe2c	; 0xe2c <__udivmodhi4>
 e16:	07 fc       	sbrc	r0, 7
 e18:	05 d0       	rcall	.+10     	; 0xe24 <__divmodhi4_neg2>
 e1a:	3e f4       	brtc	.+14     	; 0xe2a <__divmodhi4_exit>

00000e1c <__divmodhi4_neg1>:
 e1c:	90 95       	com	r25
 e1e:	81 95       	neg	r24
 e20:	9f 4f       	sbci	r25, 0xFF	; 255
 e22:	08 95       	ret

00000e24 <__divmodhi4_neg2>:
 e24:	70 95       	com	r23
 e26:	61 95       	neg	r22
 e28:	7f 4f       	sbci	r23, 0xFF	; 255

00000e2a <__divmodhi4_exit>:
 e2a:	08 95       	ret

00000e2c <__udivmodhi4>:
 e2c:	aa 1b       	sub	r26, r26
 e2e:	bb 1b       	sub	r27, r27
 e30:	51 e1       	ldi	r21, 0x11	; 17
 e32:	07 c0       	rjmp	.+14     	; 0xe42 <__udivmodhi4_ep>

00000e34 <__udivmodhi4_loop>:
 e34:	aa 1f       	adc	r26, r26
 e36:	bb 1f       	adc	r27, r27
 e38:	a6 17       	cp	r26, r22
 e3a:	b7 07       	cpc	r27, r23
 e3c:	10 f0       	brcs	.+4      	; 0xe42 <__udivmodhi4_ep>
 e3e:	a6 1b       	sub	r26, r22
 e40:	b7 0b       	sbc	r27, r23

00000e42 <__udivmodhi4_ep>:
 e42:	88 1f       	adc	r24, r24
 e44:	99 1f       	adc	r25, r25
 e46:	5a 95       	dec	r21
 e48:	a9 f7       	brne	.-22     	; 0xe34 <__udivmodhi4_loop>
 e4a:	80 95       	com	r24
 e4c:	90 95       	com	r25
 e4e:	bc 01       	movw	r22, r24
 e50:	cd 01       	movw	r24, r26
 e52:	08 95       	ret

00000e54 <_exit>:
 e54:	f8 94       	cli

00000e56 <__stop_program>:
 e56:	ff cf       	rjmp	.-2      	; 0xe56 <__stop_program>
