
Project2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000d4a  00000dde  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d4a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000004c2  00800110  00800110  00000dee  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000dee  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e20  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  00000e60  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a90  00000000  00000000  00000f58  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000043d  00000000  00000000  000019e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004ae  00000000  00000000  00001e25  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000328  00000000  00000000  000022d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000400  00000000  00000000  000025fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000085f  00000000  00000000  000029fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  0000325b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 43 00 	jmp	0x86	; 0x86 <__ctors_end>
   4:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
   8:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
   c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  10:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  14:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  18:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  1c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__vector_7>
  20:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  24:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  28:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  2c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  30:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  34:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  38:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__vector_14>
  3c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  40:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  44:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  48:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  4c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  50:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  54:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  58:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  5c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  60:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  64:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  68:	05 a8       	ldd	r0, Z+53	; 0x35
  6a:	4c cd       	rjmp	.-1384   	; 0xfffffb04 <__eeprom_end+0xff7efb04>
  6c:	b2 d4       	rcall	.+2404   	; 0x9d2 <__floatsisf+0x40>
  6e:	4e b9       	out	0x0e, r20	; 14
  70:	38 36       	cpi	r19, 0x68	; 104
  72:	a9 02       	muls	r26, r25
  74:	0c 50       	subi	r16, 0x0C	; 12
  76:	b9 91       	ld	r27, Y+
  78:	86 88       	ldd	r8, Z+22	; 0x16
  7a:	08 3c       	cpi	r16, 0xC8	; 200
  7c:	a6 aa       	std	Z+54, r10	; 0x36
  7e:	aa 2a       	or	r10, r26
  80:	be 00       	.word	0x00be	; ????
  82:	00 00       	nop
  84:	80 3f       	cpi	r24, 0xF0	; 240

00000086 <__ctors_end>:
  86:	11 24       	eor	r1, r1
  88:	1f be       	out	0x3f, r1	; 63
  8a:	cf ef       	ldi	r28, 0xFF	; 255
  8c:	d8 e0       	ldi	r29, 0x08	; 8
  8e:	de bf       	out	0x3e, r29	; 62
  90:	cd bf       	out	0x3d, r28	; 61

00000092 <__do_copy_data>:
  92:	11 e0       	ldi	r17, 0x01	; 1
  94:	a0 e0       	ldi	r26, 0x00	; 0
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	ea e4       	ldi	r30, 0x4A	; 74
  9a:	fd e0       	ldi	r31, 0x0D	; 13
  9c:	02 c0       	rjmp	.+4      	; 0xa2 <__do_copy_data+0x10>
  9e:	05 90       	lpm	r0, Z+
  a0:	0d 92       	st	X+, r0
  a2:	a0 31       	cpi	r26, 0x10	; 16
  a4:	b1 07       	cpc	r27, r17
  a6:	d9 f7       	brne	.-10     	; 0x9e <__do_copy_data+0xc>

000000a8 <__do_clear_bss>:
  a8:	25 e0       	ldi	r18, 0x05	; 5
  aa:	a0 e1       	ldi	r26, 0x10	; 16
  ac:	b1 e0       	ldi	r27, 0x01	; 1
  ae:	01 c0       	rjmp	.+2      	; 0xb2 <.do_clear_bss_start>

000000b0 <.do_clear_bss_loop>:
  b0:	1d 92       	st	X+, r1

000000b2 <.do_clear_bss_start>:
  b2:	a2 3d       	cpi	r26, 0xD2	; 210
  b4:	b2 07       	cpc	r27, r18
  b6:	e1 f7       	brne	.-8      	; 0xb0 <.do_clear_bss_loop>
  b8:	0e 94 d5 00 	call	0x1aa	; 0x1aa <main>
  bc:	0c 94 a3 06 	jmp	0xd46	; 0xd46 <_exit>

000000c0 <__bad_interrupt>:
  c0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c4 <Initialize_SPI_Master>:

int sampleDivider = 1;

// sets up SPI system between ATmega328P and slave device(s)
void Initialize_SPI_Master(){
   SPCR = (0<<SPIE) |               // No interrupts
  c4:	80 e5       	ldi	r24, 0x50	; 80
  c6:	8c bd       	out	0x2c, r24	; 44
   (1<<SPE) |                       // SPI enabled
   (1<<MSTR) ;                      // master
   SPSR = 0x00;                     // clear flags
  c8:	1d bc       	out	0x2d, r1	; 45
   PORTB = 1 << SS;                 // make sure SS is high
  ca:	84 e0       	ldi	r24, 0x04	; 4
  cc:	85 b9       	out	0x05, r24	; 5
  ce:	08 95       	ret

000000d0 <initTimer0>:
}

// Initializing timer 0 (change OCR0A for freq change!!!!!)
void initTimer0(){
   TCCR0A = 0x02;                   // timer CTC mode
  d0:	82 e0       	ldi	r24, 0x02	; 2
  d2:	84 bd       	out	0x24, r24	; 36
   OCR0A = overflow1;          // sets counter overflow
  d4:	90 91 03 01 	lds	r25, 0x0103
  d8:	97 bd       	out	0x27, r25	; 39
   TCCR0B = 0x02;                   // timer clk = system clk / 8 (2MHz)
  da:	85 bd       	out	0x25, r24	; 37
   TIFR0 = 0x02;                    // Interrupt occurs at OCRF0A overflow
  dc:	85 bb       	out	0x15, r24	; 21
   TIMSK0 = 0x02;                   // OCRF0A overflow interrupt enabled
  de:	80 93 6e 00 	sts	0x006E, r24
  e2:	08 95       	ret

000000e4 <initTimer2>:
}

void initTimer2(){
	TCCR2A = 0x02;                   // timer CTC mode
  e4:	82 e0       	ldi	r24, 0x02	; 2
  e6:	80 93 b0 00 	sts	0x00B0, r24
	OCR2A = overflow2;		        // sets counter overflow
  ea:	90 91 02 01 	lds	r25, 0x0102
  ee:	90 93 b3 00 	sts	0x00B3, r25
	TCCR2B = 0x04;                   // timer clk = system clk / 256 (2MHz)
  f2:	94 e0       	ldi	r25, 0x04	; 4
  f4:	90 93 b1 00 	sts	0x00B1, r25
	TIFR2 = 0x02;                    // Interrupt occurs at OCRF2A overflow
  f8:	87 bb       	out	0x17, r24	; 23
	TIMSK2 = 0x02;                   // OCRF0A overflow interrupt enabled
  fa:	80 93 70 00 	sts	0x0070, r24
  fe:	08 95       	ret

00000100 <GPIO_Initialization>:
}


// initializes GPIO I/O, SPI interface, and interrupts
void GPIO_Initialization(){
   DDRB |= (1<<MOSI) | (1<<SCK) | (1<<SS);	// make MOSI, SCK and SS outputs
 100:	84 b1       	in	r24, 0x04	; 4
 102:	8c 62       	ori	r24, 0x2C	; 44
 104:	84 b9       	out	0x04, r24	; 4
   DDRD &= ~(1<<BTN1) | ~(1<<BTN1) | ~(1<<BTN2);	// set buttons as inputs
 106:	8a b1       	in	r24, 0x0a	; 10
 108:	8a b9       	out	0x0a, r24	; 10
   DDRD |= (1<<LED2) | (1<<LED3);				// debug LEDs are output
 10a:	8a b1       	in	r24, 0x0a	; 10
 10c:	8c 60       	ori	r24, 0x0C	; 12
 10e:	8a b9       	out	0x0a, r24	; 10
   PORTD |= (1<<BTN0) | (1<<BTN1) | (1<<BTN2);	// set internal pull-ups
 110:	8b b1       	in	r24, 0x0b	; 11
 112:	80 6e       	ori	r24, 0xE0	; 224
 114:	8b b9       	out	0x0b, r24	; 11
   Initialize_SPI_Master();			// initialize SPI to DAC
 116:	0e 94 62 00 	call	0xc4	; 0xc4 <Initialize_SPI_Master>
   initTimer0();							// initialize timer0
 11a:	0e 94 68 00 	call	0xd0	; 0xd0 <initTimer0>
   initTimer2();
 11e:	0e 94 72 00 	call	0xe4	; 0xe4 <initTimer2>
   sei();									// enable interrupts
 122:	78 94       	sei
 124:	08 95       	ret

00000126 <Transmit_SPI_Master>:
   return btnPressed;
}

// sends data to DAC over SPI data port
void Transmit_SPI_Master(int Data) {
   PORTB &= ~(1 << SS);					//Assert slave select (active low)
 126:	2a 98       	cbi	0x05, 2	; 5
   SPDR = ((Data >> 8) & 0xF) | 0x70;		//Attach configuration Bits onto MSB
 128:	9f 70       	andi	r25, 0x0F	; 15
 12a:	90 67       	ori	r25, 0x70	; 112
 12c:	9e bd       	out	0x2e, r25	; 46
   while (!(SPSR & (1<<SPIF)));
 12e:	0d b4       	in	r0, 0x2d	; 45
 130:	07 fe       	sbrs	r0, 7
 132:	fd cf       	rjmp	.-6      	; 0x12e <Transmit_SPI_Master+0x8>
   SPDR = 0xFF & Data;
 134:	8e bd       	out	0x2e, r24	; 46
   while (!(SPSR & (1<<SPIF)));
 136:	0d b4       	in	r0, 0x2d	; 45
 138:	07 fe       	sbrs	r0, 7
 13a:	fd cf       	rjmp	.-6      	; 0x136 <Transmit_SPI_Master+0x10>
   PORTB |= 1 << SS;						//Turn off slave select
 13c:	2a 9a       	sbi	0x05, 2	; 5
 13e:	08 95       	ret

00000140 <volts_to_bits>:
      _delay_ms(1);

}

// converts input voltage between 0-5V to 12bit number for DAC
uint16_t volts_to_bits(double voltage){
 140:	cf 92       	push	r12
 142:	df 92       	push	r13
 144:	ef 92       	push	r14
 146:	ff 92       	push	r15
   double bits = ((voltage/5.0)*4095);
 148:	20 e0       	ldi	r18, 0x00	; 0
 14a:	30 e0       	ldi	r19, 0x00	; 0
 14c:	40 ea       	ldi	r20, 0xA0	; 160
 14e:	50 e4       	ldi	r21, 0x40	; 64
 150:	0e 94 1f 04 	call	0x83e	; 0x83e <__divsf3>
 154:	20 e0       	ldi	r18, 0x00	; 0
 156:	30 ef       	ldi	r19, 0xF0	; 240
 158:	4f e7       	ldi	r20, 0x7F	; 127
 15a:	55 e4       	ldi	r21, 0x45	; 69
 15c:	0e 94 5a 05 	call	0xab4	; 0xab4 <__mulsf3>
 160:	6b 01       	movw	r12, r22
 162:	7c 01       	movw	r14, r24
   if(bits>4095)
 164:	20 e0       	ldi	r18, 0x00	; 0
 166:	30 ef       	ldi	r19, 0xF0	; 240
 168:	4f e7       	ldi	r20, 0x7F	; 127
 16a:	55 e4       	ldi	r21, 0x45	; 69
 16c:	0e 94 55 05 	call	0xaaa	; 0xaaa <__gesf2>
 170:	18 16       	cp	r1, r24
 172:	34 f0       	brlt	.+12     	; 0x180 <volts_to_bits+0x40>
		return 4095;
	else
	 return bits;                  // return 12bit equivalent for DAC
 174:	c7 01       	movw	r24, r14
 176:	b6 01       	movw	r22, r12
 178:	0e 94 98 04 	call	0x930	; 0x930 <__fixunssfsi>
 17c:	cb 01       	movw	r24, r22
 17e:	02 c0       	rjmp	.+4      	; 0x184 <volts_to_bits+0x44>

// converts input voltage between 0-5V to 12bit number for DAC
uint16_t volts_to_bits(double voltage){
   double bits = ((voltage/5.0)*4095);
   if(bits>4095)
		return 4095;
 180:	8f ef       	ldi	r24, 0xFF	; 255
 182:	9f e0       	ldi	r25, 0x0F	; 15
	else
	 return bits;                  // return 12bit equivalent for DAC
}
 184:	ff 90       	pop	r15
 186:	ef 90       	pop	r14
 188:	df 90       	pop	r13
 18a:	cf 90       	pop	r12
 18c:	08 95       	ret

0000018e <change_freq>:
//	overflow -= 50;
//	if(overflow<50)
//		overflow = 200;
//		
//	OCR0A = overflow;          // sets counter overflow to 250
   sampleDivider++;
 18e:	80 91 00 01 	lds	r24, 0x0100
 192:	90 91 01 01 	lds	r25, 0x0101
 196:	01 96       	adiw	r24, 0x01	; 1
   sampleDivider %= 3;
 198:	63 e0       	ldi	r22, 0x03	; 3
 19a:	70 e0       	ldi	r23, 0x00	; 0
 19c:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <__divmodhi4>
 1a0:	90 93 01 01 	sts	0x0101, r25
 1a4:	80 93 00 01 	sts	0x0100, r24
 1a8:	08 95       	ret

000001aa <main>:
uint8_t overflow1 = 1;	// set overflow value frequency change
uint8_t overflow2 = 63;	// set overflow value for button checking

int main(void)
{
	num_samples = NUM_SAMPS;
 1aa:	86 e9       	ldi	r24, 0x96	; 150
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	90 93 1f 01 	sts	0x011F, r25
 1b2:	80 93 1e 01 	sts	0x011E, r24
	
   // initialize GPIO, interrupts, and timers
   GPIO_Initialization();
 1b6:	0e 94 80 00 	call	0x100	; 0x100 <GPIO_Initialization>
   
   // fill square, sawtooth, triangle, and sine wave LUTs
   initWaves();
 1ba:	0e 94 a3 03 	call	0x746	; 0x746 <initWaves>
   while (1){
	  // if(check_buttons()==1)
			//nextWave();
		//else if(check_buttons()==2)
		//	change_freq();
   }
 1be:	ff cf       	rjmp	.-2      	; 0x1be <main+0x14>

000001c0 <__vector_14>:
}

///////////////////////////////////ISR/////////////////////////////////////////

// ISR to increment through wave function LUTs and set frequency
ISR(TIMER0_COMPA_vect){
 1c0:	1f 92       	push	r1
 1c2:	0f 92       	push	r0
 1c4:	0f b6       	in	r0, 0x3f	; 63
 1c6:	0f 92       	push	r0
 1c8:	11 24       	eor	r1, r1
 1ca:	2f 93       	push	r18
 1cc:	3f 93       	push	r19
 1ce:	4f 93       	push	r20
 1d0:	5f 93       	push	r21
 1d2:	6f 93       	push	r22
 1d4:	7f 93       	push	r23
 1d6:	8f 93       	push	r24
 1d8:	9f 93       	push	r25
 1da:	af 93       	push	r26
 1dc:	bf 93       	push	r27
 1de:	ef 93       	push	r30
 1e0:	ff 93       	push	r31
   Transmit_SPI_Master(nextWavePoint());
 1e2:	0e 94 cb 01 	call	0x396	; 0x396 <nextWavePoint>
 1e6:	0e 94 93 00 	call	0x126	; 0x126 <Transmit_SPI_Master>
   PORTD |= (1<<LED2);
 1ea:	5a 9a       	sbi	0x0b, 2	; 11
 
}
 1ec:	ff 91       	pop	r31
 1ee:	ef 91       	pop	r30
 1f0:	bf 91       	pop	r27
 1f2:	af 91       	pop	r26
 1f4:	9f 91       	pop	r25
 1f6:	8f 91       	pop	r24
 1f8:	7f 91       	pop	r23
 1fa:	6f 91       	pop	r22
 1fc:	5f 91       	pop	r21
 1fe:	4f 91       	pop	r20
 200:	3f 91       	pop	r19
 202:	2f 91       	pop	r18
 204:	0f 90       	pop	r0
 206:	0f be       	out	0x3f, r0	; 63
 208:	0f 90       	pop	r0
 20a:	1f 90       	pop	r1
 20c:	18 95       	reti

0000020e <__vector_7>:

ISR(TIMER2_COMPA_vect){
 20e:	1f 92       	push	r1
 210:	0f 92       	push	r0
 212:	0f b6       	in	r0, 0x3f	; 63
 214:	0f 92       	push	r0
 216:	11 24       	eor	r1, r1
 218:	2f 93       	push	r18
 21a:	3f 93       	push	r19
 21c:	4f 93       	push	r20
 21e:	5f 93       	push	r21
 220:	6f 93       	push	r22
 222:	7f 93       	push	r23
 224:	8f 93       	push	r24
 226:	9f 93       	push	r25
 228:	af 93       	push	r26
 22a:	bf 93       	push	r27
 22c:	ef 93       	push	r30
 22e:	ff 93       	push	r31
  PORTD |= (1<<LED3);  
 230:	5b 9a       	sbi	0x0b, 3	; 11
  
   if (!(PIND & 1 << BTN0))
 232:	4f 99       	sbic	0x09, 7	; 9
 234:	0a c0       	rjmp	.+20     	; 0x24a <__vector_7+0x3c>
      btn0++;
 236:	80 91 1a 01 	lds	r24, 0x011A
 23a:	90 91 1b 01 	lds	r25, 0x011B
 23e:	01 96       	adiw	r24, 0x01	; 1
 240:	90 93 1b 01 	sts	0x011B, r25
 244:	80 93 1a 01 	sts	0x011A, r24
 248:	08 c0       	rjmp	.+16     	; 0x25a <__vector_7+0x4c>
   else
      btn0 = was0Pressed = 0;
 24a:	10 92 15 01 	sts	0x0115, r1
 24e:	10 92 14 01 	sts	0x0114, r1
 252:	10 92 1b 01 	sts	0x011B, r1
 256:	10 92 1a 01 	sts	0x011A, r1
   
   if (!(PIND & 1 << BTN1))
 25a:	4e 99       	sbic	0x09, 6	; 9
 25c:	0a c0       	rjmp	.+20     	; 0x272 <__vector_7+0x64>
      btn1++;
 25e:	80 91 18 01 	lds	r24, 0x0118
 262:	90 91 19 01 	lds	r25, 0x0119
 266:	01 96       	adiw	r24, 0x01	; 1
 268:	90 93 19 01 	sts	0x0119, r25
 26c:	80 93 18 01 	sts	0x0118, r24
 270:	08 c0       	rjmp	.+16     	; 0x282 <__vector_7+0x74>
   else
      btn1 = was1Pressed = 0;
 272:	10 92 13 01 	sts	0x0113, r1
 276:	10 92 12 01 	sts	0x0112, r1
 27a:	10 92 19 01 	sts	0x0119, r1
 27e:	10 92 18 01 	sts	0x0118, r1
   
   if (!(PIND & 1 << BTN2))
 282:	4d 99       	sbic	0x09, 5	; 9
 284:	0a c0       	rjmp	.+20     	; 0x29a <__vector_7+0x8c>
      btn2++;
 286:	80 91 16 01 	lds	r24, 0x0116
 28a:	90 91 17 01 	lds	r25, 0x0117
 28e:	01 96       	adiw	r24, 0x01	; 1
 290:	90 93 17 01 	sts	0x0117, r25
 294:	80 93 16 01 	sts	0x0116, r24
 298:	08 c0       	rjmp	.+16     	; 0x2aa <__vector_7+0x9c>
   else
      btn2 = was2Pressed = 0;
 29a:	10 92 11 01 	sts	0x0111, r1
 29e:	10 92 10 01 	sts	0x0110, r1
 2a2:	10 92 17 01 	sts	0x0117, r1
 2a6:	10 92 16 01 	sts	0x0116, r1
   
   if(btn0 >= DEBOUNCE) {
 2aa:	80 91 1a 01 	lds	r24, 0x011A
 2ae:	90 91 1b 01 	lds	r25, 0x011B
 2b2:	0a 97       	sbiw	r24, 0x0a	; 10
 2b4:	94 f0       	brlt	.+36     	; 0x2da <__vector_7+0xcc>
      if (!was0Pressed)
 2b6:	80 91 14 01 	lds	r24, 0x0114
 2ba:	90 91 15 01 	lds	r25, 0x0115
 2be:	89 2b       	or	r24, r25
 2c0:	11 f4       	brne	.+4      	; 0x2c6 <__vector_7+0xb8>
         nextWave();
 2c2:	0e 94 ae 01 	call	0x35c	; 0x35c <nextWave>
      btn0 = 0;
 2c6:	10 92 1b 01 	sts	0x011B, r1
 2ca:	10 92 1a 01 	sts	0x011A, r1
      was0Pressed = 1;
 2ce:	81 e0       	ldi	r24, 0x01	; 1
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	90 93 15 01 	sts	0x0115, r25
 2d6:	80 93 14 01 	sts	0x0114, r24
   }
   
   if(btn1 >= DEBOUNCE) {
 2da:	80 91 18 01 	lds	r24, 0x0118
 2de:	90 91 19 01 	lds	r25, 0x0119
 2e2:	0a 97       	sbiw	r24, 0x0a	; 10
 2e4:	94 f0       	brlt	.+36     	; 0x30a <__vector_7+0xfc>
      if (!was1Pressed)
 2e6:	80 91 12 01 	lds	r24, 0x0112
 2ea:	90 91 13 01 	lds	r25, 0x0113
 2ee:	89 2b       	or	r24, r25
 2f0:	11 f4       	brne	.+4      	; 0x2f6 <__vector_7+0xe8>
         change_freq();
 2f2:	0e 94 c7 00 	call	0x18e	; 0x18e <change_freq>
      btn0 = 0;
 2f6:	10 92 1b 01 	sts	0x011B, r1
 2fa:	10 92 1a 01 	sts	0x011A, r1
      was1Pressed = 1;
 2fe:	81 e0       	ldi	r24, 0x01	; 1
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	90 93 13 01 	sts	0x0113, r25
 306:	80 93 12 01 	sts	0x0112, r24
   }
   
   if(btn2 >= DEBOUNCE) {
 30a:	80 91 16 01 	lds	r24, 0x0116
 30e:	90 91 17 01 	lds	r25, 0x0117
 312:	0a 97       	sbiw	r24, 0x0a	; 10
 314:	94 f0       	brlt	.+36     	; 0x33a <__vector_7+0x12c>
      if (!was2Pressed)
 316:	80 91 10 01 	lds	r24, 0x0110
 31a:	90 91 11 01 	lds	r25, 0x0111
 31e:	89 2b       	or	r24, r25
 320:	11 f4       	brne	.+4      	; 0x326 <__vector_7+0x118>
         cycleDuty();
 322:	0e 94 56 02 	call	0x4ac	; 0x4ac <cycleDuty>
      btn0 = 0;
 326:	10 92 1b 01 	sts	0x011B, r1
 32a:	10 92 1a 01 	sts	0x011A, r1
      was2Pressed = 1;
 32e:	81 e0       	ldi	r24, 0x01	; 1
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	90 93 11 01 	sts	0x0111, r25
 336:	80 93 10 01 	sts	0x0110, r24
   }
  
}
 33a:	ff 91       	pop	r31
 33c:	ef 91       	pop	r30
 33e:	bf 91       	pop	r27
 340:	af 91       	pop	r26
 342:	9f 91       	pop	r25
 344:	8f 91       	pop	r24
 346:	7f 91       	pop	r23
 348:	6f 91       	pop	r22
 34a:	5f 91       	pop	r21
 34c:	4f 91       	pop	r20
 34e:	3f 91       	pop	r19
 350:	2f 91       	pop	r18
 352:	0f 90       	pop	r0
 354:	0f be       	out	0x3f, r0	; 63
 356:	0f 90       	pop	r0
 358:	1f 90       	pop	r1
 35a:	18 95       	reti

0000035c <nextWave>:

void nextWave() {
   static int waveNdx = 0;
   static uint16_t* waves[NUM_WAVES] = {SquareWave, TriWave, SawWave, SinWave};
   
   waveNdx++;
 35c:	80 91 1c 01 	lds	r24, 0x011C
 360:	90 91 1d 01 	lds	r25, 0x011D
 364:	01 96       	adiw	r24, 0x01	; 1
   waveNdx %= NUM_WAVES;
 366:	83 70       	andi	r24, 0x03	; 3
 368:	90 78       	andi	r25, 0x80	; 128
 36a:	99 23       	and	r25, r25
 36c:	24 f4       	brge	.+8      	; 0x376 <nextWave+0x1a>
 36e:	01 97       	sbiw	r24, 0x01	; 1
 370:	8c 6f       	ori	r24, 0xFC	; 252
 372:	9f 6f       	ori	r25, 0xFF	; 255
 374:	01 96       	adiw	r24, 0x01	; 1
 376:	90 93 1d 01 	sts	0x011D, r25
 37a:	80 93 1c 01 	sts	0x011C, r24
   
   Wave = waves[waveNdx];
 37e:	88 0f       	add	r24, r24
 380:	99 1f       	adc	r25, r25
 382:	fc 01       	movw	r30, r24
 384:	e8 5f       	subi	r30, 0xF8	; 248
 386:	fe 4f       	sbci	r31, 0xFE	; 254
 388:	80 81       	ld	r24, Z
 38a:	91 81       	ldd	r25, Z+1	; 0x01
 38c:	90 93 d1 05 	sts	0x05D1, r25
 390:	80 93 d0 05 	sts	0x05D0, r24
 394:	08 95       	ret

00000396 <nextWavePoint>:
}

uint16_t nextWavePoint() {
   static int ndx = -1;
   
   ndx += sampleDivider;
 396:	20 91 04 01 	lds	r18, 0x0104
 39a:	30 91 05 01 	lds	r19, 0x0105
 39e:	80 91 00 01 	lds	r24, 0x0100
 3a2:	90 91 01 01 	lds	r25, 0x0101
 3a6:	82 0f       	add	r24, r18
 3a8:	93 1f       	adc	r25, r19
   ndx %= NUM_SAMPS;
 3aa:	66 e9       	ldi	r22, 0x96	; 150
 3ac:	70 e0       	ldi	r23, 0x00	; 0
 3ae:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <__divmodhi4>
 3b2:	90 93 05 01 	sts	0x0105, r25
 3b6:	80 93 04 01 	sts	0x0104, r24
   
   return Wave[ndx];
 3ba:	88 0f       	add	r24, r24
 3bc:	99 1f       	adc	r25, r25
 3be:	e0 91 d0 05 	lds	r30, 0x05D0
 3c2:	f0 91 d1 05 	lds	r31, 0x05D1
 3c6:	e8 0f       	add	r30, r24
 3c8:	f9 1f       	adc	r31, r25
}
 3ca:	80 81       	ld	r24, Z
 3cc:	91 81       	ldd	r25, Z+1	; 0x01
 3ce:	08 95       	ret

000003d0 <make_square_LUT>:
   dutyCycle += 10;
   dutyCycle %= 110;
   make_square_LUT();
}

void make_square_LUT(){
 3d0:	cf 92       	push	r12
 3d2:	df 92       	push	r13
 3d4:	ef 92       	push	r14
 3d6:	ff 92       	push	r15
 3d8:	0f 93       	push	r16
 3da:	1f 93       	push	r17
 3dc:	cf 93       	push	r28
 3de:	df 93       	push	r29
   int i;
   int duty = num_samples * (double) dutyCycle/100;
 3e0:	60 91 1e 01 	lds	r22, 0x011E
 3e4:	70 91 1f 01 	lds	r23, 0x011F
 3e8:	07 2e       	mov	r0, r23
 3ea:	00 0c       	add	r0, r0
 3ec:	88 0b       	sbc	r24, r24
 3ee:	99 0b       	sbc	r25, r25
 3f0:	0e 94 c9 04 	call	0x992	; 0x992 <__floatsisf>
 3f4:	6b 01       	movw	r12, r22
 3f6:	7c 01       	movw	r14, r24
 3f8:	80 91 06 01 	lds	r24, 0x0106
 3fc:	90 91 07 01 	lds	r25, 0x0107
 400:	bc 01       	movw	r22, r24
 402:	99 0f       	add	r25, r25
 404:	88 0b       	sbc	r24, r24
 406:	99 0b       	sbc	r25, r25
 408:	0e 94 c9 04 	call	0x992	; 0x992 <__floatsisf>
 40c:	9b 01       	movw	r18, r22
 40e:	ac 01       	movw	r20, r24
 410:	c7 01       	movw	r24, r14
 412:	b6 01       	movw	r22, r12
 414:	0e 94 5a 05 	call	0xab4	; 0xab4 <__mulsf3>
 418:	20 e0       	ldi	r18, 0x00	; 0
 41a:	30 e0       	ldi	r19, 0x00	; 0
 41c:	48 ec       	ldi	r20, 0xC8	; 200
 41e:	52 e4       	ldi	r21, 0x42	; 66
 420:	0e 94 1f 04 	call	0x83e	; 0x83e <__divsf3>
 424:	0e 94 91 04 	call	0x922	; 0x922 <__fixsfsi>
 428:	eb 01       	movw	r28, r22
   
   for (i = 0; i < duty; i++)
 42a:	1c 16       	cp	r1, r28
 42c:	1d 06       	cpc	r1, r29
 42e:	b4 f4       	brge	.+44     	; 0x45c <make_square_LUT+0x8c>
 430:	04 ea       	ldi	r16, 0xA4	; 164
 432:	14 e0       	ldi	r17, 0x04	; 4
 434:	66 0f       	add	r22, r22
 436:	77 1f       	adc	r23, r23
 438:	cb 01       	movw	r24, r22
 43a:	8c 55       	subi	r24, 0x5C	; 92
 43c:	9b 4f       	sbci	r25, 0xFB	; 251
 43e:	7c 01       	movw	r14, r24
      SquareWave[i] = volts_to_bits(MAX_VOLTAGE);
 440:	60 e0       	ldi	r22, 0x00	; 0
 442:	70 e0       	ldi	r23, 0x00	; 0
 444:	80 ea       	ldi	r24, 0xA0	; 160
 446:	90 e4       	ldi	r25, 0x40	; 64
 448:	0e 94 a0 00 	call	0x140	; 0x140 <volts_to_bits>
 44c:	f8 01       	movw	r30, r16
 44e:	81 93       	st	Z+, r24
 450:	91 93       	st	Z+, r25
 452:	8f 01       	movw	r16, r30

void make_square_LUT(){
   int i;
   int duty = num_samples * (double) dutyCycle/100;
   
   for (i = 0; i < duty; i++)
 454:	ee 15       	cp	r30, r14
 456:	ff 05       	cpc	r31, r15
 458:	99 f7       	brne	.-26     	; 0x440 <make_square_LUT+0x70>
 45a:	02 c0       	rjmp	.+4      	; 0x460 <make_square_LUT+0x90>
 45c:	c0 e0       	ldi	r28, 0x00	; 0
 45e:	d0 e0       	ldi	r29, 0x00	; 0
      SquareWave[i] = volts_to_bits(MAX_VOLTAGE);
   
   for ( ; i < num_samples ; i++)
 460:	80 91 1e 01 	lds	r24, 0x011E
 464:	90 91 1f 01 	lds	r25, 0x011F
 468:	c8 17       	cp	r28, r24
 46a:	d9 07       	cpc	r29, r25
 46c:	b4 f4       	brge	.+44     	; 0x49a <make_square_LUT+0xca>
 46e:	8e 01       	movw	r16, r28
 470:	00 0f       	add	r16, r16
 472:	11 1f       	adc	r17, r17
 474:	0c 55       	subi	r16, 0x5C	; 92
 476:	1b 4f       	sbci	r17, 0xFB	; 251
      SquareWave[i] = volts_to_bits(MIN_VOLTAGE);
 478:	60 e0       	ldi	r22, 0x00	; 0
 47a:	70 e0       	ldi	r23, 0x00	; 0
 47c:	cb 01       	movw	r24, r22
 47e:	0e 94 a0 00 	call	0x140	; 0x140 <volts_to_bits>
 482:	f8 01       	movw	r30, r16
 484:	81 93       	st	Z+, r24
 486:	91 93       	st	Z+, r25
 488:	8f 01       	movw	r16, r30
   int duty = num_samples * (double) dutyCycle/100;
   
   for (i = 0; i < duty; i++)
      SquareWave[i] = volts_to_bits(MAX_VOLTAGE);
   
   for ( ; i < num_samples ; i++)
 48a:	21 96       	adiw	r28, 0x01	; 1
 48c:	80 91 1e 01 	lds	r24, 0x011E
 490:	90 91 1f 01 	lds	r25, 0x011F
 494:	c8 17       	cp	r28, r24
 496:	d9 07       	cpc	r29, r25
 498:	7c f3       	brlt	.-34     	; 0x478 <make_square_LUT+0xa8>
      SquareWave[i] = volts_to_bits(MIN_VOLTAGE);
}
 49a:	df 91       	pop	r29
 49c:	cf 91       	pop	r28
 49e:	1f 91       	pop	r17
 4a0:	0f 91       	pop	r16
 4a2:	ff 90       	pop	r15
 4a4:	ef 90       	pop	r14
 4a6:	df 90       	pop	r13
 4a8:	cf 90       	pop	r12
 4aa:	08 95       	ret

000004ac <cycleDuty>:
   
   return Wave[ndx];
}

void cycleDuty() {
   dutyCycle += 10;
 4ac:	80 91 06 01 	lds	r24, 0x0106
 4b0:	90 91 07 01 	lds	r25, 0x0107
 4b4:	0a 96       	adiw	r24, 0x0a	; 10
   dutyCycle %= 110;
 4b6:	6e e6       	ldi	r22, 0x6E	; 110
 4b8:	70 e0       	ldi	r23, 0x00	; 0
 4ba:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <__divmodhi4>
 4be:	90 93 07 01 	sts	0x0107, r25
 4c2:	80 93 06 01 	sts	0x0106, r24
   make_square_LUT();
 4c6:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <make_square_LUT>
 4ca:	08 95       	ret

000004cc <make_triangle_LUT>:
   
   for ( ; i < num_samples ; i++)
      SquareWave[i] = volts_to_bits(MIN_VOLTAGE);
}

void make_triangle_LUT(){
 4cc:	4f 92       	push	r4
 4ce:	5f 92       	push	r5
 4d0:	6f 92       	push	r6
 4d2:	7f 92       	push	r7
 4d4:	af 92       	push	r10
 4d6:	bf 92       	push	r11
 4d8:	cf 92       	push	r12
 4da:	df 92       	push	r13
 4dc:	ef 92       	push	r14
 4de:	ff 92       	push	r15
 4e0:	0f 93       	push	r16
 4e2:	1f 93       	push	r17
 4e4:	cf 93       	push	r28
 4e6:	df 93       	push	r29
   int i;
   int peak = num_samples / 2;
 4e8:	a0 90 1e 01 	lds	r10, 0x011E
 4ec:	b0 90 1f 01 	lds	r11, 0x011F
 4f0:	bb 20       	and	r11, r11
 4f2:	1c f4       	brge	.+6      	; 0x4fa <make_triangle_LUT+0x2e>
 4f4:	2f ef       	ldi	r18, 0xFF	; 255
 4f6:	a2 1a       	sub	r10, r18
 4f8:	b2 0a       	sbc	r11, r18
 4fa:	b5 94       	asr	r11
 4fc:	a7 94       	ror	r10
   double increment = ((double) MAX_VOLTAGE - MIN_VOLTAGE) / peak;
 4fe:	b5 01       	movw	r22, r10
 500:	0b 2c       	mov	r0, r11
 502:	00 0c       	add	r0, r0
 504:	88 0b       	sbc	r24, r24
 506:	99 0b       	sbc	r25, r25
 508:	0e 94 c9 04 	call	0x992	; 0x992 <__floatsisf>
 50c:	9b 01       	movw	r18, r22
 50e:	ac 01       	movw	r20, r24
 510:	60 e0       	ldi	r22, 0x00	; 0
 512:	70 e0       	ldi	r23, 0x00	; 0
 514:	80 ea       	ldi	r24, 0xA0	; 160
 516:	90 e4       	ldi	r25, 0x40	; 64
 518:	0e 94 1f 04 	call	0x83e	; 0x83e <__divsf3>
 51c:	2b 01       	movw	r4, r22
 51e:	3c 01       	movw	r6, r24
   double voltage = MIN_VOLTAGE - increment;
 520:	9b 01       	movw	r18, r22
 522:	ac 01       	movw	r20, r24
 524:	60 e0       	ldi	r22, 0x00	; 0
 526:	70 e0       	ldi	r23, 0x00	; 0
 528:	cb 01       	movw	r24, r22
 52a:	0e 94 b2 03 	call	0x764	; 0x764 <__subsf3>
 52e:	6b 01       	movw	r12, r22
 530:	7c 01       	movw	r14, r24
   
   for (i = 0; i < (peak + 1); i++)
 532:	e5 01       	movw	r28, r10
 534:	21 96       	adiw	r28, 0x01	; 1
 536:	1c 16       	cp	r1, r28
 538:	1d 06       	cpc	r1, r29
 53a:	dc f4       	brge	.+54     	; 0x572 <make_triangle_LUT+0xa6>
 53c:	08 e7       	ldi	r16, 0x78	; 120
 53e:	13 e0       	ldi	r17, 0x03	; 3
 540:	c5 01       	movw	r24, r10
 542:	88 0f       	add	r24, r24
 544:	99 1f       	adc	r25, r25
 546:	fc 01       	movw	r30, r24
 548:	e6 58       	subi	r30, 0x86	; 134
 54a:	fc 4f       	sbci	r31, 0xFC	; 252
 54c:	5f 01       	movw	r10, r30
      TriWave[i] = volts_to_bits(voltage += increment);
 54e:	a3 01       	movw	r20, r6
 550:	92 01       	movw	r18, r4
 552:	c7 01       	movw	r24, r14
 554:	b6 01       	movw	r22, r12
 556:	0e 94 b3 03 	call	0x766	; 0x766 <__addsf3>
 55a:	6b 01       	movw	r12, r22
 55c:	7c 01       	movw	r14, r24
 55e:	0e 94 a0 00 	call	0x140	; 0x140 <volts_to_bits>
 562:	f8 01       	movw	r30, r16
 564:	81 93       	st	Z+, r24
 566:	91 93       	st	Z+, r25
 568:	8f 01       	movw	r16, r30
   int i;
   int peak = num_samples / 2;
   double increment = ((double) MAX_VOLTAGE - MIN_VOLTAGE) / peak;
   double voltage = MIN_VOLTAGE - increment;
   
   for (i = 0; i < (peak + 1); i++)
 56a:	ea 15       	cp	r30, r10
 56c:	fb 05       	cpc	r31, r11
 56e:	79 f7       	brne	.-34     	; 0x54e <make_triangle_LUT+0x82>
 570:	02 c0       	rjmp	.+4      	; 0x576 <make_triangle_LUT+0xaa>
 572:	c0 e0       	ldi	r28, 0x00	; 0
 574:	d0 e0       	ldi	r29, 0x00	; 0
      TriWave[i] = volts_to_bits(voltage += increment);
   
   for ( ; i < (num_samples - 1); i++)
 576:	80 91 1e 01 	lds	r24, 0x011E
 57a:	90 91 1f 01 	lds	r25, 0x011F
 57e:	01 97       	sbiw	r24, 0x01	; 1
 580:	c8 17       	cp	r28, r24
 582:	d9 07       	cpc	r29, r25
 584:	e4 f4       	brge	.+56     	; 0x5be <make_triangle_LUT+0xf2>
 586:	8e 01       	movw	r16, r28
 588:	00 0f       	add	r16, r16
 58a:	11 1f       	adc	r17, r17
 58c:	08 58       	subi	r16, 0x88	; 136
 58e:	1c 4f       	sbci	r17, 0xFC	; 252
      TriWave[i] = volts_to_bits(voltage -= increment);
 590:	a3 01       	movw	r20, r6
 592:	92 01       	movw	r18, r4
 594:	c7 01       	movw	r24, r14
 596:	b6 01       	movw	r22, r12
 598:	0e 94 b2 03 	call	0x764	; 0x764 <__subsf3>
 59c:	6b 01       	movw	r12, r22
 59e:	7c 01       	movw	r14, r24
 5a0:	0e 94 a0 00 	call	0x140	; 0x140 <volts_to_bits>
 5a4:	f8 01       	movw	r30, r16
 5a6:	81 93       	st	Z+, r24
 5a8:	91 93       	st	Z+, r25
 5aa:	8f 01       	movw	r16, r30
   double voltage = MIN_VOLTAGE - increment;
   
   for (i = 0; i < (peak + 1); i++)
      TriWave[i] = volts_to_bits(voltage += increment);
   
   for ( ; i < (num_samples - 1); i++)
 5ac:	21 96       	adiw	r28, 0x01	; 1
 5ae:	80 91 1e 01 	lds	r24, 0x011E
 5b2:	90 91 1f 01 	lds	r25, 0x011F
 5b6:	01 97       	sbiw	r24, 0x01	; 1
 5b8:	c8 17       	cp	r28, r24
 5ba:	d9 07       	cpc	r29, r25
 5bc:	4c f3       	brlt	.-46     	; 0x590 <make_triangle_LUT+0xc4>
      TriWave[i] = volts_to_bits(voltage -= increment);
}
 5be:	df 91       	pop	r29
 5c0:	cf 91       	pop	r28
 5c2:	1f 91       	pop	r17
 5c4:	0f 91       	pop	r16
 5c6:	ff 90       	pop	r15
 5c8:	ef 90       	pop	r14
 5ca:	df 90       	pop	r13
 5cc:	cf 90       	pop	r12
 5ce:	bf 90       	pop	r11
 5d0:	af 90       	pop	r10
 5d2:	7f 90       	pop	r7
 5d4:	6f 90       	pop	r6
 5d6:	5f 90       	pop	r5
 5d8:	4f 90       	pop	r4
 5da:	08 95       	ret

000005dc <make_sawtooth_LUT>:

void make_sawtooth_LUT(){
 5dc:	8f 92       	push	r8
 5de:	9f 92       	push	r9
 5e0:	af 92       	push	r10
 5e2:	bf 92       	push	r11
 5e4:	cf 92       	push	r12
 5e6:	df 92       	push	r13
 5e8:	ef 92       	push	r14
 5ea:	ff 92       	push	r15
 5ec:	0f 93       	push	r16
 5ee:	1f 93       	push	r17
 5f0:	cf 93       	push	r28
 5f2:	df 93       	push	r29
   int ndx;
   double increment = ((double) MAX_VOLTAGE - MIN_VOLTAGE) / (num_samples - 1);
 5f4:	c0 91 1e 01 	lds	r28, 0x011E
 5f8:	d0 91 1f 01 	lds	r29, 0x011F
 5fc:	be 01       	movw	r22, r28
 5fe:	61 50       	subi	r22, 0x01	; 1
 600:	71 09       	sbc	r23, r1
 602:	07 2e       	mov	r0, r23
 604:	00 0c       	add	r0, r0
 606:	88 0b       	sbc	r24, r24
 608:	99 0b       	sbc	r25, r25
 60a:	0e 94 c9 04 	call	0x992	; 0x992 <__floatsisf>
 60e:	9b 01       	movw	r18, r22
 610:	ac 01       	movw	r20, r24
 612:	60 e0       	ldi	r22, 0x00	; 0
 614:	70 e0       	ldi	r23, 0x00	; 0
 616:	80 ea       	ldi	r24, 0xA0	; 160
 618:	90 e4       	ldi	r25, 0x40	; 64
 61a:	0e 94 1f 04 	call	0x83e	; 0x83e <__divsf3>
 61e:	4b 01       	movw	r8, r22
 620:	5c 01       	movw	r10, r24
   double voltage = MIN_VOLTAGE -increment;
 622:	9b 01       	movw	r18, r22
 624:	ac 01       	movw	r20, r24
 626:	60 e0       	ldi	r22, 0x00	; 0
 628:	70 e0       	ldi	r23, 0x00	; 0
 62a:	cb 01       	movw	r24, r22
 62c:	0e 94 b2 03 	call	0x764	; 0x764 <__subsf3>
 630:	6b 01       	movw	r12, r22
 632:	7c 01       	movw	r14, r24
   
   for (ndx = 0; ndx < num_samples; ndx++)
 634:	1c 16       	cp	r1, r28
 636:	1d 06       	cpc	r1, r29
 638:	d4 f4       	brge	.+52     	; 0x66e <make_sawtooth_LUT+0x92>
 63a:	0c e4       	ldi	r16, 0x4C	; 76
 63c:	12 e0       	ldi	r17, 0x02	; 2
 63e:	c0 e0       	ldi	r28, 0x00	; 0
 640:	d0 e0       	ldi	r29, 0x00	; 0
      SawWave[ndx] = volts_to_bits(voltage += increment);
 642:	a5 01       	movw	r20, r10
 644:	94 01       	movw	r18, r8
 646:	c7 01       	movw	r24, r14
 648:	b6 01       	movw	r22, r12
 64a:	0e 94 b3 03 	call	0x766	; 0x766 <__addsf3>
 64e:	6b 01       	movw	r12, r22
 650:	7c 01       	movw	r14, r24
 652:	0e 94 a0 00 	call	0x140	; 0x140 <volts_to_bits>
 656:	f8 01       	movw	r30, r16
 658:	81 93       	st	Z+, r24
 65a:	91 93       	st	Z+, r25
 65c:	8f 01       	movw	r16, r30
void make_sawtooth_LUT(){
   int ndx;
   double increment = ((double) MAX_VOLTAGE - MIN_VOLTAGE) / (num_samples - 1);
   double voltage = MIN_VOLTAGE -increment;
   
   for (ndx = 0; ndx < num_samples; ndx++)
 65e:	21 96       	adiw	r28, 0x01	; 1
 660:	80 91 1e 01 	lds	r24, 0x011E
 664:	90 91 1f 01 	lds	r25, 0x011F
 668:	c8 17       	cp	r28, r24
 66a:	d9 07       	cpc	r29, r25
 66c:	54 f3       	brlt	.-44     	; 0x642 <make_sawtooth_LUT+0x66>
      SawWave[ndx] = volts_to_bits(voltage += increment);
}
 66e:	df 91       	pop	r29
 670:	cf 91       	pop	r28
 672:	1f 91       	pop	r17
 674:	0f 91       	pop	r16
 676:	ff 90       	pop	r15
 678:	ef 90       	pop	r14
 67a:	df 90       	pop	r13
 67c:	cf 90       	pop	r12
 67e:	bf 90       	pop	r11
 680:	af 90       	pop	r10
 682:	9f 90       	pop	r9
 684:	8f 90       	pop	r8
 686:	08 95       	ret

00000688 <make_sin_LUT>:

void make_sin_LUT(){
 688:	8f 92       	push	r8
 68a:	9f 92       	push	r9
 68c:	af 92       	push	r10
 68e:	bf 92       	push	r11
 690:	cf 92       	push	r12
 692:	df 92       	push	r13
 694:	ef 92       	push	r14
 696:	ff 92       	push	r15
 698:	0f 93       	push	r16
 69a:	1f 93       	push	r17
 69c:	cf 93       	push	r28
 69e:	df 93       	push	r29
   int ndx;
   double increment = 2 * M_PI / num_samples;
 6a0:	c0 91 1e 01 	lds	r28, 0x011E
 6a4:	d0 91 1f 01 	lds	r29, 0x011F
 6a8:	be 01       	movw	r22, r28
 6aa:	0d 2e       	mov	r0, r29
 6ac:	00 0c       	add	r0, r0
 6ae:	88 0b       	sbc	r24, r24
 6b0:	99 0b       	sbc	r25, r25
 6b2:	0e 94 c9 04 	call	0x992	; 0x992 <__floatsisf>
 6b6:	9b 01       	movw	r18, r22
 6b8:	ac 01       	movw	r20, r24
 6ba:	6b ed       	ldi	r22, 0xDB	; 219
 6bc:	7f e0       	ldi	r23, 0x0F	; 15
 6be:	89 ec       	ldi	r24, 0xC9	; 201
 6c0:	90 e4       	ldi	r25, 0x40	; 64
 6c2:	0e 94 1f 04 	call	0x83e	; 0x83e <__divsf3>
 6c6:	4b 01       	movw	r8, r22
 6c8:	5c 01       	movw	r10, r24
   double rad = -increment;
 6ca:	6b 01       	movw	r12, r22
 6cc:	7c 01       	movw	r14, r24
 6ce:	f7 fa       	bst	r15, 7
 6d0:	f0 94       	com	r15
 6d2:	f7 f8       	bld	r15, 7
 6d4:	f0 94       	com	r15
   double ampli = ((double) MAX_VOLTAGE - MIN_VOLTAGE) / 2;
   // The amplitude/2 is neccessary to compensate for sin()'s amplitude of 2
   double offset = MIN_VOLTAGE + ampli;
   
   for (ndx = 0; ndx < num_samples; ndx++)
 6d6:	1c 16       	cp	r1, r28
 6d8:	1d 06       	cpc	r1, r29
 6da:	44 f5       	brge	.+80     	; 0x72c <make_sin_LUT+0xa4>
 6dc:	00 e2       	ldi	r16, 0x20	; 32
 6de:	11 e0       	ldi	r17, 0x01	; 1
 6e0:	c0 e0       	ldi	r28, 0x00	; 0
 6e2:	d0 e0       	ldi	r29, 0x00	; 0
      SinWave[ndx] = volts_to_bits(ampli * sin(rad += increment) + offset);
 6e4:	a5 01       	movw	r20, r10
 6e6:	94 01       	movw	r18, r8
 6e8:	c7 01       	movw	r24, r14
 6ea:	b6 01       	movw	r22, r12
 6ec:	0e 94 b3 03 	call	0x766	; 0x766 <__addsf3>
 6f0:	6b 01       	movw	r12, r22
 6f2:	7c 01       	movw	r14, r24
 6f4:	0e 94 c7 05 	call	0xb8e	; 0xb8e <sin>
 6f8:	20 e0       	ldi	r18, 0x00	; 0
 6fa:	30 e0       	ldi	r19, 0x00	; 0
 6fc:	40 e2       	ldi	r20, 0x20	; 32
 6fe:	50 e4       	ldi	r21, 0x40	; 64
 700:	0e 94 5a 05 	call	0xab4	; 0xab4 <__mulsf3>
 704:	20 e0       	ldi	r18, 0x00	; 0
 706:	30 e0       	ldi	r19, 0x00	; 0
 708:	40 e2       	ldi	r20, 0x20	; 32
 70a:	50 e4       	ldi	r21, 0x40	; 64
 70c:	0e 94 b3 03 	call	0x766	; 0x766 <__addsf3>
 710:	0e 94 a0 00 	call	0x140	; 0x140 <volts_to_bits>
 714:	f8 01       	movw	r30, r16
 716:	81 93       	st	Z+, r24
 718:	91 93       	st	Z+, r25
 71a:	8f 01       	movw	r16, r30
   double rad = -increment;
   double ampli = ((double) MAX_VOLTAGE - MIN_VOLTAGE) / 2;
   // The amplitude/2 is neccessary to compensate for sin()'s amplitude of 2
   double offset = MIN_VOLTAGE + ampli;
   
   for (ndx = 0; ndx < num_samples; ndx++)
 71c:	21 96       	adiw	r28, 0x01	; 1
 71e:	80 91 1e 01 	lds	r24, 0x011E
 722:	90 91 1f 01 	lds	r25, 0x011F
 726:	c8 17       	cp	r28, r24
 728:	d9 07       	cpc	r29, r25
 72a:	e4 f2       	brlt	.-72     	; 0x6e4 <make_sin_LUT+0x5c>
      SinWave[ndx] = volts_to_bits(ampli * sin(rad += increment) + offset);
 72c:	df 91       	pop	r29
 72e:	cf 91       	pop	r28
 730:	1f 91       	pop	r17
 732:	0f 91       	pop	r16
 734:	ff 90       	pop	r15
 736:	ef 90       	pop	r14
 738:	df 90       	pop	r13
 73a:	cf 90       	pop	r12
 73c:	bf 90       	pop	r11
 73e:	af 90       	pop	r10
 740:	9f 90       	pop	r9
 742:	8f 90       	pop	r8
 744:	08 95       	ret

00000746 <initWaves>:
//   else
//      return bits;                  // return 12bit equivalent for DAC
//}

void initWaves() {
   make_square_LUT();
 746:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <make_square_LUT>
   make_triangle_LUT();
 74a:	0e 94 66 02 	call	0x4cc	; 0x4cc <make_triangle_LUT>
   make_sawtooth_LUT();
 74e:	0e 94 ee 02 	call	0x5dc	; 0x5dc <make_sawtooth_LUT>
   make_sin_LUT();
 752:	0e 94 44 03 	call	0x688	; 0x688 <make_sin_LUT>
   
   Wave = SquareWave;
 756:	84 ea       	ldi	r24, 0xA4	; 164
 758:	94 e0       	ldi	r25, 0x04	; 4
 75a:	90 93 d1 05 	sts	0x05D1, r25
 75e:	80 93 d0 05 	sts	0x05D0, r24
 762:	08 95       	ret

00000764 <__subsf3>:
 764:	50 58       	subi	r21, 0x80	; 128

00000766 <__addsf3>:
 766:	bb 27       	eor	r27, r27
 768:	aa 27       	eor	r26, r26
 76a:	0e 94 ca 03 	call	0x794	; 0x794 <__addsf3x>
 76e:	0c 94 1b 05 	jmp	0xa36	; 0xa36 <__fp_round>
 772:	0e 94 0d 05 	call	0xa1a	; 0xa1a <__fp_pscA>
 776:	38 f0       	brcs	.+14     	; 0x786 <__addsf3+0x20>
 778:	0e 94 14 05 	call	0xa28	; 0xa28 <__fp_pscB>
 77c:	20 f0       	brcs	.+8      	; 0x786 <__addsf3+0x20>
 77e:	39 f4       	brne	.+14     	; 0x78e <__addsf3+0x28>
 780:	9f 3f       	cpi	r25, 0xFF	; 255
 782:	19 f4       	brne	.+6      	; 0x78a <__addsf3+0x24>
 784:	26 f4       	brtc	.+8      	; 0x78e <__addsf3+0x28>
 786:	0c 94 0a 05 	jmp	0xa14	; 0xa14 <__fp_nan>
 78a:	0e f4       	brtc	.+2      	; 0x78e <__addsf3+0x28>
 78c:	e0 95       	com	r30
 78e:	e7 fb       	bst	r30, 7
 790:	0c 94 04 05 	jmp	0xa08	; 0xa08 <__fp_inf>

00000794 <__addsf3x>:
 794:	e9 2f       	mov	r30, r25
 796:	0e 94 2c 05 	call	0xa58	; 0xa58 <__fp_split3>
 79a:	58 f3       	brcs	.-42     	; 0x772 <__addsf3+0xc>
 79c:	ba 17       	cp	r27, r26
 79e:	62 07       	cpc	r22, r18
 7a0:	73 07       	cpc	r23, r19
 7a2:	84 07       	cpc	r24, r20
 7a4:	95 07       	cpc	r25, r21
 7a6:	20 f0       	brcs	.+8      	; 0x7b0 <__addsf3x+0x1c>
 7a8:	79 f4       	brne	.+30     	; 0x7c8 <__addsf3x+0x34>
 7aa:	a6 f5       	brtc	.+104    	; 0x814 <__addsf3x+0x80>
 7ac:	0c 94 4e 05 	jmp	0xa9c	; 0xa9c <__fp_zero>
 7b0:	0e f4       	brtc	.+2      	; 0x7b4 <__addsf3x+0x20>
 7b2:	e0 95       	com	r30
 7b4:	0b 2e       	mov	r0, r27
 7b6:	ba 2f       	mov	r27, r26
 7b8:	a0 2d       	mov	r26, r0
 7ba:	0b 01       	movw	r0, r22
 7bc:	b9 01       	movw	r22, r18
 7be:	90 01       	movw	r18, r0
 7c0:	0c 01       	movw	r0, r24
 7c2:	ca 01       	movw	r24, r20
 7c4:	a0 01       	movw	r20, r0
 7c6:	11 24       	eor	r1, r1
 7c8:	ff 27       	eor	r31, r31
 7ca:	59 1b       	sub	r21, r25
 7cc:	99 f0       	breq	.+38     	; 0x7f4 <__addsf3x+0x60>
 7ce:	59 3f       	cpi	r21, 0xF9	; 249
 7d0:	50 f4       	brcc	.+20     	; 0x7e6 <__addsf3x+0x52>
 7d2:	50 3e       	cpi	r21, 0xE0	; 224
 7d4:	68 f1       	brcs	.+90     	; 0x830 <__addsf3x+0x9c>
 7d6:	1a 16       	cp	r1, r26
 7d8:	f0 40       	sbci	r31, 0x00	; 0
 7da:	a2 2f       	mov	r26, r18
 7dc:	23 2f       	mov	r18, r19
 7de:	34 2f       	mov	r19, r20
 7e0:	44 27       	eor	r20, r20
 7e2:	58 5f       	subi	r21, 0xF8	; 248
 7e4:	f3 cf       	rjmp	.-26     	; 0x7cc <__addsf3x+0x38>
 7e6:	46 95       	lsr	r20
 7e8:	37 95       	ror	r19
 7ea:	27 95       	ror	r18
 7ec:	a7 95       	ror	r26
 7ee:	f0 40       	sbci	r31, 0x00	; 0
 7f0:	53 95       	inc	r21
 7f2:	c9 f7       	brne	.-14     	; 0x7e6 <__addsf3x+0x52>
 7f4:	7e f4       	brtc	.+30     	; 0x814 <__addsf3x+0x80>
 7f6:	1f 16       	cp	r1, r31
 7f8:	ba 0b       	sbc	r27, r26
 7fa:	62 0b       	sbc	r22, r18
 7fc:	73 0b       	sbc	r23, r19
 7fe:	84 0b       	sbc	r24, r20
 800:	ba f0       	brmi	.+46     	; 0x830 <__addsf3x+0x9c>
 802:	91 50       	subi	r25, 0x01	; 1
 804:	a1 f0       	breq	.+40     	; 0x82e <__addsf3x+0x9a>
 806:	ff 0f       	add	r31, r31
 808:	bb 1f       	adc	r27, r27
 80a:	66 1f       	adc	r22, r22
 80c:	77 1f       	adc	r23, r23
 80e:	88 1f       	adc	r24, r24
 810:	c2 f7       	brpl	.-16     	; 0x802 <__addsf3x+0x6e>
 812:	0e c0       	rjmp	.+28     	; 0x830 <__addsf3x+0x9c>
 814:	ba 0f       	add	r27, r26
 816:	62 1f       	adc	r22, r18
 818:	73 1f       	adc	r23, r19
 81a:	84 1f       	adc	r24, r20
 81c:	48 f4       	brcc	.+18     	; 0x830 <__addsf3x+0x9c>
 81e:	87 95       	ror	r24
 820:	77 95       	ror	r23
 822:	67 95       	ror	r22
 824:	b7 95       	ror	r27
 826:	f7 95       	ror	r31
 828:	9e 3f       	cpi	r25, 0xFE	; 254
 82a:	08 f0       	brcs	.+2      	; 0x82e <__addsf3x+0x9a>
 82c:	b0 cf       	rjmp	.-160    	; 0x78e <__addsf3+0x28>
 82e:	93 95       	inc	r25
 830:	88 0f       	add	r24, r24
 832:	08 f0       	brcs	.+2      	; 0x836 <__addsf3x+0xa2>
 834:	99 27       	eor	r25, r25
 836:	ee 0f       	add	r30, r30
 838:	97 95       	ror	r25
 83a:	87 95       	ror	r24
 83c:	08 95       	ret

0000083e <__divsf3>:
 83e:	0e 94 33 04 	call	0x866	; 0x866 <__divsf3x>
 842:	0c 94 1b 05 	jmp	0xa36	; 0xa36 <__fp_round>
 846:	0e 94 14 05 	call	0xa28	; 0xa28 <__fp_pscB>
 84a:	58 f0       	brcs	.+22     	; 0x862 <__divsf3+0x24>
 84c:	0e 94 0d 05 	call	0xa1a	; 0xa1a <__fp_pscA>
 850:	40 f0       	brcs	.+16     	; 0x862 <__divsf3+0x24>
 852:	29 f4       	brne	.+10     	; 0x85e <__divsf3+0x20>
 854:	5f 3f       	cpi	r21, 0xFF	; 255
 856:	29 f0       	breq	.+10     	; 0x862 <__divsf3+0x24>
 858:	0c 94 04 05 	jmp	0xa08	; 0xa08 <__fp_inf>
 85c:	51 11       	cpse	r21, r1
 85e:	0c 94 4f 05 	jmp	0xa9e	; 0xa9e <__fp_szero>
 862:	0c 94 0a 05 	jmp	0xa14	; 0xa14 <__fp_nan>

00000866 <__divsf3x>:
 866:	0e 94 2c 05 	call	0xa58	; 0xa58 <__fp_split3>
 86a:	68 f3       	brcs	.-38     	; 0x846 <__divsf3+0x8>

0000086c <__divsf3_pse>:
 86c:	99 23       	and	r25, r25
 86e:	b1 f3       	breq	.-20     	; 0x85c <__divsf3+0x1e>
 870:	55 23       	and	r21, r21
 872:	91 f3       	breq	.-28     	; 0x858 <__divsf3+0x1a>
 874:	95 1b       	sub	r25, r21
 876:	55 0b       	sbc	r21, r21
 878:	bb 27       	eor	r27, r27
 87a:	aa 27       	eor	r26, r26
 87c:	62 17       	cp	r22, r18
 87e:	73 07       	cpc	r23, r19
 880:	84 07       	cpc	r24, r20
 882:	38 f0       	brcs	.+14     	; 0x892 <__divsf3_pse+0x26>
 884:	9f 5f       	subi	r25, 0xFF	; 255
 886:	5f 4f       	sbci	r21, 0xFF	; 255
 888:	22 0f       	add	r18, r18
 88a:	33 1f       	adc	r19, r19
 88c:	44 1f       	adc	r20, r20
 88e:	aa 1f       	adc	r26, r26
 890:	a9 f3       	breq	.-22     	; 0x87c <__divsf3_pse+0x10>
 892:	35 d0       	rcall	.+106    	; 0x8fe <__divsf3_pse+0x92>
 894:	0e 2e       	mov	r0, r30
 896:	3a f0       	brmi	.+14     	; 0x8a6 <__divsf3_pse+0x3a>
 898:	e0 e8       	ldi	r30, 0x80	; 128
 89a:	32 d0       	rcall	.+100    	; 0x900 <__stack+0x1>
 89c:	91 50       	subi	r25, 0x01	; 1
 89e:	50 40       	sbci	r21, 0x00	; 0
 8a0:	e6 95       	lsr	r30
 8a2:	00 1c       	adc	r0, r0
 8a4:	ca f7       	brpl	.-14     	; 0x898 <__divsf3_pse+0x2c>
 8a6:	2b d0       	rcall	.+86     	; 0x8fe <__divsf3_pse+0x92>
 8a8:	fe 2f       	mov	r31, r30
 8aa:	29 d0       	rcall	.+82     	; 0x8fe <__divsf3_pse+0x92>
 8ac:	66 0f       	add	r22, r22
 8ae:	77 1f       	adc	r23, r23
 8b0:	88 1f       	adc	r24, r24
 8b2:	bb 1f       	adc	r27, r27
 8b4:	26 17       	cp	r18, r22
 8b6:	37 07       	cpc	r19, r23
 8b8:	48 07       	cpc	r20, r24
 8ba:	ab 07       	cpc	r26, r27
 8bc:	b0 e8       	ldi	r27, 0x80	; 128
 8be:	09 f0       	breq	.+2      	; 0x8c2 <__divsf3_pse+0x56>
 8c0:	bb 0b       	sbc	r27, r27
 8c2:	80 2d       	mov	r24, r0
 8c4:	bf 01       	movw	r22, r30
 8c6:	ff 27       	eor	r31, r31
 8c8:	93 58       	subi	r25, 0x83	; 131
 8ca:	5f 4f       	sbci	r21, 0xFF	; 255
 8cc:	3a f0       	brmi	.+14     	; 0x8dc <__divsf3_pse+0x70>
 8ce:	9e 3f       	cpi	r25, 0xFE	; 254
 8d0:	51 05       	cpc	r21, r1
 8d2:	78 f0       	brcs	.+30     	; 0x8f2 <__divsf3_pse+0x86>
 8d4:	0c 94 04 05 	jmp	0xa08	; 0xa08 <__fp_inf>
 8d8:	0c 94 4f 05 	jmp	0xa9e	; 0xa9e <__fp_szero>
 8dc:	5f 3f       	cpi	r21, 0xFF	; 255
 8de:	e4 f3       	brlt	.-8      	; 0x8d8 <__divsf3_pse+0x6c>
 8e0:	98 3e       	cpi	r25, 0xE8	; 232
 8e2:	d4 f3       	brlt	.-12     	; 0x8d8 <__divsf3_pse+0x6c>
 8e4:	86 95       	lsr	r24
 8e6:	77 95       	ror	r23
 8e8:	67 95       	ror	r22
 8ea:	b7 95       	ror	r27
 8ec:	f7 95       	ror	r31
 8ee:	9f 5f       	subi	r25, 0xFF	; 255
 8f0:	c9 f7       	brne	.-14     	; 0x8e4 <__divsf3_pse+0x78>
 8f2:	88 0f       	add	r24, r24
 8f4:	91 1d       	adc	r25, r1
 8f6:	96 95       	lsr	r25
 8f8:	87 95       	ror	r24
 8fa:	97 f9       	bld	r25, 7
 8fc:	08 95       	ret
 8fe:	e1 e0       	ldi	r30, 0x01	; 1
 900:	66 0f       	add	r22, r22
 902:	77 1f       	adc	r23, r23
 904:	88 1f       	adc	r24, r24
 906:	bb 1f       	adc	r27, r27
 908:	62 17       	cp	r22, r18
 90a:	73 07       	cpc	r23, r19
 90c:	84 07       	cpc	r24, r20
 90e:	ba 07       	cpc	r27, r26
 910:	20 f0       	brcs	.+8      	; 0x91a <__stack+0x1b>
 912:	62 1b       	sub	r22, r18
 914:	73 0b       	sbc	r23, r19
 916:	84 0b       	sbc	r24, r20
 918:	ba 0b       	sbc	r27, r26
 91a:	ee 1f       	adc	r30, r30
 91c:	88 f7       	brcc	.-30     	; 0x900 <__stack+0x1>
 91e:	e0 95       	com	r30
 920:	08 95       	ret

00000922 <__fixsfsi>:
 922:	0e 94 98 04 	call	0x930	; 0x930 <__fixunssfsi>
 926:	68 94       	set
 928:	b1 11       	cpse	r27, r1
 92a:	0c 94 4f 05 	jmp	0xa9e	; 0xa9e <__fp_szero>
 92e:	08 95       	ret

00000930 <__fixunssfsi>:
 930:	0e 94 34 05 	call	0xa68	; 0xa68 <__fp_splitA>
 934:	88 f0       	brcs	.+34     	; 0x958 <__fixunssfsi+0x28>
 936:	9f 57       	subi	r25, 0x7F	; 127
 938:	98 f0       	brcs	.+38     	; 0x960 <__fixunssfsi+0x30>
 93a:	b9 2f       	mov	r27, r25
 93c:	99 27       	eor	r25, r25
 93e:	b7 51       	subi	r27, 0x17	; 23
 940:	b0 f0       	brcs	.+44     	; 0x96e <__fixunssfsi+0x3e>
 942:	e1 f0       	breq	.+56     	; 0x97c <__fixunssfsi+0x4c>
 944:	66 0f       	add	r22, r22
 946:	77 1f       	adc	r23, r23
 948:	88 1f       	adc	r24, r24
 94a:	99 1f       	adc	r25, r25
 94c:	1a f0       	brmi	.+6      	; 0x954 <__fixunssfsi+0x24>
 94e:	ba 95       	dec	r27
 950:	c9 f7       	brne	.-14     	; 0x944 <__fixunssfsi+0x14>
 952:	14 c0       	rjmp	.+40     	; 0x97c <__fixunssfsi+0x4c>
 954:	b1 30       	cpi	r27, 0x01	; 1
 956:	91 f0       	breq	.+36     	; 0x97c <__fixunssfsi+0x4c>
 958:	0e 94 4e 05 	call	0xa9c	; 0xa9c <__fp_zero>
 95c:	b1 e0       	ldi	r27, 0x01	; 1
 95e:	08 95       	ret
 960:	0c 94 4e 05 	jmp	0xa9c	; 0xa9c <__fp_zero>
 964:	67 2f       	mov	r22, r23
 966:	78 2f       	mov	r23, r24
 968:	88 27       	eor	r24, r24
 96a:	b8 5f       	subi	r27, 0xF8	; 248
 96c:	39 f0       	breq	.+14     	; 0x97c <__fixunssfsi+0x4c>
 96e:	b9 3f       	cpi	r27, 0xF9	; 249
 970:	cc f3       	brlt	.-14     	; 0x964 <__fixunssfsi+0x34>
 972:	86 95       	lsr	r24
 974:	77 95       	ror	r23
 976:	67 95       	ror	r22
 978:	b3 95       	inc	r27
 97a:	d9 f7       	brne	.-10     	; 0x972 <__fixunssfsi+0x42>
 97c:	3e f4       	brtc	.+14     	; 0x98c <__fixunssfsi+0x5c>
 97e:	90 95       	com	r25
 980:	80 95       	com	r24
 982:	70 95       	com	r23
 984:	61 95       	neg	r22
 986:	7f 4f       	sbci	r23, 0xFF	; 255
 988:	8f 4f       	sbci	r24, 0xFF	; 255
 98a:	9f 4f       	sbci	r25, 0xFF	; 255
 98c:	08 95       	ret

0000098e <__floatunsisf>:
 98e:	e8 94       	clt
 990:	09 c0       	rjmp	.+18     	; 0x9a4 <__floatsisf+0x12>

00000992 <__floatsisf>:
 992:	97 fb       	bst	r25, 7
 994:	3e f4       	brtc	.+14     	; 0x9a4 <__floatsisf+0x12>
 996:	90 95       	com	r25
 998:	80 95       	com	r24
 99a:	70 95       	com	r23
 99c:	61 95       	neg	r22
 99e:	7f 4f       	sbci	r23, 0xFF	; 255
 9a0:	8f 4f       	sbci	r24, 0xFF	; 255
 9a2:	9f 4f       	sbci	r25, 0xFF	; 255
 9a4:	99 23       	and	r25, r25
 9a6:	a9 f0       	breq	.+42     	; 0x9d2 <__floatsisf+0x40>
 9a8:	f9 2f       	mov	r31, r25
 9aa:	96 e9       	ldi	r25, 0x96	; 150
 9ac:	bb 27       	eor	r27, r27
 9ae:	93 95       	inc	r25
 9b0:	f6 95       	lsr	r31
 9b2:	87 95       	ror	r24
 9b4:	77 95       	ror	r23
 9b6:	67 95       	ror	r22
 9b8:	b7 95       	ror	r27
 9ba:	f1 11       	cpse	r31, r1
 9bc:	f8 cf       	rjmp	.-16     	; 0x9ae <__floatsisf+0x1c>
 9be:	fa f4       	brpl	.+62     	; 0x9fe <__floatsisf+0x6c>
 9c0:	bb 0f       	add	r27, r27
 9c2:	11 f4       	brne	.+4      	; 0x9c8 <__floatsisf+0x36>
 9c4:	60 ff       	sbrs	r22, 0
 9c6:	1b c0       	rjmp	.+54     	; 0x9fe <__floatsisf+0x6c>
 9c8:	6f 5f       	subi	r22, 0xFF	; 255
 9ca:	7f 4f       	sbci	r23, 0xFF	; 255
 9cc:	8f 4f       	sbci	r24, 0xFF	; 255
 9ce:	9f 4f       	sbci	r25, 0xFF	; 255
 9d0:	16 c0       	rjmp	.+44     	; 0x9fe <__floatsisf+0x6c>
 9d2:	88 23       	and	r24, r24
 9d4:	11 f0       	breq	.+4      	; 0x9da <__floatsisf+0x48>
 9d6:	96 e9       	ldi	r25, 0x96	; 150
 9d8:	11 c0       	rjmp	.+34     	; 0x9fc <__floatsisf+0x6a>
 9da:	77 23       	and	r23, r23
 9dc:	21 f0       	breq	.+8      	; 0x9e6 <__floatsisf+0x54>
 9de:	9e e8       	ldi	r25, 0x8E	; 142
 9e0:	87 2f       	mov	r24, r23
 9e2:	76 2f       	mov	r23, r22
 9e4:	05 c0       	rjmp	.+10     	; 0x9f0 <__floatsisf+0x5e>
 9e6:	66 23       	and	r22, r22
 9e8:	71 f0       	breq	.+28     	; 0xa06 <__floatsisf+0x74>
 9ea:	96 e8       	ldi	r25, 0x86	; 134
 9ec:	86 2f       	mov	r24, r22
 9ee:	70 e0       	ldi	r23, 0x00	; 0
 9f0:	60 e0       	ldi	r22, 0x00	; 0
 9f2:	2a f0       	brmi	.+10     	; 0x9fe <__floatsisf+0x6c>
 9f4:	9a 95       	dec	r25
 9f6:	66 0f       	add	r22, r22
 9f8:	77 1f       	adc	r23, r23
 9fa:	88 1f       	adc	r24, r24
 9fc:	da f7       	brpl	.-10     	; 0x9f4 <__floatsisf+0x62>
 9fe:	88 0f       	add	r24, r24
 a00:	96 95       	lsr	r25
 a02:	87 95       	ror	r24
 a04:	97 f9       	bld	r25, 7
 a06:	08 95       	ret

00000a08 <__fp_inf>:
 a08:	97 f9       	bld	r25, 7
 a0a:	9f 67       	ori	r25, 0x7F	; 127
 a0c:	80 e8       	ldi	r24, 0x80	; 128
 a0e:	70 e0       	ldi	r23, 0x00	; 0
 a10:	60 e0       	ldi	r22, 0x00	; 0
 a12:	08 95       	ret

00000a14 <__fp_nan>:
 a14:	9f ef       	ldi	r25, 0xFF	; 255
 a16:	80 ec       	ldi	r24, 0xC0	; 192
 a18:	08 95       	ret

00000a1a <__fp_pscA>:
 a1a:	00 24       	eor	r0, r0
 a1c:	0a 94       	dec	r0
 a1e:	16 16       	cp	r1, r22
 a20:	17 06       	cpc	r1, r23
 a22:	18 06       	cpc	r1, r24
 a24:	09 06       	cpc	r0, r25
 a26:	08 95       	ret

00000a28 <__fp_pscB>:
 a28:	00 24       	eor	r0, r0
 a2a:	0a 94       	dec	r0
 a2c:	12 16       	cp	r1, r18
 a2e:	13 06       	cpc	r1, r19
 a30:	14 06       	cpc	r1, r20
 a32:	05 06       	cpc	r0, r21
 a34:	08 95       	ret

00000a36 <__fp_round>:
 a36:	09 2e       	mov	r0, r25
 a38:	03 94       	inc	r0
 a3a:	00 0c       	add	r0, r0
 a3c:	11 f4       	brne	.+4      	; 0xa42 <__fp_round+0xc>
 a3e:	88 23       	and	r24, r24
 a40:	52 f0       	brmi	.+20     	; 0xa56 <__fp_round+0x20>
 a42:	bb 0f       	add	r27, r27
 a44:	40 f4       	brcc	.+16     	; 0xa56 <__fp_round+0x20>
 a46:	bf 2b       	or	r27, r31
 a48:	11 f4       	brne	.+4      	; 0xa4e <__fp_round+0x18>
 a4a:	60 ff       	sbrs	r22, 0
 a4c:	04 c0       	rjmp	.+8      	; 0xa56 <__fp_round+0x20>
 a4e:	6f 5f       	subi	r22, 0xFF	; 255
 a50:	7f 4f       	sbci	r23, 0xFF	; 255
 a52:	8f 4f       	sbci	r24, 0xFF	; 255
 a54:	9f 4f       	sbci	r25, 0xFF	; 255
 a56:	08 95       	ret

00000a58 <__fp_split3>:
 a58:	57 fd       	sbrc	r21, 7
 a5a:	90 58       	subi	r25, 0x80	; 128
 a5c:	44 0f       	add	r20, r20
 a5e:	55 1f       	adc	r21, r21
 a60:	59 f0       	breq	.+22     	; 0xa78 <__fp_splitA+0x10>
 a62:	5f 3f       	cpi	r21, 0xFF	; 255
 a64:	71 f0       	breq	.+28     	; 0xa82 <__fp_splitA+0x1a>
 a66:	47 95       	ror	r20

00000a68 <__fp_splitA>:
 a68:	88 0f       	add	r24, r24
 a6a:	97 fb       	bst	r25, 7
 a6c:	99 1f       	adc	r25, r25
 a6e:	61 f0       	breq	.+24     	; 0xa88 <__fp_splitA+0x20>
 a70:	9f 3f       	cpi	r25, 0xFF	; 255
 a72:	79 f0       	breq	.+30     	; 0xa92 <__fp_splitA+0x2a>
 a74:	87 95       	ror	r24
 a76:	08 95       	ret
 a78:	12 16       	cp	r1, r18
 a7a:	13 06       	cpc	r1, r19
 a7c:	14 06       	cpc	r1, r20
 a7e:	55 1f       	adc	r21, r21
 a80:	f2 cf       	rjmp	.-28     	; 0xa66 <__fp_split3+0xe>
 a82:	46 95       	lsr	r20
 a84:	f1 df       	rcall	.-30     	; 0xa68 <__fp_splitA>
 a86:	08 c0       	rjmp	.+16     	; 0xa98 <__fp_splitA+0x30>
 a88:	16 16       	cp	r1, r22
 a8a:	17 06       	cpc	r1, r23
 a8c:	18 06       	cpc	r1, r24
 a8e:	99 1f       	adc	r25, r25
 a90:	f1 cf       	rjmp	.-30     	; 0xa74 <__fp_splitA+0xc>
 a92:	86 95       	lsr	r24
 a94:	71 05       	cpc	r23, r1
 a96:	61 05       	cpc	r22, r1
 a98:	08 94       	sec
 a9a:	08 95       	ret

00000a9c <__fp_zero>:
 a9c:	e8 94       	clt

00000a9e <__fp_szero>:
 a9e:	bb 27       	eor	r27, r27
 aa0:	66 27       	eor	r22, r22
 aa2:	77 27       	eor	r23, r23
 aa4:	cb 01       	movw	r24, r22
 aa6:	97 f9       	bld	r25, 7
 aa8:	08 95       	ret

00000aaa <__gesf2>:
 aaa:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__fp_cmp>
 aae:	08 f4       	brcc	.+2      	; 0xab2 <__gesf2+0x8>
 ab0:	8f ef       	ldi	r24, 0xFF	; 255
 ab2:	08 95       	ret

00000ab4 <__mulsf3>:
 ab4:	0e 94 6d 05 	call	0xada	; 0xada <__mulsf3x>
 ab8:	0c 94 1b 05 	jmp	0xa36	; 0xa36 <__fp_round>
 abc:	0e 94 0d 05 	call	0xa1a	; 0xa1a <__fp_pscA>
 ac0:	38 f0       	brcs	.+14     	; 0xad0 <__mulsf3+0x1c>
 ac2:	0e 94 14 05 	call	0xa28	; 0xa28 <__fp_pscB>
 ac6:	20 f0       	brcs	.+8      	; 0xad0 <__mulsf3+0x1c>
 ac8:	95 23       	and	r25, r21
 aca:	11 f0       	breq	.+4      	; 0xad0 <__mulsf3+0x1c>
 acc:	0c 94 04 05 	jmp	0xa08	; 0xa08 <__fp_inf>
 ad0:	0c 94 0a 05 	jmp	0xa14	; 0xa14 <__fp_nan>
 ad4:	11 24       	eor	r1, r1
 ad6:	0c 94 4f 05 	jmp	0xa9e	; 0xa9e <__fp_szero>

00000ada <__mulsf3x>:
 ada:	0e 94 2c 05 	call	0xa58	; 0xa58 <__fp_split3>
 ade:	70 f3       	brcs	.-36     	; 0xabc <__mulsf3+0x8>

00000ae0 <__mulsf3_pse>:
 ae0:	95 9f       	mul	r25, r21
 ae2:	c1 f3       	breq	.-16     	; 0xad4 <__mulsf3+0x20>
 ae4:	95 0f       	add	r25, r21
 ae6:	50 e0       	ldi	r21, 0x00	; 0
 ae8:	55 1f       	adc	r21, r21
 aea:	62 9f       	mul	r22, r18
 aec:	f0 01       	movw	r30, r0
 aee:	72 9f       	mul	r23, r18
 af0:	bb 27       	eor	r27, r27
 af2:	f0 0d       	add	r31, r0
 af4:	b1 1d       	adc	r27, r1
 af6:	63 9f       	mul	r22, r19
 af8:	aa 27       	eor	r26, r26
 afa:	f0 0d       	add	r31, r0
 afc:	b1 1d       	adc	r27, r1
 afe:	aa 1f       	adc	r26, r26
 b00:	64 9f       	mul	r22, r20
 b02:	66 27       	eor	r22, r22
 b04:	b0 0d       	add	r27, r0
 b06:	a1 1d       	adc	r26, r1
 b08:	66 1f       	adc	r22, r22
 b0a:	82 9f       	mul	r24, r18
 b0c:	22 27       	eor	r18, r18
 b0e:	b0 0d       	add	r27, r0
 b10:	a1 1d       	adc	r26, r1
 b12:	62 1f       	adc	r22, r18
 b14:	73 9f       	mul	r23, r19
 b16:	b0 0d       	add	r27, r0
 b18:	a1 1d       	adc	r26, r1
 b1a:	62 1f       	adc	r22, r18
 b1c:	83 9f       	mul	r24, r19
 b1e:	a0 0d       	add	r26, r0
 b20:	61 1d       	adc	r22, r1
 b22:	22 1f       	adc	r18, r18
 b24:	74 9f       	mul	r23, r20
 b26:	33 27       	eor	r19, r19
 b28:	a0 0d       	add	r26, r0
 b2a:	61 1d       	adc	r22, r1
 b2c:	23 1f       	adc	r18, r19
 b2e:	84 9f       	mul	r24, r20
 b30:	60 0d       	add	r22, r0
 b32:	21 1d       	adc	r18, r1
 b34:	82 2f       	mov	r24, r18
 b36:	76 2f       	mov	r23, r22
 b38:	6a 2f       	mov	r22, r26
 b3a:	11 24       	eor	r1, r1
 b3c:	9f 57       	subi	r25, 0x7F	; 127
 b3e:	50 40       	sbci	r21, 0x00	; 0
 b40:	9a f0       	brmi	.+38     	; 0xb68 <__mulsf3_pse+0x88>
 b42:	f1 f0       	breq	.+60     	; 0xb80 <__mulsf3_pse+0xa0>
 b44:	88 23       	and	r24, r24
 b46:	4a f0       	brmi	.+18     	; 0xb5a <__mulsf3_pse+0x7a>
 b48:	ee 0f       	add	r30, r30
 b4a:	ff 1f       	adc	r31, r31
 b4c:	bb 1f       	adc	r27, r27
 b4e:	66 1f       	adc	r22, r22
 b50:	77 1f       	adc	r23, r23
 b52:	88 1f       	adc	r24, r24
 b54:	91 50       	subi	r25, 0x01	; 1
 b56:	50 40       	sbci	r21, 0x00	; 0
 b58:	a9 f7       	brne	.-22     	; 0xb44 <__mulsf3_pse+0x64>
 b5a:	9e 3f       	cpi	r25, 0xFE	; 254
 b5c:	51 05       	cpc	r21, r1
 b5e:	80 f0       	brcs	.+32     	; 0xb80 <__mulsf3_pse+0xa0>
 b60:	0c 94 04 05 	jmp	0xa08	; 0xa08 <__fp_inf>
 b64:	0c 94 4f 05 	jmp	0xa9e	; 0xa9e <__fp_szero>
 b68:	5f 3f       	cpi	r21, 0xFF	; 255
 b6a:	e4 f3       	brlt	.-8      	; 0xb64 <__mulsf3_pse+0x84>
 b6c:	98 3e       	cpi	r25, 0xE8	; 232
 b6e:	d4 f3       	brlt	.-12     	; 0xb64 <__mulsf3_pse+0x84>
 b70:	86 95       	lsr	r24
 b72:	77 95       	ror	r23
 b74:	67 95       	ror	r22
 b76:	b7 95       	ror	r27
 b78:	f7 95       	ror	r31
 b7a:	e7 95       	ror	r30
 b7c:	9f 5f       	subi	r25, 0xFF	; 255
 b7e:	c1 f7       	brne	.-16     	; 0xb70 <__mulsf3_pse+0x90>
 b80:	fe 2b       	or	r31, r30
 b82:	88 0f       	add	r24, r24
 b84:	91 1d       	adc	r25, r1
 b86:	96 95       	lsr	r25
 b88:	87 95       	ror	r24
 b8a:	97 f9       	bld	r25, 7
 b8c:	08 95       	ret

00000b8e <sin>:
 b8e:	9f 93       	push	r25
 b90:	0e 94 f5 05 	call	0xbea	; 0xbea <__fp_rempio2>
 b94:	0f 90       	pop	r0
 b96:	07 fc       	sbrc	r0, 7
 b98:	ee 5f       	subi	r30, 0xFE	; 254
 b9a:	0c 94 1e 06 	jmp	0xc3c	; 0xc3c <__fp_sinus>

00000b9e <__fp_cmp>:
 b9e:	99 0f       	add	r25, r25
 ba0:	00 08       	sbc	r0, r0
 ba2:	55 0f       	add	r21, r21
 ba4:	aa 0b       	sbc	r26, r26
 ba6:	e0 e8       	ldi	r30, 0x80	; 128
 ba8:	fe ef       	ldi	r31, 0xFE	; 254
 baa:	16 16       	cp	r1, r22
 bac:	17 06       	cpc	r1, r23
 bae:	e8 07       	cpc	r30, r24
 bb0:	f9 07       	cpc	r31, r25
 bb2:	c0 f0       	brcs	.+48     	; 0xbe4 <__fp_cmp+0x46>
 bb4:	12 16       	cp	r1, r18
 bb6:	13 06       	cpc	r1, r19
 bb8:	e4 07       	cpc	r30, r20
 bba:	f5 07       	cpc	r31, r21
 bbc:	98 f0       	brcs	.+38     	; 0xbe4 <__fp_cmp+0x46>
 bbe:	62 1b       	sub	r22, r18
 bc0:	73 0b       	sbc	r23, r19
 bc2:	84 0b       	sbc	r24, r20
 bc4:	95 0b       	sbc	r25, r21
 bc6:	39 f4       	brne	.+14     	; 0xbd6 <__fp_cmp+0x38>
 bc8:	0a 26       	eor	r0, r26
 bca:	61 f0       	breq	.+24     	; 0xbe4 <__fp_cmp+0x46>
 bcc:	23 2b       	or	r18, r19
 bce:	24 2b       	or	r18, r20
 bd0:	25 2b       	or	r18, r21
 bd2:	21 f4       	brne	.+8      	; 0xbdc <__fp_cmp+0x3e>
 bd4:	08 95       	ret
 bd6:	0a 26       	eor	r0, r26
 bd8:	09 f4       	brne	.+2      	; 0xbdc <__fp_cmp+0x3e>
 bda:	a1 40       	sbci	r26, 0x01	; 1
 bdc:	a6 95       	lsr	r26
 bde:	8f ef       	ldi	r24, 0xFF	; 255
 be0:	81 1d       	adc	r24, r1
 be2:	81 1d       	adc	r24, r1
 be4:	08 95       	ret
 be6:	0c 94 0a 05 	jmp	0xa14	; 0xa14 <__fp_nan>

00000bea <__fp_rempio2>:
 bea:	0e 94 34 05 	call	0xa68	; 0xa68 <__fp_splitA>
 bee:	d8 f3       	brcs	.-10     	; 0xbe6 <__fp_cmp+0x48>
 bf0:	e8 94       	clt
 bf2:	e0 e0       	ldi	r30, 0x00	; 0
 bf4:	bb 27       	eor	r27, r27
 bf6:	9f 57       	subi	r25, 0x7F	; 127
 bf8:	f0 f0       	brcs	.+60     	; 0xc36 <__fp_rempio2+0x4c>
 bfa:	2a ed       	ldi	r18, 0xDA	; 218
 bfc:	3f e0       	ldi	r19, 0x0F	; 15
 bfe:	49 ec       	ldi	r20, 0xC9	; 201
 c00:	06 c0       	rjmp	.+12     	; 0xc0e <__fp_rempio2+0x24>
 c02:	ee 0f       	add	r30, r30
 c04:	bb 0f       	add	r27, r27
 c06:	66 1f       	adc	r22, r22
 c08:	77 1f       	adc	r23, r23
 c0a:	88 1f       	adc	r24, r24
 c0c:	28 f0       	brcs	.+10     	; 0xc18 <__fp_rempio2+0x2e>
 c0e:	b2 3a       	cpi	r27, 0xA2	; 162
 c10:	62 07       	cpc	r22, r18
 c12:	73 07       	cpc	r23, r19
 c14:	84 07       	cpc	r24, r20
 c16:	28 f0       	brcs	.+10     	; 0xc22 <__fp_rempio2+0x38>
 c18:	b2 5a       	subi	r27, 0xA2	; 162
 c1a:	62 0b       	sbc	r22, r18
 c1c:	73 0b       	sbc	r23, r19
 c1e:	84 0b       	sbc	r24, r20
 c20:	e3 95       	inc	r30
 c22:	9a 95       	dec	r25
 c24:	72 f7       	brpl	.-36     	; 0xc02 <__fp_rempio2+0x18>
 c26:	80 38       	cpi	r24, 0x80	; 128
 c28:	30 f4       	brcc	.+12     	; 0xc36 <__fp_rempio2+0x4c>
 c2a:	9a 95       	dec	r25
 c2c:	bb 0f       	add	r27, r27
 c2e:	66 1f       	adc	r22, r22
 c30:	77 1f       	adc	r23, r23
 c32:	88 1f       	adc	r24, r24
 c34:	d2 f7       	brpl	.-12     	; 0xc2a <__fp_rempio2+0x40>
 c36:	90 48       	sbci	r25, 0x80	; 128
 c38:	0c 94 34 06 	jmp	0xc68	; 0xc68 <__fp_mpack_finite>

00000c3c <__fp_sinus>:
 c3c:	ef 93       	push	r30
 c3e:	e0 ff       	sbrs	r30, 0
 c40:	07 c0       	rjmp	.+14     	; 0xc50 <__fp_sinus+0x14>
 c42:	a2 ea       	ldi	r26, 0xA2	; 162
 c44:	2a ed       	ldi	r18, 0xDA	; 218
 c46:	3f e0       	ldi	r19, 0x0F	; 15
 c48:	49 ec       	ldi	r20, 0xC9	; 201
 c4a:	5f eb       	ldi	r21, 0xBF	; 191
 c4c:	0e 94 ca 03 	call	0x794	; 0x794 <__addsf3x>
 c50:	0e 94 1b 05 	call	0xa36	; 0xa36 <__fp_round>
 c54:	0f 90       	pop	r0
 c56:	03 94       	inc	r0
 c58:	01 fc       	sbrc	r0, 1
 c5a:	90 58       	subi	r25, 0x80	; 128
 c5c:	e8 e6       	ldi	r30, 0x68	; 104
 c5e:	f0 e0       	ldi	r31, 0x00	; 0
 c60:	0c 94 40 06 	jmp	0xc80	; 0xc80 <__fp_powsodd>

00000c64 <__fp_mpack>:
 c64:	9f 3f       	cpi	r25, 0xFF	; 255
 c66:	31 f0       	breq	.+12     	; 0xc74 <__fp_mpack_finite+0xc>

00000c68 <__fp_mpack_finite>:
 c68:	91 50       	subi	r25, 0x01	; 1
 c6a:	20 f4       	brcc	.+8      	; 0xc74 <__fp_mpack_finite+0xc>
 c6c:	87 95       	ror	r24
 c6e:	77 95       	ror	r23
 c70:	67 95       	ror	r22
 c72:	b7 95       	ror	r27
 c74:	88 0f       	add	r24, r24
 c76:	91 1d       	adc	r25, r1
 c78:	96 95       	lsr	r25
 c7a:	87 95       	ror	r24
 c7c:	97 f9       	bld	r25, 7
 c7e:	08 95       	ret

00000c80 <__fp_powsodd>:
 c80:	9f 93       	push	r25
 c82:	8f 93       	push	r24
 c84:	7f 93       	push	r23
 c86:	6f 93       	push	r22
 c88:	ff 93       	push	r31
 c8a:	ef 93       	push	r30
 c8c:	9b 01       	movw	r18, r22
 c8e:	ac 01       	movw	r20, r24
 c90:	0e 94 5a 05 	call	0xab4	; 0xab4 <__mulsf3>
 c94:	ef 91       	pop	r30
 c96:	ff 91       	pop	r31
 c98:	0e 94 54 06 	call	0xca8	; 0xca8 <__fp_powser>
 c9c:	2f 91       	pop	r18
 c9e:	3f 91       	pop	r19
 ca0:	4f 91       	pop	r20
 ca2:	5f 91       	pop	r21
 ca4:	0c 94 5a 05 	jmp	0xab4	; 0xab4 <__mulsf3>

00000ca8 <__fp_powser>:
 ca8:	df 93       	push	r29
 caa:	cf 93       	push	r28
 cac:	1f 93       	push	r17
 cae:	0f 93       	push	r16
 cb0:	ff 92       	push	r15
 cb2:	ef 92       	push	r14
 cb4:	df 92       	push	r13
 cb6:	7b 01       	movw	r14, r22
 cb8:	8c 01       	movw	r16, r24
 cba:	68 94       	set
 cbc:	06 c0       	rjmp	.+12     	; 0xcca <__fp_powser+0x22>
 cbe:	da 2e       	mov	r13, r26
 cc0:	ef 01       	movw	r28, r30
 cc2:	0e 94 6d 05 	call	0xada	; 0xada <__mulsf3x>
 cc6:	fe 01       	movw	r30, r28
 cc8:	e8 94       	clt
 cca:	a5 91       	lpm	r26, Z+
 ccc:	25 91       	lpm	r18, Z+
 cce:	35 91       	lpm	r19, Z+
 cd0:	45 91       	lpm	r20, Z+
 cd2:	55 91       	lpm	r21, Z+
 cd4:	a6 f3       	brts	.-24     	; 0xcbe <__fp_powser+0x16>
 cd6:	ef 01       	movw	r28, r30
 cd8:	0e 94 ca 03 	call	0x794	; 0x794 <__addsf3x>
 cdc:	fe 01       	movw	r30, r28
 cde:	97 01       	movw	r18, r14
 ce0:	a8 01       	movw	r20, r16
 ce2:	da 94       	dec	r13
 ce4:	69 f7       	brne	.-38     	; 0xcc0 <__fp_powser+0x18>
 ce6:	df 90       	pop	r13
 ce8:	ef 90       	pop	r14
 cea:	ff 90       	pop	r15
 cec:	0f 91       	pop	r16
 cee:	1f 91       	pop	r17
 cf0:	cf 91       	pop	r28
 cf2:	df 91       	pop	r29
 cf4:	08 95       	ret

00000cf6 <__divmodhi4>:
 cf6:	97 fb       	bst	r25, 7
 cf8:	07 2e       	mov	r0, r23
 cfa:	16 f4       	brtc	.+4      	; 0xd00 <__divmodhi4+0xa>
 cfc:	00 94       	com	r0
 cfe:	07 d0       	rcall	.+14     	; 0xd0e <__divmodhi4_neg1>
 d00:	77 fd       	sbrc	r23, 7
 d02:	09 d0       	rcall	.+18     	; 0xd16 <__divmodhi4_neg2>
 d04:	0e 94 8f 06 	call	0xd1e	; 0xd1e <__udivmodhi4>
 d08:	07 fc       	sbrc	r0, 7
 d0a:	05 d0       	rcall	.+10     	; 0xd16 <__divmodhi4_neg2>
 d0c:	3e f4       	brtc	.+14     	; 0xd1c <__divmodhi4_exit>

00000d0e <__divmodhi4_neg1>:
 d0e:	90 95       	com	r25
 d10:	81 95       	neg	r24
 d12:	9f 4f       	sbci	r25, 0xFF	; 255
 d14:	08 95       	ret

00000d16 <__divmodhi4_neg2>:
 d16:	70 95       	com	r23
 d18:	61 95       	neg	r22
 d1a:	7f 4f       	sbci	r23, 0xFF	; 255

00000d1c <__divmodhi4_exit>:
 d1c:	08 95       	ret

00000d1e <__udivmodhi4>:
 d1e:	aa 1b       	sub	r26, r26
 d20:	bb 1b       	sub	r27, r27
 d22:	51 e1       	ldi	r21, 0x11	; 17
 d24:	07 c0       	rjmp	.+14     	; 0xd34 <__udivmodhi4_ep>

00000d26 <__udivmodhi4_loop>:
 d26:	aa 1f       	adc	r26, r26
 d28:	bb 1f       	adc	r27, r27
 d2a:	a6 17       	cp	r26, r22
 d2c:	b7 07       	cpc	r27, r23
 d2e:	10 f0       	brcs	.+4      	; 0xd34 <__udivmodhi4_ep>
 d30:	a6 1b       	sub	r26, r22
 d32:	b7 0b       	sbc	r27, r23

00000d34 <__udivmodhi4_ep>:
 d34:	88 1f       	adc	r24, r24
 d36:	99 1f       	adc	r25, r25
 d38:	5a 95       	dec	r21
 d3a:	a9 f7       	brne	.-22     	; 0xd26 <__udivmodhi4_loop>
 d3c:	80 95       	com	r24
 d3e:	90 95       	com	r25
 d40:	bc 01       	movw	r22, r24
 d42:	cd 01       	movw	r24, r26
 d44:	08 95       	ret

00000d46 <_exit>:
 d46:	f8 94       	cli

00000d48 <__stop_program>:
 d48:	ff cf       	rjmp	.-2      	; 0xd48 <__stop_program>
