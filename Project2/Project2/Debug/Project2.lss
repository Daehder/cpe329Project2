
Project2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000db2  00000e46  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000db2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000004a2  00800110  00800110  00000e56  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e56  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e88  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  00000ec8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000aa0  00000000  00000000  00000fd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000455  00000000  00000000  00001a70  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004db  00000000  00000000  00001ec5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000348  00000000  00000000  000023a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003fc  00000000  00000000  000026e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000085f  00000000  00000000  00002ae4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  00003343  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 43 00 	jmp	0x86	; 0x86 <__ctors_end>
   4:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
   8:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
   c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  10:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  14:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  18:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  1c:	0c 94 3a 01 	jmp	0x274	; 0x274 <__vector_7>
  20:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  24:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  28:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  2c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  30:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  34:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  38:	0c 94 14 01 	jmp	0x228	; 0x228 <__vector_14>
  3c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  40:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  44:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  48:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  4c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  50:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  54:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  58:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  5c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  60:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  64:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  68:	05 a8       	ldd	r0, Z+53	; 0x35
  6a:	4c cd       	rjmp	.-1384   	; 0xfffffb04 <__eeprom_end+0xff7efb04>
  6c:	b2 d4       	rcall	.+2404   	; 0x9d2 <__fixunssfsi+0x3a>
  6e:	4e b9       	out	0x0e, r20	; 14
  70:	38 36       	cpi	r19, 0x68	; 104
  72:	a9 02       	muls	r26, r25
  74:	0c 50       	subi	r16, 0x0C	; 12
  76:	b9 91       	ld	r27, Y+
  78:	86 88       	ldd	r8, Z+22	; 0x16
  7a:	08 3c       	cpi	r16, 0xC8	; 200
  7c:	a6 aa       	std	Z+54, r10	; 0x36
  7e:	aa 2a       	or	r10, r26
  80:	be 00       	.word	0x00be	; ????
  82:	00 00       	nop
  84:	80 3f       	cpi	r24, 0xF0	; 240

00000086 <__ctors_end>:
  86:	11 24       	eor	r1, r1
  88:	1f be       	out	0x3f, r1	; 63
  8a:	cf ef       	ldi	r28, 0xFF	; 255
  8c:	d8 e0       	ldi	r29, 0x08	; 8
  8e:	de bf       	out	0x3e, r29	; 62
  90:	cd bf       	out	0x3d, r28	; 61

00000092 <__do_copy_data>:
  92:	11 e0       	ldi	r17, 0x01	; 1
  94:	a0 e0       	ldi	r26, 0x00	; 0
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	e2 eb       	ldi	r30, 0xB2	; 178
  9a:	fd e0       	ldi	r31, 0x0D	; 13
  9c:	02 c0       	rjmp	.+4      	; 0xa2 <__do_copy_data+0x10>
  9e:	05 90       	lpm	r0, Z+
  a0:	0d 92       	st	X+, r0
  a2:	a0 31       	cpi	r26, 0x10	; 16
  a4:	b1 07       	cpc	r27, r17
  a6:	d9 f7       	brne	.-10     	; 0x9e <__do_copy_data+0xc>

000000a8 <__do_clear_bss>:
  a8:	25 e0       	ldi	r18, 0x05	; 5
  aa:	a0 e1       	ldi	r26, 0x10	; 16
  ac:	b1 e0       	ldi	r27, 0x01	; 1
  ae:	01 c0       	rjmp	.+2      	; 0xb2 <.do_clear_bss_start>

000000b0 <.do_clear_bss_loop>:
  b0:	1d 92       	st	X+, r1

000000b2 <.do_clear_bss_start>:
  b2:	a2 3b       	cpi	r26, 0xB2	; 178
  b4:	b2 07       	cpc	r27, r18
  b6:	e1 f7       	brne	.-8      	; 0xb0 <.do_clear_bss_loop>
  b8:	0e 94 04 01 	call	0x208	; 0x208 <main>
  bc:	0c 94 d7 06 	jmp	0xdae	; 0xdae <_exit>

000000c0 <__bad_interrupt>:
  c0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c4 <Initialize_ADC0>:
int sampleDivider = 1;

// sets up SPI system between ATmega328P and slave device(s)
void Initialize_ADC0(void)
{
	ADCSRA = 0x87;	//Turn On ADC and set prescaler (CLK/128)
  c4:	87 e8       	ldi	r24, 0x87	; 135
  c6:	80 93 7a 00 	sts	0x007A, r24
	ADCSRB = 0x00;	//turn off autotrigger
  ca:	10 92 7b 00 	sts	0x007B, r1
	ADMUX = 0x00;    	//Set ADC channel ADC0
  ce:	10 92 7c 00 	sts	0x007C, r1
  d2:	08 95       	ret

000000d4 <Initialize_SPI_Master>:
}

void Initialize_SPI_Master(){
   SPCR = (0<<SPIE) |               // No interrupts
  d4:	80 e5       	ldi	r24, 0x50	; 80
  d6:	8c bd       	out	0x2c, r24	; 44
   (1<<SPE) |                       // SPI enabled
   (1<<MSTR) ;                      // master
   SPSR = 0x00;                     // clear flags
  d8:	1d bc       	out	0x2d, r1	; 45
   PORTB = 1 << SS;                 // make sure SS is high
  da:	84 e0       	ldi	r24, 0x04	; 4
  dc:	85 b9       	out	0x05, r24	; 5
  de:	08 95       	ret

000000e0 <initTimer0>:
}

// Initializing timer 0 (change OCR0A for freq change!!!!!)
void initTimer0(){
   TCCR0A = 0x02;                   // timer CTC mode
  e0:	82 e0       	ldi	r24, 0x02	; 2
  e2:	84 bd       	out	0x24, r24	; 36
   OCR0A = overflow0;          // sets counter overflow
  e4:	90 91 03 01 	lds	r25, 0x0103
  e8:	97 bd       	out	0x27, r25	; 39
   TCCR0B = 0x02;                   // timer clk = system clk / 8 (2MHz)
  ea:	85 bd       	out	0x25, r24	; 37
   TIFR0 = 0x02;                    // Interrupt occurs at OCRF0A overflow
  ec:	85 bb       	out	0x15, r24	; 21
   TIMSK0 = 0x02;                   // OCRF0A overflow interrupt enabled
  ee:	80 93 6e 00 	sts	0x006E, r24
  f2:	08 95       	ret

000000f4 <initTimer2>:
}

void initTimer2(){
	TCCR2A = 0x02;                   // timer CTC mode
  f4:	82 e0       	ldi	r24, 0x02	; 2
  f6:	80 93 b0 00 	sts	0x00B0, r24
	OCR2A = overflow2;		        // sets counter overflow
  fa:	90 91 02 01 	lds	r25, 0x0102
  fe:	90 93 b3 00 	sts	0x00B3, r25
	TCCR2B = 0x04;                   // timer clk = system clk / 256 (2MHz)
 102:	94 e0       	ldi	r25, 0x04	; 4
 104:	90 93 b1 00 	sts	0x00B1, r25
	TIFR2 = 0x02;                    // Interrupt occurs at OCRF2A overflow
 108:	87 bb       	out	0x17, r24	; 23
	TIMSK2 = 0x02;                   // OCRF0A overflow interrupt enabled
 10a:	80 93 70 00 	sts	0x0070, r24
 10e:	08 95       	ret

00000110 <GPIO_Initialization>:
}


// initializes GPIO I/O, SPI interface, and interrupts
void GPIO_Initialization(){
   DDRB |= (1<<MOSI) | (1<<SCK) | (1<<SS);	// make MOSI, SCK and SS outputs
 110:	84 b1       	in	r24, 0x04	; 4
 112:	8c 62       	ori	r24, 0x2C	; 44
 114:	84 b9       	out	0x04, r24	; 4
   DDRD &= ~(1<<BTN1) | ~(1<<BTN1) | ~(1<<BTN2) | ~(1<<SW1);	// set buttons & switches as inputs
 116:	8a b1       	in	r24, 0x0a	; 10
 118:	8a b9       	out	0x0a, r24	; 10
   DDRD |= (1<<LED2) | (1<<LED3);				// debug LEDs are output
 11a:	8a b1       	in	r24, 0x0a	; 10
 11c:	8c 60       	ori	r24, 0x0C	; 12
 11e:	8a b9       	out	0x0a, r24	; 10
   PORTD |= (1<<BTN0) | (1<<BTN1) | (1<<BTN2);	// set internal pull-ups
 120:	8b b1       	in	r24, 0x0b	; 11
 122:	80 6e       	ori	r24, 0xE0	; 224
 124:	8b b9       	out	0x0b, r24	; 11
   Initialize_SPI_Master();			// initialize SPI to DAC
 126:	0e 94 6a 00 	call	0xd4	; 0xd4 <Initialize_SPI_Master>
   initTimer0();							// initialize timer0
 12a:	0e 94 70 00 	call	0xe0	; 0xe0 <initTimer0>
   initTimer2();
 12e:	0e 94 7a 00 	call	0xf4	; 0xf4 <initTimer2>
   Initialize_ADC0();
 132:	0e 94 62 00 	call	0xc4	; 0xc4 <Initialize_ADC0>
   sei();									// enable interrupts
 136:	78 94       	sei
 138:	08 95       	ret

0000013a <Transmit_SPI_Master>:
   return btnPressed;
}

// sends data to DAC over SPI data port
void Transmit_SPI_Master(int Data) {
   PORTB &= ~(1 << SS);					//Assert slave select (active low)
 13a:	2a 98       	cbi	0x05, 2	; 5
   SPDR = ((Data >> 8) & 0xF) | 0x70;		//Attach configuration Bits onto MSB
 13c:	9f 70       	andi	r25, 0x0F	; 15
 13e:	90 67       	ori	r25, 0x70	; 112
 140:	9e bd       	out	0x2e, r25	; 46
   while (!(SPSR & (1<<SPIF)));
 142:	0d b4       	in	r0, 0x2d	; 45
 144:	07 fe       	sbrs	r0, 7
 146:	fd cf       	rjmp	.-6      	; 0x142 <Transmit_SPI_Master+0x8>
   SPDR = 0xFF & Data;
 148:	8e bd       	out	0x2e, r24	; 46
   while (!(SPSR & (1<<SPIF)));
 14a:	0d b4       	in	r0, 0x2d	; 45
 14c:	07 fe       	sbrs	r0, 7
 14e:	fd cf       	rjmp	.-6      	; 0x14a <Transmit_SPI_Master+0x10>
   PORTB |= 1 << SS;						//Turn off slave select
 150:	2a 9a       	sbi	0x05, 2	; 5
 152:	08 95       	ret

00000154 <volts_to_bits>:
      _delay_ms(1);

}

// converts input voltage between 0-5V to 12bit number for DAC
uint16_t volts_to_bits(double voltage){
 154:	cf 92       	push	r12
 156:	df 92       	push	r13
 158:	ef 92       	push	r14
 15a:	ff 92       	push	r15
   double bits = ((voltage/5.0)*4095);
 15c:	20 e0       	ldi	r18, 0x00	; 0
 15e:	30 e0       	ldi	r19, 0x00	; 0
 160:	40 ea       	ldi	r20, 0xA0	; 160
 162:	50 e4       	ldi	r21, 0x40	; 64
 164:	0e 94 53 04 	call	0x8a6	; 0x8a6 <__divsf3>
 168:	20 e0       	ldi	r18, 0x00	; 0
 16a:	30 ef       	ldi	r19, 0xF0	; 240
 16c:	4f e7       	ldi	r20, 0x7F	; 127
 16e:	55 e4       	ldi	r21, 0x45	; 69
 170:	0e 94 8e 05 	call	0xb1c	; 0xb1c <__mulsf3>
 174:	6b 01       	movw	r12, r22
 176:	7c 01       	movw	r14, r24
   if(bits>4095)
 178:	20 e0       	ldi	r18, 0x00	; 0
 17a:	30 ef       	ldi	r19, 0xF0	; 240
 17c:	4f e7       	ldi	r20, 0x7F	; 127
 17e:	55 e4       	ldi	r21, 0x45	; 69
 180:	0e 94 89 05 	call	0xb12	; 0xb12 <__gesf2>
 184:	18 16       	cp	r1, r24
 186:	34 f0       	brlt	.+12     	; 0x194 <volts_to_bits+0x40>
		return 4095;
	else
	 return bits;                  // return 12bit equivalent for DAC
 188:	c7 01       	movw	r24, r14
 18a:	b6 01       	movw	r22, r12
 18c:	0e 94 cc 04 	call	0x998	; 0x998 <__fixunssfsi>
 190:	cb 01       	movw	r24, r22
 192:	02 c0       	rjmp	.+4      	; 0x198 <volts_to_bits+0x44>

// converts input voltage between 0-5V to 12bit number for DAC
uint16_t volts_to_bits(double voltage){
   double bits = ((voltage/5.0)*4095);
   if(bits>4095)
		return 4095;
 194:	8f ef       	ldi	r24, 0xFF	; 255
 196:	9f e0       	ldi	r25, 0x0F	; 15
	else
	 return bits;                  // return 12bit equivalent for DAC
}
 198:	ff 90       	pop	r15
 19a:	ef 90       	pop	r14
 19c:	df 90       	pop	r13
 19e:	cf 90       	pop	r12
 1a0:	08 95       	ret

000001a2 <cycleFreq>:
   sampleDivider++;
   sampleDivider %= 3;
}

void cycleFreq() {
   if (overflow0 == OVERFLOW_100HZ){
 1a2:	80 91 03 01 	lds	r24, 0x0103
 1a6:	87 38       	cpi	r24, 0x87	; 135
 1a8:	51 f4       	brne	.+20     	; 0x1be <cycleFreq+0x1c>
      sampleDivider = 1;
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	90 93 01 01 	sts	0x0101, r25
 1b2:	80 93 00 01 	sts	0x0100, r24
      overflow0 = OVERFLOW_200HZ;
 1b6:	83 e4       	ldi	r24, 0x43	; 67
 1b8:	80 93 03 01 	sts	0x0103, r24
 1bc:	21 c0       	rjmp	.+66     	; 0x200 <cycleFreq+0x5e>
   }
   else if (overflow0 == OVERFLOW_200HZ) {
 1be:	83 34       	cpi	r24, 0x43	; 67
 1c0:	51 f4       	brne	.+20     	; 0x1d6 <cycleFreq+0x34>
      sampleDivider = 2;
 1c2:	82 e0       	ldi	r24, 0x02	; 2
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	90 93 01 01 	sts	0x0101, r25
 1ca:	80 93 00 01 	sts	0x0100, r24
      overflow0 = OVERFLOW_300HZ;
 1ce:	8a e5       	ldi	r24, 0x5A	; 90
 1d0:	80 93 03 01 	sts	0x0103, r24
 1d4:	15 c0       	rjmp	.+42     	; 0x200 <cycleFreq+0x5e>
   }
   else if (overflow0 == OVERFLOW_300HZ) {
 1d6:	8a 35       	cpi	r24, 0x5A	; 90
 1d8:	51 f4       	brne	.+20     	; 0x1ee <cycleFreq+0x4c>
      sampleDivider = 2;
 1da:	82 e0       	ldi	r24, 0x02	; 2
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	90 93 01 01 	sts	0x0101, r25
 1e2:	80 93 00 01 	sts	0x0100, r24
      overflow0 = OVERFLOW_400HZ;
 1e6:	83 e4       	ldi	r24, 0x43	; 67
 1e8:	80 93 03 01 	sts	0x0103, r24
 1ec:	09 c0       	rjmp	.+18     	; 0x200 <cycleFreq+0x5e>
   else if (overflow0 == OVERFLOW_400HZ) {
      sampleDivider = 2;
      overflow0 = OVERFLOW_500HZ;
   }
   else{
      sampleDivider = 1;
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	90 93 01 01 	sts	0x0101, r25
 1f6:	80 93 00 01 	sts	0x0100, r24
      overflow0 = OVERFLOW_100HZ;
 1fa:	87 e8       	ldi	r24, 0x87	; 135
 1fc:	80 93 03 01 	sts	0x0103, r24
   }
   OCR0A = overflow0;
 200:	80 91 03 01 	lds	r24, 0x0103
 204:	87 bd       	out	0x27, r24	; 39
 206:	08 95       	ret

00000208 <main>:
uint8_t overflow0 = 1;	// set overflow value frequency change
uint8_t overflow2 = 63;	// set overflow value for button checking

int main(void)
{
	num_samples = NUM_SAMPS;
 208:	82 e9       	ldi	r24, 0x92	; 146
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	90 93 1f 01 	sts	0x011F, r25
 210:	80 93 1e 01 	sts	0x011E, r24
	
   // initialize GPIO, interrupts, and timers
   GPIO_Initialization();
 214:	0e 94 88 00 	call	0x110	; 0x110 <GPIO_Initialization>
   
   // fill square, sawtooth, triangle, and sine wave LUTs
   initWaves();
 218:	0e 94 d7 03 	call	0x7ae	; 0x7ae <initWaves>
   
   while (1){
	   if(PIND & (1<<SW1))
 21c:	4c 9b       	sbis	0x09, 4	; 9
 21e:	02 c0       	rjmp	.+4      	; 0x224 <main+0x1c>
		PORTD |= (1<<LED2);
 220:	5a 9a       	sbi	0x0b, 2	; 11
 222:	fc cf       	rjmp	.-8      	; 0x21c <main+0x14>
		else
			PORTD &= ~(1<<LED2);
 224:	5a 98       	cbi	0x0b, 2	; 11
 226:	fa cf       	rjmp	.-12     	; 0x21c <main+0x14>

00000228 <__vector_14>:
}

///////////////////////////////////ISR/////////////////////////////////////////

// ISR to increment through wave function LUTs and set frequency
ISR(TIMER0_COMPA_vect){
 228:	1f 92       	push	r1
 22a:	0f 92       	push	r0
 22c:	0f b6       	in	r0, 0x3f	; 63
 22e:	0f 92       	push	r0
 230:	11 24       	eor	r1, r1
 232:	2f 93       	push	r18
 234:	3f 93       	push	r19
 236:	4f 93       	push	r20
 238:	5f 93       	push	r21
 23a:	6f 93       	push	r22
 23c:	7f 93       	push	r23
 23e:	8f 93       	push	r24
 240:	9f 93       	push	r25
 242:	af 93       	push	r26
 244:	bf 93       	push	r27
 246:	ef 93       	push	r30
 248:	ff 93       	push	r31
   Transmit_SPI_Master(nextWavePoint());
 24a:	0e 94 ff 01 	call	0x3fe	; 0x3fe <nextWavePoint>
 24e:	0e 94 9d 00 	call	0x13a	; 0x13a <Transmit_SPI_Master>
   //PORTD |= (1<<LED2);
 
}
 252:	ff 91       	pop	r31
 254:	ef 91       	pop	r30
 256:	bf 91       	pop	r27
 258:	af 91       	pop	r26
 25a:	9f 91       	pop	r25
 25c:	8f 91       	pop	r24
 25e:	7f 91       	pop	r23
 260:	6f 91       	pop	r22
 262:	5f 91       	pop	r21
 264:	4f 91       	pop	r20
 266:	3f 91       	pop	r19
 268:	2f 91       	pop	r18
 26a:	0f 90       	pop	r0
 26c:	0f be       	out	0x3f, r0	; 63
 26e:	0f 90       	pop	r0
 270:	1f 90       	pop	r1
 272:	18 95       	reti

00000274 <__vector_7>:

ISR(TIMER2_COMPA_vect){
 274:	1f 92       	push	r1
 276:	0f 92       	push	r0
 278:	0f b6       	in	r0, 0x3f	; 63
 27a:	0f 92       	push	r0
 27c:	11 24       	eor	r1, r1
 27e:	2f 93       	push	r18
 280:	3f 93       	push	r19
 282:	4f 93       	push	r20
 284:	5f 93       	push	r21
 286:	6f 93       	push	r22
 288:	7f 93       	push	r23
 28a:	8f 93       	push	r24
 28c:	9f 93       	push	r25
 28e:	af 93       	push	r26
 290:	bf 93       	push	r27
 292:	ef 93       	push	r30
 294:	ff 93       	push	r31
   if (!(PIND & 1 << BTN0))
 296:	4f 99       	sbic	0x09, 7	; 9
 298:	0a c0       	rjmp	.+20     	; 0x2ae <__vector_7+0x3a>
      btn0++;
 29a:	80 91 1a 01 	lds	r24, 0x011A
 29e:	90 91 1b 01 	lds	r25, 0x011B
 2a2:	01 96       	adiw	r24, 0x01	; 1
 2a4:	90 93 1b 01 	sts	0x011B, r25
 2a8:	80 93 1a 01 	sts	0x011A, r24
 2ac:	08 c0       	rjmp	.+16     	; 0x2be <__vector_7+0x4a>
   else
      btn0 = was0Pressed = 0;
 2ae:	10 92 15 01 	sts	0x0115, r1
 2b2:	10 92 14 01 	sts	0x0114, r1
 2b6:	10 92 1b 01 	sts	0x011B, r1
 2ba:	10 92 1a 01 	sts	0x011A, r1
   
   if (!(PIND & 1 << BTN1))
 2be:	4e 99       	sbic	0x09, 6	; 9
 2c0:	0a c0       	rjmp	.+20     	; 0x2d6 <__vector_7+0x62>
      btn1++;
 2c2:	80 91 18 01 	lds	r24, 0x0118
 2c6:	90 91 19 01 	lds	r25, 0x0119
 2ca:	01 96       	adiw	r24, 0x01	; 1
 2cc:	90 93 19 01 	sts	0x0119, r25
 2d0:	80 93 18 01 	sts	0x0118, r24
 2d4:	08 c0       	rjmp	.+16     	; 0x2e6 <__vector_7+0x72>
   else
      btn1 = was1Pressed = 0;
 2d6:	10 92 13 01 	sts	0x0113, r1
 2da:	10 92 12 01 	sts	0x0112, r1
 2de:	10 92 19 01 	sts	0x0119, r1
 2e2:	10 92 18 01 	sts	0x0118, r1
   
   if (!(PIND & 1 << BTN2))
 2e6:	4d 99       	sbic	0x09, 5	; 9
 2e8:	0a c0       	rjmp	.+20     	; 0x2fe <__vector_7+0x8a>
      btn2++;
 2ea:	80 91 16 01 	lds	r24, 0x0116
 2ee:	90 91 17 01 	lds	r25, 0x0117
 2f2:	01 96       	adiw	r24, 0x01	; 1
 2f4:	90 93 17 01 	sts	0x0117, r25
 2f8:	80 93 16 01 	sts	0x0116, r24
 2fc:	08 c0       	rjmp	.+16     	; 0x30e <__vector_7+0x9a>
   else
      btn2 = was2Pressed = 0;
 2fe:	10 92 11 01 	sts	0x0111, r1
 302:	10 92 10 01 	sts	0x0110, r1
 306:	10 92 17 01 	sts	0x0117, r1
 30a:	10 92 16 01 	sts	0x0116, r1
   
   if(btn0 >= DEBOUNCE) {
 30e:	80 91 1a 01 	lds	r24, 0x011A
 312:	90 91 1b 01 	lds	r25, 0x011B
 316:	0a 97       	sbiw	r24, 0x0a	; 10
 318:	94 f0       	brlt	.+36     	; 0x33e <__vector_7+0xca>
      if (!was0Pressed)
 31a:	80 91 14 01 	lds	r24, 0x0114
 31e:	90 91 15 01 	lds	r25, 0x0115
 322:	89 2b       	or	r24, r25
 324:	11 f4       	brne	.+4      	; 0x32a <__vector_7+0xb6>
         nextWave();
 326:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <nextWave>
      btn0 = 0;
 32a:	10 92 1b 01 	sts	0x011B, r1
 32e:	10 92 1a 01 	sts	0x011A, r1
      was0Pressed = 1;
 332:	81 e0       	ldi	r24, 0x01	; 1
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	90 93 15 01 	sts	0x0115, r25
 33a:	80 93 14 01 	sts	0x0114, r24
   }
   
   if(btn1 >= DEBOUNCE) {
 33e:	80 91 18 01 	lds	r24, 0x0118
 342:	90 91 19 01 	lds	r25, 0x0119
 346:	0a 97       	sbiw	r24, 0x0a	; 10
 348:	9c f0       	brlt	.+38     	; 0x370 <__vector_7+0xfc>
      if (!was1Pressed) {
 34a:	80 91 12 01 	lds	r24, 0x0112
 34e:	90 91 13 01 	lds	r25, 0x0113
 352:	89 2b       	or	r24, r25
 354:	19 f4       	brne	.+6      	; 0x35c <__vector_7+0xe8>
         PORTD &= ~(1<<LED3);
 356:	5b 98       	cbi	0x0b, 3	; 11
         cycleFreq();
 358:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <cycleFreq>
      }
      btn1 = 0;
 35c:	10 92 19 01 	sts	0x0119, r1
 360:	10 92 18 01 	sts	0x0118, r1
      was1Pressed = 1;
 364:	81 e0       	ldi	r24, 0x01	; 1
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	90 93 13 01 	sts	0x0113, r25
 36c:	80 93 12 01 	sts	0x0112, r24
   }
   
   if(btn2 >= DEBOUNCE) {
 370:	80 91 16 01 	lds	r24, 0x0116
 374:	90 91 17 01 	lds	r25, 0x0117
 378:	0a 97       	sbiw	r24, 0x0a	; 10
 37a:	9c f0       	brlt	.+38     	; 0x3a2 <__vector_7+0x12e>
      if (!was2Pressed) {
 37c:	80 91 10 01 	lds	r24, 0x0110
 380:	90 91 11 01 	lds	r25, 0x0111
 384:	89 2b       	or	r24, r25
 386:	11 f4       	brne	.+4      	; 0x38c <__vector_7+0x118>
         cycleDuty();
 388:	0e 94 8a 02 	call	0x514	; 0x514 <cycleDuty>
      }
	  PORTD |= (1<<LED3);
 38c:	5b 9a       	sbi	0x0b, 3	; 11
      btn2 = 0;
 38e:	10 92 17 01 	sts	0x0117, r1
 392:	10 92 16 01 	sts	0x0116, r1
      was2Pressed = 1;
 396:	81 e0       	ldi	r24, 0x01	; 1
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	90 93 11 01 	sts	0x0111, r25
 39e:	80 93 10 01 	sts	0x0110, r24
   }
  
}
 3a2:	ff 91       	pop	r31
 3a4:	ef 91       	pop	r30
 3a6:	bf 91       	pop	r27
 3a8:	af 91       	pop	r26
 3aa:	9f 91       	pop	r25
 3ac:	8f 91       	pop	r24
 3ae:	7f 91       	pop	r23
 3b0:	6f 91       	pop	r22
 3b2:	5f 91       	pop	r21
 3b4:	4f 91       	pop	r20
 3b6:	3f 91       	pop	r19
 3b8:	2f 91       	pop	r18
 3ba:	0f 90       	pop	r0
 3bc:	0f be       	out	0x3f, r0	; 63
 3be:	0f 90       	pop	r0
 3c0:	1f 90       	pop	r1
 3c2:	18 95       	reti

000003c4 <nextWave>:

void nextWave() {
   static int waveNdx = 0;
   static uint16_t* waves[NUM_WAVES] = {SquareWave, TriWave, SawWave, SinWave};
   
   waveNdx++;
 3c4:	80 91 1c 01 	lds	r24, 0x011C
 3c8:	90 91 1d 01 	lds	r25, 0x011D
 3cc:	01 96       	adiw	r24, 0x01	; 1
   waveNdx %= NUM_WAVES;
 3ce:	83 70       	andi	r24, 0x03	; 3
 3d0:	90 78       	andi	r25, 0x80	; 128
 3d2:	99 23       	and	r25, r25
 3d4:	24 f4       	brge	.+8      	; 0x3de <nextWave+0x1a>
 3d6:	01 97       	sbiw	r24, 0x01	; 1
 3d8:	8c 6f       	ori	r24, 0xFC	; 252
 3da:	9f 6f       	ori	r25, 0xFF	; 255
 3dc:	01 96       	adiw	r24, 0x01	; 1
 3de:	90 93 1d 01 	sts	0x011D, r25
 3e2:	80 93 1c 01 	sts	0x011C, r24
   
   Wave = waves[waveNdx];
 3e6:	88 0f       	add	r24, r24
 3e8:	99 1f       	adc	r25, r25
 3ea:	fc 01       	movw	r30, r24
 3ec:	e8 5f       	subi	r30, 0xF8	; 248
 3ee:	fe 4f       	sbci	r31, 0xFE	; 254
 3f0:	80 81       	ld	r24, Z
 3f2:	91 81       	ldd	r25, Z+1	; 0x01
 3f4:	90 93 b1 05 	sts	0x05B1, r25
 3f8:	80 93 b0 05 	sts	0x05B0, r24
 3fc:	08 95       	ret

000003fe <nextWavePoint>:
}

uint16_t nextWavePoint() {
   static int ndx = -1;
   
   ndx += sampleDivider;
 3fe:	20 91 04 01 	lds	r18, 0x0104
 402:	30 91 05 01 	lds	r19, 0x0105
 406:	80 91 00 01 	lds	r24, 0x0100
 40a:	90 91 01 01 	lds	r25, 0x0101
 40e:	82 0f       	add	r24, r18
 410:	93 1f       	adc	r25, r19
   ndx %= NUM_SAMPS;
 412:	62 e9       	ldi	r22, 0x92	; 146
 414:	70 e0       	ldi	r23, 0x00	; 0
 416:	0e 94 af 06 	call	0xd5e	; 0xd5e <__divmodhi4>
 41a:	90 93 05 01 	sts	0x0105, r25
 41e:	80 93 04 01 	sts	0x0104, r24
   
   return Wave[ndx];
 422:	88 0f       	add	r24, r24
 424:	99 1f       	adc	r25, r25
 426:	e0 91 b0 05 	lds	r30, 0x05B0
 42a:	f0 91 b1 05 	lds	r31, 0x05B1
 42e:	e8 0f       	add	r30, r24
 430:	f9 1f       	adc	r31, r25
}
 432:	80 81       	ld	r24, Z
 434:	91 81       	ldd	r25, Z+1	; 0x01
 436:	08 95       	ret

00000438 <make_square_LUT>:
   dutyCycle += 10;
   dutyCycle %= 110;
   make_square_LUT();
}

void make_square_LUT(){
 438:	cf 92       	push	r12
 43a:	df 92       	push	r13
 43c:	ef 92       	push	r14
 43e:	ff 92       	push	r15
 440:	0f 93       	push	r16
 442:	1f 93       	push	r17
 444:	cf 93       	push	r28
 446:	df 93       	push	r29
   int i;
   int duty = num_samples * (double) dutyCycle/100;
 448:	60 91 1e 01 	lds	r22, 0x011E
 44c:	70 91 1f 01 	lds	r23, 0x011F
 450:	07 2e       	mov	r0, r23
 452:	00 0c       	add	r0, r0
 454:	88 0b       	sbc	r24, r24
 456:	99 0b       	sbc	r25, r25
 458:	0e 94 fd 04 	call	0x9fa	; 0x9fa <__floatsisf>
 45c:	6b 01       	movw	r12, r22
 45e:	7c 01       	movw	r14, r24
 460:	80 91 06 01 	lds	r24, 0x0106
 464:	90 91 07 01 	lds	r25, 0x0107
 468:	bc 01       	movw	r22, r24
 46a:	99 0f       	add	r25, r25
 46c:	88 0b       	sbc	r24, r24
 46e:	99 0b       	sbc	r25, r25
 470:	0e 94 fd 04 	call	0x9fa	; 0x9fa <__floatsisf>
 474:	9b 01       	movw	r18, r22
 476:	ac 01       	movw	r20, r24
 478:	c7 01       	movw	r24, r14
 47a:	b6 01       	movw	r22, r12
 47c:	0e 94 8e 05 	call	0xb1c	; 0xb1c <__mulsf3>
 480:	20 e0       	ldi	r18, 0x00	; 0
 482:	30 e0       	ldi	r19, 0x00	; 0
 484:	48 ec       	ldi	r20, 0xC8	; 200
 486:	52 e4       	ldi	r21, 0x42	; 66
 488:	0e 94 53 04 	call	0x8a6	; 0x8a6 <__divsf3>
 48c:	0e 94 c5 04 	call	0x98a	; 0x98a <__fixsfsi>
 490:	eb 01       	movw	r28, r22
   
   for (i = 0; i < duty; i++)
 492:	1c 16       	cp	r1, r28
 494:	1d 06       	cpc	r1, r29
 496:	b4 f4       	brge	.+44     	; 0x4c4 <make_square_LUT+0x8c>
 498:	0c e8       	ldi	r16, 0x8C	; 140
 49a:	14 e0       	ldi	r17, 0x04	; 4
 49c:	66 0f       	add	r22, r22
 49e:	77 1f       	adc	r23, r23
 4a0:	cb 01       	movw	r24, r22
 4a2:	84 57       	subi	r24, 0x74	; 116
 4a4:	9b 4f       	sbci	r25, 0xFB	; 251
 4a6:	7c 01       	movw	r14, r24
      SquareWave[i] = volts_to_bits(MAX_VOLTAGE);
 4a8:	60 e0       	ldi	r22, 0x00	; 0
 4aa:	70 e0       	ldi	r23, 0x00	; 0
 4ac:	80 ea       	ldi	r24, 0xA0	; 160
 4ae:	90 e4       	ldi	r25, 0x40	; 64
 4b0:	0e 94 aa 00 	call	0x154	; 0x154 <volts_to_bits>
 4b4:	f8 01       	movw	r30, r16
 4b6:	81 93       	st	Z+, r24
 4b8:	91 93       	st	Z+, r25
 4ba:	8f 01       	movw	r16, r30

void make_square_LUT(){
   int i;
   int duty = num_samples * (double) dutyCycle/100;
   
   for (i = 0; i < duty; i++)
 4bc:	ee 15       	cp	r30, r14
 4be:	ff 05       	cpc	r31, r15
 4c0:	99 f7       	brne	.-26     	; 0x4a8 <make_square_LUT+0x70>
 4c2:	02 c0       	rjmp	.+4      	; 0x4c8 <make_square_LUT+0x90>
 4c4:	c0 e0       	ldi	r28, 0x00	; 0
 4c6:	d0 e0       	ldi	r29, 0x00	; 0
      SquareWave[i] = volts_to_bits(MAX_VOLTAGE);
   
   for ( ; i < num_samples ; i++)
 4c8:	80 91 1e 01 	lds	r24, 0x011E
 4cc:	90 91 1f 01 	lds	r25, 0x011F
 4d0:	c8 17       	cp	r28, r24
 4d2:	d9 07       	cpc	r29, r25
 4d4:	b4 f4       	brge	.+44     	; 0x502 <make_square_LUT+0xca>
 4d6:	8e 01       	movw	r16, r28
 4d8:	00 0f       	add	r16, r16
 4da:	11 1f       	adc	r17, r17
 4dc:	04 57       	subi	r16, 0x74	; 116
 4de:	1b 4f       	sbci	r17, 0xFB	; 251
      SquareWave[i] = volts_to_bits(MIN_VOLTAGE);
 4e0:	60 e0       	ldi	r22, 0x00	; 0
 4e2:	70 e0       	ldi	r23, 0x00	; 0
 4e4:	cb 01       	movw	r24, r22
 4e6:	0e 94 aa 00 	call	0x154	; 0x154 <volts_to_bits>
 4ea:	f8 01       	movw	r30, r16
 4ec:	81 93       	st	Z+, r24
 4ee:	91 93       	st	Z+, r25
 4f0:	8f 01       	movw	r16, r30
   int duty = num_samples * (double) dutyCycle/100;
   
   for (i = 0; i < duty; i++)
      SquareWave[i] = volts_to_bits(MAX_VOLTAGE);
   
   for ( ; i < num_samples ; i++)
 4f2:	21 96       	adiw	r28, 0x01	; 1
 4f4:	80 91 1e 01 	lds	r24, 0x011E
 4f8:	90 91 1f 01 	lds	r25, 0x011F
 4fc:	c8 17       	cp	r28, r24
 4fe:	d9 07       	cpc	r29, r25
 500:	7c f3       	brlt	.-34     	; 0x4e0 <make_square_LUT+0xa8>
      SquareWave[i] = volts_to_bits(MIN_VOLTAGE);
}
 502:	df 91       	pop	r29
 504:	cf 91       	pop	r28
 506:	1f 91       	pop	r17
 508:	0f 91       	pop	r16
 50a:	ff 90       	pop	r15
 50c:	ef 90       	pop	r14
 50e:	df 90       	pop	r13
 510:	cf 90       	pop	r12
 512:	08 95       	ret

00000514 <cycleDuty>:
   
   return Wave[ndx];
}

void cycleDuty() {
   dutyCycle += 10;
 514:	80 91 06 01 	lds	r24, 0x0106
 518:	90 91 07 01 	lds	r25, 0x0107
 51c:	0a 96       	adiw	r24, 0x0a	; 10
   dutyCycle %= 110;
 51e:	6e e6       	ldi	r22, 0x6E	; 110
 520:	70 e0       	ldi	r23, 0x00	; 0
 522:	0e 94 af 06 	call	0xd5e	; 0xd5e <__divmodhi4>
 526:	90 93 07 01 	sts	0x0107, r25
 52a:	80 93 06 01 	sts	0x0106, r24
   make_square_LUT();
 52e:	0e 94 1c 02 	call	0x438	; 0x438 <make_square_LUT>
 532:	08 95       	ret

00000534 <make_triangle_LUT>:
   
   for ( ; i < num_samples ; i++)
      SquareWave[i] = volts_to_bits(MIN_VOLTAGE);
}

void make_triangle_LUT(){
 534:	4f 92       	push	r4
 536:	5f 92       	push	r5
 538:	6f 92       	push	r6
 53a:	7f 92       	push	r7
 53c:	af 92       	push	r10
 53e:	bf 92       	push	r11
 540:	cf 92       	push	r12
 542:	df 92       	push	r13
 544:	ef 92       	push	r14
 546:	ff 92       	push	r15
 548:	0f 93       	push	r16
 54a:	1f 93       	push	r17
 54c:	cf 93       	push	r28
 54e:	df 93       	push	r29
   int i;
   int peak = num_samples / 2;
 550:	a0 90 1e 01 	lds	r10, 0x011E
 554:	b0 90 1f 01 	lds	r11, 0x011F
 558:	bb 20       	and	r11, r11
 55a:	1c f4       	brge	.+6      	; 0x562 <make_triangle_LUT+0x2e>
 55c:	2f ef       	ldi	r18, 0xFF	; 255
 55e:	a2 1a       	sub	r10, r18
 560:	b2 0a       	sbc	r11, r18
 562:	b5 94       	asr	r11
 564:	a7 94       	ror	r10
   double increment = ((double) MAX_VOLTAGE - MIN_VOLTAGE) / peak;
 566:	b5 01       	movw	r22, r10
 568:	0b 2c       	mov	r0, r11
 56a:	00 0c       	add	r0, r0
 56c:	88 0b       	sbc	r24, r24
 56e:	99 0b       	sbc	r25, r25
 570:	0e 94 fd 04 	call	0x9fa	; 0x9fa <__floatsisf>
 574:	9b 01       	movw	r18, r22
 576:	ac 01       	movw	r20, r24
 578:	60 e0       	ldi	r22, 0x00	; 0
 57a:	70 e0       	ldi	r23, 0x00	; 0
 57c:	80 ea       	ldi	r24, 0xA0	; 160
 57e:	90 e4       	ldi	r25, 0x40	; 64
 580:	0e 94 53 04 	call	0x8a6	; 0x8a6 <__divsf3>
 584:	2b 01       	movw	r4, r22
 586:	3c 01       	movw	r6, r24
   double voltage = MIN_VOLTAGE - increment;
 588:	9b 01       	movw	r18, r22
 58a:	ac 01       	movw	r20, r24
 58c:	60 e0       	ldi	r22, 0x00	; 0
 58e:	70 e0       	ldi	r23, 0x00	; 0
 590:	cb 01       	movw	r24, r22
 592:	0e 94 e6 03 	call	0x7cc	; 0x7cc <__subsf3>
 596:	6b 01       	movw	r12, r22
 598:	7c 01       	movw	r14, r24
   
   for (i = 0; i < (peak + 1); i++)
 59a:	e5 01       	movw	r28, r10
 59c:	21 96       	adiw	r28, 0x01	; 1
 59e:	1c 16       	cp	r1, r28
 5a0:	1d 06       	cpc	r1, r29
 5a2:	dc f4       	brge	.+54     	; 0x5da <make_triangle_LUT+0xa6>
 5a4:	08 e6       	ldi	r16, 0x68	; 104
 5a6:	13 e0       	ldi	r17, 0x03	; 3
 5a8:	c5 01       	movw	r24, r10
 5aa:	88 0f       	add	r24, r24
 5ac:	99 1f       	adc	r25, r25
 5ae:	fc 01       	movw	r30, r24
 5b0:	e6 59       	subi	r30, 0x96	; 150
 5b2:	fc 4f       	sbci	r31, 0xFC	; 252
 5b4:	5f 01       	movw	r10, r30
      TriWave[i] = volts_to_bits(voltage += increment);
 5b6:	a3 01       	movw	r20, r6
 5b8:	92 01       	movw	r18, r4
 5ba:	c7 01       	movw	r24, r14
 5bc:	b6 01       	movw	r22, r12
 5be:	0e 94 e7 03 	call	0x7ce	; 0x7ce <__addsf3>
 5c2:	6b 01       	movw	r12, r22
 5c4:	7c 01       	movw	r14, r24
 5c6:	0e 94 aa 00 	call	0x154	; 0x154 <volts_to_bits>
 5ca:	f8 01       	movw	r30, r16
 5cc:	81 93       	st	Z+, r24
 5ce:	91 93       	st	Z+, r25
 5d0:	8f 01       	movw	r16, r30
   int i;
   int peak = num_samples / 2;
   double increment = ((double) MAX_VOLTAGE - MIN_VOLTAGE) / peak;
   double voltage = MIN_VOLTAGE - increment;
   
   for (i = 0; i < (peak + 1); i++)
 5d2:	ea 15       	cp	r30, r10
 5d4:	fb 05       	cpc	r31, r11
 5d6:	79 f7       	brne	.-34     	; 0x5b6 <make_triangle_LUT+0x82>
 5d8:	02 c0       	rjmp	.+4      	; 0x5de <make_triangle_LUT+0xaa>
 5da:	c0 e0       	ldi	r28, 0x00	; 0
 5dc:	d0 e0       	ldi	r29, 0x00	; 0
      TriWave[i] = volts_to_bits(voltage += increment);
   
   for ( ; i < (num_samples - 1); i++)
 5de:	80 91 1e 01 	lds	r24, 0x011E
 5e2:	90 91 1f 01 	lds	r25, 0x011F
 5e6:	01 97       	sbiw	r24, 0x01	; 1
 5e8:	c8 17       	cp	r28, r24
 5ea:	d9 07       	cpc	r29, r25
 5ec:	e4 f4       	brge	.+56     	; 0x626 <make_triangle_LUT+0xf2>
 5ee:	8e 01       	movw	r16, r28
 5f0:	00 0f       	add	r16, r16
 5f2:	11 1f       	adc	r17, r17
 5f4:	08 59       	subi	r16, 0x98	; 152
 5f6:	1c 4f       	sbci	r17, 0xFC	; 252
      TriWave[i] = volts_to_bits(voltage -= increment);
 5f8:	a3 01       	movw	r20, r6
 5fa:	92 01       	movw	r18, r4
 5fc:	c7 01       	movw	r24, r14
 5fe:	b6 01       	movw	r22, r12
 600:	0e 94 e6 03 	call	0x7cc	; 0x7cc <__subsf3>
 604:	6b 01       	movw	r12, r22
 606:	7c 01       	movw	r14, r24
 608:	0e 94 aa 00 	call	0x154	; 0x154 <volts_to_bits>
 60c:	f8 01       	movw	r30, r16
 60e:	81 93       	st	Z+, r24
 610:	91 93       	st	Z+, r25
 612:	8f 01       	movw	r16, r30
   double voltage = MIN_VOLTAGE - increment;
   
   for (i = 0; i < (peak + 1); i++)
      TriWave[i] = volts_to_bits(voltage += increment);
   
   for ( ; i < (num_samples - 1); i++)
 614:	21 96       	adiw	r28, 0x01	; 1
 616:	80 91 1e 01 	lds	r24, 0x011E
 61a:	90 91 1f 01 	lds	r25, 0x011F
 61e:	01 97       	sbiw	r24, 0x01	; 1
 620:	c8 17       	cp	r28, r24
 622:	d9 07       	cpc	r29, r25
 624:	4c f3       	brlt	.-46     	; 0x5f8 <make_triangle_LUT+0xc4>
      TriWave[i] = volts_to_bits(voltage -= increment);
}
 626:	df 91       	pop	r29
 628:	cf 91       	pop	r28
 62a:	1f 91       	pop	r17
 62c:	0f 91       	pop	r16
 62e:	ff 90       	pop	r15
 630:	ef 90       	pop	r14
 632:	df 90       	pop	r13
 634:	cf 90       	pop	r12
 636:	bf 90       	pop	r11
 638:	af 90       	pop	r10
 63a:	7f 90       	pop	r7
 63c:	6f 90       	pop	r6
 63e:	5f 90       	pop	r5
 640:	4f 90       	pop	r4
 642:	08 95       	ret

00000644 <make_sawtooth_LUT>:

void make_sawtooth_LUT(){
 644:	8f 92       	push	r8
 646:	9f 92       	push	r9
 648:	af 92       	push	r10
 64a:	bf 92       	push	r11
 64c:	cf 92       	push	r12
 64e:	df 92       	push	r13
 650:	ef 92       	push	r14
 652:	ff 92       	push	r15
 654:	0f 93       	push	r16
 656:	1f 93       	push	r17
 658:	cf 93       	push	r28
 65a:	df 93       	push	r29
   int ndx;
   double increment = ((double) MAX_VOLTAGE - MIN_VOLTAGE) / (num_samples - 1);
 65c:	c0 91 1e 01 	lds	r28, 0x011E
 660:	d0 91 1f 01 	lds	r29, 0x011F
 664:	be 01       	movw	r22, r28
 666:	61 50       	subi	r22, 0x01	; 1
 668:	71 09       	sbc	r23, r1
 66a:	07 2e       	mov	r0, r23
 66c:	00 0c       	add	r0, r0
 66e:	88 0b       	sbc	r24, r24
 670:	99 0b       	sbc	r25, r25
 672:	0e 94 fd 04 	call	0x9fa	; 0x9fa <__floatsisf>
 676:	9b 01       	movw	r18, r22
 678:	ac 01       	movw	r20, r24
 67a:	60 e0       	ldi	r22, 0x00	; 0
 67c:	70 e0       	ldi	r23, 0x00	; 0
 67e:	80 ea       	ldi	r24, 0xA0	; 160
 680:	90 e4       	ldi	r25, 0x40	; 64
 682:	0e 94 53 04 	call	0x8a6	; 0x8a6 <__divsf3>
 686:	4b 01       	movw	r8, r22
 688:	5c 01       	movw	r10, r24
   double voltage = MIN_VOLTAGE -increment;
 68a:	9b 01       	movw	r18, r22
 68c:	ac 01       	movw	r20, r24
 68e:	60 e0       	ldi	r22, 0x00	; 0
 690:	70 e0       	ldi	r23, 0x00	; 0
 692:	cb 01       	movw	r24, r22
 694:	0e 94 e6 03 	call	0x7cc	; 0x7cc <__subsf3>
 698:	6b 01       	movw	r12, r22
 69a:	7c 01       	movw	r14, r24
   
   for (ndx = 0; ndx < num_samples; ndx++)
 69c:	1c 16       	cp	r1, r28
 69e:	1d 06       	cpc	r1, r29
 6a0:	d4 f4       	brge	.+52     	; 0x6d6 <make_sawtooth_LUT+0x92>
 6a2:	04 e4       	ldi	r16, 0x44	; 68
 6a4:	12 e0       	ldi	r17, 0x02	; 2
 6a6:	c0 e0       	ldi	r28, 0x00	; 0
 6a8:	d0 e0       	ldi	r29, 0x00	; 0
      SawWave[ndx] = volts_to_bits(voltage += increment);
 6aa:	a5 01       	movw	r20, r10
 6ac:	94 01       	movw	r18, r8
 6ae:	c7 01       	movw	r24, r14
 6b0:	b6 01       	movw	r22, r12
 6b2:	0e 94 e7 03 	call	0x7ce	; 0x7ce <__addsf3>
 6b6:	6b 01       	movw	r12, r22
 6b8:	7c 01       	movw	r14, r24
 6ba:	0e 94 aa 00 	call	0x154	; 0x154 <volts_to_bits>
 6be:	f8 01       	movw	r30, r16
 6c0:	81 93       	st	Z+, r24
 6c2:	91 93       	st	Z+, r25
 6c4:	8f 01       	movw	r16, r30
void make_sawtooth_LUT(){
   int ndx;
   double increment = ((double) MAX_VOLTAGE - MIN_VOLTAGE) / (num_samples - 1);
   double voltage = MIN_VOLTAGE -increment;
   
   for (ndx = 0; ndx < num_samples; ndx++)
 6c6:	21 96       	adiw	r28, 0x01	; 1
 6c8:	80 91 1e 01 	lds	r24, 0x011E
 6cc:	90 91 1f 01 	lds	r25, 0x011F
 6d0:	c8 17       	cp	r28, r24
 6d2:	d9 07       	cpc	r29, r25
 6d4:	54 f3       	brlt	.-44     	; 0x6aa <make_sawtooth_LUT+0x66>
      SawWave[ndx] = volts_to_bits(voltage += increment);
}
 6d6:	df 91       	pop	r29
 6d8:	cf 91       	pop	r28
 6da:	1f 91       	pop	r17
 6dc:	0f 91       	pop	r16
 6de:	ff 90       	pop	r15
 6e0:	ef 90       	pop	r14
 6e2:	df 90       	pop	r13
 6e4:	cf 90       	pop	r12
 6e6:	bf 90       	pop	r11
 6e8:	af 90       	pop	r10
 6ea:	9f 90       	pop	r9
 6ec:	8f 90       	pop	r8
 6ee:	08 95       	ret

000006f0 <make_sin_LUT>:

void make_sin_LUT(){
 6f0:	8f 92       	push	r8
 6f2:	9f 92       	push	r9
 6f4:	af 92       	push	r10
 6f6:	bf 92       	push	r11
 6f8:	cf 92       	push	r12
 6fa:	df 92       	push	r13
 6fc:	ef 92       	push	r14
 6fe:	ff 92       	push	r15
 700:	0f 93       	push	r16
 702:	1f 93       	push	r17
 704:	cf 93       	push	r28
 706:	df 93       	push	r29
   int ndx;
   double increment = 2 * M_PI / num_samples;
 708:	c0 91 1e 01 	lds	r28, 0x011E
 70c:	d0 91 1f 01 	lds	r29, 0x011F
 710:	be 01       	movw	r22, r28
 712:	0d 2e       	mov	r0, r29
 714:	00 0c       	add	r0, r0
 716:	88 0b       	sbc	r24, r24
 718:	99 0b       	sbc	r25, r25
 71a:	0e 94 fd 04 	call	0x9fa	; 0x9fa <__floatsisf>
 71e:	9b 01       	movw	r18, r22
 720:	ac 01       	movw	r20, r24
 722:	6b ed       	ldi	r22, 0xDB	; 219
 724:	7f e0       	ldi	r23, 0x0F	; 15
 726:	89 ec       	ldi	r24, 0xC9	; 201
 728:	90 e4       	ldi	r25, 0x40	; 64
 72a:	0e 94 53 04 	call	0x8a6	; 0x8a6 <__divsf3>
 72e:	4b 01       	movw	r8, r22
 730:	5c 01       	movw	r10, r24
   double rad = -increment;
 732:	6b 01       	movw	r12, r22
 734:	7c 01       	movw	r14, r24
 736:	f7 fa       	bst	r15, 7
 738:	f0 94       	com	r15
 73a:	f7 f8       	bld	r15, 7
 73c:	f0 94       	com	r15
   double ampli = ((double) MAX_VOLTAGE - MIN_VOLTAGE) / 2;
   // The amplitude/2 is neccessary to compensate for sin()'s amplitude of 2
   double offset = MIN_VOLTAGE + ampli;
   
   for (ndx = 0; ndx < num_samples; ndx++)
 73e:	1c 16       	cp	r1, r28
 740:	1d 06       	cpc	r1, r29
 742:	44 f5       	brge	.+80     	; 0x794 <make_sin_LUT+0xa4>
 744:	00 e2       	ldi	r16, 0x20	; 32
 746:	11 e0       	ldi	r17, 0x01	; 1
 748:	c0 e0       	ldi	r28, 0x00	; 0
 74a:	d0 e0       	ldi	r29, 0x00	; 0
      SinWave[ndx] = volts_to_bits(ampli * sin(rad += increment) + offset);
 74c:	a5 01       	movw	r20, r10
 74e:	94 01       	movw	r18, r8
 750:	c7 01       	movw	r24, r14
 752:	b6 01       	movw	r22, r12
 754:	0e 94 e7 03 	call	0x7ce	; 0x7ce <__addsf3>
 758:	6b 01       	movw	r12, r22
 75a:	7c 01       	movw	r14, r24
 75c:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <sin>
 760:	20 e0       	ldi	r18, 0x00	; 0
 762:	30 e0       	ldi	r19, 0x00	; 0
 764:	40 e2       	ldi	r20, 0x20	; 32
 766:	50 e4       	ldi	r21, 0x40	; 64
 768:	0e 94 8e 05 	call	0xb1c	; 0xb1c <__mulsf3>
 76c:	20 e0       	ldi	r18, 0x00	; 0
 76e:	30 e0       	ldi	r19, 0x00	; 0
 770:	40 e2       	ldi	r20, 0x20	; 32
 772:	50 e4       	ldi	r21, 0x40	; 64
 774:	0e 94 e7 03 	call	0x7ce	; 0x7ce <__addsf3>
 778:	0e 94 aa 00 	call	0x154	; 0x154 <volts_to_bits>
 77c:	f8 01       	movw	r30, r16
 77e:	81 93       	st	Z+, r24
 780:	91 93       	st	Z+, r25
 782:	8f 01       	movw	r16, r30
   double rad = -increment;
   double ampli = ((double) MAX_VOLTAGE - MIN_VOLTAGE) / 2;
   // The amplitude/2 is neccessary to compensate for sin()'s amplitude of 2
   double offset = MIN_VOLTAGE + ampli;
   
   for (ndx = 0; ndx < num_samples; ndx++)
 784:	21 96       	adiw	r28, 0x01	; 1
 786:	80 91 1e 01 	lds	r24, 0x011E
 78a:	90 91 1f 01 	lds	r25, 0x011F
 78e:	c8 17       	cp	r28, r24
 790:	d9 07       	cpc	r29, r25
 792:	e4 f2       	brlt	.-72     	; 0x74c <make_sin_LUT+0x5c>
      SinWave[ndx] = volts_to_bits(ampli * sin(rad += increment) + offset);
 794:	df 91       	pop	r29
 796:	cf 91       	pop	r28
 798:	1f 91       	pop	r17
 79a:	0f 91       	pop	r16
 79c:	ff 90       	pop	r15
 79e:	ef 90       	pop	r14
 7a0:	df 90       	pop	r13
 7a2:	cf 90       	pop	r12
 7a4:	bf 90       	pop	r11
 7a6:	af 90       	pop	r10
 7a8:	9f 90       	pop	r9
 7aa:	8f 90       	pop	r8
 7ac:	08 95       	ret

000007ae <initWaves>:
//   else
//      return bits;                  // return 12bit equivalent for DAC
//}

void initWaves() {
   make_square_LUT();
 7ae:	0e 94 1c 02 	call	0x438	; 0x438 <make_square_LUT>
   make_triangle_LUT();
 7b2:	0e 94 9a 02 	call	0x534	; 0x534 <make_triangle_LUT>
   make_sawtooth_LUT();
 7b6:	0e 94 22 03 	call	0x644	; 0x644 <make_sawtooth_LUT>
   make_sin_LUT();
 7ba:	0e 94 78 03 	call	0x6f0	; 0x6f0 <make_sin_LUT>
   
   Wave = SquareWave;
 7be:	8c e8       	ldi	r24, 0x8C	; 140
 7c0:	94 e0       	ldi	r25, 0x04	; 4
 7c2:	90 93 b1 05 	sts	0x05B1, r25
 7c6:	80 93 b0 05 	sts	0x05B0, r24
 7ca:	08 95       	ret

000007cc <__subsf3>:
 7cc:	50 58       	subi	r21, 0x80	; 128

000007ce <__addsf3>:
 7ce:	bb 27       	eor	r27, r27
 7d0:	aa 27       	eor	r26, r26
 7d2:	0e 94 fe 03 	call	0x7fc	; 0x7fc <__addsf3x>
 7d6:	0c 94 4f 05 	jmp	0xa9e	; 0xa9e <__fp_round>
 7da:	0e 94 41 05 	call	0xa82	; 0xa82 <__fp_pscA>
 7de:	38 f0       	brcs	.+14     	; 0x7ee <__addsf3+0x20>
 7e0:	0e 94 48 05 	call	0xa90	; 0xa90 <__fp_pscB>
 7e4:	20 f0       	brcs	.+8      	; 0x7ee <__addsf3+0x20>
 7e6:	39 f4       	brne	.+14     	; 0x7f6 <__addsf3+0x28>
 7e8:	9f 3f       	cpi	r25, 0xFF	; 255
 7ea:	19 f4       	brne	.+6      	; 0x7f2 <__addsf3+0x24>
 7ec:	26 f4       	brtc	.+8      	; 0x7f6 <__addsf3+0x28>
 7ee:	0c 94 3e 05 	jmp	0xa7c	; 0xa7c <__fp_nan>
 7f2:	0e f4       	brtc	.+2      	; 0x7f6 <__addsf3+0x28>
 7f4:	e0 95       	com	r30
 7f6:	e7 fb       	bst	r30, 7
 7f8:	0c 94 38 05 	jmp	0xa70	; 0xa70 <__fp_inf>

000007fc <__addsf3x>:
 7fc:	e9 2f       	mov	r30, r25
 7fe:	0e 94 60 05 	call	0xac0	; 0xac0 <__fp_split3>
 802:	58 f3       	brcs	.-42     	; 0x7da <__addsf3+0xc>
 804:	ba 17       	cp	r27, r26
 806:	62 07       	cpc	r22, r18
 808:	73 07       	cpc	r23, r19
 80a:	84 07       	cpc	r24, r20
 80c:	95 07       	cpc	r25, r21
 80e:	20 f0       	brcs	.+8      	; 0x818 <__addsf3x+0x1c>
 810:	79 f4       	brne	.+30     	; 0x830 <__addsf3x+0x34>
 812:	a6 f5       	brtc	.+104    	; 0x87c <__addsf3x+0x80>
 814:	0c 94 82 05 	jmp	0xb04	; 0xb04 <__fp_zero>
 818:	0e f4       	brtc	.+2      	; 0x81c <__addsf3x+0x20>
 81a:	e0 95       	com	r30
 81c:	0b 2e       	mov	r0, r27
 81e:	ba 2f       	mov	r27, r26
 820:	a0 2d       	mov	r26, r0
 822:	0b 01       	movw	r0, r22
 824:	b9 01       	movw	r22, r18
 826:	90 01       	movw	r18, r0
 828:	0c 01       	movw	r0, r24
 82a:	ca 01       	movw	r24, r20
 82c:	a0 01       	movw	r20, r0
 82e:	11 24       	eor	r1, r1
 830:	ff 27       	eor	r31, r31
 832:	59 1b       	sub	r21, r25
 834:	99 f0       	breq	.+38     	; 0x85c <__addsf3x+0x60>
 836:	59 3f       	cpi	r21, 0xF9	; 249
 838:	50 f4       	brcc	.+20     	; 0x84e <__addsf3x+0x52>
 83a:	50 3e       	cpi	r21, 0xE0	; 224
 83c:	68 f1       	brcs	.+90     	; 0x898 <__addsf3x+0x9c>
 83e:	1a 16       	cp	r1, r26
 840:	f0 40       	sbci	r31, 0x00	; 0
 842:	a2 2f       	mov	r26, r18
 844:	23 2f       	mov	r18, r19
 846:	34 2f       	mov	r19, r20
 848:	44 27       	eor	r20, r20
 84a:	58 5f       	subi	r21, 0xF8	; 248
 84c:	f3 cf       	rjmp	.-26     	; 0x834 <__addsf3x+0x38>
 84e:	46 95       	lsr	r20
 850:	37 95       	ror	r19
 852:	27 95       	ror	r18
 854:	a7 95       	ror	r26
 856:	f0 40       	sbci	r31, 0x00	; 0
 858:	53 95       	inc	r21
 85a:	c9 f7       	brne	.-14     	; 0x84e <__addsf3x+0x52>
 85c:	7e f4       	brtc	.+30     	; 0x87c <__addsf3x+0x80>
 85e:	1f 16       	cp	r1, r31
 860:	ba 0b       	sbc	r27, r26
 862:	62 0b       	sbc	r22, r18
 864:	73 0b       	sbc	r23, r19
 866:	84 0b       	sbc	r24, r20
 868:	ba f0       	brmi	.+46     	; 0x898 <__addsf3x+0x9c>
 86a:	91 50       	subi	r25, 0x01	; 1
 86c:	a1 f0       	breq	.+40     	; 0x896 <__addsf3x+0x9a>
 86e:	ff 0f       	add	r31, r31
 870:	bb 1f       	adc	r27, r27
 872:	66 1f       	adc	r22, r22
 874:	77 1f       	adc	r23, r23
 876:	88 1f       	adc	r24, r24
 878:	c2 f7       	brpl	.-16     	; 0x86a <__addsf3x+0x6e>
 87a:	0e c0       	rjmp	.+28     	; 0x898 <__addsf3x+0x9c>
 87c:	ba 0f       	add	r27, r26
 87e:	62 1f       	adc	r22, r18
 880:	73 1f       	adc	r23, r19
 882:	84 1f       	adc	r24, r20
 884:	48 f4       	brcc	.+18     	; 0x898 <__addsf3x+0x9c>
 886:	87 95       	ror	r24
 888:	77 95       	ror	r23
 88a:	67 95       	ror	r22
 88c:	b7 95       	ror	r27
 88e:	f7 95       	ror	r31
 890:	9e 3f       	cpi	r25, 0xFE	; 254
 892:	08 f0       	brcs	.+2      	; 0x896 <__addsf3x+0x9a>
 894:	b0 cf       	rjmp	.-160    	; 0x7f6 <__addsf3+0x28>
 896:	93 95       	inc	r25
 898:	88 0f       	add	r24, r24
 89a:	08 f0       	brcs	.+2      	; 0x89e <__addsf3x+0xa2>
 89c:	99 27       	eor	r25, r25
 89e:	ee 0f       	add	r30, r30
 8a0:	97 95       	ror	r25
 8a2:	87 95       	ror	r24
 8a4:	08 95       	ret

000008a6 <__divsf3>:
 8a6:	0e 94 67 04 	call	0x8ce	; 0x8ce <__divsf3x>
 8aa:	0c 94 4f 05 	jmp	0xa9e	; 0xa9e <__fp_round>
 8ae:	0e 94 48 05 	call	0xa90	; 0xa90 <__fp_pscB>
 8b2:	58 f0       	brcs	.+22     	; 0x8ca <__divsf3+0x24>
 8b4:	0e 94 41 05 	call	0xa82	; 0xa82 <__fp_pscA>
 8b8:	40 f0       	brcs	.+16     	; 0x8ca <__divsf3+0x24>
 8ba:	29 f4       	brne	.+10     	; 0x8c6 <__divsf3+0x20>
 8bc:	5f 3f       	cpi	r21, 0xFF	; 255
 8be:	29 f0       	breq	.+10     	; 0x8ca <__divsf3+0x24>
 8c0:	0c 94 38 05 	jmp	0xa70	; 0xa70 <__fp_inf>
 8c4:	51 11       	cpse	r21, r1
 8c6:	0c 94 83 05 	jmp	0xb06	; 0xb06 <__fp_szero>
 8ca:	0c 94 3e 05 	jmp	0xa7c	; 0xa7c <__fp_nan>

000008ce <__divsf3x>:
 8ce:	0e 94 60 05 	call	0xac0	; 0xac0 <__fp_split3>
 8d2:	68 f3       	brcs	.-38     	; 0x8ae <__divsf3+0x8>

000008d4 <__divsf3_pse>:
 8d4:	99 23       	and	r25, r25
 8d6:	b1 f3       	breq	.-20     	; 0x8c4 <__divsf3+0x1e>
 8d8:	55 23       	and	r21, r21
 8da:	91 f3       	breq	.-28     	; 0x8c0 <__divsf3+0x1a>
 8dc:	95 1b       	sub	r25, r21
 8de:	55 0b       	sbc	r21, r21
 8e0:	bb 27       	eor	r27, r27
 8e2:	aa 27       	eor	r26, r26
 8e4:	62 17       	cp	r22, r18
 8e6:	73 07       	cpc	r23, r19
 8e8:	84 07       	cpc	r24, r20
 8ea:	38 f0       	brcs	.+14     	; 0x8fa <__divsf3_pse+0x26>
 8ec:	9f 5f       	subi	r25, 0xFF	; 255
 8ee:	5f 4f       	sbci	r21, 0xFF	; 255
 8f0:	22 0f       	add	r18, r18
 8f2:	33 1f       	adc	r19, r19
 8f4:	44 1f       	adc	r20, r20
 8f6:	aa 1f       	adc	r26, r26
 8f8:	a9 f3       	breq	.-22     	; 0x8e4 <__divsf3_pse+0x10>
 8fa:	35 d0       	rcall	.+106    	; 0x966 <__stack+0x67>
 8fc:	0e 2e       	mov	r0, r30
 8fe:	3a f0       	brmi	.+14     	; 0x90e <__stack+0xf>
 900:	e0 e8       	ldi	r30, 0x80	; 128
 902:	32 d0       	rcall	.+100    	; 0x968 <__stack+0x69>
 904:	91 50       	subi	r25, 0x01	; 1
 906:	50 40       	sbci	r21, 0x00	; 0
 908:	e6 95       	lsr	r30
 90a:	00 1c       	adc	r0, r0
 90c:	ca f7       	brpl	.-14     	; 0x900 <__stack+0x1>
 90e:	2b d0       	rcall	.+86     	; 0x966 <__stack+0x67>
 910:	fe 2f       	mov	r31, r30
 912:	29 d0       	rcall	.+82     	; 0x966 <__stack+0x67>
 914:	66 0f       	add	r22, r22
 916:	77 1f       	adc	r23, r23
 918:	88 1f       	adc	r24, r24
 91a:	bb 1f       	adc	r27, r27
 91c:	26 17       	cp	r18, r22
 91e:	37 07       	cpc	r19, r23
 920:	48 07       	cpc	r20, r24
 922:	ab 07       	cpc	r26, r27
 924:	b0 e8       	ldi	r27, 0x80	; 128
 926:	09 f0       	breq	.+2      	; 0x92a <__stack+0x2b>
 928:	bb 0b       	sbc	r27, r27
 92a:	80 2d       	mov	r24, r0
 92c:	bf 01       	movw	r22, r30
 92e:	ff 27       	eor	r31, r31
 930:	93 58       	subi	r25, 0x83	; 131
 932:	5f 4f       	sbci	r21, 0xFF	; 255
 934:	3a f0       	brmi	.+14     	; 0x944 <__stack+0x45>
 936:	9e 3f       	cpi	r25, 0xFE	; 254
 938:	51 05       	cpc	r21, r1
 93a:	78 f0       	brcs	.+30     	; 0x95a <__stack+0x5b>
 93c:	0c 94 38 05 	jmp	0xa70	; 0xa70 <__fp_inf>
 940:	0c 94 83 05 	jmp	0xb06	; 0xb06 <__fp_szero>
 944:	5f 3f       	cpi	r21, 0xFF	; 255
 946:	e4 f3       	brlt	.-8      	; 0x940 <__stack+0x41>
 948:	98 3e       	cpi	r25, 0xE8	; 232
 94a:	d4 f3       	brlt	.-12     	; 0x940 <__stack+0x41>
 94c:	86 95       	lsr	r24
 94e:	77 95       	ror	r23
 950:	67 95       	ror	r22
 952:	b7 95       	ror	r27
 954:	f7 95       	ror	r31
 956:	9f 5f       	subi	r25, 0xFF	; 255
 958:	c9 f7       	brne	.-14     	; 0x94c <__stack+0x4d>
 95a:	88 0f       	add	r24, r24
 95c:	91 1d       	adc	r25, r1
 95e:	96 95       	lsr	r25
 960:	87 95       	ror	r24
 962:	97 f9       	bld	r25, 7
 964:	08 95       	ret
 966:	e1 e0       	ldi	r30, 0x01	; 1
 968:	66 0f       	add	r22, r22
 96a:	77 1f       	adc	r23, r23
 96c:	88 1f       	adc	r24, r24
 96e:	bb 1f       	adc	r27, r27
 970:	62 17       	cp	r22, r18
 972:	73 07       	cpc	r23, r19
 974:	84 07       	cpc	r24, r20
 976:	ba 07       	cpc	r27, r26
 978:	20 f0       	brcs	.+8      	; 0x982 <__stack+0x83>
 97a:	62 1b       	sub	r22, r18
 97c:	73 0b       	sbc	r23, r19
 97e:	84 0b       	sbc	r24, r20
 980:	ba 0b       	sbc	r27, r26
 982:	ee 1f       	adc	r30, r30
 984:	88 f7       	brcc	.-30     	; 0x968 <__stack+0x69>
 986:	e0 95       	com	r30
 988:	08 95       	ret

0000098a <__fixsfsi>:
 98a:	0e 94 cc 04 	call	0x998	; 0x998 <__fixunssfsi>
 98e:	68 94       	set
 990:	b1 11       	cpse	r27, r1
 992:	0c 94 83 05 	jmp	0xb06	; 0xb06 <__fp_szero>
 996:	08 95       	ret

00000998 <__fixunssfsi>:
 998:	0e 94 68 05 	call	0xad0	; 0xad0 <__fp_splitA>
 99c:	88 f0       	brcs	.+34     	; 0x9c0 <__fixunssfsi+0x28>
 99e:	9f 57       	subi	r25, 0x7F	; 127
 9a0:	98 f0       	brcs	.+38     	; 0x9c8 <__fixunssfsi+0x30>
 9a2:	b9 2f       	mov	r27, r25
 9a4:	99 27       	eor	r25, r25
 9a6:	b7 51       	subi	r27, 0x17	; 23
 9a8:	b0 f0       	brcs	.+44     	; 0x9d6 <__fixunssfsi+0x3e>
 9aa:	e1 f0       	breq	.+56     	; 0x9e4 <__fixunssfsi+0x4c>
 9ac:	66 0f       	add	r22, r22
 9ae:	77 1f       	adc	r23, r23
 9b0:	88 1f       	adc	r24, r24
 9b2:	99 1f       	adc	r25, r25
 9b4:	1a f0       	brmi	.+6      	; 0x9bc <__fixunssfsi+0x24>
 9b6:	ba 95       	dec	r27
 9b8:	c9 f7       	brne	.-14     	; 0x9ac <__fixunssfsi+0x14>
 9ba:	14 c0       	rjmp	.+40     	; 0x9e4 <__fixunssfsi+0x4c>
 9bc:	b1 30       	cpi	r27, 0x01	; 1
 9be:	91 f0       	breq	.+36     	; 0x9e4 <__fixunssfsi+0x4c>
 9c0:	0e 94 82 05 	call	0xb04	; 0xb04 <__fp_zero>
 9c4:	b1 e0       	ldi	r27, 0x01	; 1
 9c6:	08 95       	ret
 9c8:	0c 94 82 05 	jmp	0xb04	; 0xb04 <__fp_zero>
 9cc:	67 2f       	mov	r22, r23
 9ce:	78 2f       	mov	r23, r24
 9d0:	88 27       	eor	r24, r24
 9d2:	b8 5f       	subi	r27, 0xF8	; 248
 9d4:	39 f0       	breq	.+14     	; 0x9e4 <__fixunssfsi+0x4c>
 9d6:	b9 3f       	cpi	r27, 0xF9	; 249
 9d8:	cc f3       	brlt	.-14     	; 0x9cc <__fixunssfsi+0x34>
 9da:	86 95       	lsr	r24
 9dc:	77 95       	ror	r23
 9de:	67 95       	ror	r22
 9e0:	b3 95       	inc	r27
 9e2:	d9 f7       	brne	.-10     	; 0x9da <__fixunssfsi+0x42>
 9e4:	3e f4       	brtc	.+14     	; 0x9f4 <__fixunssfsi+0x5c>
 9e6:	90 95       	com	r25
 9e8:	80 95       	com	r24
 9ea:	70 95       	com	r23
 9ec:	61 95       	neg	r22
 9ee:	7f 4f       	sbci	r23, 0xFF	; 255
 9f0:	8f 4f       	sbci	r24, 0xFF	; 255
 9f2:	9f 4f       	sbci	r25, 0xFF	; 255
 9f4:	08 95       	ret

000009f6 <__floatunsisf>:
 9f6:	e8 94       	clt
 9f8:	09 c0       	rjmp	.+18     	; 0xa0c <__floatsisf+0x12>

000009fa <__floatsisf>:
 9fa:	97 fb       	bst	r25, 7
 9fc:	3e f4       	brtc	.+14     	; 0xa0c <__floatsisf+0x12>
 9fe:	90 95       	com	r25
 a00:	80 95       	com	r24
 a02:	70 95       	com	r23
 a04:	61 95       	neg	r22
 a06:	7f 4f       	sbci	r23, 0xFF	; 255
 a08:	8f 4f       	sbci	r24, 0xFF	; 255
 a0a:	9f 4f       	sbci	r25, 0xFF	; 255
 a0c:	99 23       	and	r25, r25
 a0e:	a9 f0       	breq	.+42     	; 0xa3a <__floatsisf+0x40>
 a10:	f9 2f       	mov	r31, r25
 a12:	96 e9       	ldi	r25, 0x96	; 150
 a14:	bb 27       	eor	r27, r27
 a16:	93 95       	inc	r25
 a18:	f6 95       	lsr	r31
 a1a:	87 95       	ror	r24
 a1c:	77 95       	ror	r23
 a1e:	67 95       	ror	r22
 a20:	b7 95       	ror	r27
 a22:	f1 11       	cpse	r31, r1
 a24:	f8 cf       	rjmp	.-16     	; 0xa16 <__floatsisf+0x1c>
 a26:	fa f4       	brpl	.+62     	; 0xa66 <__floatsisf+0x6c>
 a28:	bb 0f       	add	r27, r27
 a2a:	11 f4       	brne	.+4      	; 0xa30 <__floatsisf+0x36>
 a2c:	60 ff       	sbrs	r22, 0
 a2e:	1b c0       	rjmp	.+54     	; 0xa66 <__floatsisf+0x6c>
 a30:	6f 5f       	subi	r22, 0xFF	; 255
 a32:	7f 4f       	sbci	r23, 0xFF	; 255
 a34:	8f 4f       	sbci	r24, 0xFF	; 255
 a36:	9f 4f       	sbci	r25, 0xFF	; 255
 a38:	16 c0       	rjmp	.+44     	; 0xa66 <__floatsisf+0x6c>
 a3a:	88 23       	and	r24, r24
 a3c:	11 f0       	breq	.+4      	; 0xa42 <__floatsisf+0x48>
 a3e:	96 e9       	ldi	r25, 0x96	; 150
 a40:	11 c0       	rjmp	.+34     	; 0xa64 <__floatsisf+0x6a>
 a42:	77 23       	and	r23, r23
 a44:	21 f0       	breq	.+8      	; 0xa4e <__floatsisf+0x54>
 a46:	9e e8       	ldi	r25, 0x8E	; 142
 a48:	87 2f       	mov	r24, r23
 a4a:	76 2f       	mov	r23, r22
 a4c:	05 c0       	rjmp	.+10     	; 0xa58 <__floatsisf+0x5e>
 a4e:	66 23       	and	r22, r22
 a50:	71 f0       	breq	.+28     	; 0xa6e <__floatsisf+0x74>
 a52:	96 e8       	ldi	r25, 0x86	; 134
 a54:	86 2f       	mov	r24, r22
 a56:	70 e0       	ldi	r23, 0x00	; 0
 a58:	60 e0       	ldi	r22, 0x00	; 0
 a5a:	2a f0       	brmi	.+10     	; 0xa66 <__floatsisf+0x6c>
 a5c:	9a 95       	dec	r25
 a5e:	66 0f       	add	r22, r22
 a60:	77 1f       	adc	r23, r23
 a62:	88 1f       	adc	r24, r24
 a64:	da f7       	brpl	.-10     	; 0xa5c <__floatsisf+0x62>
 a66:	88 0f       	add	r24, r24
 a68:	96 95       	lsr	r25
 a6a:	87 95       	ror	r24
 a6c:	97 f9       	bld	r25, 7
 a6e:	08 95       	ret

00000a70 <__fp_inf>:
 a70:	97 f9       	bld	r25, 7
 a72:	9f 67       	ori	r25, 0x7F	; 127
 a74:	80 e8       	ldi	r24, 0x80	; 128
 a76:	70 e0       	ldi	r23, 0x00	; 0
 a78:	60 e0       	ldi	r22, 0x00	; 0
 a7a:	08 95       	ret

00000a7c <__fp_nan>:
 a7c:	9f ef       	ldi	r25, 0xFF	; 255
 a7e:	80 ec       	ldi	r24, 0xC0	; 192
 a80:	08 95       	ret

00000a82 <__fp_pscA>:
 a82:	00 24       	eor	r0, r0
 a84:	0a 94       	dec	r0
 a86:	16 16       	cp	r1, r22
 a88:	17 06       	cpc	r1, r23
 a8a:	18 06       	cpc	r1, r24
 a8c:	09 06       	cpc	r0, r25
 a8e:	08 95       	ret

00000a90 <__fp_pscB>:
 a90:	00 24       	eor	r0, r0
 a92:	0a 94       	dec	r0
 a94:	12 16       	cp	r1, r18
 a96:	13 06       	cpc	r1, r19
 a98:	14 06       	cpc	r1, r20
 a9a:	05 06       	cpc	r0, r21
 a9c:	08 95       	ret

00000a9e <__fp_round>:
 a9e:	09 2e       	mov	r0, r25
 aa0:	03 94       	inc	r0
 aa2:	00 0c       	add	r0, r0
 aa4:	11 f4       	brne	.+4      	; 0xaaa <__fp_round+0xc>
 aa6:	88 23       	and	r24, r24
 aa8:	52 f0       	brmi	.+20     	; 0xabe <__fp_round+0x20>
 aaa:	bb 0f       	add	r27, r27
 aac:	40 f4       	brcc	.+16     	; 0xabe <__fp_round+0x20>
 aae:	bf 2b       	or	r27, r31
 ab0:	11 f4       	brne	.+4      	; 0xab6 <__fp_round+0x18>
 ab2:	60 ff       	sbrs	r22, 0
 ab4:	04 c0       	rjmp	.+8      	; 0xabe <__fp_round+0x20>
 ab6:	6f 5f       	subi	r22, 0xFF	; 255
 ab8:	7f 4f       	sbci	r23, 0xFF	; 255
 aba:	8f 4f       	sbci	r24, 0xFF	; 255
 abc:	9f 4f       	sbci	r25, 0xFF	; 255
 abe:	08 95       	ret

00000ac0 <__fp_split3>:
 ac0:	57 fd       	sbrc	r21, 7
 ac2:	90 58       	subi	r25, 0x80	; 128
 ac4:	44 0f       	add	r20, r20
 ac6:	55 1f       	adc	r21, r21
 ac8:	59 f0       	breq	.+22     	; 0xae0 <__fp_splitA+0x10>
 aca:	5f 3f       	cpi	r21, 0xFF	; 255
 acc:	71 f0       	breq	.+28     	; 0xaea <__fp_splitA+0x1a>
 ace:	47 95       	ror	r20

00000ad0 <__fp_splitA>:
 ad0:	88 0f       	add	r24, r24
 ad2:	97 fb       	bst	r25, 7
 ad4:	99 1f       	adc	r25, r25
 ad6:	61 f0       	breq	.+24     	; 0xaf0 <__fp_splitA+0x20>
 ad8:	9f 3f       	cpi	r25, 0xFF	; 255
 ada:	79 f0       	breq	.+30     	; 0xafa <__fp_splitA+0x2a>
 adc:	87 95       	ror	r24
 ade:	08 95       	ret
 ae0:	12 16       	cp	r1, r18
 ae2:	13 06       	cpc	r1, r19
 ae4:	14 06       	cpc	r1, r20
 ae6:	55 1f       	adc	r21, r21
 ae8:	f2 cf       	rjmp	.-28     	; 0xace <__fp_split3+0xe>
 aea:	46 95       	lsr	r20
 aec:	f1 df       	rcall	.-30     	; 0xad0 <__fp_splitA>
 aee:	08 c0       	rjmp	.+16     	; 0xb00 <__fp_splitA+0x30>
 af0:	16 16       	cp	r1, r22
 af2:	17 06       	cpc	r1, r23
 af4:	18 06       	cpc	r1, r24
 af6:	99 1f       	adc	r25, r25
 af8:	f1 cf       	rjmp	.-30     	; 0xadc <__fp_splitA+0xc>
 afa:	86 95       	lsr	r24
 afc:	71 05       	cpc	r23, r1
 afe:	61 05       	cpc	r22, r1
 b00:	08 94       	sec
 b02:	08 95       	ret

00000b04 <__fp_zero>:
 b04:	e8 94       	clt

00000b06 <__fp_szero>:
 b06:	bb 27       	eor	r27, r27
 b08:	66 27       	eor	r22, r22
 b0a:	77 27       	eor	r23, r23
 b0c:	cb 01       	movw	r24, r22
 b0e:	97 f9       	bld	r25, 7
 b10:	08 95       	ret

00000b12 <__gesf2>:
 b12:	0e 94 03 06 	call	0xc06	; 0xc06 <__fp_cmp>
 b16:	08 f4       	brcc	.+2      	; 0xb1a <__gesf2+0x8>
 b18:	8f ef       	ldi	r24, 0xFF	; 255
 b1a:	08 95       	ret

00000b1c <__mulsf3>:
 b1c:	0e 94 a1 05 	call	0xb42	; 0xb42 <__mulsf3x>
 b20:	0c 94 4f 05 	jmp	0xa9e	; 0xa9e <__fp_round>
 b24:	0e 94 41 05 	call	0xa82	; 0xa82 <__fp_pscA>
 b28:	38 f0       	brcs	.+14     	; 0xb38 <__mulsf3+0x1c>
 b2a:	0e 94 48 05 	call	0xa90	; 0xa90 <__fp_pscB>
 b2e:	20 f0       	brcs	.+8      	; 0xb38 <__mulsf3+0x1c>
 b30:	95 23       	and	r25, r21
 b32:	11 f0       	breq	.+4      	; 0xb38 <__mulsf3+0x1c>
 b34:	0c 94 38 05 	jmp	0xa70	; 0xa70 <__fp_inf>
 b38:	0c 94 3e 05 	jmp	0xa7c	; 0xa7c <__fp_nan>
 b3c:	11 24       	eor	r1, r1
 b3e:	0c 94 83 05 	jmp	0xb06	; 0xb06 <__fp_szero>

00000b42 <__mulsf3x>:
 b42:	0e 94 60 05 	call	0xac0	; 0xac0 <__fp_split3>
 b46:	70 f3       	brcs	.-36     	; 0xb24 <__mulsf3+0x8>

00000b48 <__mulsf3_pse>:
 b48:	95 9f       	mul	r25, r21
 b4a:	c1 f3       	breq	.-16     	; 0xb3c <__mulsf3+0x20>
 b4c:	95 0f       	add	r25, r21
 b4e:	50 e0       	ldi	r21, 0x00	; 0
 b50:	55 1f       	adc	r21, r21
 b52:	62 9f       	mul	r22, r18
 b54:	f0 01       	movw	r30, r0
 b56:	72 9f       	mul	r23, r18
 b58:	bb 27       	eor	r27, r27
 b5a:	f0 0d       	add	r31, r0
 b5c:	b1 1d       	adc	r27, r1
 b5e:	63 9f       	mul	r22, r19
 b60:	aa 27       	eor	r26, r26
 b62:	f0 0d       	add	r31, r0
 b64:	b1 1d       	adc	r27, r1
 b66:	aa 1f       	adc	r26, r26
 b68:	64 9f       	mul	r22, r20
 b6a:	66 27       	eor	r22, r22
 b6c:	b0 0d       	add	r27, r0
 b6e:	a1 1d       	adc	r26, r1
 b70:	66 1f       	adc	r22, r22
 b72:	82 9f       	mul	r24, r18
 b74:	22 27       	eor	r18, r18
 b76:	b0 0d       	add	r27, r0
 b78:	a1 1d       	adc	r26, r1
 b7a:	62 1f       	adc	r22, r18
 b7c:	73 9f       	mul	r23, r19
 b7e:	b0 0d       	add	r27, r0
 b80:	a1 1d       	adc	r26, r1
 b82:	62 1f       	adc	r22, r18
 b84:	83 9f       	mul	r24, r19
 b86:	a0 0d       	add	r26, r0
 b88:	61 1d       	adc	r22, r1
 b8a:	22 1f       	adc	r18, r18
 b8c:	74 9f       	mul	r23, r20
 b8e:	33 27       	eor	r19, r19
 b90:	a0 0d       	add	r26, r0
 b92:	61 1d       	adc	r22, r1
 b94:	23 1f       	adc	r18, r19
 b96:	84 9f       	mul	r24, r20
 b98:	60 0d       	add	r22, r0
 b9a:	21 1d       	adc	r18, r1
 b9c:	82 2f       	mov	r24, r18
 b9e:	76 2f       	mov	r23, r22
 ba0:	6a 2f       	mov	r22, r26
 ba2:	11 24       	eor	r1, r1
 ba4:	9f 57       	subi	r25, 0x7F	; 127
 ba6:	50 40       	sbci	r21, 0x00	; 0
 ba8:	9a f0       	brmi	.+38     	; 0xbd0 <__mulsf3_pse+0x88>
 baa:	f1 f0       	breq	.+60     	; 0xbe8 <__mulsf3_pse+0xa0>
 bac:	88 23       	and	r24, r24
 bae:	4a f0       	brmi	.+18     	; 0xbc2 <__mulsf3_pse+0x7a>
 bb0:	ee 0f       	add	r30, r30
 bb2:	ff 1f       	adc	r31, r31
 bb4:	bb 1f       	adc	r27, r27
 bb6:	66 1f       	adc	r22, r22
 bb8:	77 1f       	adc	r23, r23
 bba:	88 1f       	adc	r24, r24
 bbc:	91 50       	subi	r25, 0x01	; 1
 bbe:	50 40       	sbci	r21, 0x00	; 0
 bc0:	a9 f7       	brne	.-22     	; 0xbac <__mulsf3_pse+0x64>
 bc2:	9e 3f       	cpi	r25, 0xFE	; 254
 bc4:	51 05       	cpc	r21, r1
 bc6:	80 f0       	brcs	.+32     	; 0xbe8 <__mulsf3_pse+0xa0>
 bc8:	0c 94 38 05 	jmp	0xa70	; 0xa70 <__fp_inf>
 bcc:	0c 94 83 05 	jmp	0xb06	; 0xb06 <__fp_szero>
 bd0:	5f 3f       	cpi	r21, 0xFF	; 255
 bd2:	e4 f3       	brlt	.-8      	; 0xbcc <__mulsf3_pse+0x84>
 bd4:	98 3e       	cpi	r25, 0xE8	; 232
 bd6:	d4 f3       	brlt	.-12     	; 0xbcc <__mulsf3_pse+0x84>
 bd8:	86 95       	lsr	r24
 bda:	77 95       	ror	r23
 bdc:	67 95       	ror	r22
 bde:	b7 95       	ror	r27
 be0:	f7 95       	ror	r31
 be2:	e7 95       	ror	r30
 be4:	9f 5f       	subi	r25, 0xFF	; 255
 be6:	c1 f7       	brne	.-16     	; 0xbd8 <__mulsf3_pse+0x90>
 be8:	fe 2b       	or	r31, r30
 bea:	88 0f       	add	r24, r24
 bec:	91 1d       	adc	r25, r1
 bee:	96 95       	lsr	r25
 bf0:	87 95       	ror	r24
 bf2:	97 f9       	bld	r25, 7
 bf4:	08 95       	ret

00000bf6 <sin>:
 bf6:	9f 93       	push	r25
 bf8:	0e 94 29 06 	call	0xc52	; 0xc52 <__fp_rempio2>
 bfc:	0f 90       	pop	r0
 bfe:	07 fc       	sbrc	r0, 7
 c00:	ee 5f       	subi	r30, 0xFE	; 254
 c02:	0c 94 52 06 	jmp	0xca4	; 0xca4 <__fp_sinus>

00000c06 <__fp_cmp>:
 c06:	99 0f       	add	r25, r25
 c08:	00 08       	sbc	r0, r0
 c0a:	55 0f       	add	r21, r21
 c0c:	aa 0b       	sbc	r26, r26
 c0e:	e0 e8       	ldi	r30, 0x80	; 128
 c10:	fe ef       	ldi	r31, 0xFE	; 254
 c12:	16 16       	cp	r1, r22
 c14:	17 06       	cpc	r1, r23
 c16:	e8 07       	cpc	r30, r24
 c18:	f9 07       	cpc	r31, r25
 c1a:	c0 f0       	brcs	.+48     	; 0xc4c <__fp_cmp+0x46>
 c1c:	12 16       	cp	r1, r18
 c1e:	13 06       	cpc	r1, r19
 c20:	e4 07       	cpc	r30, r20
 c22:	f5 07       	cpc	r31, r21
 c24:	98 f0       	brcs	.+38     	; 0xc4c <__fp_cmp+0x46>
 c26:	62 1b       	sub	r22, r18
 c28:	73 0b       	sbc	r23, r19
 c2a:	84 0b       	sbc	r24, r20
 c2c:	95 0b       	sbc	r25, r21
 c2e:	39 f4       	brne	.+14     	; 0xc3e <__fp_cmp+0x38>
 c30:	0a 26       	eor	r0, r26
 c32:	61 f0       	breq	.+24     	; 0xc4c <__fp_cmp+0x46>
 c34:	23 2b       	or	r18, r19
 c36:	24 2b       	or	r18, r20
 c38:	25 2b       	or	r18, r21
 c3a:	21 f4       	brne	.+8      	; 0xc44 <__fp_cmp+0x3e>
 c3c:	08 95       	ret
 c3e:	0a 26       	eor	r0, r26
 c40:	09 f4       	brne	.+2      	; 0xc44 <__fp_cmp+0x3e>
 c42:	a1 40       	sbci	r26, 0x01	; 1
 c44:	a6 95       	lsr	r26
 c46:	8f ef       	ldi	r24, 0xFF	; 255
 c48:	81 1d       	adc	r24, r1
 c4a:	81 1d       	adc	r24, r1
 c4c:	08 95       	ret
 c4e:	0c 94 3e 05 	jmp	0xa7c	; 0xa7c <__fp_nan>

00000c52 <__fp_rempio2>:
 c52:	0e 94 68 05 	call	0xad0	; 0xad0 <__fp_splitA>
 c56:	d8 f3       	brcs	.-10     	; 0xc4e <__fp_cmp+0x48>
 c58:	e8 94       	clt
 c5a:	e0 e0       	ldi	r30, 0x00	; 0
 c5c:	bb 27       	eor	r27, r27
 c5e:	9f 57       	subi	r25, 0x7F	; 127
 c60:	f0 f0       	brcs	.+60     	; 0xc9e <__fp_rempio2+0x4c>
 c62:	2a ed       	ldi	r18, 0xDA	; 218
 c64:	3f e0       	ldi	r19, 0x0F	; 15
 c66:	49 ec       	ldi	r20, 0xC9	; 201
 c68:	06 c0       	rjmp	.+12     	; 0xc76 <__fp_rempio2+0x24>
 c6a:	ee 0f       	add	r30, r30
 c6c:	bb 0f       	add	r27, r27
 c6e:	66 1f       	adc	r22, r22
 c70:	77 1f       	adc	r23, r23
 c72:	88 1f       	adc	r24, r24
 c74:	28 f0       	brcs	.+10     	; 0xc80 <__fp_rempio2+0x2e>
 c76:	b2 3a       	cpi	r27, 0xA2	; 162
 c78:	62 07       	cpc	r22, r18
 c7a:	73 07       	cpc	r23, r19
 c7c:	84 07       	cpc	r24, r20
 c7e:	28 f0       	brcs	.+10     	; 0xc8a <__fp_rempio2+0x38>
 c80:	b2 5a       	subi	r27, 0xA2	; 162
 c82:	62 0b       	sbc	r22, r18
 c84:	73 0b       	sbc	r23, r19
 c86:	84 0b       	sbc	r24, r20
 c88:	e3 95       	inc	r30
 c8a:	9a 95       	dec	r25
 c8c:	72 f7       	brpl	.-36     	; 0xc6a <__fp_rempio2+0x18>
 c8e:	80 38       	cpi	r24, 0x80	; 128
 c90:	30 f4       	brcc	.+12     	; 0xc9e <__fp_rempio2+0x4c>
 c92:	9a 95       	dec	r25
 c94:	bb 0f       	add	r27, r27
 c96:	66 1f       	adc	r22, r22
 c98:	77 1f       	adc	r23, r23
 c9a:	88 1f       	adc	r24, r24
 c9c:	d2 f7       	brpl	.-12     	; 0xc92 <__fp_rempio2+0x40>
 c9e:	90 48       	sbci	r25, 0x80	; 128
 ca0:	0c 94 68 06 	jmp	0xcd0	; 0xcd0 <__fp_mpack_finite>

00000ca4 <__fp_sinus>:
 ca4:	ef 93       	push	r30
 ca6:	e0 ff       	sbrs	r30, 0
 ca8:	07 c0       	rjmp	.+14     	; 0xcb8 <__fp_sinus+0x14>
 caa:	a2 ea       	ldi	r26, 0xA2	; 162
 cac:	2a ed       	ldi	r18, 0xDA	; 218
 cae:	3f e0       	ldi	r19, 0x0F	; 15
 cb0:	49 ec       	ldi	r20, 0xC9	; 201
 cb2:	5f eb       	ldi	r21, 0xBF	; 191
 cb4:	0e 94 fe 03 	call	0x7fc	; 0x7fc <__addsf3x>
 cb8:	0e 94 4f 05 	call	0xa9e	; 0xa9e <__fp_round>
 cbc:	0f 90       	pop	r0
 cbe:	03 94       	inc	r0
 cc0:	01 fc       	sbrc	r0, 1
 cc2:	90 58       	subi	r25, 0x80	; 128
 cc4:	e8 e6       	ldi	r30, 0x68	; 104
 cc6:	f0 e0       	ldi	r31, 0x00	; 0
 cc8:	0c 94 74 06 	jmp	0xce8	; 0xce8 <__fp_powsodd>

00000ccc <__fp_mpack>:
 ccc:	9f 3f       	cpi	r25, 0xFF	; 255
 cce:	31 f0       	breq	.+12     	; 0xcdc <__fp_mpack_finite+0xc>

00000cd0 <__fp_mpack_finite>:
 cd0:	91 50       	subi	r25, 0x01	; 1
 cd2:	20 f4       	brcc	.+8      	; 0xcdc <__fp_mpack_finite+0xc>
 cd4:	87 95       	ror	r24
 cd6:	77 95       	ror	r23
 cd8:	67 95       	ror	r22
 cda:	b7 95       	ror	r27
 cdc:	88 0f       	add	r24, r24
 cde:	91 1d       	adc	r25, r1
 ce0:	96 95       	lsr	r25
 ce2:	87 95       	ror	r24
 ce4:	97 f9       	bld	r25, 7
 ce6:	08 95       	ret

00000ce8 <__fp_powsodd>:
 ce8:	9f 93       	push	r25
 cea:	8f 93       	push	r24
 cec:	7f 93       	push	r23
 cee:	6f 93       	push	r22
 cf0:	ff 93       	push	r31
 cf2:	ef 93       	push	r30
 cf4:	9b 01       	movw	r18, r22
 cf6:	ac 01       	movw	r20, r24
 cf8:	0e 94 8e 05 	call	0xb1c	; 0xb1c <__mulsf3>
 cfc:	ef 91       	pop	r30
 cfe:	ff 91       	pop	r31
 d00:	0e 94 88 06 	call	0xd10	; 0xd10 <__fp_powser>
 d04:	2f 91       	pop	r18
 d06:	3f 91       	pop	r19
 d08:	4f 91       	pop	r20
 d0a:	5f 91       	pop	r21
 d0c:	0c 94 8e 05 	jmp	0xb1c	; 0xb1c <__mulsf3>

00000d10 <__fp_powser>:
 d10:	df 93       	push	r29
 d12:	cf 93       	push	r28
 d14:	1f 93       	push	r17
 d16:	0f 93       	push	r16
 d18:	ff 92       	push	r15
 d1a:	ef 92       	push	r14
 d1c:	df 92       	push	r13
 d1e:	7b 01       	movw	r14, r22
 d20:	8c 01       	movw	r16, r24
 d22:	68 94       	set
 d24:	06 c0       	rjmp	.+12     	; 0xd32 <__fp_powser+0x22>
 d26:	da 2e       	mov	r13, r26
 d28:	ef 01       	movw	r28, r30
 d2a:	0e 94 a1 05 	call	0xb42	; 0xb42 <__mulsf3x>
 d2e:	fe 01       	movw	r30, r28
 d30:	e8 94       	clt
 d32:	a5 91       	lpm	r26, Z+
 d34:	25 91       	lpm	r18, Z+
 d36:	35 91       	lpm	r19, Z+
 d38:	45 91       	lpm	r20, Z+
 d3a:	55 91       	lpm	r21, Z+
 d3c:	a6 f3       	brts	.-24     	; 0xd26 <__fp_powser+0x16>
 d3e:	ef 01       	movw	r28, r30
 d40:	0e 94 fe 03 	call	0x7fc	; 0x7fc <__addsf3x>
 d44:	fe 01       	movw	r30, r28
 d46:	97 01       	movw	r18, r14
 d48:	a8 01       	movw	r20, r16
 d4a:	da 94       	dec	r13
 d4c:	69 f7       	brne	.-38     	; 0xd28 <__fp_powser+0x18>
 d4e:	df 90       	pop	r13
 d50:	ef 90       	pop	r14
 d52:	ff 90       	pop	r15
 d54:	0f 91       	pop	r16
 d56:	1f 91       	pop	r17
 d58:	cf 91       	pop	r28
 d5a:	df 91       	pop	r29
 d5c:	08 95       	ret

00000d5e <__divmodhi4>:
 d5e:	97 fb       	bst	r25, 7
 d60:	07 2e       	mov	r0, r23
 d62:	16 f4       	brtc	.+4      	; 0xd68 <__divmodhi4+0xa>
 d64:	00 94       	com	r0
 d66:	07 d0       	rcall	.+14     	; 0xd76 <__divmodhi4_neg1>
 d68:	77 fd       	sbrc	r23, 7
 d6a:	09 d0       	rcall	.+18     	; 0xd7e <__divmodhi4_neg2>
 d6c:	0e 94 c3 06 	call	0xd86	; 0xd86 <__udivmodhi4>
 d70:	07 fc       	sbrc	r0, 7
 d72:	05 d0       	rcall	.+10     	; 0xd7e <__divmodhi4_neg2>
 d74:	3e f4       	brtc	.+14     	; 0xd84 <__divmodhi4_exit>

00000d76 <__divmodhi4_neg1>:
 d76:	90 95       	com	r25
 d78:	81 95       	neg	r24
 d7a:	9f 4f       	sbci	r25, 0xFF	; 255
 d7c:	08 95       	ret

00000d7e <__divmodhi4_neg2>:
 d7e:	70 95       	com	r23
 d80:	61 95       	neg	r22
 d82:	7f 4f       	sbci	r23, 0xFF	; 255

00000d84 <__divmodhi4_exit>:
 d84:	08 95       	ret

00000d86 <__udivmodhi4>:
 d86:	aa 1b       	sub	r26, r26
 d88:	bb 1b       	sub	r27, r27
 d8a:	51 e1       	ldi	r21, 0x11	; 17
 d8c:	07 c0       	rjmp	.+14     	; 0xd9c <__udivmodhi4_ep>

00000d8e <__udivmodhi4_loop>:
 d8e:	aa 1f       	adc	r26, r26
 d90:	bb 1f       	adc	r27, r27
 d92:	a6 17       	cp	r26, r22
 d94:	b7 07       	cpc	r27, r23
 d96:	10 f0       	brcs	.+4      	; 0xd9c <__udivmodhi4_ep>
 d98:	a6 1b       	sub	r26, r22
 d9a:	b7 0b       	sbc	r27, r23

00000d9c <__udivmodhi4_ep>:
 d9c:	88 1f       	adc	r24, r24
 d9e:	99 1f       	adc	r25, r25
 da0:	5a 95       	dec	r21
 da2:	a9 f7       	brne	.-22     	; 0xd8e <__udivmodhi4_loop>
 da4:	80 95       	com	r24
 da6:	90 95       	com	r25
 da8:	bc 01       	movw	r22, r24
 daa:	cd 01       	movw	r24, r26
 dac:	08 95       	ret

00000dae <_exit>:
 dae:	f8 94       	cli

00000db0 <__stop_program>:
 db0:	ff cf       	rjmp	.-2      	; 0xdb0 <__stop_program>
