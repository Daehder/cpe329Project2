
Project2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000132  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  000001a6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001a6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000030e  00000000  00000000  00000280  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000198  00000000  00000000  0000058e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000001e9  00000000  00000000  00000726  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d8  00000000  00000000  00000910  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000245  00000000  00000000  000009e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001ab  00000000  00000000  00000c2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00000dd8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 81 00 	jmp	0x102	; 0x102 <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 6e 00 	call	0xdc	; 0xdc <main>
  88:	0c 94 97 00 	jmp	0x12e	; 0x12e <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <Initialize_SPI_Master>:
    return 0;
}  

// sets up SPI system between ATmega328P and slave device(s)
void Initialize_SPI_Master(){     
    SPCR = (0<<SPIE) |		//No interrupts
  90:	80 e5       	ldi	r24, 0x50	; 80
  92:	8c bd       	out	0x2c, r24	; 44
    (1<<SPE) |				//SPI enabled
    (1<<MSTR) ;             //master
    SPSR = 0x00;			//clear flags
  94:	1d bc       	out	0x2d, r1	; 45
    PORTB = 1 << SS;		// make sure SS is high
  96:	84 e0       	ldi	r24, 0x04	; 4
  98:	85 b9       	out	0x05, r24	; 5
  9a:	08 95       	ret

0000009c <initTimer0>:
}

// Initializing timer 0 (change OCR0A for freq change!!!!!)
void initTimer0(){
	TCCR0A = 0x02;			// timer CTC mode
  9c:	82 e0       	ldi	r24, 0x02	; 2
  9e:	84 bd       	out	0x24, r24	; 36
	OCR0A = OVERFLOW_100Hz;	// sets counter overflow to 250
  a0:	98 ec       	ldi	r25, 0xC8	; 200
  a2:	97 bd       	out	0x27, r25	; 39
	TCCR0B = 0x02;			// timer clk = system clk / 8 (2MHz)
  a4:	85 bd       	out	0x25, r24	; 37
	TIFR0 = 0x02;			// Interrupt occurs at OCRF0A overflow 
  a6:	85 bb       	out	0x15, r24	; 21
	TIMSK0 = 0x02;			// OCRF0A overflow interrupt enabled
  a8:	80 93 6e 00 	sts	0x006E, r24
  ac:	08 95       	ret

000000ae <GPIO_Initialization>:
}


// initializes GPIO I/O, SPI interface, and interrupts
void GPIO_Initialization(){
	DDRB |= (1<<MOSI) | (1<<SCK) | (1<<SS);	// make MOSI, SCK and SS outputs
  ae:	84 b1       	in	r24, 0x04	; 4
  b0:	8c 62       	ori	r24, 0x2C	; 44
  b2:	84 b9       	out	0x04, r24	; 4
	DDRB &= ~(1<<BTN1) | ~(1<<BTN1);		// set buttons as inputs
  b4:	21 98       	cbi	0x04, 1	; 4
	PORTB |= (1<<BTN0) | (1<<BTN1);			// set internal pull-ups 
  b6:	85 b1       	in	r24, 0x05	; 5
  b8:	83 60       	ori	r24, 0x03	; 3
  ba:	85 b9       	out	0x05, r24	; 5
	Initialize_SPI_Master();				// initialize SPI to DAC
  bc:	0e 94 48 00 	call	0x90	; 0x90 <Initialize_SPI_Master>
	initTimer0();							// initialize timer0
  c0:	0e 94 4e 00 	call	0x9c	; 0x9c <initTimer0>
	sei();									// enable interrupts 
  c4:	78 94       	sei
  c6:	08 95       	ret

000000c8 <check_buttons>:
}

// returns a true bool if a buttons is pressed
uint8_t check_buttons(){
	if(!(PIND & (1<<BTN0)))			// return 1 if button at pin0 is pressed
  c8:	48 9b       	sbis	0x09, 0	; 9
  ca:	04 c0       	rjmp	.+8      	; 0xd4 <check_buttons+0xc>
		return 1;
	else if(!(PIND & (1<<BTN1)))	// return 2 if button at pin1 is pressed
  cc:	49 9b       	sbis	0x09, 1	; 9
  ce:	04 c0       	rjmp	.+8      	; 0xd8 <check_buttons+0x10>
		return 2;
	else
		return 0;					// return 0 if no buttons are pressed
  d0:	80 e0       	ldi	r24, 0x00	; 0
  d2:	08 95       	ret
}

// returns a true bool if a buttons is pressed
uint8_t check_buttons(){
	if(!(PIND & (1<<BTN0)))			// return 1 if button at pin0 is pressed
		return 1;
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	08 95       	ret
	else if(!(PIND & (1<<BTN1)))	// return 2 if button at pin1 is pressed
		return 2;
  d8:	82 e0       	ldi	r24, 0x02	; 2
	else
		return 0;					// return 0 if no buttons are pressed
}
  da:	08 95       	ret

000000dc <main>:
// Global Variables
uint8_t isr_repeat = 0;

int main(void)
{	
	GPIO_Initialization();
  dc:	0e 94 57 00 	call	0xae	; 0xae <GPIO_Initialization>
	
    while(1){
		// send square wave data to DAC
		while(!(check_buttons()));
  e0:	0e 94 64 00 	call	0xc8	; 0xc8 <check_buttons>
  e4:	88 23       	and	r24, r24
  e6:	e1 f3       	breq	.-8      	; 0xe0 <main+0x4>
		// send sawtooth wave data to DAC
		while(!(check_buttons()));
  e8:	0e 94 64 00 	call	0xc8	; 0xc8 <check_buttons>
  ec:	88 23       	and	r24, r24
  ee:	e1 f3       	breq	.-8      	; 0xe8 <main+0xc>
		// send triangle wave data to DAC
		while(!(check_buttons()));
  f0:	0e 94 64 00 	call	0xc8	; 0xc8 <check_buttons>
  f4:	88 23       	and	r24, r24
  f6:	e1 f3       	breq	.-8      	; 0xf0 <main+0x14>
		// send sine wave data to DAC
		while(!(check_buttons()));			
  f8:	0e 94 64 00 	call	0xc8	; 0xc8 <check_buttons>
  fc:	88 23       	and	r24, r24
  fe:	e1 f3       	breq	.-8      	; 0xf8 <main+0x1c>
 100:	ef cf       	rjmp	.-34     	; 0xe0 <main+0x4>

00000102 <__vector_14>:
}

///////////////////////////////////ISR/////////////////////////////////////////

// ISR to incrament through wave function LUTs and set frequency 
ISR(TIMER0_COMPA_vect){
 102:	1f 92       	push	r1
 104:	0f 92       	push	r0
 106:	0f b6       	in	r0, 0x3f	; 63
 108:	0f 92       	push	r0
 10a:	11 24       	eor	r1, r1
 10c:	8f 93       	push	r24
	if(isr_repeat){
 10e:	80 91 00 01 	lds	r24, 0x0100
 112:	88 23       	and	r24, r24
 114:	19 f0       	breq	.+6      	; 0x11c <__vector_14+0x1a>
		// increment wave LUT value
		isr_repeat = 0;
 116:	10 92 00 01 	sts	0x0100, r1
 11a:	03 c0       	rjmp	.+6      	; 0x122 <__vector_14+0x20>
	}
	else
		isr_repeat = 1;
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	80 93 00 01 	sts	0x0100, r24
 122:	8f 91       	pop	r24
 124:	0f 90       	pop	r0
 126:	0f be       	out	0x3f, r0	; 63
 128:	0f 90       	pop	r0
 12a:	1f 90       	pop	r1
 12c:	18 95       	reti

0000012e <_exit>:
 12e:	f8 94       	cli

00000130 <__stop_program>:
 130:	ff cf       	rjmp	.-2      	; 0x130 <__stop_program>
