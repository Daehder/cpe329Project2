
Project2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00000b8e  00000c22  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b8e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000004b6  0080010c  0080010c  00000c2e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c2e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c60  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  00000ca0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000838  00000000  00000000  00000d78  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000003a0  00000000  00000000  000015b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000042b  00000000  00000000  00001950  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000298  00000000  00000000  00001d7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000032c  00000000  00000000  00002014  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006b1  00000000  00000000  00002340  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  000029f1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 43 00 	jmp	0x86	; 0x86 <__ctors_end>
   4:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
   8:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
   c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  10:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  14:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  18:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  1c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  20:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  24:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  28:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  2c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  30:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  34:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  38:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__vector_14>
  3c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  40:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  44:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  48:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  4c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  50:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  54:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  58:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  5c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  60:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  64:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  68:	05 a8       	ldd	r0, Z+53	; 0x35
  6a:	4c cd       	rjmp	.-1384   	; 0xfffffb04 <__eeprom_end+0xff7efb04>
  6c:	b2 d4       	rcall	.+2404   	; 0x9d2 <sin>
  6e:	4e b9       	out	0x0e, r20	; 14
  70:	38 36       	cpi	r19, 0x68	; 104
  72:	a9 02       	muls	r26, r25
  74:	0c 50       	subi	r16, 0x0C	; 12
  76:	b9 91       	ld	r27, Y+
  78:	86 88       	ldd	r8, Z+22	; 0x16
  7a:	08 3c       	cpi	r16, 0xC8	; 200
  7c:	a6 aa       	std	Z+54, r10	; 0x36
  7e:	aa 2a       	or	r10, r26
  80:	be 00       	.word	0x00be	; ????
  82:	00 00       	nop
  84:	80 3f       	cpi	r24, 0xF0	; 240

00000086 <__ctors_end>:
  86:	11 24       	eor	r1, r1
  88:	1f be       	out	0x3f, r1	; 63
  8a:	cf ef       	ldi	r28, 0xFF	; 255
  8c:	d8 e0       	ldi	r29, 0x08	; 8
  8e:	de bf       	out	0x3e, r29	; 62
  90:	cd bf       	out	0x3d, r28	; 61

00000092 <__do_copy_data>:
  92:	11 e0       	ldi	r17, 0x01	; 1
  94:	a0 e0       	ldi	r26, 0x00	; 0
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	ee e8       	ldi	r30, 0x8E	; 142
  9a:	fb e0       	ldi	r31, 0x0B	; 11
  9c:	02 c0       	rjmp	.+4      	; 0xa2 <__do_copy_data+0x10>
  9e:	05 90       	lpm	r0, Z+
  a0:	0d 92       	st	X+, r0
  a2:	ac 30       	cpi	r26, 0x0C	; 12
  a4:	b1 07       	cpc	r27, r17
  a6:	d9 f7       	brne	.-10     	; 0x9e <__do_copy_data+0xc>

000000a8 <__do_clear_bss>:
  a8:	25 e0       	ldi	r18, 0x05	; 5
  aa:	ac e0       	ldi	r26, 0x0C	; 12
  ac:	b1 e0       	ldi	r27, 0x01	; 1
  ae:	01 c0       	rjmp	.+2      	; 0xb2 <.do_clear_bss_start>

000000b0 <.do_clear_bss_loop>:
  b0:	1d 92       	st	X+, r1

000000b2 <.do_clear_bss_start>:
  b2:	a2 3c       	cpi	r26, 0xC2	; 194
  b4:	b2 07       	cpc	r27, r18
  b6:	e1 f7       	brne	.-8      	; 0xb0 <.do_clear_bss_loop>
  b8:	0e 94 be 00 	call	0x17c	; 0x17c <main>
  bc:	0c 94 c5 05 	jmp	0xb8a	; 0xb8a <_exit>

000000c0 <__bad_interrupt>:
  c0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c4 <Initialize_SPI_Master>:
#define LED2 2						// Debug LED at PD2
#define DEBOUNCE 100

// sets up SPI system between ATmega328P and slave device(s)
void Initialize_SPI_Master(){
   SPCR = (0<<SPIE) |               // No interrupts
  c4:	80 e5       	ldi	r24, 0x50	; 80
  c6:	8c bd       	out	0x2c, r24	; 44
   (1<<SPE) |                       // SPI enabled
   (1<<MSTR) ;                      // master
   SPSR = 0x00;                     // clear flags
  c8:	1d bc       	out	0x2d, r1	; 45
   PORTB = 1 << SS;                 // make sure SS is high
  ca:	84 e0       	ldi	r24, 0x04	; 4
  cc:	85 b9       	out	0x05, r24	; 5
  ce:	08 95       	ret

000000d0 <initTimer0>:
}

// Initializing timer 0 (change OCR0A for freq change!!!!!)
void initTimer0(){
   TCCR0A = 0x02;                   // timer CTC mode
  d0:	82 e0       	ldi	r24, 0x02	; 2
  d2:	84 bd       	out	0x24, r24	; 36
   OCR0A = overflow;          // sets counter overflow to 250
  d4:	90 91 00 01 	lds	r25, 0x0100
  d8:	97 bd       	out	0x27, r25	; 39
   TCCR0B = 0x02;                   // timer clk = system clk / 8 (2MHz)
  da:	85 bd       	out	0x25, r24	; 37
   TIFR0 = 0x02;                    // Interrupt occurs at OCRF0A overflow
  dc:	85 bb       	out	0x15, r24	; 21
   TIMSK0 = 0x02;                   // OCRF0A overflow interrupt enabled
  de:	80 93 6e 00 	sts	0x006E, r24
  e2:	08 95       	ret

000000e4 <GPIO_Initialization>:
}


// initializes GPIO I/O, SPI interface, and interrupts
void GPIO_Initialization(){
   DDRB |= (1<<MOSI) | (1<<SCK) | (1<<SS);	// make MOSI, SCK and SS outputs
  e4:	84 b1       	in	r24, 0x04	; 4
  e6:	8c 62       	ori	r24, 0x2C	; 44
  e8:	84 b9       	out	0x04, r24	; 4
   DDRD &= ~(1<<BTN1) | ~(1<<BTN1);	// set buttons as inputs
  ea:	56 98       	cbi	0x0a, 6	; 10
   DDRD |= (1<<LED2);				// degub LED is output
  ec:	52 9a       	sbi	0x0a, 2	; 10
   PORTD |= (1<<BTN0) | (1<<BTN1);	// set internal pull-ups
  ee:	8b b1       	in	r24, 0x0b	; 11
  f0:	80 6c       	ori	r24, 0xC0	; 192
  f2:	8b b9       	out	0x0b, r24	; 11
   Initialize_SPI_Master();			// initialize SPI to DAC
  f4:	0e 94 62 00 	call	0xc4	; 0xc4 <Initialize_SPI_Master>
   initTimer0();							// initialize timer0
  f8:	0e 94 68 00 	call	0xd0	; 0xd0 <initTimer0>
   sei();									// enable interrupts
  fc:	78 94       	sei
  fe:	08 95       	ret

00000100 <check_buttons>:
}

// returns a true bool if a buttons is pressed
uint8_t check_buttons(){
   if (!(PIND & (1<<BTN0))){          // return 1 if button at pin0 is pressed
 100:	4f 9b       	sbis	0x09, 7	; 9
 102:	04 c0       	rjmp	.+8      	; 0x10c <check_buttons+0xc>
		//_delay_ms(DEBOUNCE);
      return 1;
   }
   else if(!(PIND & (1<<BTN1))){    // return 2 if button at pin1 is pressed
 104:	4e 9b       	sbis	0x09, 6	; 9
 106:	04 c0       	rjmp	.+8      	; 0x110 <check_buttons+0x10>
		//_delay_ms(DEBOUNCE);
      return 2;
   }
   else
      return 0;                     // return 0 if no buttons are pressed
 108:	80 e0       	ldi	r24, 0x00	; 0
 10a:	08 95       	ret

// returns a true bool if a buttons is pressed
uint8_t check_buttons(){
   if (!(PIND & (1<<BTN0))){          // return 1 if button at pin0 is pressed
		//_delay_ms(DEBOUNCE);
      return 1;
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	08 95       	ret
   }
   else if(!(PIND & (1<<BTN1))){    // return 2 if button at pin1 is pressed
		//_delay_ms(DEBOUNCE);
      return 2;
 110:	82 e0       	ldi	r24, 0x02	; 2
   }
   else
      return 0;                     // return 0 if no buttons are pressed
}
 112:	08 95       	ret

00000114 <Transmit_SPI_Master>:

// sends data to DAC over SPI data port
void Transmit_SPI_Master(int Data) {
   PORTB &= ~(1 << SS);					//Assert slave select (active low)
 114:	2a 98       	cbi	0x05, 2	; 5
   SPDR = ((Data >> 8) & 0xF) | 0x70;		//Attach configuration Bits onto MSB
 116:	9f 70       	andi	r25, 0x0F	; 15
 118:	90 67       	ori	r25, 0x70	; 112
 11a:	9e bd       	out	0x2e, r25	; 46
   while (!(SPSR & (1<<SPIF)))
 11c:	0d b4       	in	r0, 0x2d	; 45
 11e:	07 fe       	sbrs	r0, 7
 120:	fd cf       	rjmp	.-6      	; 0x11c <Transmit_SPI_Master+0x8>
      ;
   SPDR = 0xFF & Data;
 122:	8e bd       	out	0x2e, r24	; 46
   while (!(SPSR & (1<<SPIF)))
 124:	0d b4       	in	r0, 0x2d	; 45
 126:	07 fe       	sbrs	r0, 7
 128:	fd cf       	rjmp	.-6      	; 0x124 <Transmit_SPI_Master+0x10>
      ;
   PORTB |= 1 << SS;						//Turn off slave select
 12a:	2a 9a       	sbi	0x05, 2	; 5
 12c:	08 95       	ret

0000012e <volts_to_bits>:
      _delay_ms(1);

}

// converts input voltage between 0-5V to 12bit number for DAC
uint16_t volts_to_bits(double voltage){
 12e:	cf 92       	push	r12
 130:	df 92       	push	r13
 132:	ef 92       	push	r14
 134:	ff 92       	push	r15
   double bits = ((voltage/5.0)*4095);
 136:	20 e0       	ldi	r18, 0x00	; 0
 138:	30 e0       	ldi	r19, 0x00	; 0
 13a:	40 ea       	ldi	r20, 0xA0	; 160
 13c:	50 e4       	ldi	r21, 0x40	; 64
 13e:	0e 94 41 03 	call	0x682	; 0x682 <__divsf3>
 142:	20 e0       	ldi	r18, 0x00	; 0
 144:	30 ef       	ldi	r19, 0xF0	; 240
 146:	4f e7       	ldi	r20, 0x7F	; 127
 148:	55 e4       	ldi	r21, 0x45	; 69
 14a:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <__mulsf3>
 14e:	6b 01       	movw	r12, r22
 150:	7c 01       	movw	r14, r24
   if(bits>4095)
 152:	20 e0       	ldi	r18, 0x00	; 0
 154:	30 ef       	ldi	r19, 0xF0	; 240
 156:	4f e7       	ldi	r20, 0x7F	; 127
 158:	55 e4       	ldi	r21, 0x45	; 69
 15a:	0e 94 77 04 	call	0x8ee	; 0x8ee <__gesf2>
 15e:	18 16       	cp	r1, r24
 160:	34 f0       	brlt	.+12     	; 0x16e <volts_to_bits+0x40>
		return 4095;
	else
	 return bits;                  // return 12bit equivalent for DAC
 162:	c7 01       	movw	r24, r14
 164:	b6 01       	movw	r22, r12
 166:	0e 94 ba 03 	call	0x774	; 0x774 <__fixunssfsi>
 16a:	cb 01       	movw	r24, r22
 16c:	02 c0       	rjmp	.+4      	; 0x172 <volts_to_bits+0x44>

// converts input voltage between 0-5V to 12bit number for DAC
uint16_t volts_to_bits(double voltage){
   double bits = ((voltage/5.0)*4095);
   if(bits>4095)
		return 4095;
 16e:	8f ef       	ldi	r24, 0xFF	; 255
 170:	9f e0       	ldi	r25, 0x0F	; 15
	else
	 return bits;                  // return 12bit equivalent for DAC
}
 172:	ff 90       	pop	r15
 174:	ef 90       	pop	r14
 176:	df 90       	pop	r13
 178:	cf 90       	pop	r12
 17a:	08 95       	ret

0000017c <main>:
int num_samples;	// sets global number of samples
uint8_t overflow = 132;	// set overflow value for 100Hz

int main(void)
{
	num_samples = NUM_SAMPS;
 17c:	86 e9       	ldi	r24, 0x96	; 150
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	90 93 0f 01 	sts	0x010F, r25
 184:	80 93 0e 01 	sts	0x010E, r24
	
   // initialize GPIO, interrupts, and timers
   GPIO_Initialization();
 188:	0e 94 72 00 	call	0xe4	; 0xe4 <GPIO_Initialization>
   
   // fill square, sawtooth, triangle, and sine wave LUTs
   initWaves();
 18c:	0e 94 c5 02 	call	0x58a	; 0x58a <initWaves>
   
   while (1){
	   if(check_buttons()==1)
 190:	0e 94 80 00 	call	0x100	; 0x100 <check_buttons>
 194:	81 30       	cpi	r24, 0x01	; 1
 196:	e1 f7       	brne	.-8      	; 0x190 <main+0x14>
			nextWave();
 198:	0e 94 f5 00 	call	0x1ea	; 0x1ea <nextWave>
 19c:	f9 cf       	rjmp	.-14     	; 0x190 <main+0x14>

0000019e <__vector_14>:
}

///////////////////////////////////ISR/////////////////////////////////////////

// ISR to increment through wave function LUTs and set frequency
ISR(TIMER0_COMPA_vect){
 19e:	1f 92       	push	r1
 1a0:	0f 92       	push	r0
 1a2:	0f b6       	in	r0, 0x3f	; 63
 1a4:	0f 92       	push	r0
 1a6:	11 24       	eor	r1, r1
 1a8:	2f 93       	push	r18
 1aa:	3f 93       	push	r19
 1ac:	4f 93       	push	r20
 1ae:	5f 93       	push	r21
 1b0:	6f 93       	push	r22
 1b2:	7f 93       	push	r23
 1b4:	8f 93       	push	r24
 1b6:	9f 93       	push	r25
 1b8:	af 93       	push	r26
 1ba:	bf 93       	push	r27
 1bc:	ef 93       	push	r30
 1be:	ff 93       	push	r31
   Transmit_SPI_Master(nextWavePoint());
 1c0:	0e 94 12 01 	call	0x224	; 0x224 <nextWavePoint>
 1c4:	0e 94 8a 00 	call	0x114	; 0x114 <Transmit_SPI_Master>
}
 1c8:	ff 91       	pop	r31
 1ca:	ef 91       	pop	r30
 1cc:	bf 91       	pop	r27
 1ce:	af 91       	pop	r26
 1d0:	9f 91       	pop	r25
 1d2:	8f 91       	pop	r24
 1d4:	7f 91       	pop	r23
 1d6:	6f 91       	pop	r22
 1d8:	5f 91       	pop	r21
 1da:	4f 91       	pop	r20
 1dc:	3f 91       	pop	r19
 1de:	2f 91       	pop	r18
 1e0:	0f 90       	pop	r0
 1e2:	0f be       	out	0x3f, r0	; 63
 1e4:	0f 90       	pop	r0
 1e6:	1f 90       	pop	r1
 1e8:	18 95       	reti

000001ea <nextWave>:

void nextWave() {
   static int waveNdx = 0;
   static uint16_t* waves[NUM_WAVES] = {SquareWave, TriWave, SawWave, SinWave};
   
   waveNdx++;
 1ea:	80 91 0c 01 	lds	r24, 0x010C
 1ee:	90 91 0d 01 	lds	r25, 0x010D
 1f2:	01 96       	adiw	r24, 0x01	; 1
   waveNdx %= NUM_WAVES;
 1f4:	83 70       	andi	r24, 0x03	; 3
 1f6:	90 78       	andi	r25, 0x80	; 128
 1f8:	99 23       	and	r25, r25
 1fa:	24 f4       	brge	.+8      	; 0x204 <nextWave+0x1a>
 1fc:	01 97       	sbiw	r24, 0x01	; 1
 1fe:	8c 6f       	ori	r24, 0xFC	; 252
 200:	9f 6f       	ori	r25, 0xFF	; 255
 202:	01 96       	adiw	r24, 0x01	; 1
 204:	90 93 0d 01 	sts	0x010D, r25
 208:	80 93 0c 01 	sts	0x010C, r24
   
   Wave = waves[waveNdx];
 20c:	88 0f       	add	r24, r24
 20e:	99 1f       	adc	r25, r25
 210:	fc 01       	movw	r30, r24
 212:	ed 5f       	subi	r30, 0xFD	; 253
 214:	fe 4f       	sbci	r31, 0xFE	; 254
 216:	80 81       	ld	r24, Z
 218:	91 81       	ldd	r25, Z+1	; 0x01
 21a:	90 93 c1 05 	sts	0x05C1, r25
 21e:	80 93 c0 05 	sts	0x05C0, r24
 222:	08 95       	ret

00000224 <nextWavePoint>:
}

uint16_t nextWavePoint() {
   static int ndx = -1;
   
   ndx++;
 224:	80 91 01 01 	lds	r24, 0x0101
 228:	90 91 02 01 	lds	r25, 0x0102
 22c:	01 96       	adiw	r24, 0x01	; 1
   ndx %= NUM_SAMPS;
 22e:	66 e9       	ldi	r22, 0x96	; 150
 230:	70 e0       	ldi	r23, 0x00	; 0
 232:	0e 94 9d 05 	call	0xb3a	; 0xb3a <__divmodhi4>
 236:	90 93 02 01 	sts	0x0102, r25
 23a:	80 93 01 01 	sts	0x0101, r24
   
   return Wave[ndx];
 23e:	88 0f       	add	r24, r24
 240:	99 1f       	adc	r25, r25
 242:	e0 91 c0 05 	lds	r30, 0x05C0
 246:	f0 91 c1 05 	lds	r31, 0x05C1
 24a:	e8 0f       	add	r30, r24
 24c:	f9 1f       	adc	r31, r25
}
 24e:	80 81       	ld	r24, Z
 250:	91 81       	ldd	r25, Z+1	; 0x01
 252:	08 95       	ret

00000254 <make_square_LUT>:

void make_square_LUT(){
 254:	ef 92       	push	r14
 256:	ff 92       	push	r15
 258:	0f 93       	push	r16
 25a:	1f 93       	push	r17
 25c:	cf 93       	push	r28
 25e:	df 93       	push	r29
   int i;
   int duty = num_samples * (double) SQUARE_DUTY/100;
 260:	60 91 0e 01 	lds	r22, 0x010E
 264:	70 91 0f 01 	lds	r23, 0x010F
 268:	07 2e       	mov	r0, r23
 26a:	00 0c       	add	r0, r0
 26c:	88 0b       	sbc	r24, r24
 26e:	99 0b       	sbc	r25, r25
 270:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <__floatsisf>
 274:	20 e0       	ldi	r18, 0x00	; 0
 276:	30 e0       	ldi	r19, 0x00	; 0
 278:	48 e4       	ldi	r20, 0x48	; 72
 27a:	52 e4       	ldi	r21, 0x42	; 66
 27c:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <__mulsf3>
 280:	20 e0       	ldi	r18, 0x00	; 0
 282:	30 e0       	ldi	r19, 0x00	; 0
 284:	48 ec       	ldi	r20, 0xC8	; 200
 286:	52 e4       	ldi	r21, 0x42	; 66
 288:	0e 94 41 03 	call	0x682	; 0x682 <__divsf3>
 28c:	0e 94 b3 03 	call	0x766	; 0x766 <__fixsfsi>
 290:	eb 01       	movw	r28, r22
   
   for (i = 0; i < duty; i++)
 292:	1c 16       	cp	r1, r28
 294:	1d 06       	cpc	r1, r29
 296:	b4 f4       	brge	.+44     	; 0x2c4 <make_square_LUT+0x70>
 298:	04 e9       	ldi	r16, 0x94	; 148
 29a:	14 e0       	ldi	r17, 0x04	; 4
 29c:	66 0f       	add	r22, r22
 29e:	77 1f       	adc	r23, r23
 2a0:	cb 01       	movw	r24, r22
 2a2:	8c 56       	subi	r24, 0x6C	; 108
 2a4:	9b 4f       	sbci	r25, 0xFB	; 251
 2a6:	7c 01       	movw	r14, r24
      SquareWave[i] = volts_to_bits(MAX_VOLTAGE);
 2a8:	60 e0       	ldi	r22, 0x00	; 0
 2aa:	70 e0       	ldi	r23, 0x00	; 0
 2ac:	80 ea       	ldi	r24, 0xA0	; 160
 2ae:	90 e4       	ldi	r25, 0x40	; 64
 2b0:	0e 94 97 00 	call	0x12e	; 0x12e <volts_to_bits>
 2b4:	f8 01       	movw	r30, r16
 2b6:	81 93       	st	Z+, r24
 2b8:	91 93       	st	Z+, r25
 2ba:	8f 01       	movw	r16, r30

void make_square_LUT(){
   int i;
   int duty = num_samples * (double) SQUARE_DUTY/100;
   
   for (i = 0; i < duty; i++)
 2bc:	ee 15       	cp	r30, r14
 2be:	ff 05       	cpc	r31, r15
 2c0:	99 f7       	brne	.-26     	; 0x2a8 <make_square_LUT+0x54>
 2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <make_square_LUT+0x74>
 2c4:	c0 e0       	ldi	r28, 0x00	; 0
 2c6:	d0 e0       	ldi	r29, 0x00	; 0
      SquareWave[i] = volts_to_bits(MAX_VOLTAGE);
   
   for ( ; i < num_samples ; i++)
 2c8:	80 91 0e 01 	lds	r24, 0x010E
 2cc:	90 91 0f 01 	lds	r25, 0x010F
 2d0:	c8 17       	cp	r28, r24
 2d2:	d9 07       	cpc	r29, r25
 2d4:	b4 f4       	brge	.+44     	; 0x302 <make_square_LUT+0xae>
 2d6:	8e 01       	movw	r16, r28
 2d8:	00 0f       	add	r16, r16
 2da:	11 1f       	adc	r17, r17
 2dc:	0c 56       	subi	r16, 0x6C	; 108
 2de:	1b 4f       	sbci	r17, 0xFB	; 251
      SquareWave[i] = volts_to_bits(MIN_VOLTAGE);
 2e0:	60 e0       	ldi	r22, 0x00	; 0
 2e2:	70 e0       	ldi	r23, 0x00	; 0
 2e4:	cb 01       	movw	r24, r22
 2e6:	0e 94 97 00 	call	0x12e	; 0x12e <volts_to_bits>
 2ea:	f8 01       	movw	r30, r16
 2ec:	81 93       	st	Z+, r24
 2ee:	91 93       	st	Z+, r25
 2f0:	8f 01       	movw	r16, r30
   int duty = num_samples * (double) SQUARE_DUTY/100;
   
   for (i = 0; i < duty; i++)
      SquareWave[i] = volts_to_bits(MAX_VOLTAGE);
   
   for ( ; i < num_samples ; i++)
 2f2:	21 96       	adiw	r28, 0x01	; 1
 2f4:	80 91 0e 01 	lds	r24, 0x010E
 2f8:	90 91 0f 01 	lds	r25, 0x010F
 2fc:	c8 17       	cp	r28, r24
 2fe:	d9 07       	cpc	r29, r25
 300:	7c f3       	brlt	.-34     	; 0x2e0 <make_square_LUT+0x8c>
      SquareWave[i] = volts_to_bits(MIN_VOLTAGE);
}
 302:	df 91       	pop	r29
 304:	cf 91       	pop	r28
 306:	1f 91       	pop	r17
 308:	0f 91       	pop	r16
 30a:	ff 90       	pop	r15
 30c:	ef 90       	pop	r14
 30e:	08 95       	ret

00000310 <make_triangle_LUT>:

void make_triangle_LUT(){
 310:	4f 92       	push	r4
 312:	5f 92       	push	r5
 314:	6f 92       	push	r6
 316:	7f 92       	push	r7
 318:	af 92       	push	r10
 31a:	bf 92       	push	r11
 31c:	cf 92       	push	r12
 31e:	df 92       	push	r13
 320:	ef 92       	push	r14
 322:	ff 92       	push	r15
 324:	0f 93       	push	r16
 326:	1f 93       	push	r17
 328:	cf 93       	push	r28
 32a:	df 93       	push	r29
   int i;
   int peak = num_samples / 2;
 32c:	a0 90 0e 01 	lds	r10, 0x010E
 330:	b0 90 0f 01 	lds	r11, 0x010F
 334:	bb 20       	and	r11, r11
 336:	1c f4       	brge	.+6      	; 0x33e <make_triangle_LUT+0x2e>
 338:	2f ef       	ldi	r18, 0xFF	; 255
 33a:	a2 1a       	sub	r10, r18
 33c:	b2 0a       	sbc	r11, r18
 33e:	b5 94       	asr	r11
 340:	a7 94       	ror	r10
   double increment = ((double) MAX_VOLTAGE - MIN_VOLTAGE) / peak;
 342:	b5 01       	movw	r22, r10
 344:	0b 2c       	mov	r0, r11
 346:	00 0c       	add	r0, r0
 348:	88 0b       	sbc	r24, r24
 34a:	99 0b       	sbc	r25, r25
 34c:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <__floatsisf>
 350:	9b 01       	movw	r18, r22
 352:	ac 01       	movw	r20, r24
 354:	60 e0       	ldi	r22, 0x00	; 0
 356:	70 e0       	ldi	r23, 0x00	; 0
 358:	80 ea       	ldi	r24, 0xA0	; 160
 35a:	90 e4       	ldi	r25, 0x40	; 64
 35c:	0e 94 41 03 	call	0x682	; 0x682 <__divsf3>
 360:	2b 01       	movw	r4, r22
 362:	3c 01       	movw	r6, r24
   double voltage = MIN_VOLTAGE - increment;
 364:	9b 01       	movw	r18, r22
 366:	ac 01       	movw	r20, r24
 368:	60 e0       	ldi	r22, 0x00	; 0
 36a:	70 e0       	ldi	r23, 0x00	; 0
 36c:	cb 01       	movw	r24, r22
 36e:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <__subsf3>
 372:	6b 01       	movw	r12, r22
 374:	7c 01       	movw	r14, r24
   
   for (i = 0; i < (peak + 1); i++)
 376:	e5 01       	movw	r28, r10
 378:	21 96       	adiw	r28, 0x01	; 1
 37a:	1c 16       	cp	r1, r28
 37c:	1d 06       	cpc	r1, r29
 37e:	dc f4       	brge	.+54     	; 0x3b6 <make_triangle_LUT+0xa6>
 380:	08 e6       	ldi	r16, 0x68	; 104
 382:	13 e0       	ldi	r17, 0x03	; 3
 384:	c5 01       	movw	r24, r10
 386:	88 0f       	add	r24, r24
 388:	99 1f       	adc	r25, r25
 38a:	fc 01       	movw	r30, r24
 38c:	e6 59       	subi	r30, 0x96	; 150
 38e:	fc 4f       	sbci	r31, 0xFC	; 252
 390:	5f 01       	movw	r10, r30
      TriWave[i] = volts_to_bits(voltage += increment);
 392:	a3 01       	movw	r20, r6
 394:	92 01       	movw	r18, r4
 396:	c7 01       	movw	r24, r14
 398:	b6 01       	movw	r22, r12
 39a:	0e 94 d5 02 	call	0x5aa	; 0x5aa <__addsf3>
 39e:	6b 01       	movw	r12, r22
 3a0:	7c 01       	movw	r14, r24
 3a2:	0e 94 97 00 	call	0x12e	; 0x12e <volts_to_bits>
 3a6:	f8 01       	movw	r30, r16
 3a8:	81 93       	st	Z+, r24
 3aa:	91 93       	st	Z+, r25
 3ac:	8f 01       	movw	r16, r30
   int i;
   int peak = num_samples / 2;
   double increment = ((double) MAX_VOLTAGE - MIN_VOLTAGE) / peak;
   double voltage = MIN_VOLTAGE - increment;
   
   for (i = 0; i < (peak + 1); i++)
 3ae:	ea 15       	cp	r30, r10
 3b0:	fb 05       	cpc	r31, r11
 3b2:	79 f7       	brne	.-34     	; 0x392 <make_triangle_LUT+0x82>
 3b4:	02 c0       	rjmp	.+4      	; 0x3ba <make_triangle_LUT+0xaa>
 3b6:	c0 e0       	ldi	r28, 0x00	; 0
 3b8:	d0 e0       	ldi	r29, 0x00	; 0
      TriWave[i] = volts_to_bits(voltage += increment);
   
   for ( ; i < (num_samples - 1); i++)
 3ba:	80 91 0e 01 	lds	r24, 0x010E
 3be:	90 91 0f 01 	lds	r25, 0x010F
 3c2:	01 97       	sbiw	r24, 0x01	; 1
 3c4:	c8 17       	cp	r28, r24
 3c6:	d9 07       	cpc	r29, r25
 3c8:	e4 f4       	brge	.+56     	; 0x402 <make_triangle_LUT+0xf2>
 3ca:	8e 01       	movw	r16, r28
 3cc:	00 0f       	add	r16, r16
 3ce:	11 1f       	adc	r17, r17
 3d0:	08 59       	subi	r16, 0x98	; 152
 3d2:	1c 4f       	sbci	r17, 0xFC	; 252
      TriWave[i] = volts_to_bits(voltage -= increment);
 3d4:	a3 01       	movw	r20, r6
 3d6:	92 01       	movw	r18, r4
 3d8:	c7 01       	movw	r24, r14
 3da:	b6 01       	movw	r22, r12
 3dc:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <__subsf3>
 3e0:	6b 01       	movw	r12, r22
 3e2:	7c 01       	movw	r14, r24
 3e4:	0e 94 97 00 	call	0x12e	; 0x12e <volts_to_bits>
 3e8:	f8 01       	movw	r30, r16
 3ea:	81 93       	st	Z+, r24
 3ec:	91 93       	st	Z+, r25
 3ee:	8f 01       	movw	r16, r30
   double voltage = MIN_VOLTAGE - increment;
   
   for (i = 0; i < (peak + 1); i++)
      TriWave[i] = volts_to_bits(voltage += increment);
   
   for ( ; i < (num_samples - 1); i++)
 3f0:	21 96       	adiw	r28, 0x01	; 1
 3f2:	80 91 0e 01 	lds	r24, 0x010E
 3f6:	90 91 0f 01 	lds	r25, 0x010F
 3fa:	01 97       	sbiw	r24, 0x01	; 1
 3fc:	c8 17       	cp	r28, r24
 3fe:	d9 07       	cpc	r29, r25
 400:	4c f3       	brlt	.-46     	; 0x3d4 <make_triangle_LUT+0xc4>
      TriWave[i] = volts_to_bits(voltage -= increment);
}
 402:	df 91       	pop	r29
 404:	cf 91       	pop	r28
 406:	1f 91       	pop	r17
 408:	0f 91       	pop	r16
 40a:	ff 90       	pop	r15
 40c:	ef 90       	pop	r14
 40e:	df 90       	pop	r13
 410:	cf 90       	pop	r12
 412:	bf 90       	pop	r11
 414:	af 90       	pop	r10
 416:	7f 90       	pop	r7
 418:	6f 90       	pop	r6
 41a:	5f 90       	pop	r5
 41c:	4f 90       	pop	r4
 41e:	08 95       	ret

00000420 <make_sawtooth_LUT>:

void make_sawtooth_LUT(){
 420:	8f 92       	push	r8
 422:	9f 92       	push	r9
 424:	af 92       	push	r10
 426:	bf 92       	push	r11
 428:	cf 92       	push	r12
 42a:	df 92       	push	r13
 42c:	ef 92       	push	r14
 42e:	ff 92       	push	r15
 430:	0f 93       	push	r16
 432:	1f 93       	push	r17
 434:	cf 93       	push	r28
 436:	df 93       	push	r29
   int ndx;
   double increment = ((double) MAX_VOLTAGE - MIN_VOLTAGE) / (num_samples - 1);
 438:	c0 91 0e 01 	lds	r28, 0x010E
 43c:	d0 91 0f 01 	lds	r29, 0x010F
 440:	be 01       	movw	r22, r28
 442:	61 50       	subi	r22, 0x01	; 1
 444:	71 09       	sbc	r23, r1
 446:	07 2e       	mov	r0, r23
 448:	00 0c       	add	r0, r0
 44a:	88 0b       	sbc	r24, r24
 44c:	99 0b       	sbc	r25, r25
 44e:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <__floatsisf>
 452:	9b 01       	movw	r18, r22
 454:	ac 01       	movw	r20, r24
 456:	60 e0       	ldi	r22, 0x00	; 0
 458:	70 e0       	ldi	r23, 0x00	; 0
 45a:	80 ea       	ldi	r24, 0xA0	; 160
 45c:	90 e4       	ldi	r25, 0x40	; 64
 45e:	0e 94 41 03 	call	0x682	; 0x682 <__divsf3>
 462:	4b 01       	movw	r8, r22
 464:	5c 01       	movw	r10, r24
   double voltage = MIN_VOLTAGE -increment;
 466:	9b 01       	movw	r18, r22
 468:	ac 01       	movw	r20, r24
 46a:	60 e0       	ldi	r22, 0x00	; 0
 46c:	70 e0       	ldi	r23, 0x00	; 0
 46e:	cb 01       	movw	r24, r22
 470:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <__subsf3>
 474:	6b 01       	movw	r12, r22
 476:	7c 01       	movw	r14, r24
   
   for (ndx = 0; ndx < num_samples; ndx++)
 478:	1c 16       	cp	r1, r28
 47a:	1d 06       	cpc	r1, r29
 47c:	d4 f4       	brge	.+52     	; 0x4b2 <make_sawtooth_LUT+0x92>
 47e:	0c e3       	ldi	r16, 0x3C	; 60
 480:	12 e0       	ldi	r17, 0x02	; 2
 482:	c0 e0       	ldi	r28, 0x00	; 0
 484:	d0 e0       	ldi	r29, 0x00	; 0
      SawWave[ndx] = volts_to_bits(voltage += increment);
 486:	a5 01       	movw	r20, r10
 488:	94 01       	movw	r18, r8
 48a:	c7 01       	movw	r24, r14
 48c:	b6 01       	movw	r22, r12
 48e:	0e 94 d5 02 	call	0x5aa	; 0x5aa <__addsf3>
 492:	6b 01       	movw	r12, r22
 494:	7c 01       	movw	r14, r24
 496:	0e 94 97 00 	call	0x12e	; 0x12e <volts_to_bits>
 49a:	f8 01       	movw	r30, r16
 49c:	81 93       	st	Z+, r24
 49e:	91 93       	st	Z+, r25
 4a0:	8f 01       	movw	r16, r30
void make_sawtooth_LUT(){
   int ndx;
   double increment = ((double) MAX_VOLTAGE - MIN_VOLTAGE) / (num_samples - 1);
   double voltage = MIN_VOLTAGE -increment;
   
   for (ndx = 0; ndx < num_samples; ndx++)
 4a2:	21 96       	adiw	r28, 0x01	; 1
 4a4:	80 91 0e 01 	lds	r24, 0x010E
 4a8:	90 91 0f 01 	lds	r25, 0x010F
 4ac:	c8 17       	cp	r28, r24
 4ae:	d9 07       	cpc	r29, r25
 4b0:	54 f3       	brlt	.-44     	; 0x486 <make_sawtooth_LUT+0x66>
      SawWave[ndx] = volts_to_bits(voltage += increment);
}
 4b2:	df 91       	pop	r29
 4b4:	cf 91       	pop	r28
 4b6:	1f 91       	pop	r17
 4b8:	0f 91       	pop	r16
 4ba:	ff 90       	pop	r15
 4bc:	ef 90       	pop	r14
 4be:	df 90       	pop	r13
 4c0:	cf 90       	pop	r12
 4c2:	bf 90       	pop	r11
 4c4:	af 90       	pop	r10
 4c6:	9f 90       	pop	r9
 4c8:	8f 90       	pop	r8
 4ca:	08 95       	ret

000004cc <make_sin_LUT>:

void make_sin_LUT(){
 4cc:	8f 92       	push	r8
 4ce:	9f 92       	push	r9
 4d0:	af 92       	push	r10
 4d2:	bf 92       	push	r11
 4d4:	cf 92       	push	r12
 4d6:	df 92       	push	r13
 4d8:	ef 92       	push	r14
 4da:	ff 92       	push	r15
 4dc:	0f 93       	push	r16
 4de:	1f 93       	push	r17
 4e0:	cf 93       	push	r28
 4e2:	df 93       	push	r29
   int ndx;
   double increment = 2 * M_PI / num_samples;
 4e4:	c0 91 0e 01 	lds	r28, 0x010E
 4e8:	d0 91 0f 01 	lds	r29, 0x010F
 4ec:	be 01       	movw	r22, r28
 4ee:	0d 2e       	mov	r0, r29
 4f0:	00 0c       	add	r0, r0
 4f2:	88 0b       	sbc	r24, r24
 4f4:	99 0b       	sbc	r25, r25
 4f6:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <__floatsisf>
 4fa:	9b 01       	movw	r18, r22
 4fc:	ac 01       	movw	r20, r24
 4fe:	6b ed       	ldi	r22, 0xDB	; 219
 500:	7f e0       	ldi	r23, 0x0F	; 15
 502:	89 ec       	ldi	r24, 0xC9	; 201
 504:	90 e4       	ldi	r25, 0x40	; 64
 506:	0e 94 41 03 	call	0x682	; 0x682 <__divsf3>
 50a:	4b 01       	movw	r8, r22
 50c:	5c 01       	movw	r10, r24
   double rad = -increment;
 50e:	6b 01       	movw	r12, r22
 510:	7c 01       	movw	r14, r24
 512:	f7 fa       	bst	r15, 7
 514:	f0 94       	com	r15
 516:	f7 f8       	bld	r15, 7
 518:	f0 94       	com	r15
   double ampli = ((double) MAX_VOLTAGE - MIN_VOLTAGE) / 2;
   // The amplitude/2 is neccessary to compensate for sin()'s amplitude of 2
   double offset = MIN_VOLTAGE + ampli;
   
   for (ndx = 0; ndx < num_samples; ndx++)
 51a:	1c 16       	cp	r1, r28
 51c:	1d 06       	cpc	r1, r29
 51e:	44 f5       	brge	.+80     	; 0x570 <make_sin_LUT+0xa4>
 520:	00 e1       	ldi	r16, 0x10	; 16
 522:	11 e0       	ldi	r17, 0x01	; 1
 524:	c0 e0       	ldi	r28, 0x00	; 0
 526:	d0 e0       	ldi	r29, 0x00	; 0
      SinWave[ndx] = volts_to_bits(ampli * sin(rad += increment) + offset);
 528:	a5 01       	movw	r20, r10
 52a:	94 01       	movw	r18, r8
 52c:	c7 01       	movw	r24, r14
 52e:	b6 01       	movw	r22, r12
 530:	0e 94 d5 02 	call	0x5aa	; 0x5aa <__addsf3>
 534:	6b 01       	movw	r12, r22
 536:	7c 01       	movw	r14, r24
 538:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <sin>
 53c:	20 e0       	ldi	r18, 0x00	; 0
 53e:	30 e0       	ldi	r19, 0x00	; 0
 540:	40 e2       	ldi	r20, 0x20	; 32
 542:	50 e4       	ldi	r21, 0x40	; 64
 544:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <__mulsf3>
 548:	20 e0       	ldi	r18, 0x00	; 0
 54a:	30 e0       	ldi	r19, 0x00	; 0
 54c:	40 e2       	ldi	r20, 0x20	; 32
 54e:	50 e4       	ldi	r21, 0x40	; 64
 550:	0e 94 d5 02 	call	0x5aa	; 0x5aa <__addsf3>
 554:	0e 94 97 00 	call	0x12e	; 0x12e <volts_to_bits>
 558:	f8 01       	movw	r30, r16
 55a:	81 93       	st	Z+, r24
 55c:	91 93       	st	Z+, r25
 55e:	8f 01       	movw	r16, r30
   double rad = -increment;
   double ampli = ((double) MAX_VOLTAGE - MIN_VOLTAGE) / 2;
   // The amplitude/2 is neccessary to compensate for sin()'s amplitude of 2
   double offset = MIN_VOLTAGE + ampli;
   
   for (ndx = 0; ndx < num_samples; ndx++)
 560:	21 96       	adiw	r28, 0x01	; 1
 562:	80 91 0e 01 	lds	r24, 0x010E
 566:	90 91 0f 01 	lds	r25, 0x010F
 56a:	c8 17       	cp	r28, r24
 56c:	d9 07       	cpc	r29, r25
 56e:	e4 f2       	brlt	.-72     	; 0x528 <make_sin_LUT+0x5c>
      SinWave[ndx] = volts_to_bits(ampli * sin(rad += increment) + offset);
 570:	df 91       	pop	r29
 572:	cf 91       	pop	r28
 574:	1f 91       	pop	r17
 576:	0f 91       	pop	r16
 578:	ff 90       	pop	r15
 57a:	ef 90       	pop	r14
 57c:	df 90       	pop	r13
 57e:	cf 90       	pop	r12
 580:	bf 90       	pop	r11
 582:	af 90       	pop	r10
 584:	9f 90       	pop	r9
 586:	8f 90       	pop	r8
 588:	08 95       	ret

0000058a <initWaves>:
uint16_t SinWave[NUM_SAMPS];

uint16_t *Wave;

void initWaves() {
   make_square_LUT();
 58a:	0e 94 2a 01 	call	0x254	; 0x254 <make_square_LUT>
   make_triangle_LUT();
 58e:	0e 94 88 01 	call	0x310	; 0x310 <make_triangle_LUT>
   make_sawtooth_LUT();
 592:	0e 94 10 02 	call	0x420	; 0x420 <make_sawtooth_LUT>
   make_sin_LUT();
 596:	0e 94 66 02 	call	0x4cc	; 0x4cc <make_sin_LUT>
   
   Wave = SquareWave;
 59a:	84 e9       	ldi	r24, 0x94	; 148
 59c:	94 e0       	ldi	r25, 0x04	; 4
 59e:	90 93 c1 05 	sts	0x05C1, r25
 5a2:	80 93 c0 05 	sts	0x05C0, r24
 5a6:	08 95       	ret

000005a8 <__subsf3>:
 5a8:	50 58       	subi	r21, 0x80	; 128

000005aa <__addsf3>:
 5aa:	bb 27       	eor	r27, r27
 5ac:	aa 27       	eor	r26, r26
 5ae:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <__addsf3x>
 5b2:	0c 94 3d 04 	jmp	0x87a	; 0x87a <__fp_round>
 5b6:	0e 94 2f 04 	call	0x85e	; 0x85e <__fp_pscA>
 5ba:	38 f0       	brcs	.+14     	; 0x5ca <__addsf3+0x20>
 5bc:	0e 94 36 04 	call	0x86c	; 0x86c <__fp_pscB>
 5c0:	20 f0       	brcs	.+8      	; 0x5ca <__addsf3+0x20>
 5c2:	39 f4       	brne	.+14     	; 0x5d2 <__addsf3+0x28>
 5c4:	9f 3f       	cpi	r25, 0xFF	; 255
 5c6:	19 f4       	brne	.+6      	; 0x5ce <__addsf3+0x24>
 5c8:	26 f4       	brtc	.+8      	; 0x5d2 <__addsf3+0x28>
 5ca:	0c 94 2c 04 	jmp	0x858	; 0x858 <__fp_nan>
 5ce:	0e f4       	brtc	.+2      	; 0x5d2 <__addsf3+0x28>
 5d0:	e0 95       	com	r30
 5d2:	e7 fb       	bst	r30, 7
 5d4:	0c 94 26 04 	jmp	0x84c	; 0x84c <__fp_inf>

000005d8 <__addsf3x>:
 5d8:	e9 2f       	mov	r30, r25
 5da:	0e 94 4e 04 	call	0x89c	; 0x89c <__fp_split3>
 5de:	58 f3       	brcs	.-42     	; 0x5b6 <__addsf3+0xc>
 5e0:	ba 17       	cp	r27, r26
 5e2:	62 07       	cpc	r22, r18
 5e4:	73 07       	cpc	r23, r19
 5e6:	84 07       	cpc	r24, r20
 5e8:	95 07       	cpc	r25, r21
 5ea:	20 f0       	brcs	.+8      	; 0x5f4 <__addsf3x+0x1c>
 5ec:	79 f4       	brne	.+30     	; 0x60c <__addsf3x+0x34>
 5ee:	a6 f5       	brtc	.+104    	; 0x658 <__addsf3x+0x80>
 5f0:	0c 94 70 04 	jmp	0x8e0	; 0x8e0 <__fp_zero>
 5f4:	0e f4       	brtc	.+2      	; 0x5f8 <__addsf3x+0x20>
 5f6:	e0 95       	com	r30
 5f8:	0b 2e       	mov	r0, r27
 5fa:	ba 2f       	mov	r27, r26
 5fc:	a0 2d       	mov	r26, r0
 5fe:	0b 01       	movw	r0, r22
 600:	b9 01       	movw	r22, r18
 602:	90 01       	movw	r18, r0
 604:	0c 01       	movw	r0, r24
 606:	ca 01       	movw	r24, r20
 608:	a0 01       	movw	r20, r0
 60a:	11 24       	eor	r1, r1
 60c:	ff 27       	eor	r31, r31
 60e:	59 1b       	sub	r21, r25
 610:	99 f0       	breq	.+38     	; 0x638 <__addsf3x+0x60>
 612:	59 3f       	cpi	r21, 0xF9	; 249
 614:	50 f4       	brcc	.+20     	; 0x62a <__addsf3x+0x52>
 616:	50 3e       	cpi	r21, 0xE0	; 224
 618:	68 f1       	brcs	.+90     	; 0x674 <__addsf3x+0x9c>
 61a:	1a 16       	cp	r1, r26
 61c:	f0 40       	sbci	r31, 0x00	; 0
 61e:	a2 2f       	mov	r26, r18
 620:	23 2f       	mov	r18, r19
 622:	34 2f       	mov	r19, r20
 624:	44 27       	eor	r20, r20
 626:	58 5f       	subi	r21, 0xF8	; 248
 628:	f3 cf       	rjmp	.-26     	; 0x610 <__addsf3x+0x38>
 62a:	46 95       	lsr	r20
 62c:	37 95       	ror	r19
 62e:	27 95       	ror	r18
 630:	a7 95       	ror	r26
 632:	f0 40       	sbci	r31, 0x00	; 0
 634:	53 95       	inc	r21
 636:	c9 f7       	brne	.-14     	; 0x62a <__addsf3x+0x52>
 638:	7e f4       	brtc	.+30     	; 0x658 <__addsf3x+0x80>
 63a:	1f 16       	cp	r1, r31
 63c:	ba 0b       	sbc	r27, r26
 63e:	62 0b       	sbc	r22, r18
 640:	73 0b       	sbc	r23, r19
 642:	84 0b       	sbc	r24, r20
 644:	ba f0       	brmi	.+46     	; 0x674 <__addsf3x+0x9c>
 646:	91 50       	subi	r25, 0x01	; 1
 648:	a1 f0       	breq	.+40     	; 0x672 <__addsf3x+0x9a>
 64a:	ff 0f       	add	r31, r31
 64c:	bb 1f       	adc	r27, r27
 64e:	66 1f       	adc	r22, r22
 650:	77 1f       	adc	r23, r23
 652:	88 1f       	adc	r24, r24
 654:	c2 f7       	brpl	.-16     	; 0x646 <__addsf3x+0x6e>
 656:	0e c0       	rjmp	.+28     	; 0x674 <__addsf3x+0x9c>
 658:	ba 0f       	add	r27, r26
 65a:	62 1f       	adc	r22, r18
 65c:	73 1f       	adc	r23, r19
 65e:	84 1f       	adc	r24, r20
 660:	48 f4       	brcc	.+18     	; 0x674 <__addsf3x+0x9c>
 662:	87 95       	ror	r24
 664:	77 95       	ror	r23
 666:	67 95       	ror	r22
 668:	b7 95       	ror	r27
 66a:	f7 95       	ror	r31
 66c:	9e 3f       	cpi	r25, 0xFE	; 254
 66e:	08 f0       	brcs	.+2      	; 0x672 <__addsf3x+0x9a>
 670:	b0 cf       	rjmp	.-160    	; 0x5d2 <__addsf3+0x28>
 672:	93 95       	inc	r25
 674:	88 0f       	add	r24, r24
 676:	08 f0       	brcs	.+2      	; 0x67a <__addsf3x+0xa2>
 678:	99 27       	eor	r25, r25
 67a:	ee 0f       	add	r30, r30
 67c:	97 95       	ror	r25
 67e:	87 95       	ror	r24
 680:	08 95       	ret

00000682 <__divsf3>:
 682:	0e 94 55 03 	call	0x6aa	; 0x6aa <__divsf3x>
 686:	0c 94 3d 04 	jmp	0x87a	; 0x87a <__fp_round>
 68a:	0e 94 36 04 	call	0x86c	; 0x86c <__fp_pscB>
 68e:	58 f0       	brcs	.+22     	; 0x6a6 <__divsf3+0x24>
 690:	0e 94 2f 04 	call	0x85e	; 0x85e <__fp_pscA>
 694:	40 f0       	brcs	.+16     	; 0x6a6 <__divsf3+0x24>
 696:	29 f4       	brne	.+10     	; 0x6a2 <__divsf3+0x20>
 698:	5f 3f       	cpi	r21, 0xFF	; 255
 69a:	29 f0       	breq	.+10     	; 0x6a6 <__divsf3+0x24>
 69c:	0c 94 26 04 	jmp	0x84c	; 0x84c <__fp_inf>
 6a0:	51 11       	cpse	r21, r1
 6a2:	0c 94 71 04 	jmp	0x8e2	; 0x8e2 <__fp_szero>
 6a6:	0c 94 2c 04 	jmp	0x858	; 0x858 <__fp_nan>

000006aa <__divsf3x>:
 6aa:	0e 94 4e 04 	call	0x89c	; 0x89c <__fp_split3>
 6ae:	68 f3       	brcs	.-38     	; 0x68a <__divsf3+0x8>

000006b0 <__divsf3_pse>:
 6b0:	99 23       	and	r25, r25
 6b2:	b1 f3       	breq	.-20     	; 0x6a0 <__divsf3+0x1e>
 6b4:	55 23       	and	r21, r21
 6b6:	91 f3       	breq	.-28     	; 0x69c <__divsf3+0x1a>
 6b8:	95 1b       	sub	r25, r21
 6ba:	55 0b       	sbc	r21, r21
 6bc:	bb 27       	eor	r27, r27
 6be:	aa 27       	eor	r26, r26
 6c0:	62 17       	cp	r22, r18
 6c2:	73 07       	cpc	r23, r19
 6c4:	84 07       	cpc	r24, r20
 6c6:	38 f0       	brcs	.+14     	; 0x6d6 <__divsf3_pse+0x26>
 6c8:	9f 5f       	subi	r25, 0xFF	; 255
 6ca:	5f 4f       	sbci	r21, 0xFF	; 255
 6cc:	22 0f       	add	r18, r18
 6ce:	33 1f       	adc	r19, r19
 6d0:	44 1f       	adc	r20, r20
 6d2:	aa 1f       	adc	r26, r26
 6d4:	a9 f3       	breq	.-22     	; 0x6c0 <__divsf3_pse+0x10>
 6d6:	35 d0       	rcall	.+106    	; 0x742 <__divsf3_pse+0x92>
 6d8:	0e 2e       	mov	r0, r30
 6da:	3a f0       	brmi	.+14     	; 0x6ea <__divsf3_pse+0x3a>
 6dc:	e0 e8       	ldi	r30, 0x80	; 128
 6de:	32 d0       	rcall	.+100    	; 0x744 <__divsf3_pse+0x94>
 6e0:	91 50       	subi	r25, 0x01	; 1
 6e2:	50 40       	sbci	r21, 0x00	; 0
 6e4:	e6 95       	lsr	r30
 6e6:	00 1c       	adc	r0, r0
 6e8:	ca f7       	brpl	.-14     	; 0x6dc <__divsf3_pse+0x2c>
 6ea:	2b d0       	rcall	.+86     	; 0x742 <__divsf3_pse+0x92>
 6ec:	fe 2f       	mov	r31, r30
 6ee:	29 d0       	rcall	.+82     	; 0x742 <__divsf3_pse+0x92>
 6f0:	66 0f       	add	r22, r22
 6f2:	77 1f       	adc	r23, r23
 6f4:	88 1f       	adc	r24, r24
 6f6:	bb 1f       	adc	r27, r27
 6f8:	26 17       	cp	r18, r22
 6fa:	37 07       	cpc	r19, r23
 6fc:	48 07       	cpc	r20, r24
 6fe:	ab 07       	cpc	r26, r27
 700:	b0 e8       	ldi	r27, 0x80	; 128
 702:	09 f0       	breq	.+2      	; 0x706 <__divsf3_pse+0x56>
 704:	bb 0b       	sbc	r27, r27
 706:	80 2d       	mov	r24, r0
 708:	bf 01       	movw	r22, r30
 70a:	ff 27       	eor	r31, r31
 70c:	93 58       	subi	r25, 0x83	; 131
 70e:	5f 4f       	sbci	r21, 0xFF	; 255
 710:	3a f0       	brmi	.+14     	; 0x720 <__divsf3_pse+0x70>
 712:	9e 3f       	cpi	r25, 0xFE	; 254
 714:	51 05       	cpc	r21, r1
 716:	78 f0       	brcs	.+30     	; 0x736 <__divsf3_pse+0x86>
 718:	0c 94 26 04 	jmp	0x84c	; 0x84c <__fp_inf>
 71c:	0c 94 71 04 	jmp	0x8e2	; 0x8e2 <__fp_szero>
 720:	5f 3f       	cpi	r21, 0xFF	; 255
 722:	e4 f3       	brlt	.-8      	; 0x71c <__divsf3_pse+0x6c>
 724:	98 3e       	cpi	r25, 0xE8	; 232
 726:	d4 f3       	brlt	.-12     	; 0x71c <__divsf3_pse+0x6c>
 728:	86 95       	lsr	r24
 72a:	77 95       	ror	r23
 72c:	67 95       	ror	r22
 72e:	b7 95       	ror	r27
 730:	f7 95       	ror	r31
 732:	9f 5f       	subi	r25, 0xFF	; 255
 734:	c9 f7       	brne	.-14     	; 0x728 <__divsf3_pse+0x78>
 736:	88 0f       	add	r24, r24
 738:	91 1d       	adc	r25, r1
 73a:	96 95       	lsr	r25
 73c:	87 95       	ror	r24
 73e:	97 f9       	bld	r25, 7
 740:	08 95       	ret
 742:	e1 e0       	ldi	r30, 0x01	; 1
 744:	66 0f       	add	r22, r22
 746:	77 1f       	adc	r23, r23
 748:	88 1f       	adc	r24, r24
 74a:	bb 1f       	adc	r27, r27
 74c:	62 17       	cp	r22, r18
 74e:	73 07       	cpc	r23, r19
 750:	84 07       	cpc	r24, r20
 752:	ba 07       	cpc	r27, r26
 754:	20 f0       	brcs	.+8      	; 0x75e <__divsf3_pse+0xae>
 756:	62 1b       	sub	r22, r18
 758:	73 0b       	sbc	r23, r19
 75a:	84 0b       	sbc	r24, r20
 75c:	ba 0b       	sbc	r27, r26
 75e:	ee 1f       	adc	r30, r30
 760:	88 f7       	brcc	.-30     	; 0x744 <__divsf3_pse+0x94>
 762:	e0 95       	com	r30
 764:	08 95       	ret

00000766 <__fixsfsi>:
 766:	0e 94 ba 03 	call	0x774	; 0x774 <__fixunssfsi>
 76a:	68 94       	set
 76c:	b1 11       	cpse	r27, r1
 76e:	0c 94 71 04 	jmp	0x8e2	; 0x8e2 <__fp_szero>
 772:	08 95       	ret

00000774 <__fixunssfsi>:
 774:	0e 94 56 04 	call	0x8ac	; 0x8ac <__fp_splitA>
 778:	88 f0       	brcs	.+34     	; 0x79c <__fixunssfsi+0x28>
 77a:	9f 57       	subi	r25, 0x7F	; 127
 77c:	98 f0       	brcs	.+38     	; 0x7a4 <__fixunssfsi+0x30>
 77e:	b9 2f       	mov	r27, r25
 780:	99 27       	eor	r25, r25
 782:	b7 51       	subi	r27, 0x17	; 23
 784:	b0 f0       	brcs	.+44     	; 0x7b2 <__fixunssfsi+0x3e>
 786:	e1 f0       	breq	.+56     	; 0x7c0 <__fixunssfsi+0x4c>
 788:	66 0f       	add	r22, r22
 78a:	77 1f       	adc	r23, r23
 78c:	88 1f       	adc	r24, r24
 78e:	99 1f       	adc	r25, r25
 790:	1a f0       	brmi	.+6      	; 0x798 <__fixunssfsi+0x24>
 792:	ba 95       	dec	r27
 794:	c9 f7       	brne	.-14     	; 0x788 <__fixunssfsi+0x14>
 796:	14 c0       	rjmp	.+40     	; 0x7c0 <__fixunssfsi+0x4c>
 798:	b1 30       	cpi	r27, 0x01	; 1
 79a:	91 f0       	breq	.+36     	; 0x7c0 <__fixunssfsi+0x4c>
 79c:	0e 94 70 04 	call	0x8e0	; 0x8e0 <__fp_zero>
 7a0:	b1 e0       	ldi	r27, 0x01	; 1
 7a2:	08 95       	ret
 7a4:	0c 94 70 04 	jmp	0x8e0	; 0x8e0 <__fp_zero>
 7a8:	67 2f       	mov	r22, r23
 7aa:	78 2f       	mov	r23, r24
 7ac:	88 27       	eor	r24, r24
 7ae:	b8 5f       	subi	r27, 0xF8	; 248
 7b0:	39 f0       	breq	.+14     	; 0x7c0 <__fixunssfsi+0x4c>
 7b2:	b9 3f       	cpi	r27, 0xF9	; 249
 7b4:	cc f3       	brlt	.-14     	; 0x7a8 <__fixunssfsi+0x34>
 7b6:	86 95       	lsr	r24
 7b8:	77 95       	ror	r23
 7ba:	67 95       	ror	r22
 7bc:	b3 95       	inc	r27
 7be:	d9 f7       	brne	.-10     	; 0x7b6 <__fixunssfsi+0x42>
 7c0:	3e f4       	brtc	.+14     	; 0x7d0 <__fixunssfsi+0x5c>
 7c2:	90 95       	com	r25
 7c4:	80 95       	com	r24
 7c6:	70 95       	com	r23
 7c8:	61 95       	neg	r22
 7ca:	7f 4f       	sbci	r23, 0xFF	; 255
 7cc:	8f 4f       	sbci	r24, 0xFF	; 255
 7ce:	9f 4f       	sbci	r25, 0xFF	; 255
 7d0:	08 95       	ret

000007d2 <__floatunsisf>:
 7d2:	e8 94       	clt
 7d4:	09 c0       	rjmp	.+18     	; 0x7e8 <__floatsisf+0x12>

000007d6 <__floatsisf>:
 7d6:	97 fb       	bst	r25, 7
 7d8:	3e f4       	brtc	.+14     	; 0x7e8 <__floatsisf+0x12>
 7da:	90 95       	com	r25
 7dc:	80 95       	com	r24
 7de:	70 95       	com	r23
 7e0:	61 95       	neg	r22
 7e2:	7f 4f       	sbci	r23, 0xFF	; 255
 7e4:	8f 4f       	sbci	r24, 0xFF	; 255
 7e6:	9f 4f       	sbci	r25, 0xFF	; 255
 7e8:	99 23       	and	r25, r25
 7ea:	a9 f0       	breq	.+42     	; 0x816 <__floatsisf+0x40>
 7ec:	f9 2f       	mov	r31, r25
 7ee:	96 e9       	ldi	r25, 0x96	; 150
 7f0:	bb 27       	eor	r27, r27
 7f2:	93 95       	inc	r25
 7f4:	f6 95       	lsr	r31
 7f6:	87 95       	ror	r24
 7f8:	77 95       	ror	r23
 7fa:	67 95       	ror	r22
 7fc:	b7 95       	ror	r27
 7fe:	f1 11       	cpse	r31, r1
 800:	f8 cf       	rjmp	.-16     	; 0x7f2 <__floatsisf+0x1c>
 802:	fa f4       	brpl	.+62     	; 0x842 <__floatsisf+0x6c>
 804:	bb 0f       	add	r27, r27
 806:	11 f4       	brne	.+4      	; 0x80c <__floatsisf+0x36>
 808:	60 ff       	sbrs	r22, 0
 80a:	1b c0       	rjmp	.+54     	; 0x842 <__floatsisf+0x6c>
 80c:	6f 5f       	subi	r22, 0xFF	; 255
 80e:	7f 4f       	sbci	r23, 0xFF	; 255
 810:	8f 4f       	sbci	r24, 0xFF	; 255
 812:	9f 4f       	sbci	r25, 0xFF	; 255
 814:	16 c0       	rjmp	.+44     	; 0x842 <__floatsisf+0x6c>
 816:	88 23       	and	r24, r24
 818:	11 f0       	breq	.+4      	; 0x81e <__floatsisf+0x48>
 81a:	96 e9       	ldi	r25, 0x96	; 150
 81c:	11 c0       	rjmp	.+34     	; 0x840 <__floatsisf+0x6a>
 81e:	77 23       	and	r23, r23
 820:	21 f0       	breq	.+8      	; 0x82a <__floatsisf+0x54>
 822:	9e e8       	ldi	r25, 0x8E	; 142
 824:	87 2f       	mov	r24, r23
 826:	76 2f       	mov	r23, r22
 828:	05 c0       	rjmp	.+10     	; 0x834 <__floatsisf+0x5e>
 82a:	66 23       	and	r22, r22
 82c:	71 f0       	breq	.+28     	; 0x84a <__floatsisf+0x74>
 82e:	96 e8       	ldi	r25, 0x86	; 134
 830:	86 2f       	mov	r24, r22
 832:	70 e0       	ldi	r23, 0x00	; 0
 834:	60 e0       	ldi	r22, 0x00	; 0
 836:	2a f0       	brmi	.+10     	; 0x842 <__floatsisf+0x6c>
 838:	9a 95       	dec	r25
 83a:	66 0f       	add	r22, r22
 83c:	77 1f       	adc	r23, r23
 83e:	88 1f       	adc	r24, r24
 840:	da f7       	brpl	.-10     	; 0x838 <__floatsisf+0x62>
 842:	88 0f       	add	r24, r24
 844:	96 95       	lsr	r25
 846:	87 95       	ror	r24
 848:	97 f9       	bld	r25, 7
 84a:	08 95       	ret

0000084c <__fp_inf>:
 84c:	97 f9       	bld	r25, 7
 84e:	9f 67       	ori	r25, 0x7F	; 127
 850:	80 e8       	ldi	r24, 0x80	; 128
 852:	70 e0       	ldi	r23, 0x00	; 0
 854:	60 e0       	ldi	r22, 0x00	; 0
 856:	08 95       	ret

00000858 <__fp_nan>:
 858:	9f ef       	ldi	r25, 0xFF	; 255
 85a:	80 ec       	ldi	r24, 0xC0	; 192
 85c:	08 95       	ret

0000085e <__fp_pscA>:
 85e:	00 24       	eor	r0, r0
 860:	0a 94       	dec	r0
 862:	16 16       	cp	r1, r22
 864:	17 06       	cpc	r1, r23
 866:	18 06       	cpc	r1, r24
 868:	09 06       	cpc	r0, r25
 86a:	08 95       	ret

0000086c <__fp_pscB>:
 86c:	00 24       	eor	r0, r0
 86e:	0a 94       	dec	r0
 870:	12 16       	cp	r1, r18
 872:	13 06       	cpc	r1, r19
 874:	14 06       	cpc	r1, r20
 876:	05 06       	cpc	r0, r21
 878:	08 95       	ret

0000087a <__fp_round>:
 87a:	09 2e       	mov	r0, r25
 87c:	03 94       	inc	r0
 87e:	00 0c       	add	r0, r0
 880:	11 f4       	brne	.+4      	; 0x886 <__fp_round+0xc>
 882:	88 23       	and	r24, r24
 884:	52 f0       	brmi	.+20     	; 0x89a <__fp_round+0x20>
 886:	bb 0f       	add	r27, r27
 888:	40 f4       	brcc	.+16     	; 0x89a <__fp_round+0x20>
 88a:	bf 2b       	or	r27, r31
 88c:	11 f4       	brne	.+4      	; 0x892 <__fp_round+0x18>
 88e:	60 ff       	sbrs	r22, 0
 890:	04 c0       	rjmp	.+8      	; 0x89a <__fp_round+0x20>
 892:	6f 5f       	subi	r22, 0xFF	; 255
 894:	7f 4f       	sbci	r23, 0xFF	; 255
 896:	8f 4f       	sbci	r24, 0xFF	; 255
 898:	9f 4f       	sbci	r25, 0xFF	; 255
 89a:	08 95       	ret

0000089c <__fp_split3>:
 89c:	57 fd       	sbrc	r21, 7
 89e:	90 58       	subi	r25, 0x80	; 128
 8a0:	44 0f       	add	r20, r20
 8a2:	55 1f       	adc	r21, r21
 8a4:	59 f0       	breq	.+22     	; 0x8bc <__fp_splitA+0x10>
 8a6:	5f 3f       	cpi	r21, 0xFF	; 255
 8a8:	71 f0       	breq	.+28     	; 0x8c6 <__fp_splitA+0x1a>
 8aa:	47 95       	ror	r20

000008ac <__fp_splitA>:
 8ac:	88 0f       	add	r24, r24
 8ae:	97 fb       	bst	r25, 7
 8b0:	99 1f       	adc	r25, r25
 8b2:	61 f0       	breq	.+24     	; 0x8cc <__fp_splitA+0x20>
 8b4:	9f 3f       	cpi	r25, 0xFF	; 255
 8b6:	79 f0       	breq	.+30     	; 0x8d6 <__fp_splitA+0x2a>
 8b8:	87 95       	ror	r24
 8ba:	08 95       	ret
 8bc:	12 16       	cp	r1, r18
 8be:	13 06       	cpc	r1, r19
 8c0:	14 06       	cpc	r1, r20
 8c2:	55 1f       	adc	r21, r21
 8c4:	f2 cf       	rjmp	.-28     	; 0x8aa <__fp_split3+0xe>
 8c6:	46 95       	lsr	r20
 8c8:	f1 df       	rcall	.-30     	; 0x8ac <__fp_splitA>
 8ca:	08 c0       	rjmp	.+16     	; 0x8dc <__fp_splitA+0x30>
 8cc:	16 16       	cp	r1, r22
 8ce:	17 06       	cpc	r1, r23
 8d0:	18 06       	cpc	r1, r24
 8d2:	99 1f       	adc	r25, r25
 8d4:	f1 cf       	rjmp	.-30     	; 0x8b8 <__fp_splitA+0xc>
 8d6:	86 95       	lsr	r24
 8d8:	71 05       	cpc	r23, r1
 8da:	61 05       	cpc	r22, r1
 8dc:	08 94       	sec
 8de:	08 95       	ret

000008e0 <__fp_zero>:
 8e0:	e8 94       	clt

000008e2 <__fp_szero>:
 8e2:	bb 27       	eor	r27, r27
 8e4:	66 27       	eor	r22, r22
 8e6:	77 27       	eor	r23, r23
 8e8:	cb 01       	movw	r24, r22
 8ea:	97 f9       	bld	r25, 7
 8ec:	08 95       	ret

000008ee <__gesf2>:
 8ee:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <__fp_cmp>
 8f2:	08 f4       	brcc	.+2      	; 0x8f6 <__gesf2+0x8>
 8f4:	8f ef       	ldi	r24, 0xFF	; 255
 8f6:	08 95       	ret

000008f8 <__mulsf3>:
 8f8:	0e 94 8f 04 	call	0x91e	; 0x91e <__mulsf3x>
 8fc:	0c 94 3d 04 	jmp	0x87a	; 0x87a <__fp_round>
 900:	0e 94 2f 04 	call	0x85e	; 0x85e <__fp_pscA>
 904:	38 f0       	brcs	.+14     	; 0x914 <__stack+0x15>
 906:	0e 94 36 04 	call	0x86c	; 0x86c <__fp_pscB>
 90a:	20 f0       	brcs	.+8      	; 0x914 <__stack+0x15>
 90c:	95 23       	and	r25, r21
 90e:	11 f0       	breq	.+4      	; 0x914 <__stack+0x15>
 910:	0c 94 26 04 	jmp	0x84c	; 0x84c <__fp_inf>
 914:	0c 94 2c 04 	jmp	0x858	; 0x858 <__fp_nan>
 918:	11 24       	eor	r1, r1
 91a:	0c 94 71 04 	jmp	0x8e2	; 0x8e2 <__fp_szero>

0000091e <__mulsf3x>:
 91e:	0e 94 4e 04 	call	0x89c	; 0x89c <__fp_split3>
 922:	70 f3       	brcs	.-36     	; 0x900 <__stack+0x1>

00000924 <__mulsf3_pse>:
 924:	95 9f       	mul	r25, r21
 926:	c1 f3       	breq	.-16     	; 0x918 <__stack+0x19>
 928:	95 0f       	add	r25, r21
 92a:	50 e0       	ldi	r21, 0x00	; 0
 92c:	55 1f       	adc	r21, r21
 92e:	62 9f       	mul	r22, r18
 930:	f0 01       	movw	r30, r0
 932:	72 9f       	mul	r23, r18
 934:	bb 27       	eor	r27, r27
 936:	f0 0d       	add	r31, r0
 938:	b1 1d       	adc	r27, r1
 93a:	63 9f       	mul	r22, r19
 93c:	aa 27       	eor	r26, r26
 93e:	f0 0d       	add	r31, r0
 940:	b1 1d       	adc	r27, r1
 942:	aa 1f       	adc	r26, r26
 944:	64 9f       	mul	r22, r20
 946:	66 27       	eor	r22, r22
 948:	b0 0d       	add	r27, r0
 94a:	a1 1d       	adc	r26, r1
 94c:	66 1f       	adc	r22, r22
 94e:	82 9f       	mul	r24, r18
 950:	22 27       	eor	r18, r18
 952:	b0 0d       	add	r27, r0
 954:	a1 1d       	adc	r26, r1
 956:	62 1f       	adc	r22, r18
 958:	73 9f       	mul	r23, r19
 95a:	b0 0d       	add	r27, r0
 95c:	a1 1d       	adc	r26, r1
 95e:	62 1f       	adc	r22, r18
 960:	83 9f       	mul	r24, r19
 962:	a0 0d       	add	r26, r0
 964:	61 1d       	adc	r22, r1
 966:	22 1f       	adc	r18, r18
 968:	74 9f       	mul	r23, r20
 96a:	33 27       	eor	r19, r19
 96c:	a0 0d       	add	r26, r0
 96e:	61 1d       	adc	r22, r1
 970:	23 1f       	adc	r18, r19
 972:	84 9f       	mul	r24, r20
 974:	60 0d       	add	r22, r0
 976:	21 1d       	adc	r18, r1
 978:	82 2f       	mov	r24, r18
 97a:	76 2f       	mov	r23, r22
 97c:	6a 2f       	mov	r22, r26
 97e:	11 24       	eor	r1, r1
 980:	9f 57       	subi	r25, 0x7F	; 127
 982:	50 40       	sbci	r21, 0x00	; 0
 984:	9a f0       	brmi	.+38     	; 0x9ac <__mulsf3_pse+0x88>
 986:	f1 f0       	breq	.+60     	; 0x9c4 <__mulsf3_pse+0xa0>
 988:	88 23       	and	r24, r24
 98a:	4a f0       	brmi	.+18     	; 0x99e <__mulsf3_pse+0x7a>
 98c:	ee 0f       	add	r30, r30
 98e:	ff 1f       	adc	r31, r31
 990:	bb 1f       	adc	r27, r27
 992:	66 1f       	adc	r22, r22
 994:	77 1f       	adc	r23, r23
 996:	88 1f       	adc	r24, r24
 998:	91 50       	subi	r25, 0x01	; 1
 99a:	50 40       	sbci	r21, 0x00	; 0
 99c:	a9 f7       	brne	.-22     	; 0x988 <__mulsf3_pse+0x64>
 99e:	9e 3f       	cpi	r25, 0xFE	; 254
 9a0:	51 05       	cpc	r21, r1
 9a2:	80 f0       	brcs	.+32     	; 0x9c4 <__mulsf3_pse+0xa0>
 9a4:	0c 94 26 04 	jmp	0x84c	; 0x84c <__fp_inf>
 9a8:	0c 94 71 04 	jmp	0x8e2	; 0x8e2 <__fp_szero>
 9ac:	5f 3f       	cpi	r21, 0xFF	; 255
 9ae:	e4 f3       	brlt	.-8      	; 0x9a8 <__mulsf3_pse+0x84>
 9b0:	98 3e       	cpi	r25, 0xE8	; 232
 9b2:	d4 f3       	brlt	.-12     	; 0x9a8 <__mulsf3_pse+0x84>
 9b4:	86 95       	lsr	r24
 9b6:	77 95       	ror	r23
 9b8:	67 95       	ror	r22
 9ba:	b7 95       	ror	r27
 9bc:	f7 95       	ror	r31
 9be:	e7 95       	ror	r30
 9c0:	9f 5f       	subi	r25, 0xFF	; 255
 9c2:	c1 f7       	brne	.-16     	; 0x9b4 <__mulsf3_pse+0x90>
 9c4:	fe 2b       	or	r31, r30
 9c6:	88 0f       	add	r24, r24
 9c8:	91 1d       	adc	r25, r1
 9ca:	96 95       	lsr	r25
 9cc:	87 95       	ror	r24
 9ce:	97 f9       	bld	r25, 7
 9d0:	08 95       	ret

000009d2 <sin>:
 9d2:	9f 93       	push	r25
 9d4:	0e 94 17 05 	call	0xa2e	; 0xa2e <__fp_rempio2>
 9d8:	0f 90       	pop	r0
 9da:	07 fc       	sbrc	r0, 7
 9dc:	ee 5f       	subi	r30, 0xFE	; 254
 9de:	0c 94 40 05 	jmp	0xa80	; 0xa80 <__fp_sinus>

000009e2 <__fp_cmp>:
 9e2:	99 0f       	add	r25, r25
 9e4:	00 08       	sbc	r0, r0
 9e6:	55 0f       	add	r21, r21
 9e8:	aa 0b       	sbc	r26, r26
 9ea:	e0 e8       	ldi	r30, 0x80	; 128
 9ec:	fe ef       	ldi	r31, 0xFE	; 254
 9ee:	16 16       	cp	r1, r22
 9f0:	17 06       	cpc	r1, r23
 9f2:	e8 07       	cpc	r30, r24
 9f4:	f9 07       	cpc	r31, r25
 9f6:	c0 f0       	brcs	.+48     	; 0xa28 <__fp_cmp+0x46>
 9f8:	12 16       	cp	r1, r18
 9fa:	13 06       	cpc	r1, r19
 9fc:	e4 07       	cpc	r30, r20
 9fe:	f5 07       	cpc	r31, r21
 a00:	98 f0       	brcs	.+38     	; 0xa28 <__fp_cmp+0x46>
 a02:	62 1b       	sub	r22, r18
 a04:	73 0b       	sbc	r23, r19
 a06:	84 0b       	sbc	r24, r20
 a08:	95 0b       	sbc	r25, r21
 a0a:	39 f4       	brne	.+14     	; 0xa1a <__fp_cmp+0x38>
 a0c:	0a 26       	eor	r0, r26
 a0e:	61 f0       	breq	.+24     	; 0xa28 <__fp_cmp+0x46>
 a10:	23 2b       	or	r18, r19
 a12:	24 2b       	or	r18, r20
 a14:	25 2b       	or	r18, r21
 a16:	21 f4       	brne	.+8      	; 0xa20 <__fp_cmp+0x3e>
 a18:	08 95       	ret
 a1a:	0a 26       	eor	r0, r26
 a1c:	09 f4       	brne	.+2      	; 0xa20 <__fp_cmp+0x3e>
 a1e:	a1 40       	sbci	r26, 0x01	; 1
 a20:	a6 95       	lsr	r26
 a22:	8f ef       	ldi	r24, 0xFF	; 255
 a24:	81 1d       	adc	r24, r1
 a26:	81 1d       	adc	r24, r1
 a28:	08 95       	ret
 a2a:	0c 94 2c 04 	jmp	0x858	; 0x858 <__fp_nan>

00000a2e <__fp_rempio2>:
 a2e:	0e 94 56 04 	call	0x8ac	; 0x8ac <__fp_splitA>
 a32:	d8 f3       	brcs	.-10     	; 0xa2a <__fp_cmp+0x48>
 a34:	e8 94       	clt
 a36:	e0 e0       	ldi	r30, 0x00	; 0
 a38:	bb 27       	eor	r27, r27
 a3a:	9f 57       	subi	r25, 0x7F	; 127
 a3c:	f0 f0       	brcs	.+60     	; 0xa7a <__fp_rempio2+0x4c>
 a3e:	2a ed       	ldi	r18, 0xDA	; 218
 a40:	3f e0       	ldi	r19, 0x0F	; 15
 a42:	49 ec       	ldi	r20, 0xC9	; 201
 a44:	06 c0       	rjmp	.+12     	; 0xa52 <__fp_rempio2+0x24>
 a46:	ee 0f       	add	r30, r30
 a48:	bb 0f       	add	r27, r27
 a4a:	66 1f       	adc	r22, r22
 a4c:	77 1f       	adc	r23, r23
 a4e:	88 1f       	adc	r24, r24
 a50:	28 f0       	brcs	.+10     	; 0xa5c <__fp_rempio2+0x2e>
 a52:	b2 3a       	cpi	r27, 0xA2	; 162
 a54:	62 07       	cpc	r22, r18
 a56:	73 07       	cpc	r23, r19
 a58:	84 07       	cpc	r24, r20
 a5a:	28 f0       	brcs	.+10     	; 0xa66 <__fp_rempio2+0x38>
 a5c:	b2 5a       	subi	r27, 0xA2	; 162
 a5e:	62 0b       	sbc	r22, r18
 a60:	73 0b       	sbc	r23, r19
 a62:	84 0b       	sbc	r24, r20
 a64:	e3 95       	inc	r30
 a66:	9a 95       	dec	r25
 a68:	72 f7       	brpl	.-36     	; 0xa46 <__fp_rempio2+0x18>
 a6a:	80 38       	cpi	r24, 0x80	; 128
 a6c:	30 f4       	brcc	.+12     	; 0xa7a <__fp_rempio2+0x4c>
 a6e:	9a 95       	dec	r25
 a70:	bb 0f       	add	r27, r27
 a72:	66 1f       	adc	r22, r22
 a74:	77 1f       	adc	r23, r23
 a76:	88 1f       	adc	r24, r24
 a78:	d2 f7       	brpl	.-12     	; 0xa6e <__fp_rempio2+0x40>
 a7a:	90 48       	sbci	r25, 0x80	; 128
 a7c:	0c 94 56 05 	jmp	0xaac	; 0xaac <__fp_mpack_finite>

00000a80 <__fp_sinus>:
 a80:	ef 93       	push	r30
 a82:	e0 ff       	sbrs	r30, 0
 a84:	07 c0       	rjmp	.+14     	; 0xa94 <__fp_sinus+0x14>
 a86:	a2 ea       	ldi	r26, 0xA2	; 162
 a88:	2a ed       	ldi	r18, 0xDA	; 218
 a8a:	3f e0       	ldi	r19, 0x0F	; 15
 a8c:	49 ec       	ldi	r20, 0xC9	; 201
 a8e:	5f eb       	ldi	r21, 0xBF	; 191
 a90:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <__addsf3x>
 a94:	0e 94 3d 04 	call	0x87a	; 0x87a <__fp_round>
 a98:	0f 90       	pop	r0
 a9a:	03 94       	inc	r0
 a9c:	01 fc       	sbrc	r0, 1
 a9e:	90 58       	subi	r25, 0x80	; 128
 aa0:	e8 e6       	ldi	r30, 0x68	; 104
 aa2:	f0 e0       	ldi	r31, 0x00	; 0
 aa4:	0c 94 62 05 	jmp	0xac4	; 0xac4 <__fp_powsodd>

00000aa8 <__fp_mpack>:
 aa8:	9f 3f       	cpi	r25, 0xFF	; 255
 aaa:	31 f0       	breq	.+12     	; 0xab8 <__fp_mpack_finite+0xc>

00000aac <__fp_mpack_finite>:
 aac:	91 50       	subi	r25, 0x01	; 1
 aae:	20 f4       	brcc	.+8      	; 0xab8 <__fp_mpack_finite+0xc>
 ab0:	87 95       	ror	r24
 ab2:	77 95       	ror	r23
 ab4:	67 95       	ror	r22
 ab6:	b7 95       	ror	r27
 ab8:	88 0f       	add	r24, r24
 aba:	91 1d       	adc	r25, r1
 abc:	96 95       	lsr	r25
 abe:	87 95       	ror	r24
 ac0:	97 f9       	bld	r25, 7
 ac2:	08 95       	ret

00000ac4 <__fp_powsodd>:
 ac4:	9f 93       	push	r25
 ac6:	8f 93       	push	r24
 ac8:	7f 93       	push	r23
 aca:	6f 93       	push	r22
 acc:	ff 93       	push	r31
 ace:	ef 93       	push	r30
 ad0:	9b 01       	movw	r18, r22
 ad2:	ac 01       	movw	r20, r24
 ad4:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <__mulsf3>
 ad8:	ef 91       	pop	r30
 ada:	ff 91       	pop	r31
 adc:	0e 94 76 05 	call	0xaec	; 0xaec <__fp_powser>
 ae0:	2f 91       	pop	r18
 ae2:	3f 91       	pop	r19
 ae4:	4f 91       	pop	r20
 ae6:	5f 91       	pop	r21
 ae8:	0c 94 7c 04 	jmp	0x8f8	; 0x8f8 <__mulsf3>

00000aec <__fp_powser>:
 aec:	df 93       	push	r29
 aee:	cf 93       	push	r28
 af0:	1f 93       	push	r17
 af2:	0f 93       	push	r16
 af4:	ff 92       	push	r15
 af6:	ef 92       	push	r14
 af8:	df 92       	push	r13
 afa:	7b 01       	movw	r14, r22
 afc:	8c 01       	movw	r16, r24
 afe:	68 94       	set
 b00:	06 c0       	rjmp	.+12     	; 0xb0e <__fp_powser+0x22>
 b02:	da 2e       	mov	r13, r26
 b04:	ef 01       	movw	r28, r30
 b06:	0e 94 8f 04 	call	0x91e	; 0x91e <__mulsf3x>
 b0a:	fe 01       	movw	r30, r28
 b0c:	e8 94       	clt
 b0e:	a5 91       	lpm	r26, Z+
 b10:	25 91       	lpm	r18, Z+
 b12:	35 91       	lpm	r19, Z+
 b14:	45 91       	lpm	r20, Z+
 b16:	55 91       	lpm	r21, Z+
 b18:	a6 f3       	brts	.-24     	; 0xb02 <__fp_powser+0x16>
 b1a:	ef 01       	movw	r28, r30
 b1c:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <__addsf3x>
 b20:	fe 01       	movw	r30, r28
 b22:	97 01       	movw	r18, r14
 b24:	a8 01       	movw	r20, r16
 b26:	da 94       	dec	r13
 b28:	69 f7       	brne	.-38     	; 0xb04 <__fp_powser+0x18>
 b2a:	df 90       	pop	r13
 b2c:	ef 90       	pop	r14
 b2e:	ff 90       	pop	r15
 b30:	0f 91       	pop	r16
 b32:	1f 91       	pop	r17
 b34:	cf 91       	pop	r28
 b36:	df 91       	pop	r29
 b38:	08 95       	ret

00000b3a <__divmodhi4>:
 b3a:	97 fb       	bst	r25, 7
 b3c:	07 2e       	mov	r0, r23
 b3e:	16 f4       	brtc	.+4      	; 0xb44 <__divmodhi4+0xa>
 b40:	00 94       	com	r0
 b42:	07 d0       	rcall	.+14     	; 0xb52 <__divmodhi4_neg1>
 b44:	77 fd       	sbrc	r23, 7
 b46:	09 d0       	rcall	.+18     	; 0xb5a <__divmodhi4_neg2>
 b48:	0e 94 b1 05 	call	0xb62	; 0xb62 <__udivmodhi4>
 b4c:	07 fc       	sbrc	r0, 7
 b4e:	05 d0       	rcall	.+10     	; 0xb5a <__divmodhi4_neg2>
 b50:	3e f4       	brtc	.+14     	; 0xb60 <__divmodhi4_exit>

00000b52 <__divmodhi4_neg1>:
 b52:	90 95       	com	r25
 b54:	81 95       	neg	r24
 b56:	9f 4f       	sbci	r25, 0xFF	; 255
 b58:	08 95       	ret

00000b5a <__divmodhi4_neg2>:
 b5a:	70 95       	com	r23
 b5c:	61 95       	neg	r22
 b5e:	7f 4f       	sbci	r23, 0xFF	; 255

00000b60 <__divmodhi4_exit>:
 b60:	08 95       	ret

00000b62 <__udivmodhi4>:
 b62:	aa 1b       	sub	r26, r26
 b64:	bb 1b       	sub	r27, r27
 b66:	51 e1       	ldi	r21, 0x11	; 17
 b68:	07 c0       	rjmp	.+14     	; 0xb78 <__udivmodhi4_ep>

00000b6a <__udivmodhi4_loop>:
 b6a:	aa 1f       	adc	r26, r26
 b6c:	bb 1f       	adc	r27, r27
 b6e:	a6 17       	cp	r26, r22
 b70:	b7 07       	cpc	r27, r23
 b72:	10 f0       	brcs	.+4      	; 0xb78 <__udivmodhi4_ep>
 b74:	a6 1b       	sub	r26, r22
 b76:	b7 0b       	sbc	r27, r23

00000b78 <__udivmodhi4_ep>:
 b78:	88 1f       	adc	r24, r24
 b7a:	99 1f       	adc	r25, r25
 b7c:	5a 95       	dec	r21
 b7e:	a9 f7       	brne	.-22     	; 0xb6a <__udivmodhi4_loop>
 b80:	80 95       	com	r24
 b82:	90 95       	com	r25
 b84:	bc 01       	movw	r22, r24
 b86:	cd 01       	movw	r24, r26
 b88:	08 95       	ret

00000b8a <_exit>:
 b8a:	f8 94       	cli

00000b8c <__stop_program>:
 b8c:	ff cf       	rjmp	.-2      	; 0xb8c <__stop_program>
