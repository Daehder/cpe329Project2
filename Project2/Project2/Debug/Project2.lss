
Project2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000bc0  00000c54  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000bc0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000004b4  00800106  00800106  00000c5a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c5a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c8c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  00000ccc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000904  00000000  00000000  00000dac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000003b3  00000000  00000000  000016b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000456  00000000  00000000  00001a63  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002b0  00000000  00000000  00001ebc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000035e  00000000  00000000  0000216c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000075b  00000000  00000000  000024ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00002c25  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 43 00 	jmp	0x86	; 0x86 <__ctors_end>
   4:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
   8:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
   c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  10:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  14:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  18:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  1c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  20:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  24:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  28:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  2c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  30:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  34:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  38:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__vector_14>
  3c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  40:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  44:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  48:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  4c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  50:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  54:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  58:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  5c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  60:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  64:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  68:	05 a8       	ldd	r0, Z+53	; 0x35
  6a:	4c cd       	rjmp	.-1384   	; 0xfffffb04 <__eeprom_end+0xff7efb04>
  6c:	b2 d4       	rcall	.+2404   	; 0x9d2 <__mulsf3_pse+0x7c>
  6e:	4e b9       	out	0x0e, r20	; 14
  70:	38 36       	cpi	r19, 0x68	; 104
  72:	a9 02       	muls	r26, r25
  74:	0c 50       	subi	r16, 0x0C	; 12
  76:	b9 91       	ld	r27, Y+
  78:	86 88       	ldd	r8, Z+22	; 0x16
  7a:	08 3c       	cpi	r16, 0xC8	; 200
  7c:	a6 aa       	std	Z+54, r10	; 0x36
  7e:	aa 2a       	or	r10, r26
  80:	be 00       	.word	0x00be	; ????
  82:	00 00       	nop
  84:	80 3f       	cpi	r24, 0xF0	; 240

00000086 <__ctors_end>:
  86:	11 24       	eor	r1, r1
  88:	1f be       	out	0x3f, r1	; 63
  8a:	cf ef       	ldi	r28, 0xFF	; 255
  8c:	d8 e0       	ldi	r29, 0x08	; 8
  8e:	de bf       	out	0x3e, r29	; 62
  90:	cd bf       	out	0x3d, r28	; 61

00000092 <__do_copy_data>:
  92:	11 e0       	ldi	r17, 0x01	; 1
  94:	a0 e0       	ldi	r26, 0x00	; 0
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	e0 ec       	ldi	r30, 0xC0	; 192
  9a:	fb e0       	ldi	r31, 0x0B	; 11
  9c:	02 c0       	rjmp	.+4      	; 0xa2 <__do_copy_data+0x10>
  9e:	05 90       	lpm	r0, Z+
  a0:	0d 92       	st	X+, r0
  a2:	a6 30       	cpi	r26, 0x06	; 6
  a4:	b1 07       	cpc	r27, r17
  a6:	d9 f7       	brne	.-10     	; 0x9e <__do_copy_data+0xc>

000000a8 <__do_clear_bss>:
  a8:	25 e0       	ldi	r18, 0x05	; 5
  aa:	a6 e0       	ldi	r26, 0x06	; 6
  ac:	b1 e0       	ldi	r27, 0x01	; 1
  ae:	01 c0       	rjmp	.+2      	; 0xb2 <.do_clear_bss_start>

000000b0 <.do_clear_bss_loop>:
  b0:	1d 92       	st	X+, r1

000000b2 <.do_clear_bss_start>:
  b2:	aa 3b       	cpi	r26, 0xBA	; 186
  b4:	b2 07       	cpc	r27, r18
  b6:	e1 f7       	brne	.-8      	; 0xb0 <.do_clear_bss_loop>
  b8:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <main>
  bc:	0c 94 de 05 	jmp	0xbbc	; 0xbbc <_exit>

000000c0 <__bad_interrupt>:
  c0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c4 <Initialize_SPI_Master>:
#define LED2 2						// Debug LED at PD2
#define DEBOUNCE 100

// sets up SPI system between ATmega328P and slave device(s)
void Initialize_SPI_Master(){
   SPCR = (0<<SPIE) |               // No interrupts
  c4:	80 e5       	ldi	r24, 0x50	; 80
  c6:	8c bd       	out	0x2c, r24	; 44
   (1<<SPE) |                       // SPI enabled
   (1<<MSTR) ;                      // master
   SPSR = 0x00;                     // clear flags
  c8:	1d bc       	out	0x2d, r1	; 45
   PORTB = 1 << SS;                 // make sure SS is high
  ca:	84 e0       	ldi	r24, 0x04	; 4
  cc:	85 b9       	out	0x05, r24	; 5
  ce:	08 95       	ret

000000d0 <initTimer0>:
}

// Initializing timer 0 (change OCR0A for freq change!!!!!)
void initTimer0(){
   TCCR0A = 0x02;                   // timer CTC mode
  d0:	82 e0       	ldi	r24, 0x02	; 2
  d2:	84 bd       	out	0x24, r24	; 36
   OCR0A = overflow;          // sets counter overflow to 250
  d4:	90 91 00 01 	lds	r25, 0x0100
  d8:	97 bd       	out	0x27, r25	; 39
   TCCR0B = 0x02;                   // timer clk = system clk / 8 (2MHz)
  da:	85 bd       	out	0x25, r24	; 37
   TIFR0 = 0x02;                    // Interrupt occurs at OCRF0A overflow
  dc:	85 bb       	out	0x15, r24	; 21
   TIMSK0 = 0x02;                   // OCRF0A overflow interrupt enabled
  de:	80 93 6e 00 	sts	0x006E, r24
  e2:	08 95       	ret

000000e4 <GPIO_Initialization>:
}


// initializes GPIO I/O, SPI interface, and interrupts
void GPIO_Initialization(){
   DDRB |= (1<<MOSI) | (1<<SCK) | (1<<SS);	// make MOSI, SCK and SS outputs
  e4:	84 b1       	in	r24, 0x04	; 4
  e6:	8c 62       	ori	r24, 0x2C	; 44
  e8:	84 b9       	out	0x04, r24	; 4
   DDRD &= ~(1<<BTN1) | ~(1<<BTN1);	// set buttons as inputs
  ea:	56 98       	cbi	0x0a, 6	; 10
   DDRD |= (1<<LED2);				// degub LED is output
  ec:	52 9a       	sbi	0x0a, 2	; 10
   PORTD |= (1<<BTN0) | (1<<BTN1);	// set internal pull-ups
  ee:	8b b1       	in	r24, 0x0b	; 11
  f0:	80 6c       	ori	r24, 0xC0	; 192
  f2:	8b b9       	out	0x0b, r24	; 11
   Initialize_SPI_Master();			// initialize SPI to DAC
  f4:	0e 94 62 00 	call	0xc4	; 0xc4 <Initialize_SPI_Master>
   initTimer0();							// initialize timer0
  f8:	0e 94 68 00 	call	0xd0	; 0xd0 <initTimer0>
   sei();									// enable interrupts
  fc:	78 94       	sei
  fe:	08 95       	ret

00000100 <check_buttons>:
}

// returns a true bool if a buttons is pressed
uint8_t check_buttons(){
   if (!(PIND & (1<<BTN0))){          // return 1 if button at pin7 is pressed
 100:	4f 99       	sbic	0x09, 7	; 9
 102:	0b c0       	rjmp	.+22     	; 0x11a <check_buttons+0x1a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 104:	2f ef       	ldi	r18, 0xFF	; 255
 106:	81 ee       	ldi	r24, 0xE1	; 225
 108:	94 e0       	ldi	r25, 0x04	; 4
 10a:	21 50       	subi	r18, 0x01	; 1
 10c:	80 40       	sbci	r24, 0x00	; 0
 10e:	90 40       	sbci	r25, 0x00	; 0
 110:	e1 f7       	brne	.-8      	; 0x10a <check_buttons+0xa>
 112:	00 c0       	rjmp	.+0      	; 0x114 <check_buttons+0x14>
 114:	00 00       	nop
		_delay_ms(DEBOUNCE);
      return 1;
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	08 95       	ret
   }
   else if(!(PIND & (1<<BTN1))){    // return 2 if button at pin6 is pressed
 11a:	4e 99       	sbic	0x09, 6	; 9
 11c:	0b c0       	rjmp	.+22     	; 0x134 <check_buttons+0x34>
 11e:	2f ef       	ldi	r18, 0xFF	; 255
 120:	81 ee       	ldi	r24, 0xE1	; 225
 122:	94 e0       	ldi	r25, 0x04	; 4
 124:	21 50       	subi	r18, 0x01	; 1
 126:	80 40       	sbci	r24, 0x00	; 0
 128:	90 40       	sbci	r25, 0x00	; 0
 12a:	e1 f7       	brne	.-8      	; 0x124 <check_buttons+0x24>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <check_buttons+0x2e>
 12e:	00 00       	nop
		_delay_ms(DEBOUNCE);
      return 2;
 130:	82 e0       	ldi	r24, 0x02	; 2
 132:	08 95       	ret
   }
	else if(!(PIND & (1<<BTN2))){ 
 134:	4d 9b       	sbis	0x09, 5	; 9
 136:	02 c0       	rjmp	.+4      	; 0x13c <check_buttons+0x3c>
      return 3;                     // return 3 if buttons at pin5 pressed
	  _delay_ms(DEBOUNCE);
	}
	else
		return 0;
 138:	80 e0       	ldi	r24, 0x00	; 0
 13a:	08 95       	ret
   else if(!(PIND & (1<<BTN1))){    // return 2 if button at pin6 is pressed
		_delay_ms(DEBOUNCE);
      return 2;
   }
	else if(!(PIND & (1<<BTN2))){ 
      return 3;                     // return 3 if buttons at pin5 pressed
 13c:	83 e0       	ldi	r24, 0x03	; 3
	  _delay_ms(DEBOUNCE);
	}
	else
		return 0;
}
 13e:	08 95       	ret

00000140 <Transmit_SPI_Master>:

// sends data to DAC over SPI data port
void Transmit_SPI_Master(int Data) {
   PORTB &= ~(1 << SS);					//Assert slave select (active low)
 140:	2a 98       	cbi	0x05, 2	; 5
   SPDR = ((Data >> 8) & 0xF) | 0x70;		//Attach configuration Bits onto MSB
 142:	9f 70       	andi	r25, 0x0F	; 15
 144:	90 67       	ori	r25, 0x70	; 112
 146:	9e bd       	out	0x2e, r25	; 46
   while (!(SPSR & (1<<SPIF)))
 148:	0d b4       	in	r0, 0x2d	; 45
 14a:	07 fe       	sbrs	r0, 7
 14c:	fd cf       	rjmp	.-6      	; 0x148 <Transmit_SPI_Master+0x8>
      ;
   SPDR = 0xFF & Data;
 14e:	8e bd       	out	0x2e, r24	; 46
   while (!(SPSR & (1<<SPIF)))
 150:	0d b4       	in	r0, 0x2d	; 45
 152:	07 fe       	sbrs	r0, 7
 154:	fd cf       	rjmp	.-6      	; 0x150 <Transmit_SPI_Master+0x10>
      ;
   PORTB |= 1 << SS;						//Turn off slave select
 156:	2a 9a       	sbi	0x05, 2	; 5
 158:	08 95       	ret

0000015a <volts_to_bits>:
      _delay_ms(1);

}

// converts input voltage between 0-5V to 12bit number for DAC
uint16_t volts_to_bits(double voltage){
 15a:	cf 92       	push	r12
 15c:	df 92       	push	r13
 15e:	ef 92       	push	r14
 160:	ff 92       	push	r15
   double bits = ((voltage/5.0)*4095);
 162:	20 e0       	ldi	r18, 0x00	; 0
 164:	30 e0       	ldi	r19, 0x00	; 0
 166:	40 ea       	ldi	r20, 0xA0	; 160
 168:	50 e4       	ldi	r21, 0x40	; 64
 16a:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <__divsf3>
 16e:	20 e0       	ldi	r18, 0x00	; 0
 170:	30 ef       	ldi	r19, 0xF0	; 240
 172:	4f e7       	ldi	r20, 0x7F	; 127
 174:	55 e4       	ldi	r21, 0x45	; 69
 176:	0e 94 95 04 	call	0x92a	; 0x92a <__mulsf3>
 17a:	6b 01       	movw	r12, r22
 17c:	7c 01       	movw	r14, r24
   if(bits>4095)
 17e:	20 e0       	ldi	r18, 0x00	; 0
 180:	30 ef       	ldi	r19, 0xF0	; 240
 182:	4f e7       	ldi	r20, 0x7F	; 127
 184:	55 e4       	ldi	r21, 0x45	; 69
 186:	0e 94 90 04 	call	0x920	; 0x920 <__gesf2>
 18a:	18 16       	cp	r1, r24
 18c:	34 f0       	brlt	.+12     	; 0x19a <volts_to_bits+0x40>
		return 4095;
	else
	 return bits;                  // return 12bit equivalent for DAC
 18e:	c7 01       	movw	r24, r14
 190:	b6 01       	movw	r22, r12
 192:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <__fixunssfsi>
 196:	cb 01       	movw	r24, r22
 198:	02 c0       	rjmp	.+4      	; 0x19e <volts_to_bits+0x44>

// converts input voltage between 0-5V to 12bit number for DAC
uint16_t volts_to_bits(double voltage){
   double bits = ((voltage/5.0)*4095);
   if(bits>4095)
		return 4095;
 19a:	8f ef       	ldi	r24, 0xFF	; 255
 19c:	9f e0       	ldi	r25, 0x0F	; 15
	else
	 return bits;                  // return 12bit equivalent for DAC
}
 19e:	ff 90       	pop	r15
 1a0:	ef 90       	pop	r14
 1a2:	df 90       	pop	r13
 1a4:	cf 90       	pop	r12
 1a6:	08 95       	ret

000001a8 <main>:
int num_samples;	// sets global number of samples
uint8_t overflow = 132;	// set overflow value for 100Hz

int main(void)
{
	num_samples = NUM_SAMPS;
 1a8:	86 e9       	ldi	r24, 0x96	; 150
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	90 93 07 01 	sts	0x0107, r25
 1b0:	80 93 06 01 	sts	0x0106, r24
	
   // initialize GPIO, interrupts, and timers
   GPIO_Initialization();
 1b4:	0e 94 72 00 	call	0xe4	; 0xe4 <GPIO_Initialization>
   
   // fill square, sawtooth, triangle, and sine wave LUTs
   initWaves();
 1b8:	0e 94 de 02 	call	0x5bc	; 0x5bc <initWaves>
   
   while (1){
	   if(check_buttons()==1)
 1bc:	0e 94 80 00 	call	0x100	; 0x100 <check_buttons>
 1c0:	81 30       	cpi	r24, 0x01	; 1
 1c2:	e1 f7       	brne	.-8      	; 0x1bc <main+0x14>
			cycleDuty();
 1c4:	0e 94 91 01 	call	0x322	; 0x322 <cycleDuty>
 1c8:	f9 cf       	rjmp	.-14     	; 0x1bc <main+0x14>

000001ca <__vector_14>:
}

///////////////////////////////////ISR/////////////////////////////////////////

// ISR to increment through wave function LUTs and set frequency
ISR(TIMER0_COMPA_vect){
 1ca:	1f 92       	push	r1
 1cc:	0f 92       	push	r0
 1ce:	0f b6       	in	r0, 0x3f	; 63
 1d0:	0f 92       	push	r0
 1d2:	11 24       	eor	r1, r1
 1d4:	2f 93       	push	r18
 1d6:	3f 93       	push	r19
 1d8:	4f 93       	push	r20
 1da:	5f 93       	push	r21
 1dc:	6f 93       	push	r22
 1de:	7f 93       	push	r23
 1e0:	8f 93       	push	r24
 1e2:	9f 93       	push	r25
 1e4:	af 93       	push	r26
 1e6:	bf 93       	push	r27
 1e8:	ef 93       	push	r30
 1ea:	ff 93       	push	r31
   Transmit_SPI_Master(nextWavePoint());
 1ec:	0e 94 0b 01 	call	0x216	; 0x216 <nextWavePoint>
 1f0:	0e 94 a0 00 	call	0x140	; 0x140 <Transmit_SPI_Master>
}
 1f4:	ff 91       	pop	r31
 1f6:	ef 91       	pop	r30
 1f8:	bf 91       	pop	r27
 1fa:	af 91       	pop	r26
 1fc:	9f 91       	pop	r25
 1fe:	8f 91       	pop	r24
 200:	7f 91       	pop	r23
 202:	6f 91       	pop	r22
 204:	5f 91       	pop	r21
 206:	4f 91       	pop	r20
 208:	3f 91       	pop	r19
 20a:	2f 91       	pop	r18
 20c:	0f 90       	pop	r0
 20e:	0f be       	out	0x3f, r0	; 63
 210:	0f 90       	pop	r0
 212:	1f 90       	pop	r1
 214:	18 95       	reti

00000216 <nextWavePoint>:
}

uint16_t nextWavePoint() {
   static int ndx = -1;
   
   ndx++;
 216:	80 91 01 01 	lds	r24, 0x0101
 21a:	90 91 02 01 	lds	r25, 0x0102
 21e:	01 96       	adiw	r24, 0x01	; 1
   ndx %= NUM_SAMPS;
 220:	66 e9       	ldi	r22, 0x96	; 150
 222:	70 e0       	ldi	r23, 0x00	; 0
 224:	0e 94 b6 05 	call	0xb6c	; 0xb6c <__divmodhi4>
 228:	90 93 02 01 	sts	0x0102, r25
 22c:	80 93 01 01 	sts	0x0101, r24
   
   return Wave[ndx];
 230:	88 0f       	add	r24, r24
 232:	99 1f       	adc	r25, r25
 234:	e0 91 b8 05 	lds	r30, 0x05B8
 238:	f0 91 b9 05 	lds	r31, 0x05B9
 23c:	e8 0f       	add	r30, r24
 23e:	f9 1f       	adc	r31, r25
}
 240:	80 81       	ld	r24, Z
 242:	91 81       	ldd	r25, Z+1	; 0x01
 244:	08 95       	ret

00000246 <make_square_LUT>:
   dutyCycle += 10;
   dutyCycle %= 110;
   make_square_LUT();
}

void make_square_LUT(){
 246:	cf 92       	push	r12
 248:	df 92       	push	r13
 24a:	ef 92       	push	r14
 24c:	ff 92       	push	r15
 24e:	0f 93       	push	r16
 250:	1f 93       	push	r17
 252:	cf 93       	push	r28
 254:	df 93       	push	r29
   int i;
   int duty = num_samples * (double) dutyCycle/100;
 256:	60 91 06 01 	lds	r22, 0x0106
 25a:	70 91 07 01 	lds	r23, 0x0107
 25e:	07 2e       	mov	r0, r23
 260:	00 0c       	add	r0, r0
 262:	88 0b       	sbc	r24, r24
 264:	99 0b       	sbc	r25, r25
 266:	0e 94 04 04 	call	0x808	; 0x808 <__floatsisf>
 26a:	6b 01       	movw	r12, r22
 26c:	7c 01       	movw	r14, r24
 26e:	80 91 03 01 	lds	r24, 0x0103
 272:	90 91 04 01 	lds	r25, 0x0104
 276:	bc 01       	movw	r22, r24
 278:	99 0f       	add	r25, r25
 27a:	88 0b       	sbc	r24, r24
 27c:	99 0b       	sbc	r25, r25
 27e:	0e 94 04 04 	call	0x808	; 0x808 <__floatsisf>
 282:	9b 01       	movw	r18, r22
 284:	ac 01       	movw	r20, r24
 286:	c7 01       	movw	r24, r14
 288:	b6 01       	movw	r22, r12
 28a:	0e 94 95 04 	call	0x92a	; 0x92a <__mulsf3>
 28e:	20 e0       	ldi	r18, 0x00	; 0
 290:	30 e0       	ldi	r19, 0x00	; 0
 292:	48 ec       	ldi	r20, 0xC8	; 200
 294:	52 e4       	ldi	r21, 0x42	; 66
 296:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <__divsf3>
 29a:	0e 94 cc 03 	call	0x798	; 0x798 <__fixsfsi>
 29e:	eb 01       	movw	r28, r22
   
   for (i = 0; i < duty; i++)
 2a0:	1c 16       	cp	r1, r28
 2a2:	1d 06       	cpc	r1, r29
 2a4:	b4 f4       	brge	.+44     	; 0x2d2 <make_square_LUT+0x8c>
 2a6:	0c e8       	ldi	r16, 0x8C	; 140
 2a8:	14 e0       	ldi	r17, 0x04	; 4
 2aa:	66 0f       	add	r22, r22
 2ac:	77 1f       	adc	r23, r23
 2ae:	cb 01       	movw	r24, r22
 2b0:	84 57       	subi	r24, 0x74	; 116
 2b2:	9b 4f       	sbci	r25, 0xFB	; 251
 2b4:	7c 01       	movw	r14, r24
      SquareWave[i] = volts_to_bits(MAX_VOLTAGE);
 2b6:	60 e0       	ldi	r22, 0x00	; 0
 2b8:	70 e0       	ldi	r23, 0x00	; 0
 2ba:	80 ea       	ldi	r24, 0xA0	; 160
 2bc:	90 e4       	ldi	r25, 0x40	; 64
 2be:	0e 94 ad 00 	call	0x15a	; 0x15a <volts_to_bits>
 2c2:	f8 01       	movw	r30, r16
 2c4:	81 93       	st	Z+, r24
 2c6:	91 93       	st	Z+, r25
 2c8:	8f 01       	movw	r16, r30

void make_square_LUT(){
   int i;
   int duty = num_samples * (double) dutyCycle/100;
   
   for (i = 0; i < duty; i++)
 2ca:	ee 15       	cp	r30, r14
 2cc:	ff 05       	cpc	r31, r15
 2ce:	99 f7       	brne	.-26     	; 0x2b6 <make_square_LUT+0x70>
 2d0:	02 c0       	rjmp	.+4      	; 0x2d6 <make_square_LUT+0x90>
 2d2:	c0 e0       	ldi	r28, 0x00	; 0
 2d4:	d0 e0       	ldi	r29, 0x00	; 0
      SquareWave[i] = volts_to_bits(MAX_VOLTAGE);
   
   for ( ; i < num_samples ; i++)
 2d6:	80 91 06 01 	lds	r24, 0x0106
 2da:	90 91 07 01 	lds	r25, 0x0107
 2de:	c8 17       	cp	r28, r24
 2e0:	d9 07       	cpc	r29, r25
 2e2:	b4 f4       	brge	.+44     	; 0x310 <make_square_LUT+0xca>
 2e4:	8e 01       	movw	r16, r28
 2e6:	00 0f       	add	r16, r16
 2e8:	11 1f       	adc	r17, r17
 2ea:	04 57       	subi	r16, 0x74	; 116
 2ec:	1b 4f       	sbci	r17, 0xFB	; 251
      SquareWave[i] = volts_to_bits(MIN_VOLTAGE);
 2ee:	60 e0       	ldi	r22, 0x00	; 0
 2f0:	70 e0       	ldi	r23, 0x00	; 0
 2f2:	cb 01       	movw	r24, r22
 2f4:	0e 94 ad 00 	call	0x15a	; 0x15a <volts_to_bits>
 2f8:	f8 01       	movw	r30, r16
 2fa:	81 93       	st	Z+, r24
 2fc:	91 93       	st	Z+, r25
 2fe:	8f 01       	movw	r16, r30
   int duty = num_samples * (double) dutyCycle/100;
   
   for (i = 0; i < duty; i++)
      SquareWave[i] = volts_to_bits(MAX_VOLTAGE);
   
   for ( ; i < num_samples ; i++)
 300:	21 96       	adiw	r28, 0x01	; 1
 302:	80 91 06 01 	lds	r24, 0x0106
 306:	90 91 07 01 	lds	r25, 0x0107
 30a:	c8 17       	cp	r28, r24
 30c:	d9 07       	cpc	r29, r25
 30e:	7c f3       	brlt	.-34     	; 0x2ee <make_square_LUT+0xa8>
      SquareWave[i] = volts_to_bits(MIN_VOLTAGE);
}
 310:	df 91       	pop	r29
 312:	cf 91       	pop	r28
 314:	1f 91       	pop	r17
 316:	0f 91       	pop	r16
 318:	ff 90       	pop	r15
 31a:	ef 90       	pop	r14
 31c:	df 90       	pop	r13
 31e:	cf 90       	pop	r12
 320:	08 95       	ret

00000322 <cycleDuty>:
   
   return Wave[ndx];
}

void cycleDuty() {
   dutyCycle += 10;
 322:	80 91 03 01 	lds	r24, 0x0103
 326:	90 91 04 01 	lds	r25, 0x0104
 32a:	0a 96       	adiw	r24, 0x0a	; 10
   dutyCycle %= 110;
 32c:	6e e6       	ldi	r22, 0x6E	; 110
 32e:	70 e0       	ldi	r23, 0x00	; 0
 330:	0e 94 b6 05 	call	0xb6c	; 0xb6c <__divmodhi4>
 334:	90 93 04 01 	sts	0x0104, r25
 338:	80 93 03 01 	sts	0x0103, r24
   make_square_LUT();
 33c:	0e 94 23 01 	call	0x246	; 0x246 <make_square_LUT>
 340:	08 95       	ret

00000342 <make_triangle_LUT>:
   
   for ( ; i < num_samples ; i++)
      SquareWave[i] = volts_to_bits(MIN_VOLTAGE);
}

void make_triangle_LUT(){
 342:	4f 92       	push	r4
 344:	5f 92       	push	r5
 346:	6f 92       	push	r6
 348:	7f 92       	push	r7
 34a:	af 92       	push	r10
 34c:	bf 92       	push	r11
 34e:	cf 92       	push	r12
 350:	df 92       	push	r13
 352:	ef 92       	push	r14
 354:	ff 92       	push	r15
 356:	0f 93       	push	r16
 358:	1f 93       	push	r17
 35a:	cf 93       	push	r28
 35c:	df 93       	push	r29
   int i;
   int peak = num_samples / 2;
 35e:	a0 90 06 01 	lds	r10, 0x0106
 362:	b0 90 07 01 	lds	r11, 0x0107
 366:	bb 20       	and	r11, r11
 368:	1c f4       	brge	.+6      	; 0x370 <make_triangle_LUT+0x2e>
 36a:	2f ef       	ldi	r18, 0xFF	; 255
 36c:	a2 1a       	sub	r10, r18
 36e:	b2 0a       	sbc	r11, r18
 370:	b5 94       	asr	r11
 372:	a7 94       	ror	r10
   double increment = ((double) MAX_VOLTAGE - MIN_VOLTAGE) / peak;
 374:	b5 01       	movw	r22, r10
 376:	0b 2c       	mov	r0, r11
 378:	00 0c       	add	r0, r0
 37a:	88 0b       	sbc	r24, r24
 37c:	99 0b       	sbc	r25, r25
 37e:	0e 94 04 04 	call	0x808	; 0x808 <__floatsisf>
 382:	9b 01       	movw	r18, r22
 384:	ac 01       	movw	r20, r24
 386:	60 e0       	ldi	r22, 0x00	; 0
 388:	70 e0       	ldi	r23, 0x00	; 0
 38a:	80 ea       	ldi	r24, 0xA0	; 160
 38c:	90 e4       	ldi	r25, 0x40	; 64
 38e:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <__divsf3>
 392:	2b 01       	movw	r4, r22
 394:	3c 01       	movw	r6, r24
   double voltage = MIN_VOLTAGE - increment;
 396:	9b 01       	movw	r18, r22
 398:	ac 01       	movw	r20, r24
 39a:	60 e0       	ldi	r22, 0x00	; 0
 39c:	70 e0       	ldi	r23, 0x00	; 0
 39e:	cb 01       	movw	r24, r22
 3a0:	0e 94 ed 02 	call	0x5da	; 0x5da <__subsf3>
 3a4:	6b 01       	movw	r12, r22
 3a6:	7c 01       	movw	r14, r24
   
   for (i = 0; i < (peak + 1); i++)
 3a8:	e5 01       	movw	r28, r10
 3aa:	21 96       	adiw	r28, 0x01	; 1
 3ac:	1c 16       	cp	r1, r28
 3ae:	1d 06       	cpc	r1, r29
 3b0:	dc f4       	brge	.+54     	; 0x3e8 <make_triangle_LUT+0xa6>
 3b2:	00 e6       	ldi	r16, 0x60	; 96
 3b4:	13 e0       	ldi	r17, 0x03	; 3
 3b6:	c5 01       	movw	r24, r10
 3b8:	88 0f       	add	r24, r24
 3ba:	99 1f       	adc	r25, r25
 3bc:	fc 01       	movw	r30, r24
 3be:	ee 59       	subi	r30, 0x9E	; 158
 3c0:	fc 4f       	sbci	r31, 0xFC	; 252
 3c2:	5f 01       	movw	r10, r30
      TriWave[i] = volts_to_bits(voltage += increment);
 3c4:	a3 01       	movw	r20, r6
 3c6:	92 01       	movw	r18, r4
 3c8:	c7 01       	movw	r24, r14
 3ca:	b6 01       	movw	r22, r12
 3cc:	0e 94 ee 02 	call	0x5dc	; 0x5dc <__addsf3>
 3d0:	6b 01       	movw	r12, r22
 3d2:	7c 01       	movw	r14, r24
 3d4:	0e 94 ad 00 	call	0x15a	; 0x15a <volts_to_bits>
 3d8:	f8 01       	movw	r30, r16
 3da:	81 93       	st	Z+, r24
 3dc:	91 93       	st	Z+, r25
 3de:	8f 01       	movw	r16, r30
   int i;
   int peak = num_samples / 2;
   double increment = ((double) MAX_VOLTAGE - MIN_VOLTAGE) / peak;
   double voltage = MIN_VOLTAGE - increment;
   
   for (i = 0; i < (peak + 1); i++)
 3e0:	ea 15       	cp	r30, r10
 3e2:	fb 05       	cpc	r31, r11
 3e4:	79 f7       	brne	.-34     	; 0x3c4 <make_triangle_LUT+0x82>
 3e6:	02 c0       	rjmp	.+4      	; 0x3ec <make_triangle_LUT+0xaa>
 3e8:	c0 e0       	ldi	r28, 0x00	; 0
 3ea:	d0 e0       	ldi	r29, 0x00	; 0
      TriWave[i] = volts_to_bits(voltage += increment);
   
   for ( ; i < (num_samples - 1); i++)
 3ec:	80 91 06 01 	lds	r24, 0x0106
 3f0:	90 91 07 01 	lds	r25, 0x0107
 3f4:	01 97       	sbiw	r24, 0x01	; 1
 3f6:	c8 17       	cp	r28, r24
 3f8:	d9 07       	cpc	r29, r25
 3fa:	e4 f4       	brge	.+56     	; 0x434 <make_triangle_LUT+0xf2>
 3fc:	8e 01       	movw	r16, r28
 3fe:	00 0f       	add	r16, r16
 400:	11 1f       	adc	r17, r17
 402:	00 5a       	subi	r16, 0xA0	; 160
 404:	1c 4f       	sbci	r17, 0xFC	; 252
      TriWave[i] = volts_to_bits(voltage -= increment);
 406:	a3 01       	movw	r20, r6
 408:	92 01       	movw	r18, r4
 40a:	c7 01       	movw	r24, r14
 40c:	b6 01       	movw	r22, r12
 40e:	0e 94 ed 02 	call	0x5da	; 0x5da <__subsf3>
 412:	6b 01       	movw	r12, r22
 414:	7c 01       	movw	r14, r24
 416:	0e 94 ad 00 	call	0x15a	; 0x15a <volts_to_bits>
 41a:	f8 01       	movw	r30, r16
 41c:	81 93       	st	Z+, r24
 41e:	91 93       	st	Z+, r25
 420:	8f 01       	movw	r16, r30
   double voltage = MIN_VOLTAGE - increment;
   
   for (i = 0; i < (peak + 1); i++)
      TriWave[i] = volts_to_bits(voltage += increment);
   
   for ( ; i < (num_samples - 1); i++)
 422:	21 96       	adiw	r28, 0x01	; 1
 424:	80 91 06 01 	lds	r24, 0x0106
 428:	90 91 07 01 	lds	r25, 0x0107
 42c:	01 97       	sbiw	r24, 0x01	; 1
 42e:	c8 17       	cp	r28, r24
 430:	d9 07       	cpc	r29, r25
 432:	4c f3       	brlt	.-46     	; 0x406 <make_triangle_LUT+0xc4>
      TriWave[i] = volts_to_bits(voltage -= increment);
}
 434:	df 91       	pop	r29
 436:	cf 91       	pop	r28
 438:	1f 91       	pop	r17
 43a:	0f 91       	pop	r16
 43c:	ff 90       	pop	r15
 43e:	ef 90       	pop	r14
 440:	df 90       	pop	r13
 442:	cf 90       	pop	r12
 444:	bf 90       	pop	r11
 446:	af 90       	pop	r10
 448:	7f 90       	pop	r7
 44a:	6f 90       	pop	r6
 44c:	5f 90       	pop	r5
 44e:	4f 90       	pop	r4
 450:	08 95       	ret

00000452 <make_sawtooth_LUT>:

void make_sawtooth_LUT(){
 452:	8f 92       	push	r8
 454:	9f 92       	push	r9
 456:	af 92       	push	r10
 458:	bf 92       	push	r11
 45a:	cf 92       	push	r12
 45c:	df 92       	push	r13
 45e:	ef 92       	push	r14
 460:	ff 92       	push	r15
 462:	0f 93       	push	r16
 464:	1f 93       	push	r17
 466:	cf 93       	push	r28
 468:	df 93       	push	r29
   int ndx;
   double increment = ((double) MAX_VOLTAGE - MIN_VOLTAGE) / (num_samples - 1);
 46a:	c0 91 06 01 	lds	r28, 0x0106
 46e:	d0 91 07 01 	lds	r29, 0x0107
 472:	be 01       	movw	r22, r28
 474:	61 50       	subi	r22, 0x01	; 1
 476:	71 09       	sbc	r23, r1
 478:	07 2e       	mov	r0, r23
 47a:	00 0c       	add	r0, r0
 47c:	88 0b       	sbc	r24, r24
 47e:	99 0b       	sbc	r25, r25
 480:	0e 94 04 04 	call	0x808	; 0x808 <__floatsisf>
 484:	9b 01       	movw	r18, r22
 486:	ac 01       	movw	r20, r24
 488:	60 e0       	ldi	r22, 0x00	; 0
 48a:	70 e0       	ldi	r23, 0x00	; 0
 48c:	80 ea       	ldi	r24, 0xA0	; 160
 48e:	90 e4       	ldi	r25, 0x40	; 64
 490:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <__divsf3>
 494:	4b 01       	movw	r8, r22
 496:	5c 01       	movw	r10, r24
   double voltage = MIN_VOLTAGE -increment;
 498:	9b 01       	movw	r18, r22
 49a:	ac 01       	movw	r20, r24
 49c:	60 e0       	ldi	r22, 0x00	; 0
 49e:	70 e0       	ldi	r23, 0x00	; 0
 4a0:	cb 01       	movw	r24, r22
 4a2:	0e 94 ed 02 	call	0x5da	; 0x5da <__subsf3>
 4a6:	6b 01       	movw	r12, r22
 4a8:	7c 01       	movw	r14, r24
   
   for (ndx = 0; ndx < num_samples; ndx++)
 4aa:	1c 16       	cp	r1, r28
 4ac:	1d 06       	cpc	r1, r29
 4ae:	d4 f4       	brge	.+52     	; 0x4e4 <make_sawtooth_LUT+0x92>
 4b0:	04 e3       	ldi	r16, 0x34	; 52
 4b2:	12 e0       	ldi	r17, 0x02	; 2
 4b4:	c0 e0       	ldi	r28, 0x00	; 0
 4b6:	d0 e0       	ldi	r29, 0x00	; 0
      SawWave[ndx] = volts_to_bits(voltage += increment);
 4b8:	a5 01       	movw	r20, r10
 4ba:	94 01       	movw	r18, r8
 4bc:	c7 01       	movw	r24, r14
 4be:	b6 01       	movw	r22, r12
 4c0:	0e 94 ee 02 	call	0x5dc	; 0x5dc <__addsf3>
 4c4:	6b 01       	movw	r12, r22
 4c6:	7c 01       	movw	r14, r24
 4c8:	0e 94 ad 00 	call	0x15a	; 0x15a <volts_to_bits>
 4cc:	f8 01       	movw	r30, r16
 4ce:	81 93       	st	Z+, r24
 4d0:	91 93       	st	Z+, r25
 4d2:	8f 01       	movw	r16, r30
void make_sawtooth_LUT(){
   int ndx;
   double increment = ((double) MAX_VOLTAGE - MIN_VOLTAGE) / (num_samples - 1);
   double voltage = MIN_VOLTAGE -increment;
   
   for (ndx = 0; ndx < num_samples; ndx++)
 4d4:	21 96       	adiw	r28, 0x01	; 1
 4d6:	80 91 06 01 	lds	r24, 0x0106
 4da:	90 91 07 01 	lds	r25, 0x0107
 4de:	c8 17       	cp	r28, r24
 4e0:	d9 07       	cpc	r29, r25
 4e2:	54 f3       	brlt	.-44     	; 0x4b8 <make_sawtooth_LUT+0x66>
      SawWave[ndx] = volts_to_bits(voltage += increment);
}
 4e4:	df 91       	pop	r29
 4e6:	cf 91       	pop	r28
 4e8:	1f 91       	pop	r17
 4ea:	0f 91       	pop	r16
 4ec:	ff 90       	pop	r15
 4ee:	ef 90       	pop	r14
 4f0:	df 90       	pop	r13
 4f2:	cf 90       	pop	r12
 4f4:	bf 90       	pop	r11
 4f6:	af 90       	pop	r10
 4f8:	9f 90       	pop	r9
 4fa:	8f 90       	pop	r8
 4fc:	08 95       	ret

000004fe <make_sin_LUT>:

void make_sin_LUT(){
 4fe:	8f 92       	push	r8
 500:	9f 92       	push	r9
 502:	af 92       	push	r10
 504:	bf 92       	push	r11
 506:	cf 92       	push	r12
 508:	df 92       	push	r13
 50a:	ef 92       	push	r14
 50c:	ff 92       	push	r15
 50e:	0f 93       	push	r16
 510:	1f 93       	push	r17
 512:	cf 93       	push	r28
 514:	df 93       	push	r29
   int ndx;
   double increment = 2 * M_PI / num_samples;
 516:	c0 91 06 01 	lds	r28, 0x0106
 51a:	d0 91 07 01 	lds	r29, 0x0107
 51e:	be 01       	movw	r22, r28
 520:	0d 2e       	mov	r0, r29
 522:	00 0c       	add	r0, r0
 524:	88 0b       	sbc	r24, r24
 526:	99 0b       	sbc	r25, r25
 528:	0e 94 04 04 	call	0x808	; 0x808 <__floatsisf>
 52c:	9b 01       	movw	r18, r22
 52e:	ac 01       	movw	r20, r24
 530:	6b ed       	ldi	r22, 0xDB	; 219
 532:	7f e0       	ldi	r23, 0x0F	; 15
 534:	89 ec       	ldi	r24, 0xC9	; 201
 536:	90 e4       	ldi	r25, 0x40	; 64
 538:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <__divsf3>
 53c:	4b 01       	movw	r8, r22
 53e:	5c 01       	movw	r10, r24
   double rad = -increment;
 540:	6b 01       	movw	r12, r22
 542:	7c 01       	movw	r14, r24
 544:	f7 fa       	bst	r15, 7
 546:	f0 94       	com	r15
 548:	f7 f8       	bld	r15, 7
 54a:	f0 94       	com	r15
   double ampli = ((double) MAX_VOLTAGE - MIN_VOLTAGE) / 2;
   // The amplitude/2 is neccessary to compensate for sin()'s amplitude of 2
   double offset = MIN_VOLTAGE + ampli;
   
   for (ndx = 0; ndx < num_samples; ndx++)
 54c:	1c 16       	cp	r1, r28
 54e:	1d 06       	cpc	r1, r29
 550:	44 f5       	brge	.+80     	; 0x5a2 <make_sin_LUT+0xa4>
 552:	08 e0       	ldi	r16, 0x08	; 8
 554:	11 e0       	ldi	r17, 0x01	; 1
 556:	c0 e0       	ldi	r28, 0x00	; 0
 558:	d0 e0       	ldi	r29, 0x00	; 0
      SinWave[ndx] = volts_to_bits(ampli * sin(rad += increment) + offset);
 55a:	a5 01       	movw	r20, r10
 55c:	94 01       	movw	r18, r8
 55e:	c7 01       	movw	r24, r14
 560:	b6 01       	movw	r22, r12
 562:	0e 94 ee 02 	call	0x5dc	; 0x5dc <__addsf3>
 566:	6b 01       	movw	r12, r22
 568:	7c 01       	movw	r14, r24
 56a:	0e 94 02 05 	call	0xa04	; 0xa04 <sin>
 56e:	20 e0       	ldi	r18, 0x00	; 0
 570:	30 e0       	ldi	r19, 0x00	; 0
 572:	40 e2       	ldi	r20, 0x20	; 32
 574:	50 e4       	ldi	r21, 0x40	; 64
 576:	0e 94 95 04 	call	0x92a	; 0x92a <__mulsf3>
 57a:	20 e0       	ldi	r18, 0x00	; 0
 57c:	30 e0       	ldi	r19, 0x00	; 0
 57e:	40 e2       	ldi	r20, 0x20	; 32
 580:	50 e4       	ldi	r21, 0x40	; 64
 582:	0e 94 ee 02 	call	0x5dc	; 0x5dc <__addsf3>
 586:	0e 94 ad 00 	call	0x15a	; 0x15a <volts_to_bits>
 58a:	f8 01       	movw	r30, r16
 58c:	81 93       	st	Z+, r24
 58e:	91 93       	st	Z+, r25
 590:	8f 01       	movw	r16, r30
   double rad = -increment;
   double ampli = ((double) MAX_VOLTAGE - MIN_VOLTAGE) / 2;
   // The amplitude/2 is neccessary to compensate for sin()'s amplitude of 2
   double offset = MIN_VOLTAGE + ampli;
   
   for (ndx = 0; ndx < num_samples; ndx++)
 592:	21 96       	adiw	r28, 0x01	; 1
 594:	80 91 06 01 	lds	r24, 0x0106
 598:	90 91 07 01 	lds	r25, 0x0107
 59c:	c8 17       	cp	r28, r24
 59e:	d9 07       	cpc	r29, r25
 5a0:	e4 f2       	brlt	.-72     	; 0x55a <make_sin_LUT+0x5c>
      SinWave[ndx] = volts_to_bits(ampli * sin(rad += increment) + offset);
 5a2:	df 91       	pop	r29
 5a4:	cf 91       	pop	r28
 5a6:	1f 91       	pop	r17
 5a8:	0f 91       	pop	r16
 5aa:	ff 90       	pop	r15
 5ac:	ef 90       	pop	r14
 5ae:	df 90       	pop	r13
 5b0:	cf 90       	pop	r12
 5b2:	bf 90       	pop	r11
 5b4:	af 90       	pop	r10
 5b6:	9f 90       	pop	r9
 5b8:	8f 90       	pop	r8
 5ba:	08 95       	ret

000005bc <initWaves>:
//   else
//      return bits;                  // return 12bit equivalent for DAC
//}

void initWaves() {
   make_square_LUT();
 5bc:	0e 94 23 01 	call	0x246	; 0x246 <make_square_LUT>
   make_triangle_LUT();
 5c0:	0e 94 a1 01 	call	0x342	; 0x342 <make_triangle_LUT>
   make_sawtooth_LUT();
 5c4:	0e 94 29 02 	call	0x452	; 0x452 <make_sawtooth_LUT>
   make_sin_LUT();
 5c8:	0e 94 7f 02 	call	0x4fe	; 0x4fe <make_sin_LUT>
   
   Wave = SquareWave;
 5cc:	8c e8       	ldi	r24, 0x8C	; 140
 5ce:	94 e0       	ldi	r25, 0x04	; 4
 5d0:	90 93 b9 05 	sts	0x05B9, r25
 5d4:	80 93 b8 05 	sts	0x05B8, r24
 5d8:	08 95       	ret

000005da <__subsf3>:
 5da:	50 58       	subi	r21, 0x80	; 128

000005dc <__addsf3>:
 5dc:	bb 27       	eor	r27, r27
 5de:	aa 27       	eor	r26, r26
 5e0:	0e 94 05 03 	call	0x60a	; 0x60a <__addsf3x>
 5e4:	0c 94 56 04 	jmp	0x8ac	; 0x8ac <__fp_round>
 5e8:	0e 94 48 04 	call	0x890	; 0x890 <__fp_pscA>
 5ec:	38 f0       	brcs	.+14     	; 0x5fc <__addsf3+0x20>
 5ee:	0e 94 4f 04 	call	0x89e	; 0x89e <__fp_pscB>
 5f2:	20 f0       	brcs	.+8      	; 0x5fc <__addsf3+0x20>
 5f4:	39 f4       	brne	.+14     	; 0x604 <__addsf3+0x28>
 5f6:	9f 3f       	cpi	r25, 0xFF	; 255
 5f8:	19 f4       	brne	.+6      	; 0x600 <__addsf3+0x24>
 5fa:	26 f4       	brtc	.+8      	; 0x604 <__addsf3+0x28>
 5fc:	0c 94 45 04 	jmp	0x88a	; 0x88a <__fp_nan>
 600:	0e f4       	brtc	.+2      	; 0x604 <__addsf3+0x28>
 602:	e0 95       	com	r30
 604:	e7 fb       	bst	r30, 7
 606:	0c 94 3f 04 	jmp	0x87e	; 0x87e <__fp_inf>

0000060a <__addsf3x>:
 60a:	e9 2f       	mov	r30, r25
 60c:	0e 94 67 04 	call	0x8ce	; 0x8ce <__fp_split3>
 610:	58 f3       	brcs	.-42     	; 0x5e8 <__addsf3+0xc>
 612:	ba 17       	cp	r27, r26
 614:	62 07       	cpc	r22, r18
 616:	73 07       	cpc	r23, r19
 618:	84 07       	cpc	r24, r20
 61a:	95 07       	cpc	r25, r21
 61c:	20 f0       	brcs	.+8      	; 0x626 <__addsf3x+0x1c>
 61e:	79 f4       	brne	.+30     	; 0x63e <__addsf3x+0x34>
 620:	a6 f5       	brtc	.+104    	; 0x68a <__addsf3x+0x80>
 622:	0c 94 89 04 	jmp	0x912	; 0x912 <__fp_zero>
 626:	0e f4       	brtc	.+2      	; 0x62a <__addsf3x+0x20>
 628:	e0 95       	com	r30
 62a:	0b 2e       	mov	r0, r27
 62c:	ba 2f       	mov	r27, r26
 62e:	a0 2d       	mov	r26, r0
 630:	0b 01       	movw	r0, r22
 632:	b9 01       	movw	r22, r18
 634:	90 01       	movw	r18, r0
 636:	0c 01       	movw	r0, r24
 638:	ca 01       	movw	r24, r20
 63a:	a0 01       	movw	r20, r0
 63c:	11 24       	eor	r1, r1
 63e:	ff 27       	eor	r31, r31
 640:	59 1b       	sub	r21, r25
 642:	99 f0       	breq	.+38     	; 0x66a <__addsf3x+0x60>
 644:	59 3f       	cpi	r21, 0xF9	; 249
 646:	50 f4       	brcc	.+20     	; 0x65c <__addsf3x+0x52>
 648:	50 3e       	cpi	r21, 0xE0	; 224
 64a:	68 f1       	brcs	.+90     	; 0x6a6 <__addsf3x+0x9c>
 64c:	1a 16       	cp	r1, r26
 64e:	f0 40       	sbci	r31, 0x00	; 0
 650:	a2 2f       	mov	r26, r18
 652:	23 2f       	mov	r18, r19
 654:	34 2f       	mov	r19, r20
 656:	44 27       	eor	r20, r20
 658:	58 5f       	subi	r21, 0xF8	; 248
 65a:	f3 cf       	rjmp	.-26     	; 0x642 <__addsf3x+0x38>
 65c:	46 95       	lsr	r20
 65e:	37 95       	ror	r19
 660:	27 95       	ror	r18
 662:	a7 95       	ror	r26
 664:	f0 40       	sbci	r31, 0x00	; 0
 666:	53 95       	inc	r21
 668:	c9 f7       	brne	.-14     	; 0x65c <__addsf3x+0x52>
 66a:	7e f4       	brtc	.+30     	; 0x68a <__addsf3x+0x80>
 66c:	1f 16       	cp	r1, r31
 66e:	ba 0b       	sbc	r27, r26
 670:	62 0b       	sbc	r22, r18
 672:	73 0b       	sbc	r23, r19
 674:	84 0b       	sbc	r24, r20
 676:	ba f0       	brmi	.+46     	; 0x6a6 <__addsf3x+0x9c>
 678:	91 50       	subi	r25, 0x01	; 1
 67a:	a1 f0       	breq	.+40     	; 0x6a4 <__addsf3x+0x9a>
 67c:	ff 0f       	add	r31, r31
 67e:	bb 1f       	adc	r27, r27
 680:	66 1f       	adc	r22, r22
 682:	77 1f       	adc	r23, r23
 684:	88 1f       	adc	r24, r24
 686:	c2 f7       	brpl	.-16     	; 0x678 <__addsf3x+0x6e>
 688:	0e c0       	rjmp	.+28     	; 0x6a6 <__addsf3x+0x9c>
 68a:	ba 0f       	add	r27, r26
 68c:	62 1f       	adc	r22, r18
 68e:	73 1f       	adc	r23, r19
 690:	84 1f       	adc	r24, r20
 692:	48 f4       	brcc	.+18     	; 0x6a6 <__addsf3x+0x9c>
 694:	87 95       	ror	r24
 696:	77 95       	ror	r23
 698:	67 95       	ror	r22
 69a:	b7 95       	ror	r27
 69c:	f7 95       	ror	r31
 69e:	9e 3f       	cpi	r25, 0xFE	; 254
 6a0:	08 f0       	brcs	.+2      	; 0x6a4 <__addsf3x+0x9a>
 6a2:	b0 cf       	rjmp	.-160    	; 0x604 <__addsf3+0x28>
 6a4:	93 95       	inc	r25
 6a6:	88 0f       	add	r24, r24
 6a8:	08 f0       	brcs	.+2      	; 0x6ac <__addsf3x+0xa2>
 6aa:	99 27       	eor	r25, r25
 6ac:	ee 0f       	add	r30, r30
 6ae:	97 95       	ror	r25
 6b0:	87 95       	ror	r24
 6b2:	08 95       	ret

000006b4 <__divsf3>:
 6b4:	0e 94 6e 03 	call	0x6dc	; 0x6dc <__divsf3x>
 6b8:	0c 94 56 04 	jmp	0x8ac	; 0x8ac <__fp_round>
 6bc:	0e 94 4f 04 	call	0x89e	; 0x89e <__fp_pscB>
 6c0:	58 f0       	brcs	.+22     	; 0x6d8 <__divsf3+0x24>
 6c2:	0e 94 48 04 	call	0x890	; 0x890 <__fp_pscA>
 6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__divsf3+0x24>
 6c8:	29 f4       	brne	.+10     	; 0x6d4 <__divsf3+0x20>
 6ca:	5f 3f       	cpi	r21, 0xFF	; 255
 6cc:	29 f0       	breq	.+10     	; 0x6d8 <__divsf3+0x24>
 6ce:	0c 94 3f 04 	jmp	0x87e	; 0x87e <__fp_inf>
 6d2:	51 11       	cpse	r21, r1
 6d4:	0c 94 8a 04 	jmp	0x914	; 0x914 <__fp_szero>
 6d8:	0c 94 45 04 	jmp	0x88a	; 0x88a <__fp_nan>

000006dc <__divsf3x>:
 6dc:	0e 94 67 04 	call	0x8ce	; 0x8ce <__fp_split3>
 6e0:	68 f3       	brcs	.-38     	; 0x6bc <__divsf3+0x8>

000006e2 <__divsf3_pse>:
 6e2:	99 23       	and	r25, r25
 6e4:	b1 f3       	breq	.-20     	; 0x6d2 <__divsf3+0x1e>
 6e6:	55 23       	and	r21, r21
 6e8:	91 f3       	breq	.-28     	; 0x6ce <__divsf3+0x1a>
 6ea:	95 1b       	sub	r25, r21
 6ec:	55 0b       	sbc	r21, r21
 6ee:	bb 27       	eor	r27, r27
 6f0:	aa 27       	eor	r26, r26
 6f2:	62 17       	cp	r22, r18
 6f4:	73 07       	cpc	r23, r19
 6f6:	84 07       	cpc	r24, r20
 6f8:	38 f0       	brcs	.+14     	; 0x708 <__divsf3_pse+0x26>
 6fa:	9f 5f       	subi	r25, 0xFF	; 255
 6fc:	5f 4f       	sbci	r21, 0xFF	; 255
 6fe:	22 0f       	add	r18, r18
 700:	33 1f       	adc	r19, r19
 702:	44 1f       	adc	r20, r20
 704:	aa 1f       	adc	r26, r26
 706:	a9 f3       	breq	.-22     	; 0x6f2 <__divsf3_pse+0x10>
 708:	35 d0       	rcall	.+106    	; 0x774 <__divsf3_pse+0x92>
 70a:	0e 2e       	mov	r0, r30
 70c:	3a f0       	brmi	.+14     	; 0x71c <__divsf3_pse+0x3a>
 70e:	e0 e8       	ldi	r30, 0x80	; 128
 710:	32 d0       	rcall	.+100    	; 0x776 <__divsf3_pse+0x94>
 712:	91 50       	subi	r25, 0x01	; 1
 714:	50 40       	sbci	r21, 0x00	; 0
 716:	e6 95       	lsr	r30
 718:	00 1c       	adc	r0, r0
 71a:	ca f7       	brpl	.-14     	; 0x70e <__divsf3_pse+0x2c>
 71c:	2b d0       	rcall	.+86     	; 0x774 <__divsf3_pse+0x92>
 71e:	fe 2f       	mov	r31, r30
 720:	29 d0       	rcall	.+82     	; 0x774 <__divsf3_pse+0x92>
 722:	66 0f       	add	r22, r22
 724:	77 1f       	adc	r23, r23
 726:	88 1f       	adc	r24, r24
 728:	bb 1f       	adc	r27, r27
 72a:	26 17       	cp	r18, r22
 72c:	37 07       	cpc	r19, r23
 72e:	48 07       	cpc	r20, r24
 730:	ab 07       	cpc	r26, r27
 732:	b0 e8       	ldi	r27, 0x80	; 128
 734:	09 f0       	breq	.+2      	; 0x738 <__divsf3_pse+0x56>
 736:	bb 0b       	sbc	r27, r27
 738:	80 2d       	mov	r24, r0
 73a:	bf 01       	movw	r22, r30
 73c:	ff 27       	eor	r31, r31
 73e:	93 58       	subi	r25, 0x83	; 131
 740:	5f 4f       	sbci	r21, 0xFF	; 255
 742:	3a f0       	brmi	.+14     	; 0x752 <__divsf3_pse+0x70>
 744:	9e 3f       	cpi	r25, 0xFE	; 254
 746:	51 05       	cpc	r21, r1
 748:	78 f0       	brcs	.+30     	; 0x768 <__divsf3_pse+0x86>
 74a:	0c 94 3f 04 	jmp	0x87e	; 0x87e <__fp_inf>
 74e:	0c 94 8a 04 	jmp	0x914	; 0x914 <__fp_szero>
 752:	5f 3f       	cpi	r21, 0xFF	; 255
 754:	e4 f3       	brlt	.-8      	; 0x74e <__divsf3_pse+0x6c>
 756:	98 3e       	cpi	r25, 0xE8	; 232
 758:	d4 f3       	brlt	.-12     	; 0x74e <__divsf3_pse+0x6c>
 75a:	86 95       	lsr	r24
 75c:	77 95       	ror	r23
 75e:	67 95       	ror	r22
 760:	b7 95       	ror	r27
 762:	f7 95       	ror	r31
 764:	9f 5f       	subi	r25, 0xFF	; 255
 766:	c9 f7       	brne	.-14     	; 0x75a <__divsf3_pse+0x78>
 768:	88 0f       	add	r24, r24
 76a:	91 1d       	adc	r25, r1
 76c:	96 95       	lsr	r25
 76e:	87 95       	ror	r24
 770:	97 f9       	bld	r25, 7
 772:	08 95       	ret
 774:	e1 e0       	ldi	r30, 0x01	; 1
 776:	66 0f       	add	r22, r22
 778:	77 1f       	adc	r23, r23
 77a:	88 1f       	adc	r24, r24
 77c:	bb 1f       	adc	r27, r27
 77e:	62 17       	cp	r22, r18
 780:	73 07       	cpc	r23, r19
 782:	84 07       	cpc	r24, r20
 784:	ba 07       	cpc	r27, r26
 786:	20 f0       	brcs	.+8      	; 0x790 <__divsf3_pse+0xae>
 788:	62 1b       	sub	r22, r18
 78a:	73 0b       	sbc	r23, r19
 78c:	84 0b       	sbc	r24, r20
 78e:	ba 0b       	sbc	r27, r26
 790:	ee 1f       	adc	r30, r30
 792:	88 f7       	brcc	.-30     	; 0x776 <__divsf3_pse+0x94>
 794:	e0 95       	com	r30
 796:	08 95       	ret

00000798 <__fixsfsi>:
 798:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <__fixunssfsi>
 79c:	68 94       	set
 79e:	b1 11       	cpse	r27, r1
 7a0:	0c 94 8a 04 	jmp	0x914	; 0x914 <__fp_szero>
 7a4:	08 95       	ret

000007a6 <__fixunssfsi>:
 7a6:	0e 94 6f 04 	call	0x8de	; 0x8de <__fp_splitA>
 7aa:	88 f0       	brcs	.+34     	; 0x7ce <__fixunssfsi+0x28>
 7ac:	9f 57       	subi	r25, 0x7F	; 127
 7ae:	98 f0       	brcs	.+38     	; 0x7d6 <__fixunssfsi+0x30>
 7b0:	b9 2f       	mov	r27, r25
 7b2:	99 27       	eor	r25, r25
 7b4:	b7 51       	subi	r27, 0x17	; 23
 7b6:	b0 f0       	brcs	.+44     	; 0x7e4 <__fixunssfsi+0x3e>
 7b8:	e1 f0       	breq	.+56     	; 0x7f2 <__fixunssfsi+0x4c>
 7ba:	66 0f       	add	r22, r22
 7bc:	77 1f       	adc	r23, r23
 7be:	88 1f       	adc	r24, r24
 7c0:	99 1f       	adc	r25, r25
 7c2:	1a f0       	brmi	.+6      	; 0x7ca <__fixunssfsi+0x24>
 7c4:	ba 95       	dec	r27
 7c6:	c9 f7       	brne	.-14     	; 0x7ba <__fixunssfsi+0x14>
 7c8:	14 c0       	rjmp	.+40     	; 0x7f2 <__fixunssfsi+0x4c>
 7ca:	b1 30       	cpi	r27, 0x01	; 1
 7cc:	91 f0       	breq	.+36     	; 0x7f2 <__fixunssfsi+0x4c>
 7ce:	0e 94 89 04 	call	0x912	; 0x912 <__fp_zero>
 7d2:	b1 e0       	ldi	r27, 0x01	; 1
 7d4:	08 95       	ret
 7d6:	0c 94 89 04 	jmp	0x912	; 0x912 <__fp_zero>
 7da:	67 2f       	mov	r22, r23
 7dc:	78 2f       	mov	r23, r24
 7de:	88 27       	eor	r24, r24
 7e0:	b8 5f       	subi	r27, 0xF8	; 248
 7e2:	39 f0       	breq	.+14     	; 0x7f2 <__fixunssfsi+0x4c>
 7e4:	b9 3f       	cpi	r27, 0xF9	; 249
 7e6:	cc f3       	brlt	.-14     	; 0x7da <__fixunssfsi+0x34>
 7e8:	86 95       	lsr	r24
 7ea:	77 95       	ror	r23
 7ec:	67 95       	ror	r22
 7ee:	b3 95       	inc	r27
 7f0:	d9 f7       	brne	.-10     	; 0x7e8 <__fixunssfsi+0x42>
 7f2:	3e f4       	brtc	.+14     	; 0x802 <__fixunssfsi+0x5c>
 7f4:	90 95       	com	r25
 7f6:	80 95       	com	r24
 7f8:	70 95       	com	r23
 7fa:	61 95       	neg	r22
 7fc:	7f 4f       	sbci	r23, 0xFF	; 255
 7fe:	8f 4f       	sbci	r24, 0xFF	; 255
 800:	9f 4f       	sbci	r25, 0xFF	; 255
 802:	08 95       	ret

00000804 <__floatunsisf>:
 804:	e8 94       	clt
 806:	09 c0       	rjmp	.+18     	; 0x81a <__floatsisf+0x12>

00000808 <__floatsisf>:
 808:	97 fb       	bst	r25, 7
 80a:	3e f4       	brtc	.+14     	; 0x81a <__floatsisf+0x12>
 80c:	90 95       	com	r25
 80e:	80 95       	com	r24
 810:	70 95       	com	r23
 812:	61 95       	neg	r22
 814:	7f 4f       	sbci	r23, 0xFF	; 255
 816:	8f 4f       	sbci	r24, 0xFF	; 255
 818:	9f 4f       	sbci	r25, 0xFF	; 255
 81a:	99 23       	and	r25, r25
 81c:	a9 f0       	breq	.+42     	; 0x848 <__floatsisf+0x40>
 81e:	f9 2f       	mov	r31, r25
 820:	96 e9       	ldi	r25, 0x96	; 150
 822:	bb 27       	eor	r27, r27
 824:	93 95       	inc	r25
 826:	f6 95       	lsr	r31
 828:	87 95       	ror	r24
 82a:	77 95       	ror	r23
 82c:	67 95       	ror	r22
 82e:	b7 95       	ror	r27
 830:	f1 11       	cpse	r31, r1
 832:	f8 cf       	rjmp	.-16     	; 0x824 <__floatsisf+0x1c>
 834:	fa f4       	brpl	.+62     	; 0x874 <__floatsisf+0x6c>
 836:	bb 0f       	add	r27, r27
 838:	11 f4       	brne	.+4      	; 0x83e <__floatsisf+0x36>
 83a:	60 ff       	sbrs	r22, 0
 83c:	1b c0       	rjmp	.+54     	; 0x874 <__floatsisf+0x6c>
 83e:	6f 5f       	subi	r22, 0xFF	; 255
 840:	7f 4f       	sbci	r23, 0xFF	; 255
 842:	8f 4f       	sbci	r24, 0xFF	; 255
 844:	9f 4f       	sbci	r25, 0xFF	; 255
 846:	16 c0       	rjmp	.+44     	; 0x874 <__floatsisf+0x6c>
 848:	88 23       	and	r24, r24
 84a:	11 f0       	breq	.+4      	; 0x850 <__floatsisf+0x48>
 84c:	96 e9       	ldi	r25, 0x96	; 150
 84e:	11 c0       	rjmp	.+34     	; 0x872 <__floatsisf+0x6a>
 850:	77 23       	and	r23, r23
 852:	21 f0       	breq	.+8      	; 0x85c <__floatsisf+0x54>
 854:	9e e8       	ldi	r25, 0x8E	; 142
 856:	87 2f       	mov	r24, r23
 858:	76 2f       	mov	r23, r22
 85a:	05 c0       	rjmp	.+10     	; 0x866 <__floatsisf+0x5e>
 85c:	66 23       	and	r22, r22
 85e:	71 f0       	breq	.+28     	; 0x87c <__floatsisf+0x74>
 860:	96 e8       	ldi	r25, 0x86	; 134
 862:	86 2f       	mov	r24, r22
 864:	70 e0       	ldi	r23, 0x00	; 0
 866:	60 e0       	ldi	r22, 0x00	; 0
 868:	2a f0       	brmi	.+10     	; 0x874 <__floatsisf+0x6c>
 86a:	9a 95       	dec	r25
 86c:	66 0f       	add	r22, r22
 86e:	77 1f       	adc	r23, r23
 870:	88 1f       	adc	r24, r24
 872:	da f7       	brpl	.-10     	; 0x86a <__floatsisf+0x62>
 874:	88 0f       	add	r24, r24
 876:	96 95       	lsr	r25
 878:	87 95       	ror	r24
 87a:	97 f9       	bld	r25, 7
 87c:	08 95       	ret

0000087e <__fp_inf>:
 87e:	97 f9       	bld	r25, 7
 880:	9f 67       	ori	r25, 0x7F	; 127
 882:	80 e8       	ldi	r24, 0x80	; 128
 884:	70 e0       	ldi	r23, 0x00	; 0
 886:	60 e0       	ldi	r22, 0x00	; 0
 888:	08 95       	ret

0000088a <__fp_nan>:
 88a:	9f ef       	ldi	r25, 0xFF	; 255
 88c:	80 ec       	ldi	r24, 0xC0	; 192
 88e:	08 95       	ret

00000890 <__fp_pscA>:
 890:	00 24       	eor	r0, r0
 892:	0a 94       	dec	r0
 894:	16 16       	cp	r1, r22
 896:	17 06       	cpc	r1, r23
 898:	18 06       	cpc	r1, r24
 89a:	09 06       	cpc	r0, r25
 89c:	08 95       	ret

0000089e <__fp_pscB>:
 89e:	00 24       	eor	r0, r0
 8a0:	0a 94       	dec	r0
 8a2:	12 16       	cp	r1, r18
 8a4:	13 06       	cpc	r1, r19
 8a6:	14 06       	cpc	r1, r20
 8a8:	05 06       	cpc	r0, r21
 8aa:	08 95       	ret

000008ac <__fp_round>:
 8ac:	09 2e       	mov	r0, r25
 8ae:	03 94       	inc	r0
 8b0:	00 0c       	add	r0, r0
 8b2:	11 f4       	brne	.+4      	; 0x8b8 <__fp_round+0xc>
 8b4:	88 23       	and	r24, r24
 8b6:	52 f0       	brmi	.+20     	; 0x8cc <__fp_round+0x20>
 8b8:	bb 0f       	add	r27, r27
 8ba:	40 f4       	brcc	.+16     	; 0x8cc <__fp_round+0x20>
 8bc:	bf 2b       	or	r27, r31
 8be:	11 f4       	brne	.+4      	; 0x8c4 <__fp_round+0x18>
 8c0:	60 ff       	sbrs	r22, 0
 8c2:	04 c0       	rjmp	.+8      	; 0x8cc <__fp_round+0x20>
 8c4:	6f 5f       	subi	r22, 0xFF	; 255
 8c6:	7f 4f       	sbci	r23, 0xFF	; 255
 8c8:	8f 4f       	sbci	r24, 0xFF	; 255
 8ca:	9f 4f       	sbci	r25, 0xFF	; 255
 8cc:	08 95       	ret

000008ce <__fp_split3>:
 8ce:	57 fd       	sbrc	r21, 7
 8d0:	90 58       	subi	r25, 0x80	; 128
 8d2:	44 0f       	add	r20, r20
 8d4:	55 1f       	adc	r21, r21
 8d6:	59 f0       	breq	.+22     	; 0x8ee <__fp_splitA+0x10>
 8d8:	5f 3f       	cpi	r21, 0xFF	; 255
 8da:	71 f0       	breq	.+28     	; 0x8f8 <__fp_splitA+0x1a>
 8dc:	47 95       	ror	r20

000008de <__fp_splitA>:
 8de:	88 0f       	add	r24, r24
 8e0:	97 fb       	bst	r25, 7
 8e2:	99 1f       	adc	r25, r25
 8e4:	61 f0       	breq	.+24     	; 0x8fe <__fp_splitA+0x20>
 8e6:	9f 3f       	cpi	r25, 0xFF	; 255
 8e8:	79 f0       	breq	.+30     	; 0x908 <__stack+0x9>
 8ea:	87 95       	ror	r24
 8ec:	08 95       	ret
 8ee:	12 16       	cp	r1, r18
 8f0:	13 06       	cpc	r1, r19
 8f2:	14 06       	cpc	r1, r20
 8f4:	55 1f       	adc	r21, r21
 8f6:	f2 cf       	rjmp	.-28     	; 0x8dc <__fp_split3+0xe>
 8f8:	46 95       	lsr	r20
 8fa:	f1 df       	rcall	.-30     	; 0x8de <__fp_splitA>
 8fc:	08 c0       	rjmp	.+16     	; 0x90e <__stack+0xf>
 8fe:	16 16       	cp	r1, r22
 900:	17 06       	cpc	r1, r23
 902:	18 06       	cpc	r1, r24
 904:	99 1f       	adc	r25, r25
 906:	f1 cf       	rjmp	.-30     	; 0x8ea <__fp_splitA+0xc>
 908:	86 95       	lsr	r24
 90a:	71 05       	cpc	r23, r1
 90c:	61 05       	cpc	r22, r1
 90e:	08 94       	sec
 910:	08 95       	ret

00000912 <__fp_zero>:
 912:	e8 94       	clt

00000914 <__fp_szero>:
 914:	bb 27       	eor	r27, r27
 916:	66 27       	eor	r22, r22
 918:	77 27       	eor	r23, r23
 91a:	cb 01       	movw	r24, r22
 91c:	97 f9       	bld	r25, 7
 91e:	08 95       	ret

00000920 <__gesf2>:
 920:	0e 94 0a 05 	call	0xa14	; 0xa14 <__fp_cmp>
 924:	08 f4       	brcc	.+2      	; 0x928 <__gesf2+0x8>
 926:	8f ef       	ldi	r24, 0xFF	; 255
 928:	08 95       	ret

0000092a <__mulsf3>:
 92a:	0e 94 a8 04 	call	0x950	; 0x950 <__mulsf3x>
 92e:	0c 94 56 04 	jmp	0x8ac	; 0x8ac <__fp_round>
 932:	0e 94 48 04 	call	0x890	; 0x890 <__fp_pscA>
 936:	38 f0       	brcs	.+14     	; 0x946 <__mulsf3+0x1c>
 938:	0e 94 4f 04 	call	0x89e	; 0x89e <__fp_pscB>
 93c:	20 f0       	brcs	.+8      	; 0x946 <__mulsf3+0x1c>
 93e:	95 23       	and	r25, r21
 940:	11 f0       	breq	.+4      	; 0x946 <__mulsf3+0x1c>
 942:	0c 94 3f 04 	jmp	0x87e	; 0x87e <__fp_inf>
 946:	0c 94 45 04 	jmp	0x88a	; 0x88a <__fp_nan>
 94a:	11 24       	eor	r1, r1
 94c:	0c 94 8a 04 	jmp	0x914	; 0x914 <__fp_szero>

00000950 <__mulsf3x>:
 950:	0e 94 67 04 	call	0x8ce	; 0x8ce <__fp_split3>
 954:	70 f3       	brcs	.-36     	; 0x932 <__mulsf3+0x8>

00000956 <__mulsf3_pse>:
 956:	95 9f       	mul	r25, r21
 958:	c1 f3       	breq	.-16     	; 0x94a <__mulsf3+0x20>
 95a:	95 0f       	add	r25, r21
 95c:	50 e0       	ldi	r21, 0x00	; 0
 95e:	55 1f       	adc	r21, r21
 960:	62 9f       	mul	r22, r18
 962:	f0 01       	movw	r30, r0
 964:	72 9f       	mul	r23, r18
 966:	bb 27       	eor	r27, r27
 968:	f0 0d       	add	r31, r0
 96a:	b1 1d       	adc	r27, r1
 96c:	63 9f       	mul	r22, r19
 96e:	aa 27       	eor	r26, r26
 970:	f0 0d       	add	r31, r0
 972:	b1 1d       	adc	r27, r1
 974:	aa 1f       	adc	r26, r26
 976:	64 9f       	mul	r22, r20
 978:	66 27       	eor	r22, r22
 97a:	b0 0d       	add	r27, r0
 97c:	a1 1d       	adc	r26, r1
 97e:	66 1f       	adc	r22, r22
 980:	82 9f       	mul	r24, r18
 982:	22 27       	eor	r18, r18
 984:	b0 0d       	add	r27, r0
 986:	a1 1d       	adc	r26, r1
 988:	62 1f       	adc	r22, r18
 98a:	73 9f       	mul	r23, r19
 98c:	b0 0d       	add	r27, r0
 98e:	a1 1d       	adc	r26, r1
 990:	62 1f       	adc	r22, r18
 992:	83 9f       	mul	r24, r19
 994:	a0 0d       	add	r26, r0
 996:	61 1d       	adc	r22, r1
 998:	22 1f       	adc	r18, r18
 99a:	74 9f       	mul	r23, r20
 99c:	33 27       	eor	r19, r19
 99e:	a0 0d       	add	r26, r0
 9a0:	61 1d       	adc	r22, r1
 9a2:	23 1f       	adc	r18, r19
 9a4:	84 9f       	mul	r24, r20
 9a6:	60 0d       	add	r22, r0
 9a8:	21 1d       	adc	r18, r1
 9aa:	82 2f       	mov	r24, r18
 9ac:	76 2f       	mov	r23, r22
 9ae:	6a 2f       	mov	r22, r26
 9b0:	11 24       	eor	r1, r1
 9b2:	9f 57       	subi	r25, 0x7F	; 127
 9b4:	50 40       	sbci	r21, 0x00	; 0
 9b6:	9a f0       	brmi	.+38     	; 0x9de <__mulsf3_pse+0x88>
 9b8:	f1 f0       	breq	.+60     	; 0x9f6 <__mulsf3_pse+0xa0>
 9ba:	88 23       	and	r24, r24
 9bc:	4a f0       	brmi	.+18     	; 0x9d0 <__mulsf3_pse+0x7a>
 9be:	ee 0f       	add	r30, r30
 9c0:	ff 1f       	adc	r31, r31
 9c2:	bb 1f       	adc	r27, r27
 9c4:	66 1f       	adc	r22, r22
 9c6:	77 1f       	adc	r23, r23
 9c8:	88 1f       	adc	r24, r24
 9ca:	91 50       	subi	r25, 0x01	; 1
 9cc:	50 40       	sbci	r21, 0x00	; 0
 9ce:	a9 f7       	brne	.-22     	; 0x9ba <__mulsf3_pse+0x64>
 9d0:	9e 3f       	cpi	r25, 0xFE	; 254
 9d2:	51 05       	cpc	r21, r1
 9d4:	80 f0       	brcs	.+32     	; 0x9f6 <__mulsf3_pse+0xa0>
 9d6:	0c 94 3f 04 	jmp	0x87e	; 0x87e <__fp_inf>
 9da:	0c 94 8a 04 	jmp	0x914	; 0x914 <__fp_szero>
 9de:	5f 3f       	cpi	r21, 0xFF	; 255
 9e0:	e4 f3       	brlt	.-8      	; 0x9da <__mulsf3_pse+0x84>
 9e2:	98 3e       	cpi	r25, 0xE8	; 232
 9e4:	d4 f3       	brlt	.-12     	; 0x9da <__mulsf3_pse+0x84>
 9e6:	86 95       	lsr	r24
 9e8:	77 95       	ror	r23
 9ea:	67 95       	ror	r22
 9ec:	b7 95       	ror	r27
 9ee:	f7 95       	ror	r31
 9f0:	e7 95       	ror	r30
 9f2:	9f 5f       	subi	r25, 0xFF	; 255
 9f4:	c1 f7       	brne	.-16     	; 0x9e6 <__mulsf3_pse+0x90>
 9f6:	fe 2b       	or	r31, r30
 9f8:	88 0f       	add	r24, r24
 9fa:	91 1d       	adc	r25, r1
 9fc:	96 95       	lsr	r25
 9fe:	87 95       	ror	r24
 a00:	97 f9       	bld	r25, 7
 a02:	08 95       	ret

00000a04 <sin>:
 a04:	9f 93       	push	r25
 a06:	0e 94 30 05 	call	0xa60	; 0xa60 <__fp_rempio2>
 a0a:	0f 90       	pop	r0
 a0c:	07 fc       	sbrc	r0, 7
 a0e:	ee 5f       	subi	r30, 0xFE	; 254
 a10:	0c 94 59 05 	jmp	0xab2	; 0xab2 <__fp_sinus>

00000a14 <__fp_cmp>:
 a14:	99 0f       	add	r25, r25
 a16:	00 08       	sbc	r0, r0
 a18:	55 0f       	add	r21, r21
 a1a:	aa 0b       	sbc	r26, r26
 a1c:	e0 e8       	ldi	r30, 0x80	; 128
 a1e:	fe ef       	ldi	r31, 0xFE	; 254
 a20:	16 16       	cp	r1, r22
 a22:	17 06       	cpc	r1, r23
 a24:	e8 07       	cpc	r30, r24
 a26:	f9 07       	cpc	r31, r25
 a28:	c0 f0       	brcs	.+48     	; 0xa5a <__fp_cmp+0x46>
 a2a:	12 16       	cp	r1, r18
 a2c:	13 06       	cpc	r1, r19
 a2e:	e4 07       	cpc	r30, r20
 a30:	f5 07       	cpc	r31, r21
 a32:	98 f0       	brcs	.+38     	; 0xa5a <__fp_cmp+0x46>
 a34:	62 1b       	sub	r22, r18
 a36:	73 0b       	sbc	r23, r19
 a38:	84 0b       	sbc	r24, r20
 a3a:	95 0b       	sbc	r25, r21
 a3c:	39 f4       	brne	.+14     	; 0xa4c <__fp_cmp+0x38>
 a3e:	0a 26       	eor	r0, r26
 a40:	61 f0       	breq	.+24     	; 0xa5a <__fp_cmp+0x46>
 a42:	23 2b       	or	r18, r19
 a44:	24 2b       	or	r18, r20
 a46:	25 2b       	or	r18, r21
 a48:	21 f4       	brne	.+8      	; 0xa52 <__fp_cmp+0x3e>
 a4a:	08 95       	ret
 a4c:	0a 26       	eor	r0, r26
 a4e:	09 f4       	brne	.+2      	; 0xa52 <__fp_cmp+0x3e>
 a50:	a1 40       	sbci	r26, 0x01	; 1
 a52:	a6 95       	lsr	r26
 a54:	8f ef       	ldi	r24, 0xFF	; 255
 a56:	81 1d       	adc	r24, r1
 a58:	81 1d       	adc	r24, r1
 a5a:	08 95       	ret
 a5c:	0c 94 45 04 	jmp	0x88a	; 0x88a <__fp_nan>

00000a60 <__fp_rempio2>:
 a60:	0e 94 6f 04 	call	0x8de	; 0x8de <__fp_splitA>
 a64:	d8 f3       	brcs	.-10     	; 0xa5c <__fp_cmp+0x48>
 a66:	e8 94       	clt
 a68:	e0 e0       	ldi	r30, 0x00	; 0
 a6a:	bb 27       	eor	r27, r27
 a6c:	9f 57       	subi	r25, 0x7F	; 127
 a6e:	f0 f0       	brcs	.+60     	; 0xaac <__fp_rempio2+0x4c>
 a70:	2a ed       	ldi	r18, 0xDA	; 218
 a72:	3f e0       	ldi	r19, 0x0F	; 15
 a74:	49 ec       	ldi	r20, 0xC9	; 201
 a76:	06 c0       	rjmp	.+12     	; 0xa84 <__fp_rempio2+0x24>
 a78:	ee 0f       	add	r30, r30
 a7a:	bb 0f       	add	r27, r27
 a7c:	66 1f       	adc	r22, r22
 a7e:	77 1f       	adc	r23, r23
 a80:	88 1f       	adc	r24, r24
 a82:	28 f0       	brcs	.+10     	; 0xa8e <__fp_rempio2+0x2e>
 a84:	b2 3a       	cpi	r27, 0xA2	; 162
 a86:	62 07       	cpc	r22, r18
 a88:	73 07       	cpc	r23, r19
 a8a:	84 07       	cpc	r24, r20
 a8c:	28 f0       	brcs	.+10     	; 0xa98 <__fp_rempio2+0x38>
 a8e:	b2 5a       	subi	r27, 0xA2	; 162
 a90:	62 0b       	sbc	r22, r18
 a92:	73 0b       	sbc	r23, r19
 a94:	84 0b       	sbc	r24, r20
 a96:	e3 95       	inc	r30
 a98:	9a 95       	dec	r25
 a9a:	72 f7       	brpl	.-36     	; 0xa78 <__fp_rempio2+0x18>
 a9c:	80 38       	cpi	r24, 0x80	; 128
 a9e:	30 f4       	brcc	.+12     	; 0xaac <__fp_rempio2+0x4c>
 aa0:	9a 95       	dec	r25
 aa2:	bb 0f       	add	r27, r27
 aa4:	66 1f       	adc	r22, r22
 aa6:	77 1f       	adc	r23, r23
 aa8:	88 1f       	adc	r24, r24
 aaa:	d2 f7       	brpl	.-12     	; 0xaa0 <__fp_rempio2+0x40>
 aac:	90 48       	sbci	r25, 0x80	; 128
 aae:	0c 94 6f 05 	jmp	0xade	; 0xade <__fp_mpack_finite>

00000ab2 <__fp_sinus>:
 ab2:	ef 93       	push	r30
 ab4:	e0 ff       	sbrs	r30, 0
 ab6:	07 c0       	rjmp	.+14     	; 0xac6 <__fp_sinus+0x14>
 ab8:	a2 ea       	ldi	r26, 0xA2	; 162
 aba:	2a ed       	ldi	r18, 0xDA	; 218
 abc:	3f e0       	ldi	r19, 0x0F	; 15
 abe:	49 ec       	ldi	r20, 0xC9	; 201
 ac0:	5f eb       	ldi	r21, 0xBF	; 191
 ac2:	0e 94 05 03 	call	0x60a	; 0x60a <__addsf3x>
 ac6:	0e 94 56 04 	call	0x8ac	; 0x8ac <__fp_round>
 aca:	0f 90       	pop	r0
 acc:	03 94       	inc	r0
 ace:	01 fc       	sbrc	r0, 1
 ad0:	90 58       	subi	r25, 0x80	; 128
 ad2:	e8 e6       	ldi	r30, 0x68	; 104
 ad4:	f0 e0       	ldi	r31, 0x00	; 0
 ad6:	0c 94 7b 05 	jmp	0xaf6	; 0xaf6 <__fp_powsodd>

00000ada <__fp_mpack>:
 ada:	9f 3f       	cpi	r25, 0xFF	; 255
 adc:	31 f0       	breq	.+12     	; 0xaea <__fp_mpack_finite+0xc>

00000ade <__fp_mpack_finite>:
 ade:	91 50       	subi	r25, 0x01	; 1
 ae0:	20 f4       	brcc	.+8      	; 0xaea <__fp_mpack_finite+0xc>
 ae2:	87 95       	ror	r24
 ae4:	77 95       	ror	r23
 ae6:	67 95       	ror	r22
 ae8:	b7 95       	ror	r27
 aea:	88 0f       	add	r24, r24
 aec:	91 1d       	adc	r25, r1
 aee:	96 95       	lsr	r25
 af0:	87 95       	ror	r24
 af2:	97 f9       	bld	r25, 7
 af4:	08 95       	ret

00000af6 <__fp_powsodd>:
 af6:	9f 93       	push	r25
 af8:	8f 93       	push	r24
 afa:	7f 93       	push	r23
 afc:	6f 93       	push	r22
 afe:	ff 93       	push	r31
 b00:	ef 93       	push	r30
 b02:	9b 01       	movw	r18, r22
 b04:	ac 01       	movw	r20, r24
 b06:	0e 94 95 04 	call	0x92a	; 0x92a <__mulsf3>
 b0a:	ef 91       	pop	r30
 b0c:	ff 91       	pop	r31
 b0e:	0e 94 8f 05 	call	0xb1e	; 0xb1e <__fp_powser>
 b12:	2f 91       	pop	r18
 b14:	3f 91       	pop	r19
 b16:	4f 91       	pop	r20
 b18:	5f 91       	pop	r21
 b1a:	0c 94 95 04 	jmp	0x92a	; 0x92a <__mulsf3>

00000b1e <__fp_powser>:
 b1e:	df 93       	push	r29
 b20:	cf 93       	push	r28
 b22:	1f 93       	push	r17
 b24:	0f 93       	push	r16
 b26:	ff 92       	push	r15
 b28:	ef 92       	push	r14
 b2a:	df 92       	push	r13
 b2c:	7b 01       	movw	r14, r22
 b2e:	8c 01       	movw	r16, r24
 b30:	68 94       	set
 b32:	06 c0       	rjmp	.+12     	; 0xb40 <__fp_powser+0x22>
 b34:	da 2e       	mov	r13, r26
 b36:	ef 01       	movw	r28, r30
 b38:	0e 94 a8 04 	call	0x950	; 0x950 <__mulsf3x>
 b3c:	fe 01       	movw	r30, r28
 b3e:	e8 94       	clt
 b40:	a5 91       	lpm	r26, Z+
 b42:	25 91       	lpm	r18, Z+
 b44:	35 91       	lpm	r19, Z+
 b46:	45 91       	lpm	r20, Z+
 b48:	55 91       	lpm	r21, Z+
 b4a:	a6 f3       	brts	.-24     	; 0xb34 <__fp_powser+0x16>
 b4c:	ef 01       	movw	r28, r30
 b4e:	0e 94 05 03 	call	0x60a	; 0x60a <__addsf3x>
 b52:	fe 01       	movw	r30, r28
 b54:	97 01       	movw	r18, r14
 b56:	a8 01       	movw	r20, r16
 b58:	da 94       	dec	r13
 b5a:	69 f7       	brne	.-38     	; 0xb36 <__fp_powser+0x18>
 b5c:	df 90       	pop	r13
 b5e:	ef 90       	pop	r14
 b60:	ff 90       	pop	r15
 b62:	0f 91       	pop	r16
 b64:	1f 91       	pop	r17
 b66:	cf 91       	pop	r28
 b68:	df 91       	pop	r29
 b6a:	08 95       	ret

00000b6c <__divmodhi4>:
 b6c:	97 fb       	bst	r25, 7
 b6e:	07 2e       	mov	r0, r23
 b70:	16 f4       	brtc	.+4      	; 0xb76 <__divmodhi4+0xa>
 b72:	00 94       	com	r0
 b74:	07 d0       	rcall	.+14     	; 0xb84 <__divmodhi4_neg1>
 b76:	77 fd       	sbrc	r23, 7
 b78:	09 d0       	rcall	.+18     	; 0xb8c <__divmodhi4_neg2>
 b7a:	0e 94 ca 05 	call	0xb94	; 0xb94 <__udivmodhi4>
 b7e:	07 fc       	sbrc	r0, 7
 b80:	05 d0       	rcall	.+10     	; 0xb8c <__divmodhi4_neg2>
 b82:	3e f4       	brtc	.+14     	; 0xb92 <__divmodhi4_exit>

00000b84 <__divmodhi4_neg1>:
 b84:	90 95       	com	r25
 b86:	81 95       	neg	r24
 b88:	9f 4f       	sbci	r25, 0xFF	; 255
 b8a:	08 95       	ret

00000b8c <__divmodhi4_neg2>:
 b8c:	70 95       	com	r23
 b8e:	61 95       	neg	r22
 b90:	7f 4f       	sbci	r23, 0xFF	; 255

00000b92 <__divmodhi4_exit>:
 b92:	08 95       	ret

00000b94 <__udivmodhi4>:
 b94:	aa 1b       	sub	r26, r26
 b96:	bb 1b       	sub	r27, r27
 b98:	51 e1       	ldi	r21, 0x11	; 17
 b9a:	07 c0       	rjmp	.+14     	; 0xbaa <__udivmodhi4_ep>

00000b9c <__udivmodhi4_loop>:
 b9c:	aa 1f       	adc	r26, r26
 b9e:	bb 1f       	adc	r27, r27
 ba0:	a6 17       	cp	r26, r22
 ba2:	b7 07       	cpc	r27, r23
 ba4:	10 f0       	brcs	.+4      	; 0xbaa <__udivmodhi4_ep>
 ba6:	a6 1b       	sub	r26, r22
 ba8:	b7 0b       	sbc	r27, r23

00000baa <__udivmodhi4_ep>:
 baa:	88 1f       	adc	r24, r24
 bac:	99 1f       	adc	r25, r25
 bae:	5a 95       	dec	r21
 bb0:	a9 f7       	brne	.-22     	; 0xb9c <__udivmodhi4_loop>
 bb2:	80 95       	com	r24
 bb4:	90 95       	com	r25
 bb6:	bc 01       	movw	r22, r24
 bb8:	cd 01       	movw	r24, r26
 bba:	08 95       	ret

00000bbc <_exit>:
 bbc:	f8 94       	cli

00000bbe <__stop_program>:
 bbe:	ff cf       	rjmp	.-2      	; 0xbbe <__stop_program>
